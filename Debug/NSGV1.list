
NSGV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800be70  0800be70  0001be70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3bc  0800c3bc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3bc  0800c3bc  0001c3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3c4  0800c3c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3c4  0800c3c4  0001c3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3c8  0800c3c8  0001c3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c3cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000034c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000528  20000528  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bc4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032fa  00000000  00000000  00039dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0003d0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001638  00000000  00000000  0003e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fb2  00000000  00000000  0003fe70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b5c0  00000000  00000000  00063e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d67bf  00000000  00000000  0007f3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155ba1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075d8  00000000  00000000  00155bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be54 	.word	0x0800be54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800be54 	.word	0x0800be54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);


int main(void)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b0bc      	sub	sp, #240	; 0xf0
 8000ef0:	af02      	add	r7, sp, #8
	AD7193_t volsen1,volsen2,volsen3;
	uint32_t volid1, volid2, volid3;
	uint16_t vbus=0, vshunt=0, current=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	INA219_t ina1, ina2;
	uint8_t mem=0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
	char msg[100];
	CAN_TxHeaderTypeDef TxHeader={0};
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	615a      	str	r2, [r3, #20]
	TxHeader.DLC = 5;
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.StdId = 0x6A4;
 8000f20:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8000f24:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE   = CAN_ID_STD;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t TxMailbox;
	uint16_t PIN_LED = PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED, year=0;
 8000f2e:	231e      	movs	r3, #30
 8000f30:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
	uint32_t vmon=0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	float freq[3]={0}, duty_cycle[3]={0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f56:	f001 ffcd 	bl	8002ef4 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000f5a:	f000 fb8d 	bl	8001678 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f5e:	f000 fe7d 	bl	8001c5c <MX_GPIO_Init>
	MX_CAN1_Init();
 8000f62:	f000 fd8d 	bl	8001a80 <MX_CAN1_Init>
	MX_SPI1_Init();
 8000f66:	f000 fdef 	bl	8001b48 <MX_SPI1_Init>
	MX_ADC1_Init();
 8000f6a:	f000 fd37 	bl	80019dc <MX_ADC1_Init>
	MX_I2C2_Init();
 8000f6e:	f000 fdbd 	bl	8001aec <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000f72:	f000 fe1f 	bl	8001bb4 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000f76:	f000 fe47 	bl	8001c08 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000f7a:	f000 fbed 	bl	8001758 <MX_TIM2_Init>
	MX_TIM5_Init();
 8000f7e:	f000 fc55 	bl	800182c <MX_TIM5_Init>
	MX_TIM9_Init();
 8000f82:	f000 fcbf 	bl	8001904 <MX_TIM9_Init>
	DS3231_Init(&hi2c2);
 8000f86:	4858      	ldr	r0, [pc, #352]	; (80010e8 <main+0x1fc>)
 8000f88:	f001 fd30 	bl	80029ec <DS3231_Init>
	DS3231_SetFullTime(15, 25, 30);
 8000f8c:	221e      	movs	r2, #30
 8000f8e:	2119      	movs	r1, #25
 8000f90:	200f      	movs	r0, #15
 8000f92:	f001 fefe 	bl	8002d92 <DS3231_SetFullTime>
	DS3231_SetFullDate(29, 9, 4, 2022);
 8000f96:	f240 73e6 	movw	r3, #2022	; 0x7e6
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	2109      	movs	r1, #9
 8000f9e:	201d      	movs	r0, #29
 8000fa0:	f001 ff10 	bl	8002dc4 <DS3231_SetFullDate>
	CAN_Filter_Config();
 8000fa4:	f000 fb42 	bl	800162c <CAN_Filter_Config>
	while(!INA219_Init(&ina1, &hi2c2, INA219_ADDRESS));
 8000fa8:	bf00      	nop
 8000faa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fae:	2240      	movs	r2, #64	; 0x40
 8000fb0:	494d      	ldr	r1, [pc, #308]	; (80010e8 <main+0x1fc>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fce8 	bl	8002988 <INA219_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f5      	beq.n	8000faa <main+0xbe>
	while(!INA219_Init(&ina2, &hi2c2, INA219_ADDRESS+1));
 8000fbe:	bf00      	nop
 8000fc0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fc4:	2241      	movs	r2, #65	; 0x41
 8000fc6:	4948      	ldr	r1, [pc, #288]	; (80010e8 <main+0x1fc>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 fcdd 	bl	8002988 <INA219_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f5      	beq.n	8000fc0 <main+0xd4>
	M24C32_Init(&hi2c2);
 8000fd4:	4844      	ldr	r0, [pc, #272]	; (80010e8 <main+0x1fc>)
 8000fd6:	f001 ff53 	bl	8002e80 <M24C32_Init>
	AD7193_Init(&volsen1, &hspi1, GPIOC, PINC_SPI_SSA);
 8000fda:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000fde:	2320      	movs	r3, #32
 8000fe0:	4a42      	ldr	r2, [pc, #264]	; (80010ec <main+0x200>)
 8000fe2:	4943      	ldr	r1, [pc, #268]	; (80010f0 <main+0x204>)
 8000fe4:	f001 fb11 	bl	800260a <AD7193_Init>
	AD7193_Init(&volsen2, &hspi1, GPIOC, PINC_SPI_SSB);
 8000fe8:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <main+0x200>)
 8000ff0:	493f      	ldr	r1, [pc, #252]	; (80010f0 <main+0x204>)
 8000ff2:	f001 fb0a 	bl	800260a <AD7193_Init>
	AD7193_Init(&volsen3, &hspi1, GPIOC, PINC_SPI_SSV);
 8000ff6:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	4a3b      	ldr	r2, [pc, #236]	; (80010ec <main+0x200>)
 8000ffe:	493c      	ldr	r1, [pc, #240]	; (80010f0 <main+0x204>)
 8001000:	f001 fb03 	bl	800260a <AD7193_Init>

	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8001004:	2100      	movs	r1, #0
 8001006:	483b      	ldr	r0, [pc, #236]	; (80010f4 <main+0x208>)
 8001008:	f006 fdb8 	bl	8007b7c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 800100c:	2104      	movs	r1, #4
 800100e:	4839      	ldr	r0, [pc, #228]	; (80010f4 <main+0x208>)
 8001010:	f006 fdb4 	bl	8007b7c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_1);
 8001014:	2100      	movs	r1, #0
 8001016:	4838      	ldr	r0, [pc, #224]	; (80010f8 <main+0x20c>)
 8001018:	f006 fdb0 	bl	8007b7c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_2);
 800101c:	2104      	movs	r1, #4
 800101e:	4836      	ldr	r0, [pc, #216]	; (80010f8 <main+0x20c>)
 8001020:	f006 fdac 	bl	8007b7c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim9,TIM_CHANNEL_1);
 8001024:	2100      	movs	r1, #0
 8001026:	4835      	ldr	r0, [pc, #212]	; (80010fc <main+0x210>)
 8001028:	f006 fda8 	bl	8007b7c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim9,TIM_CHANNEL_2);
 800102c:	2104      	movs	r1, #4
 800102e:	4833      	ldr	r0, [pc, #204]	; (80010fc <main+0x210>)
 8001030:	f006 fda4 	bl	8007b7c <HAL_TIM_IC_Start_IT>

	HAL_ADC_Start_IT(&hadc1);
 8001034:	4832      	ldr	r0, [pc, #200]	; (8001100 <main+0x214>)
 8001036:	f002 f837 	bl	80030a8 <HAL_ADC_Start_IT>

	uart= huart1;
 800103a:	4a32      	ldr	r2, [pc, #200]	; (8001104 <main+0x218>)
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <main+0x21c>)
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	2344      	movs	r3, #68	; 0x44
 8001044:	461a      	mov	r2, r3
 8001046:	f008 f81b 	bl	8009080 <memcpy>

//	M24C32_WriteByte(0x0001, 69);
//	HAL_Delay(1000);
	mem=M24C32_ReadRandomAddr(0x0001);
 800104a:	2001      	movs	r0, #1
 800104c:	f001 ff28 	bl	8002ea0 <M24C32_ReadRandomAddr>
 8001050:	4603      	mov	r3, r0
 8001052:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
//	}

	while (1)
	{
//		LED Toggle
		if (beat==1)
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <main+0x220>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d10f      	bne.n	800107e <main+0x192>
		{
			beat=0;
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <main+0x220>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC,PINC_HEART|PIN_LED);
 8001064:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8001068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800106c:	b29b      	uxth	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	481e      	ldr	r0, [pc, #120]	; (80010ec <main+0x200>)
 8001072:	f003 fc58 	bl	8004926 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, PINB_EN);
 8001076:	2101      	movs	r1, #1
 8001078:	4825      	ldr	r0, [pc, #148]	; (8001110 <main+0x224>)
 800107a:	f003 fc54 	bl	8004926 <HAL_GPIO_TogglePin>
		}

//		GPIO Input
		memset(msg,0,sizeof(msg));
 800107e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001082:	2264      	movs	r2, #100	; 0x64
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f008 f808 	bl	800909c <memset>
		sprintf(msg,"Switch Input: %d",HAL_GPIO_ReadPin(GPIOC, PINC_SWITCH));
 800108c:	2101      	movs	r1, #1
 800108e:	4817      	ldr	r0, [pc, #92]	; (80010ec <main+0x200>)
 8001090:	f003 fc18 	bl	80048c4 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800109c:	491d      	ldr	r1, [pc, #116]	; (8001114 <main+0x228>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f008 fd5e 	bl	8009b60 <siprintf>
		dmsg(msg);
 80010a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fa8d 	bl	80015c8 <dmsg>
		memset(msg,0,sizeof(msg));
 80010ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b2:	2264      	movs	r2, #100	; 0x64
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f007 fff0 	bl	800909c <memset>
		sprintf(msg,"State Input: %d",HAL_GPIO_ReadPin(GPIOB, PINB_STATE));
 80010bc:	2102      	movs	r1, #2
 80010be:	4814      	ldr	r0, [pc, #80]	; (8001110 <main+0x224>)
 80010c0:	f003 fc00 	bl	80048c4 <HAL_GPIO_ReadPin>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010cc:	4912      	ldr	r1, [pc, #72]	; (8001118 <main+0x22c>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 fd46 	bl	8009b60 <siprintf>
		dmsg(msg);
 80010d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fa75 	bl	80015c8 <dmsg>

//		Pulse Input
		for (int i=0; i<3; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80010e4:	e089      	b.n	80011fa <main+0x30e>
 80010e6:	bf00      	nop
 80010e8:	20000268 	.word	0x20000268
 80010ec:	40020800 	.word	0x40020800
 80010f0:	200002bc 	.word	0x200002bc
 80010f4:	2000039c 	.word	0x2000039c
 80010f8:	200003e4 	.word	0x200003e4
 80010fc:	2000042c 	.word	0x2000042c
 8001100:	200001f8 	.word	0x200001f8
 8001104:	20000498 	.word	0x20000498
 8001108:	20000314 	.word	0x20000314
 800110c:	20000493 	.word	0x20000493
 8001110:	40020400 	.word	0x40020400
 8001114:	0800be70 	.word	0x0800be70
 8001118:	0800be84 	.word	0x0800be84
		{
			if (freq_update[i]==1)
 800111c:	4ab2      	ldr	r2, [pc, #712]	; (80013e8 <main+0x4fc>)
 800111e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d135      	bne.n	8001196 <main+0x2aa>
			{
				freq[i]= 1000000/tim_capture[i][0];
 800112a:	4ab0      	ldr	r2, [pc, #704]	; (80013ec <main+0x500>)
 800112c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001130:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001134:	4aae      	ldr	r2, [pc, #696]	; (80013f0 <main+0x504>)
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	33e8      	adds	r3, #232	; 0xe8
 800114a:	443b      	add	r3, r7
 800114c:	3bdc      	subs	r3, #220	; 0xdc
 800114e:	edc3 7a00 	vstr	s15, [r3]
				duty_cycle[i]= (tim_capture[i][1]/tim_capture[i][0])*100;
 8001152:	4aa6      	ldr	r2, [pc, #664]	; (80013ec <main+0x500>)
 8001154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	49a3      	ldr	r1, [pc, #652]	; (80013ec <main+0x500>)
 8001160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001164:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001168:	fbb2 f3f3 	udiv	r3, r2, r3
 800116c:	2264      	movs	r2, #100	; 0x64
 800116e:	fb02 f303 	mul.w	r3, r2, r3
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	33e8      	adds	r3, #232	; 0xe8
 8001182:	443b      	add	r3, r7
 8001184:	3be8      	subs	r3, #232	; 0xe8
 8001186:	edc3 7a00 	vstr	s15, [r3]
				freq_update[i]=0;
 800118a:	4a97      	ldr	r2, [pc, #604]	; (80013e8 <main+0x4fc>)
 800118c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001190:	4413      	add	r3, r2
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
			}
			memset(msg,0,sizeof(msg));
 8001196:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800119a:	2264      	movs	r2, #100	; 0x64
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f007 ff7c 	bl	800909c <memset>
			sprintf(msg,"Frequency3: %.2f   Duty Cycle: %.2f", freq[i],duty_cycle[i]);
 80011a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	33e8      	adds	r3, #232	; 0xe8
 80011ac:	443b      	add	r3, r7
 80011ae:	3bdc      	subs	r3, #220	; 0xdc
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9c8 	bl	8000548 <__aeabi_f2d>
 80011b8:	4604      	mov	r4, r0
 80011ba:	460d      	mov	r5, r1
 80011bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	33e8      	adds	r3, #232	; 0xe8
 80011c4:	443b      	add	r3, r7
 80011c6:	3be8      	subs	r3, #232	; 0xe8
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9bc 	bl	8000548 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80011d8:	e9cd 2300 	strd	r2, r3, [sp]
 80011dc:	4622      	mov	r2, r4
 80011de:	462b      	mov	r3, r5
 80011e0:	4984      	ldr	r1, [pc, #528]	; (80013f4 <main+0x508>)
 80011e2:	f008 fcbd 	bl	8009b60 <siprintf>
			dmsg(msg);
 80011e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f9ec 	bl	80015c8 <dmsg>
		for (int i=0; i<3; i++)
 80011f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011f4:	3301      	adds	r3, #1
 80011f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80011fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011fe:	2b02      	cmp	r3, #2
 8001200:	dd8c      	ble.n	800111c <main+0x230>
		}

//		Voltage Monitor
		if (adc_update==1)
 8001202:	4b7d      	ldr	r3, [pc, #500]	; (80013f8 <main+0x50c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d118      	bne.n	800123c <main+0x350>
		{
			vmon=HAL_ADC_GetValue(&hadc1);
 800120a:	487c      	ldr	r0, [pc, #496]	; (80013fc <main+0x510>)
 800120c:	f002 f93a 	bl	8003484 <HAL_ADC_GetValue>
 8001210:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
			memset(msg,0,sizeof(msg));
 8001214:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001218:	2264      	movs	r2, #100	; 0x64
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f007 ff3d 	bl	800909c <memset>
			sprintf(msg,"Voltage Monitor: %ld", vmon);
 8001222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001226:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800122a:	4975      	ldr	r1, [pc, #468]	; (8001400 <main+0x514>)
 800122c:	4618      	mov	r0, r3
 800122e:	f008 fc97 	bl	8009b60 <siprintf>
			dmsg(msg);
 8001232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f9c6 	bl	80015c8 <dmsg>
		}
//		RTC
		year= DS3231_GetYear();
 800123c:	f001 fcc1 	bl	8002bc2 <DS3231_GetYear>
 8001240:	4603      	mov	r3, r0
 8001242:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
		memset(msg,0,sizeof(msg));
 8001246:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124a:	2264      	movs	r2, #100	; 0x64
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f007 ff24 	bl	800909c <memset>
		sprintf(msg,"RTC Year: %d", year);
 8001254:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8001258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800125c:	4969      	ldr	r1, [pc, #420]	; (8001404 <main+0x518>)
 800125e:	4618      	mov	r0, r3
 8001260:	f008 fc7e 	bl	8009b60 <siprintf>
		dmsg(msg);
 8001264:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f9ad 	bl	80015c8 <dmsg>
////		CAN RX
//		memset(msg,0,sizeof(msg));
//		sprintf(msg,"Message Received : #%x",can_msg[0]);
//		dmsg(msg);
//		Current Monitor
		vbus = INA219_ReadBusVoltage(&ina1);
 800126e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001272:	4618      	mov	r0, r3
 8001274:	f001 fad0 	bl	8002818 <INA219_ReadBusVoltage>
 8001278:	4603      	mov	r3, r0
 800127a:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
		vshunt = INA219_ReadShuntVolage(&ina1);
 800127e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fb04 	bl	8002890 <INA219_ReadShuntVolage>
 8001288:	4603      	mov	r3, r0
 800128a:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
		current = INA219_ReadCurrent(&ina1);
 800128e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001292:	4618      	mov	r0, r3
 8001294:	f001 fae4 	bl	8002860 <INA219_ReadCurrent>
 8001298:	4603      	mov	r3, r0
 800129a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
		memset(msg,0,sizeof(msg));
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	2264      	movs	r2, #100	; 0x64
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f007 fef8 	bl	800909c <memset>
		sprintf(msg,"Bus Voltage1: %d  Voltage1: %d  Current1: %d", vbus, vshunt, current);
 80012ac:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 80012b0:	f8b7 10e0 	ldrh.w	r1, [r7, #224]	; 0xe0
 80012b4:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80012b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	460b      	mov	r3, r1
 80012c0:	4951      	ldr	r1, [pc, #324]	; (8001408 <main+0x51c>)
 80012c2:	f008 fc4d 	bl	8009b60 <siprintf>
		dmsg(msg);
 80012c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f97c 	bl	80015c8 <dmsg>
		vbus = INA219_ReadBusVoltage(&ina2);
 80012d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 fa9f 	bl	8002818 <INA219_ReadBusVoltage>
 80012da:	4603      	mov	r3, r0
 80012dc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
		vshunt = INA219_ReadShuntVolage(&ina2);
 80012e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fad3 	bl	8002890 <INA219_ReadShuntVolage>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
		current = INA219_ReadCurrent(&ina2);
 80012f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 fab3 	bl	8002860 <INA219_ReadCurrent>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
		memset(msg,0,sizeof(msg));
 8001300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001304:	2264      	movs	r2, #100	; 0x64
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f007 fec7 	bl	800909c <memset>
		sprintf(msg,"Bus Voltage2: %d  Voltage2: %d  Current2: %d", vbus, vshunt, current);
 800130e:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8001312:	f8b7 10e0 	ldrh.w	r1, [r7, #224]	; 0xe0
 8001316:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800131a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	460b      	mov	r3, r1
 8001322:	493a      	ldr	r1, [pc, #232]	; (800140c <main+0x520>)
 8001324:	f008 fc1c 	bl	8009b60 <siprintf>
		dmsg(msg);
 8001328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f94b 	bl	80015c8 <dmsg>
//		EEPROM
		memset(msg,0,sizeof(msg));
 8001332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001336:	2264      	movs	r2, #100	; 0x64
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f007 feae 	bl	800909c <memset>
		sprintf(msg,"Memory 0x1:  %d  ", mem);
 8001340:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8001344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001348:	4931      	ldr	r1, [pc, #196]	; (8001410 <main+0x524>)
 800134a:	4618      	mov	r0, r3
 800134c:	f008 fc08 	bl	8009b60 <siprintf>
		dmsg(msg);
 8001350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f937 	bl	80015c8 <dmsg>
//		AD7193
		AD7193_Reset(&volsen1);
 800135a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800135e:	4618      	mov	r0, r3
 8001360:	f001 f969 	bl	8002636 <AD7193_Reset>
		volid1= AD7193_GetRegValue(&volsen1,1, 3);
 8001364:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001368:	2203      	movs	r2, #3
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f001 f991 	bl	8002694 <AD7193_GetRegValue>
 8001372:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
		AD7193_Reset(&volsen2);
 8001376:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800137a:	4618      	mov	r0, r3
 800137c:	f001 f95b 	bl	8002636 <AD7193_Reset>
		volid2= AD7193_GetRegValue(&volsen2,1, 3);
 8001380:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001384:	2203      	movs	r2, #3
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f001 f983 	bl	8002694 <AD7193_GetRegValue>
 800138e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
		AD7193_Reset(&volsen3);
 8001392:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001396:	4618      	mov	r0, r3
 8001398:	f001 f94d 	bl	8002636 <AD7193_Reset>
		volid3= AD7193_GetRegValue(&volsen3,1, 3);
 800139c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013a0:	2203      	movs	r2, #3
 80013a2:	2101      	movs	r1, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 f975 	bl	8002694 <AD7193_GetRegValue>
 80013aa:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
		memset(msg,0,sizeof(msg));
 80013ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b2:	2264      	movs	r2, #100	; 0x64
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 fe70 	bl	800909c <memset>
		sprintf(msg,"AD7193:  #%lx  #%lx  #%lx", volid1, volid2, volid3);
 80013bc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80013c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80013ce:	4911      	ldr	r1, [pc, #68]	; (8001414 <main+0x528>)
 80013d0:	f008 fbc6 	bl	8009b60 <siprintf>
		dmsg(msg);
 80013d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f8f5 	bl	80015c8 <dmsg>
		HAL_Delay(1000);
 80013de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e2:	f001 fdf9 	bl	8002fd8 <HAL_Delay>
		if (beat==1)
 80013e6:	e636      	b.n	8001056 <main+0x16a>
 80013e8:	20000490 	.word	0x20000490
 80013ec:	20000478 	.word	0x20000478
 80013f0:	000f4240 	.word	0x000f4240
 80013f4:	0800be94 	.word	0x0800be94
 80013f8:	20000494 	.word	0x20000494
 80013fc:	200001f8 	.word	0x200001f8
 8001400:	0800beb8 	.word	0x0800beb8
 8001404:	0800bed0 	.word	0x0800bed0
 8001408:	0800bee0 	.word	0x0800bee0
 800140c:	0800bf10 	.word	0x0800bf10
 8001410:	0800bf40 	.word	0x0800bf40
 8001414:	0800bf54 	.word	0x0800bf54

08001418 <HAL_CAN_TxMailbox0CompleteCallback>:
	}
	return 0;
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	dmsg("CAN Transmitted Mailbox 0");
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8001422:	f000 f8d1 	bl	80015c8 <dmsg>

}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	0800bf70 	.word	0x0800bf70

08001434 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	dmsg("CAN Transmitted Mailbox 1");
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 800143e:	f000 f8c3 	bl	80015c8 <dmsg>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	0800bf8c 	.word	0x0800bf8c

08001450 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	dmsg("CAN Transmitted Mailbox 2");
 8001458:	4803      	ldr	r0, [pc, #12]	; (8001468 <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 800145a:	f000 f8b5 	bl	80015c8 <dmsg>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800bfa8 	.word	0x0800bfa8

0800146c <HAL_CAN_RxFifo0MsgPendingCallback>:

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,can_msg) != HAL_OK)
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001478:	2100      	movs	r1, #0
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f002 fc28 	bl	8003cd0 <HAL_CAN_GetRxMessage>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 8001486:	f000 fc7b 	bl	8001d80 <Error_Handler>
	}
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200004f8 	.word	0x200004f8
 8001498:	200004dc 	.word	0x200004dc

0800149c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	adc_update=1;
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000494 	.word	0x20000494

080014bc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014cc:	d119      	bne.n	8001502 <HAL_TIM_IC_CaptureCallback+0x46>
	{
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7f1b      	ldrb	r3, [r3, #28]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d152      	bne.n	800157c <HAL_TIM_IC_CaptureCallback+0xc0>
		{
			tim_capture[2][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80014d6:	2100      	movs	r1, #0
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f006 fe5d 	bl	8008198 <HAL_TIM_ReadCapturedValue>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a28      	ldr	r2, [pc, #160]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014e2:	6113      	str	r3, [r2, #16]
			if (tim_capture[2][0]!= 0)
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d047      	beq.n	800157c <HAL_TIM_IC_CaptureCallback+0xc0>
			{
				tim_capture[2][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80014ec:	2104      	movs	r1, #4
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f006 fe52 	bl	8008198 <HAL_TIM_ReadCapturedValue>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a23      	ldr	r2, [pc, #140]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014f8:	6153      	str	r3, [r2, #20]
				freq_update[2]=1;
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	709a      	strb	r2, [r3, #2]
				tim_capture[0][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
				freq_update[0]=1;
			}
		}
	}
}
 8001500:	e03c      	b.n	800157c <HAL_TIM_IC_CaptureCallback+0xc0>
	else if(htim->Instance==TIM5)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a21      	ldr	r2, [pc, #132]	; (800158c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d119      	bne.n	8001540 <HAL_TIM_IC_CaptureCallback+0x84>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7f1b      	ldrb	r3, [r3, #28]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d133      	bne.n	800157c <HAL_TIM_IC_CaptureCallback+0xc0>
			tim_capture[1][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001514:	2104      	movs	r1, #4
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f006 fe3e 	bl	8008198 <HAL_TIM_ReadCapturedValue>
 800151c:	4603      	mov	r3, r0
 800151e:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001520:	6093      	str	r3, [r2, #8]
			if (tim_capture[1][0]!= 0)
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d028      	beq.n	800157c <HAL_TIM_IC_CaptureCallback+0xc0>
				tim_capture[1][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800152a:	2100      	movs	r1, #0
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f006 fe33 	bl	8008198 <HAL_TIM_ReadCapturedValue>
 8001532:	4603      	mov	r3, r0
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001536:	60d3      	str	r3, [r2, #12]
				freq_update[1]=1;
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800153a:	2201      	movs	r2, #1
 800153c:	705a      	strb	r2, [r3, #1]
}
 800153e:	e01d      	b.n	800157c <HAL_TIM_IC_CaptureCallback+0xc0>
	else if(htim->Instance==TIM9)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d118      	bne.n	800157c <HAL_TIM_IC_CaptureCallback+0xc0>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7f1b      	ldrb	r3, [r3, #28]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d114      	bne.n	800157c <HAL_TIM_IC_CaptureCallback+0xc0>
			tim_capture[0][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001552:	2100      	movs	r1, #0
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f006 fe1f 	bl	8008198 <HAL_TIM_ReadCapturedValue>
 800155a:	4603      	mov	r3, r0
 800155c:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800155e:	6013      	str	r3, [r2, #0]
			if (tim_capture[0][0]!= 0)
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d009      	beq.n	800157c <HAL_TIM_IC_CaptureCallback+0xc0>
				tim_capture[0][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001568:	2104      	movs	r1, #4
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f006 fe14 	bl	8008198 <HAL_TIM_ReadCapturedValue>
 8001570:	4603      	mov	r3, r0
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001574:	6053      	str	r3, [r2, #4]
				freq_update[0]=1;
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000478 	.word	0x20000478
 8001588:	20000490 	.word	0x20000490
 800158c:	40000c00 	.word	0x40000c00
 8001590:	40014000 	.word	0x40014000

08001594 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	if (HAL_GetTick()- tick >=1000)
 8001598:	f001 fd12 	bl	8002fc0 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_SYSTICK_Callback+0x2c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a8:	d307      	bcc.n	80015ba <HAL_SYSTICK_Callback+0x26>
	{
		tick = HAL_GetTick();
 80015aa:	f001 fd09 	bl	8002fc0 <HAL_GetTick>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <HAL_SYSTICK_Callback+0x2c>)
 80015b2:	6013      	str	r3, [r2, #0]
		beat=1;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_SYSTICK_Callback+0x30>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
	}
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000474 	.word	0x20000474
 80015c4:	20000493 	.word	0x20000493

080015c8 <dmsg>:

void dmsg(char *msg)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	char *str = malloc(strlen(msg) + 3);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7fe fdfd 	bl	80001d0 <strlen>
 80015d6:	4603      	mov	r3, r0
 80015d8:	3303      	adds	r3, #3
 80015da:	4618      	mov	r0, r3
 80015dc:	f007 fd48 	bl	8009070 <malloc>
 80015e0:	4603      	mov	r3, r0
 80015e2:	60fb      	str	r3, [r7, #12]
	strcpy(str, msg);
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f008 fada 	bl	8009ba0 <strcpy>
	strcat(str, "\r\n");
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7fe fdef 	bl	80001d0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <dmsg+0x5c>)
 80015fc:	8811      	ldrh	r1, [r2, #0]
 80015fe:	7892      	ldrb	r2, [r2, #2]
 8001600:	8019      	strh	r1, [r3, #0]
 8001602:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7fe fde3 	bl	80001d0 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	b29a      	uxth	r2, r3
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <dmsg+0x60>)
 8001616:	f007 f98c 	bl	8008932 <HAL_UART_Transmit>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	0800bfc4 	.word	0x0800bfc4
 8001628:	20000498 	.word	0x20000498

0800162c <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 8001632:	2301      	movs	r3, #1
 8001634:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank  = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0X0000;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8001652:	2301      	movs	r3, #1
 8001654:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 8001656:	463b      	mov	r3, r7
 8001658:	4619      	mov	r1, r3
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <CAN_Filter_Config+0x48>)
 800165c:	f002 fa58 	bl	8003b10 <HAL_CAN_ConfigFilter>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 8001666:	f000 fb8b 	bl	8001d80 <Error_Handler>
	}

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000240 	.word	0x20000240

08001678 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	; 0x50
 800167c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	2230      	movs	r2, #48	; 0x30
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f007 fd08 	bl	800909c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	4b2a      	ldr	r3, [pc, #168]	; (800174c <SystemClock_Config+0xd4>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a29      	ldr	r2, [pc, #164]	; (800174c <SystemClock_Config+0xd4>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <SystemClock_Config+0xd4>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <SystemClock_Config+0xd8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a23      	ldr	r2, [pc, #140]	; (8001750 <SystemClock_Config+0xd8>)
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <SystemClock_Config+0xd8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2302      	movs	r3, #2
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80016e8:	2308      	movs	r3, #8
 80016ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 320;
 80016ec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016f0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f6:	2304      	movs	r3, #4
 80016f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 fe8e 	bl	8006420 <HAL_RCC_OscConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800170a:	f000 fb39 	bl	8001d80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170e:	230f      	movs	r3, #15
 8001710:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001712:	2302      	movs	r3, #2
 8001714:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800171a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800171e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	2105      	movs	r1, #5
 800172c:	4618      	mov	r0, r3
 800172e:	f005 f8ef 	bl	8006910 <HAL_RCC_ClockConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001738:	f000 fb22 	bl	8001d80 <Error_Handler>
	}
	__HAL_RCC_HSI_DISABLE();
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SystemClock_Config+0xdc>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	3750      	adds	r7, #80	; 0x50
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000
 8001754:	42470000 	.word	0x42470000

08001758 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]

	htim2.Instance = TIM2;
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <MX_TIM2_Init+0xd0>)
 800177c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001780:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80;
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <MX_TIM2_Init+0xd0>)
 8001784:	2250      	movs	r2, #80	; 0x50
 8001786:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <MX_TIM2_Init+0xd0>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <MX_TIM2_Init+0xd0>)
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <MX_TIM2_Init+0xd0>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <MX_TIM2_Init+0xd0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017a2:	4821      	ldr	r0, [pc, #132]	; (8001828 <MX_TIM2_Init+0xd0>)
 80017a4:	f006 f99a 	bl	8007adc <HAL_TIM_IC_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 80017ae:	f000 fae7 	bl	8001d80 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80017b2:	2304      	movs	r3, #4
 80017b4:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80017b6:	2350      	movs	r3, #80	; 0x50
 80017b8:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4816      	ldr	r0, [pc, #88]	; (8001828 <MX_TIM2_Init+0xd0>)
 80017ce:	f006 fca1 	bl	8008114 <HAL_TIM_SlaveConfigSynchro>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 80017d8:	f000 fad2 	bl	8001d80 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017e0:	2301      	movs	r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	4619      	mov	r1, r3
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_TIM2_Init+0xd0>)
 80017f4:	f006 fbf2 	bl	8007fdc <HAL_TIM_IC_ConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM2_Init+0xaa>
	{
		Error_Handler();
 80017fe:	f000 fabf 	bl	8001d80 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001802:	2302      	movs	r3, #2
 8001804:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001806:	2302      	movs	r3, #2
 8001808:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2204      	movs	r2, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_TIM2_Init+0xd0>)
 8001812:	f006 fbe3 	bl	8007fdc <HAL_TIM_IC_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0xc8>
	{
		Error_Handler();
 800181c:	f000 fab0 	bl	8001d80 <Error_Handler>
	}
}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000039c 	.word	0x2000039c

0800182c <MX_TIM5_Init>:

static void MX_TIM5_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]

	htim5.Instance = TIM5;
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <MX_TIM5_Init+0xd0>)
 8001850:	4a2b      	ldr	r2, [pc, #172]	; (8001900 <MX_TIM5_Init+0xd4>)
 8001852:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 80;
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <MX_TIM5_Init+0xd0>)
 8001856:	2250      	movs	r2, #80	; 0x50
 8001858:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <MX_TIM5_Init+0xd0>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 0xFFFFFFFF;
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <MX_TIM5_Init+0xd0>)
 8001862:	f04f 32ff 	mov.w	r2, #4294967295
 8001866:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <MX_TIM5_Init+0xd0>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <MX_TIM5_Init+0xd0>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001874:	4821      	ldr	r0, [pc, #132]	; (80018fc <MX_TIM5_Init+0xd0>)
 8001876:	f006 f931 	bl	8007adc <HAL_TIM_IC_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM5_Init+0x58>
	{
		Error_Handler();
 8001880:	f000 fa7e 	bl	8001d80 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001884:	2304      	movs	r3, #4
 8001886:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001888:	2360      	movs	r3, #96	; 0x60
 800188a:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <MX_TIM5_Init+0xd0>)
 80018a0:	f006 fc38 	bl	8008114 <HAL_TIM_SlaveConfigSynchro>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM5_Init+0x82>
	{
		Error_Handler();
 80018aa:	f000 fa69 	bl	8001d80 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80018ae:	2302      	movs	r3, #2
 80018b0:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80018b2:	2302      	movs	r3, #2
 80018b4:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	480d      	ldr	r0, [pc, #52]	; (80018fc <MX_TIM5_Init+0xd0>)
 80018c6:	f006 fb89 	bl	8007fdc <HAL_TIM_IC_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM5_Init+0xa8>
	{
		Error_Handler();
 80018d0:	f000 fa56 	bl	8001d80 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018d8:	2301      	movs	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2204      	movs	r2, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <MX_TIM5_Init+0xd0>)
 80018e4:	f006 fb7a 	bl	8007fdc <HAL_TIM_IC_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM5_Init+0xc6>
	{
		Error_Handler();
 80018ee:	f000 fa47 	bl	8001d80 <Error_Handler>
	}
}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200003e4 	.word	0x200003e4
 8001900:	40000c00 	.word	0x40000c00

08001904 <MX_TIM9_Init>:

static void MX_TIM9_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]

	htim9.Instance = TIM9;
 8001926:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <MX_TIM9_Init+0xd0>)
 8001928:	4a2b      	ldr	r2, [pc, #172]	; (80019d8 <MX_TIM9_Init+0xd4>)
 800192a:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 160;
 800192c:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <MX_TIM9_Init+0xd0>)
 800192e:	22a0      	movs	r2, #160	; 0xa0
 8001930:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001932:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <MX_TIM9_Init+0xd0>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 0xFFFF;
 8001938:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <MX_TIM9_Init+0xd0>)
 800193a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193e:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <MX_TIM9_Init+0xd0>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <MX_TIM9_Init+0xd0>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800194c:	4821      	ldr	r0, [pc, #132]	; (80019d4 <MX_TIM9_Init+0xd0>)
 800194e:	f006 f8c5 	bl	8007adc <HAL_TIM_IC_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM9_Init+0x58>
	{
		Error_Handler();
 8001958:	f000 fa12 	bl	8001d80 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800195c:	2304      	movs	r3, #4
 800195e:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001960:	2350      	movs	r3, #80	; 0x50
 8001962:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	4817      	ldr	r0, [pc, #92]	; (80019d4 <MX_TIM9_Init+0xd0>)
 8001978:	f006 fbcc 	bl	8008114 <HAL_TIM_SlaveConfigSynchro>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM9_Init+0x82>
	{
		Error_Handler();
 8001982:	f000 f9fd 	bl	8001d80 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800198a:	2301      	movs	r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_TIM9_Init+0xd0>)
 800199e:	f006 fb1d 	bl	8007fdc <HAL_TIM_IC_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM9_Init+0xa8>
	{
		Error_Handler();
 80019a8:	f000 f9ea 	bl	8001d80 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80019ac:	2302      	movs	r3, #2
 80019ae:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019b0:	2302      	movs	r3, #2
 80019b2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2204      	movs	r2, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <MX_TIM9_Init+0xd0>)
 80019bc:	f006 fb0e 	bl	8007fdc <HAL_TIM_IC_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM9_Init+0xc6>
	{
		Error_Handler();
 80019c6:	f000 f9db 	bl	8001d80 <Error_Handler>
	}
}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	; 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000042c 	.word	0x2000042c
 80019d8:	40014000 	.word	0x40014000

080019dc <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80019e2:	463b      	mov	r3, r7
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
	hadc1.Instance = ADC1;
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <MX_ADC1_Init+0x98>)
 80019f0:	4a21      	ldr	r2, [pc, #132]	; (8001a78 <MX_ADC1_Init+0x9c>)
 80019f2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <MX_ADC1_Init+0x98>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MX_ADC1_Init+0x98>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a1c:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <MX_ADC1_Init+0xa0>)
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a3a:	480e      	ldr	r0, [pc, #56]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a3c:	f001 faf0 	bl	8003020 <HAL_ADC_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8001a46:	f000 f99b 	bl	8001d80 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_3;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a56:	463b      	mov	r3, r7
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <MX_ADC1_Init+0x98>)
 8001a5c:	f001 fd34 	bl	80034c8 <HAL_ADC_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8001a66:	f000 f98b 	bl	8001d80 <Error_Handler>
	}
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200001f8 	.word	0x200001f8
 8001a78:	40012000 	.word	0x40012000
 8001a7c:	0f000001 	.word	0x0f000001

08001a80 <MX_CAN1_Init>:

static void MX_CAN1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001a86:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <MX_CAN1_Init+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 10;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001a8c:	220a      	movs	r2, #10
 8001a8e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001a9e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001aa2:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001aa6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001aaa:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <MX_CAN1_Init+0x64>)
 8001ad2:	f001 ff21 	bl	8003918 <HAL_CAN_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001adc:	f000 f950 	bl	8001d80 <Error_Handler>
	}
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000240 	.word	0x20000240
 8001ae8:	40006400 	.word	0x40006400

08001aec <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <MX_I2C2_Init+0x50>)
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <MX_I2C2_Init+0x54>)
 8001af4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_I2C2_Init+0x50>)
 8001af8:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_I2C2_Init+0x58>)
 8001afa:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_I2C2_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_I2C2_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_I2C2_Init+0x50>)
 8001b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b0e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <MX_I2C2_Init+0x50>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_I2C2_Init+0x50>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <MX_I2C2_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_I2C2_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <MX_I2C2_Init+0x50>)
 8001b2a:	f002 ff17 	bl	800495c <HAL_I2C_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001b34:	f000 f924 	bl	8001d80 <Error_Handler>
	}

}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000268 	.word	0x20000268
 8001b40:	40005800 	.word	0x40005800
 8001b44:	000186a0 	.word	0x000186a0

08001b48 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <MX_SPI1_Init+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b58:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b68:	2202      	movs	r2, #2
 8001b6a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b78:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b7c:	2228      	movs	r2, #40	; 0x28
 8001b7e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b94:	220a      	movs	r2, #10
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b9a:	f005 f8d9 	bl	8006d50 <HAL_SPI_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001ba4:	f000 f8ec 	bl	8001d80 <Error_Handler>
	}

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200002bc 	.word	0x200002bc
 8001bb0:	40013000 	.word	0x40013000

08001bb4 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <MX_USART1_UART_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bec:	f006 fe54 	bl	8008898 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001bf6:	f000 f8c3 	bl	8001d80 <Error_Handler>
	}

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000314 	.word	0x20000314
 8001c04:	40011000 	.word	0x40011000

08001c08 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <MX_USART3_UART_Init+0x50>)
 8001c10:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c40:	f006 fe2a 	bl	8008898 <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001c4a:	f000 f899 	bl	8001d80 <Error_Handler>
	}

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000358 	.word	0x20000358
 8001c58:	40004800 	.word	0x40004800

08001c5c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <MX_GPIO_Init+0x114>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a3d      	ldr	r2, [pc, #244]	; (8001d70 <MX_GPIO_Init+0x114>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <MX_GPIO_Init+0x114>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <MX_GPIO_Init+0x114>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a36      	ldr	r2, [pc, #216]	; (8001d70 <MX_GPIO_Init+0x114>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <MX_GPIO_Init+0x114>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <MX_GPIO_Init+0x114>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a2f      	ldr	r2, [pc, #188]	; (8001d70 <MX_GPIO_Init+0x114>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <MX_GPIO_Init+0x114>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOC, PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED|PINC_CAN_STB|PINC_HEART, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f242 211e 	movw	r1, #8734	; 0x221e
 8001ccc:	4829      	ldr	r0, [pc, #164]	; (8001d74 <MX_GPIO_Init+0x118>)
 8001cce:	f002 fe11 	bl	80048f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, PINC_SPI_SSA|PINC_SPI_SSB|PINC_SPI_SSV|PINC_SPI_SST, GPIO_PIN_SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001cd8:	4826      	ldr	r0, [pc, #152]	; (8001d74 <MX_GPIO_Init+0x118>)
 8001cda:	f002 fe0b 	bl	80048f4 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED|PINC_CAN_STB|
 8001cde:	f242 33fe 	movw	r3, #9214	; 0x23fe
 8001ce2:	60fb      	str	r3, [r7, #12]
					  PINC_HEART|PINC_SPI_SSA|PINC_SPI_SSB|PINC_SPI_SSV|PINC_SPI_SST;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	481f      	ldr	r0, [pc, #124]	; (8001d74 <MX_GPIO_Init+0x118>)
 8001cf8:	f002 fc48 	bl	800458c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINC_SWITCH;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4819      	ldr	r0, [pc, #100]	; (8001d74 <MX_GPIO_Init+0x118>)
 8001d10:	f002 fc3c 	bl	800458c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINA_IC_FREQ3|PINA_IC_FREQ2|PINA_IC_FREQ1;
 8001d14:	2307      	movs	r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d24:	2301      	movs	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4812      	ldr	r0, [pc, #72]	; (8001d78 <MX_GPIO_Init+0x11c>)
 8001d30:	f002 fc2c 	bl	800458c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINB_EN;
 8001d34:	2301      	movs	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MX_GPIO_Init+0x120>)
 8001d4c:	f002 fc1e 	bl	800458c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINB_STATE;
 8001d50:	2302      	movs	r3, #2
 8001d52:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	4619      	mov	r1, r3
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <MX_GPIO_Init+0x120>)
 8001d64:	f002 fc12 	bl	800458c <HAL_GPIO_Init>

}
 8001d68:	bf00      	nop
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400

08001d80 <Error_Handler>:

void Error_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
}
 8001d86:	bf00      	nop
	__disable_irq();
	while (1)
 8001d88:	e7fe      	b.n	8001d88 <Error_Handler+0x8>
	...

08001d8c <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001dca:	2005      	movs	r0, #5
 8001dcc:	f002 fb74 	bl	80044b8 <HAL_NVIC_SetPriorityGrouping>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	; 0x38
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfc:	d134      	bne.n	8001e68 <HAL_TIM_IC_MspInit+0x8c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	4b55      	ldr	r3, [pc, #340]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a54      	ldr	r2, [pc, #336]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b52      	ldr	r3, [pc, #328]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a4d      	ldr	r2, [pc, #308]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b4b      	ldr	r3, [pc, #300]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PINA_IC_FREQ3;
 8001e36:	2301      	movs	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e46:	2301      	movs	r3, #1
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4842      	ldr	r0, [pc, #264]	; (8001f5c <HAL_TIM_IC_MspInit+0x180>)
 8001e52:	f002 fb9b 	bl	800458c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2102      	movs	r1, #2
 8001e5a:	201c      	movs	r0, #28
 8001e5c:	f002 fb37 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e60:	201c      	movs	r0, #28
 8001e62:	f002 fb50 	bl	8004506 <HAL_NVIC_EnableIRQ>
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  }

}
 8001e66:	e072      	b.n	8001f4e <HAL_TIM_IC_MspInit+0x172>
  else if(htim_ic->Instance==TIM5)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3c      	ldr	r2, [pc, #240]	; (8001f60 <HAL_TIM_IC_MspInit+0x184>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d134      	bne.n	8001edc <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a37      	ldr	r2, [pc, #220]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a30      	ldr	r2, [pc, #192]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PINA_IC_FREQ2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4825      	ldr	r0, [pc, #148]	; (8001f5c <HAL_TIM_IC_MspInit+0x180>)
 8001ec6:	f002 fb61 	bl	800458c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2103      	movs	r1, #3
 8001ece:	2032      	movs	r0, #50	; 0x32
 8001ed0:	f002 fafd 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ed4:	2032      	movs	r0, #50	; 0x32
 8001ed6:	f002 fb16 	bl	8004506 <HAL_NVIC_EnableIRQ>
}
 8001eda:	e038      	b.n	8001f4e <HAL_TIM_IC_MspInit+0x172>
  else if(htim_ic->Instance==TIM9)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <HAL_TIM_IC_MspInit+0x188>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d133      	bne.n	8001f4e <HAL_TIM_IC_MspInit+0x172>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_TIM_IC_MspInit+0x17c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINA_IC_FREQ1;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	4808      	ldr	r0, [pc, #32]	; (8001f5c <HAL_TIM_IC_MspInit+0x180>)
 8001f3a:	f002 fb27 	bl	800458c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2103      	movs	r1, #3
 8001f42:	2018      	movs	r0, #24
 8001f44:	f002 fac3 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f48:	2018      	movs	r0, #24
 8001f4a:	f002 fadc 	bl	8004506 <HAL_NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3738      	adds	r7, #56	; 0x38
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40000c00 	.word	0x40000c00
 8001f64:	40014000 	.word	0x40014000

08001f68 <HAL_ADC_MspInit>:
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  }
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_ADC_MspInit+0x8c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12f      	bne.n	8001fea <HAL_ADC_MspInit+0x82>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_ADC_MspInit+0x90>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_ADC_MspInit+0x90>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_ADC_MspInit+0x90>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_ADC_MspInit+0x90>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <HAL_ADC_MspInit+0x90>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_ADC_MspInit+0x90>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = PINA_ADC_VMON;
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4809      	ldr	r0, [pc, #36]	; (8001ffc <HAL_ADC_MspInit+0x94>)
 8001fd6:	f002 fad9 	bl	800458c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2102      	movs	r1, #2
 8001fde:	2012      	movs	r0, #18
 8001fe0:	f002 fa75 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fe4:	2012      	movs	r0, #18
 8001fe6:	f002 fa8e 	bl	8004506 <HAL_NVIC_EnableIRQ>
  }

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40012000 	.word	0x40012000
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000

08002000 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <HAL_CAN_MspInit+0xc4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d14c      	bne.n	80020bc <HAL_CAN_MspInit+0xbc>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <HAL_CAN_MspInit+0xc8>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <HAL_CAN_MspInit+0xc8>)
 800202c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <HAL_CAN_MspInit+0xc8>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <HAL_CAN_MspInit+0xc8>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a20      	ldr	r2, [pc, #128]	; (80020c8 <HAL_CAN_MspInit+0xc8>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_CAN_MspInit+0xc8>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PINB_CAN_RX|PINB_CAN_TX;
 800205a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800205e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800206c:	2309      	movs	r3, #9
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	4815      	ldr	r0, [pc, #84]	; (80020cc <HAL_CAN_MspInit+0xcc>)
 8002078:	f002 fa88 	bl	800458c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2102      	movs	r1, #2
 8002080:	2013      	movs	r0, #19
 8002082:	f002 fa24 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002086:	2013      	movs	r0, #19
 8002088:	f002 fa3d 	bl	8004506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2102      	movs	r1, #2
 8002090:	2014      	movs	r0, #20
 8002092:	f002 fa1c 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002096:	2014      	movs	r0, #20
 8002098:	f002 fa35 	bl	8004506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 800209c:	2200      	movs	r2, #0
 800209e:	2102      	movs	r1, #2
 80020a0:	2015      	movs	r0, #21
 80020a2:	f002 fa14 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80020a6:	2015      	movs	r0, #21
 80020a8:	f002 fa2d 	bl	8004506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2102      	movs	r1, #2
 80020b0:	2016      	movs	r0, #22
 80020b2:	f002 fa0c 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80020b6:	2016      	movs	r0, #22
 80020b8:	f002 fa25 	bl	8004506 <HAL_NVIC_EnableIRQ>
  }

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40006400 	.word	0x40006400
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020400 	.word	0x40020400

080020d0 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_I2C_MspInit+0x84>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d12c      	bne.n	800214c <HAL_I2C_MspInit+0x7c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_I2C_MspInit+0x88>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_I2C_MspInit+0x88>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_I2C_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = PINB_I2C_SCL|PINB_12C_SDA;
 800210e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002114:	2312      	movs	r3, #18
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002120:	2304      	movs	r3, #4
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	480c      	ldr	r0, [pc, #48]	; (800215c <HAL_I2C_MspInit+0x8c>)
 800212c:	f002 fa2e 	bl	800458c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_I2C_MspInit+0x88>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_I2C_MspInit+0x88>)
 800213a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800213e:	6413      	str	r3, [r2, #64]	; 0x40
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_I2C_MspInit+0x88>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
//    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
//    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 2, 0);
//    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  }

}
 800214c:	bf00      	nop
 800214e:	3728      	adds	r7, #40	; 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40005800 	.word	0x40005800
 8002158:	40023800 	.word	0x40023800
 800215c:	40020400 	.word	0x40020400

08002160 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_SPI_MspInit+0x94>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d133      	bne.n	80021ea <HAL_SPI_MspInit+0x8a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <HAL_SPI_MspInit+0x98>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <HAL_SPI_MspInit+0x98>)
 800218c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_SPI_MspInit+0x98>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_SPI_MspInit+0x98>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_SPI_MspInit+0x98>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_SPI_MspInit+0x98>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PINA_SPI_SCK|PINA_SPI_MISO|PINA_SPI_MOSI;
 80021ba:	23e0      	movs	r3, #224	; 0xe0
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c6:	2302      	movs	r3, #2
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ca:	2305      	movs	r3, #5
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	4809      	ldr	r0, [pc, #36]	; (80021fc <HAL_SPI_MspInit+0x9c>)
 80021d6:	f002 f9d9 	bl	800458c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2102      	movs	r1, #2
 80021de:	2023      	movs	r0, #35	; 0x23
 80021e0:	f002 f975 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80021e4:	2023      	movs	r0, #35	; 0x23
 80021e6:	f002 f98e 	bl	8004506 <HAL_NVIC_EnableIRQ>
  }

}
 80021ea:	bf00      	nop
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40013000 	.word	0x40013000
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020000 	.word	0x40020000

08002200 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a32      	ldr	r2, [pc, #200]	; (80022e8 <HAL_UART_MspInit+0xe8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12c      	bne.n	800227c <HAL_UART_MspInit+0x7c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	4b31      	ldr	r3, [pc, #196]	; (80022ec <HAL_UART_MspInit+0xec>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a30      	ldr	r2, [pc, #192]	; (80022ec <HAL_UART_MspInit+0xec>)
 800222c:	f043 0310 	orr.w	r3, r3, #16
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_UART_MspInit+0xec>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_UART_MspInit+0xec>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a29      	ldr	r2, [pc, #164]	; (80022ec <HAL_UART_MspInit+0xec>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_UART_MspInit+0xec>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PINB_UART1_TX|PINB_UART1_RX;
 800225a:	23c0      	movs	r3, #192	; 0xc0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800226a:	2307      	movs	r3, #7
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	4619      	mov	r1, r3
 8002274:	481e      	ldr	r0, [pc, #120]	; (80022f0 <HAL_UART_MspInit+0xf0>)
 8002276:	f002 f989 	bl	800458c <HAL_GPIO_Init>
    /* USART3 interrupt Init */
//    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
//    HAL_NVIC_EnableIRQ(USART3_IRQn);
  }

}
 800227a:	e031      	b.n	80022e0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_UART_MspInit+0xf4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d12c      	bne.n	80022e0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <HAL_UART_MspInit+0xec>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a17      	ldr	r2, [pc, #92]	; (80022ec <HAL_UART_MspInit+0xec>)
 8002290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_UART_MspInit+0xec>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_UART_MspInit+0xec>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_UART_MspInit+0xec>)
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_UART_MspInit+0xec>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINC_UART2_RX|PINC_UART2_TX;
 80022be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022d0:	2307      	movs	r3, #7
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	4807      	ldr	r0, [pc, #28]	; (80022f8 <HAL_UART_MspInit+0xf8>)
 80022dc:	f002 f956 	bl	800458c <HAL_GPIO_Init>
}
 80022e0:	bf00      	nop
 80022e2:	3730      	adds	r7, #48	; 0x30
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40011000 	.word	0x40011000
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40004800 	.word	0x40004800
 80022f8:	40020800 	.word	0x40020800

080022fc <NMI_Handler>:
extern TIM_HandleTypeDef htim9;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;

void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0

  while (1)
 8002300:	e7fe      	b.n	8002300 <NMI_Handler+0x4>

08002302 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0

  while (1)
 8002306:	e7fe      	b.n	8002306 <HardFault_Handler+0x4>

08002308 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  while (1)
 800230c:	e7fe      	b.n	800230c <MemManage_Handler+0x4>

0800230e <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  while (1)
 8002312:	e7fe      	b.n	8002312 <BusFault_Handler+0x4>

08002314 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  while (1)
 8002318:	e7fe      	b.n	8002318 <UsageFault_Handler+0x4>

0800231a <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002348:	f000 fe26 	bl	8002f98 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800234c:	f002 f8f5 	bl	800453a <HAL_SYSTICK_IRQHandler>
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}

08002354 <TIM1_BRK_TIM9_IRQHandler>:

void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim9);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800235a:	f005 fd37 	bl	8007dcc <HAL_TIM_IRQHandler>
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	2000042c 	.word	0x2000042c

08002368 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <TIM2_IRQHandler+0x10>)
 800236e:	f005 fd2d 	bl	8007dcc <HAL_TIM_IRQHandler>
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000039c 	.word	0x2000039c

0800237c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim5);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <TIM5_IRQHandler+0x10>)
 8002382:	f005 fd23 	bl	8007dcc <HAL_TIM_IRQHandler>
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200003e4 	.word	0x200003e4

08002390 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <ADC_IRQHandler+0x10>)
 8002396:	f000 ff65 	bl	8003264 <HAL_ADC_IRQHandler>
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200001f8 	.word	0x200001f8

080023a4 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <CAN1_TX_IRQHandler+0x10>)
 80023aa:	f001 fda3 	bl	8003ef4 <HAL_CAN_IRQHandler>
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000240 	.word	0x20000240

080023b8 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <CAN1_RX0_IRQHandler+0x10>)
 80023be:	f001 fd99 	bl	8003ef4 <HAL_CAN_IRQHandler>
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000240 	.word	0x20000240

080023cc <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <CAN1_RX1_IRQHandler+0x10>)
 80023d2:	f001 fd8f 	bl	8003ef4 <HAL_CAN_IRQHandler>
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000240 	.word	0x20000240

080023e0 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <CAN1_SCE_IRQHandler+0x10>)
 80023e6:	f001 fd85 	bl	8003ef4 <HAL_CAN_IRQHandler>
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000240 	.word	0x20000240

080023f4 <SPI1_IRQHandler>:
//{
//  HAL_I2C_ER_IRQHandler(&hi2c2);
//}

void SPI1_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <SPI1_IRQHandler+0x10>)
 80023fa:	f005 f921 	bl	8007640 <HAL_SPI_IRQHandler>
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200002bc 	.word	0x200002bc

08002408 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
	return 1;
 800240c:	2301      	movs	r3, #1
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <_kill>:

int _kill(int pid, int sig)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002422:	f006 fdfb 	bl	800901c <__errno>
 8002426:	4603      	mov	r3, r0
 8002428:	2216      	movs	r2, #22
 800242a:	601a      	str	r2, [r3, #0]
	return -1;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <_exit>:

void _exit (int status)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ffe7 	bl	8002418 <_kill>
	while (1) {}		/* Make sure we hang here */
 800244a:	e7fe      	b.n	800244a <_exit+0x12>

0800244c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e00a      	b.n	8002474 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800245e:	f3af 8000 	nop.w
 8002462:	4601      	mov	r1, r0
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	60ba      	str	r2, [r7, #8]
 800246a:	b2ca      	uxtb	r2, r1
 800246c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	3301      	adds	r3, #1
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	429a      	cmp	r2, r3
 800247a:	dbf0      	blt.n	800245e <_read+0x12>
	}

return len;
 800247c:	687b      	ldr	r3, [r7, #4]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	e009      	b.n	80024ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	60ba      	str	r2, [r7, #8]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3301      	adds	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	dbf1      	blt.n	8002498 <_write+0x12>
	}
	return len;
 80024b4:	687b      	ldr	r3, [r7, #4]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <_close>:

int _close(int file)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
	return -1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024e6:	605a      	str	r2, [r3, #4]
	return 0;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <_isatty>:

int _isatty(int file)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
	return 1;
 80024fe:	2301      	movs	r3, #1
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
	return 0;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <_sbrk+0x5c>)
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <_sbrk+0x60>)
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <_sbrk+0x64>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <_sbrk+0x64>)
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <_sbrk+0x68>)
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <_sbrk+0x64>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	429a      	cmp	r2, r3
 8002556:	d207      	bcs.n	8002568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002558:	f006 fd60 	bl	800901c <__errno>
 800255c:	4603      	mov	r3, r0
 800255e:	220c      	movs	r2, #12
 8002560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
 8002566:	e009      	b.n	800257c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <_sbrk+0x64>)
 8002578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20020000 	.word	0x20020000
 8002588:	00000400 	.word	0x00000400
 800258c:	20000500 	.word	0x20000500
 8002590:	20000528 	.word	0x20000528

08002594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <SystemInit+0x20>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <SystemInit+0x20>)
 80025a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025bc:	480d      	ldr	r0, [pc, #52]	; (80025f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025be:	490e      	ldr	r1, [pc, #56]	; (80025f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c0:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c4:	e002      	b.n	80025cc <LoopCopyDataInit>

080025c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ca:	3304      	adds	r3, #4

080025cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d0:	d3f9      	bcc.n	80025c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d2:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025d4:	4c0b      	ldr	r4, [pc, #44]	; (8002604 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d8:	e001      	b.n	80025de <LoopFillZerobss>

080025da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025dc:	3204      	adds	r2, #4

080025de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e0:	d3fb      	bcc.n	80025da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025e2:	f7ff ffd7 	bl	8002594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025e6:	f006 fd1f 	bl	8009028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ea:	f7fe fc7f 	bl	8000eec <main>
  bx  lr    
 80025ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025f8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80025fc:	0800c3cc 	.word	0x0800c3cc
  ldr r2, =_sbss
 8002600:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002604:	20000528 	.word	0x20000528

08002608 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002608:	e7fe      	b.n	8002608 <CAN2_RX0_IRQHandler>

0800260a <AD7193_Init>:

#include "AD7193.h"


void AD7193_Init(AD7193_t *ad7193, SPI_HandleTypeDef *spi, GPIO_TypeDef* SS_GPIO,uint16_t SS_pin) {
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	807b      	strh	r3, [r7, #2]
	ad7193->AD7193_hspi = spi;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	601a      	str	r2, [r3, #0]
	ad7193->SS_GPIO = SS_GPIO;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	605a      	str	r2, [r3, #4]
	ad7193->SS_pin = SS_pin;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	811a      	strh	r2, [r3, #8]
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <AD7193_Reset>:

void AD7193_Reset(AD7193_t *ad7193) {
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
	uint8_t bytes[5]={0};
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	2300      	movs	r3, #0
 8002644:	733b      	strb	r3, [r7, #12]
	memset(bytes,0xFF,sizeof(bytes));
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	2205      	movs	r2, #5
 800264c:	21ff      	movs	r1, #255	; 0xff
 800264e:	4618      	mov	r0, r3
 8002650:	f006 fd24 	bl	800909c <memset>
	HAL_GPIO_WritePin(ad7193->SS_GPIO, ad7193->SS_pin, GPIO_PIN_RESET);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6858      	ldr	r0, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	891b      	ldrh	r3, [r3, #8]
 800265c:	2200      	movs	r2, #0
 800265e:	4619      	mov	r1, r3
 8002660:	f002 f948 	bl	80048f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ad7193->AD7193_hspi, bytes, 5, AD7193_TIMEOUT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	f107 0108 	add.w	r1, r7, #8
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	2205      	movs	r2, #5
 8002672:	f004 fbf6 	bl	8006e62 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ad7193->SS_GPIO, ad7193->SS_pin, GPIO_PIN_SET);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6858      	ldr	r0, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	891b      	ldrh	r3, [r3, #8]
 800267e:	2201      	movs	r2, #1
 8002680:	4619      	mov	r1, r3
 8002682:	f002 f937 	bl	80048f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002686:	2001      	movs	r0, #1
 8002688:	f000 fca6 	bl	8002fd8 <HAL_Delay>
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <AD7193_GetRegValue>:
		HAL_SPI_Transmit(ad7193->AD7193_hspi,&bytes[i], 1, AD7193_TIMEOUT);
	}
	HAL_GPIO_WritePin(ad7193->SS_GPIO, ad7193->SS_pin, GPIO_PIN_SET);
}

uint32_t AD7193_GetRegValue(AD7193_t *ad7193,uint8_t regAddr, uint8_t data_length) {
 8002694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002698:	b089      	sub	sp, #36	; 0x24
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	70fb      	strb	r3, [r7, #3]
 80026a2:	4613      	mov	r3, r2
 80026a4:	70bb      	strb	r3, [r7, #2]
 80026a6:	466b      	mov	r3, sp
 80026a8:	461e      	mov	r6, r3
	uint32_t val=0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
	uint8_t buffer[data_length];
 80026ae:	78b9      	ldrb	r1, [r7, #2]
 80026b0:	460b      	mov	r3, r1
 80026b2:	3b01      	subs	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	b2cb      	uxtb	r3, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	4698      	mov	r8, r3
 80026bc:	4691      	mov	r9, r2
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d2:	b2cb      	uxtb	r3, r1
 80026d4:	2200      	movs	r2, #0
 80026d6:	461c      	mov	r4, r3
 80026d8:	4615      	mov	r5, r2
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	00eb      	lsls	r3, r5, #3
 80026e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e8:	00e2      	lsls	r2, r4, #3
 80026ea:	460b      	mov	r3, r1
 80026ec:	3307      	adds	r3, #7
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	ebad 0d03 	sub.w	sp, sp, r3
 80026f6:	466b      	mov	r3, sp
 80026f8:	3300      	adds	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
	uint8_t command= AD7193_COMM_READ | AD7193_COMM_ADDR(regAddr);
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	b25b      	sxtb	r3, r3
 8002702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002706:	b25b      	sxtb	r3, r3
 8002708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800270c:	b25b      	sxtb	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ad7193->SS_GPIO, ad7193->SS_pin, GPIO_PIN_RESET);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6858      	ldr	r0, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	891b      	ldrh	r3, [r3, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	4619      	mov	r1, r3
 800271e:	f002 f8e9 	bl	80048f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ad7193->AD7193_hspi, &command, 1, AD7193_TIMEOUT);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	f107 010f 	add.w	r1, r7, #15
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	2201      	movs	r2, #1
 8002730:	f004 fb97 	bl	8006e62 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ad7193->AD7193_hspi,buffer, data_length, AD7193_TIMEOUT);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	78bb      	ldrb	r3, [r7, #2]
 800273a:	b29a      	uxth	r2, r3
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	6939      	ldr	r1, [r7, #16]
 8002742:	f004 fcca 	bl	80070da <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ad7193->SS_GPIO, ad7193->SS_pin, GPIO_PIN_SET);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6858      	ldr	r0, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	891b      	ldrh	r3, [r3, #8]
 800274e:	2201      	movs	r2, #1
 8002750:	4619      	mov	r1, r3
 8002752:	f002 f8cf 	bl	80048f4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < data_length; i++) {
 8002756:	2300      	movs	r3, #0
 8002758:	77fb      	strb	r3, [r7, #31]
 800275a:	e00c      	b.n	8002776 <AD7193_GetRegValue+0xe2>
		val = val <<8;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	61bb      	str	r3, [r7, #24]
		val += buffer[i];
 8002762:	7ffb      	ldrb	r3, [r7, #31]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	461a      	mov	r2, r3
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4413      	add	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < data_length; i++) {
 8002770:	7ffb      	ldrb	r3, [r7, #31]
 8002772:	3301      	adds	r3, #1
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	7ffa      	ldrb	r2, [r7, #31]
 8002778:	78bb      	ldrb	r3, [r7, #2]
 800277a:	429a      	cmp	r2, r3
 800277c:	d3ee      	bcc.n	800275c <AD7193_GetRegValue+0xc8>
	}
	return val;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	46b5      	mov	sp, r6
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	; 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800278c <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af04      	add	r7, sp, #16
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	2302      	movs	r3, #2
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	f002 fe34 	bl	8005420 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 80027b8:	7b3b      	ldrb	r3, [r7, #12]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b21a      	sxth	r2, r3
 80027be:	7b7b      	ldrb	r3, [r7, #13]
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	b29b      	uxth	r3, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af04      	add	r7, sp, #16
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
 80027dc:	4613      	mov	r3, r2
 80027de:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80027e0:	883b      	ldrh	r3, [r7, #0]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80027ea:	883b      	ldrh	r3, [r7, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	2302      	movs	r3, #2
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2301      	movs	r3, #1
 800280a:	2180      	movs	r1, #128	; 0x80
 800280c:	f002 fd0e 	bl	800522c <HAL_I2C_Mem_Write>
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8002820:	2102      	movs	r1, #2
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ffb2 	bl	800278c <Read16>
 8002828:	4603      	mov	r3, r0
 800282a:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	08db      	lsrs	r3, r3, #3
 8002830:	b29b      	uxth	r3, r3
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	b29b      	uxth	r3, r3

}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8002846:	2104      	movs	r1, #4
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff9f 	bl	800278c <Read16>
 800284e:	4603      	mov	r3, r0
 8002850:	81fb      	strh	r3, [r7, #14]

	return (result );
 8002852:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ffe8 	bl	800283e <INA219_ReadCurrent_raw>
 800286e:	4603      	mov	r3, r0
 8002870:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8002872:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002876:	4a05      	ldr	r2, [pc, #20]	; (800288c <INA219_ReadCurrent+0x2c>)
 8002878:	f9b2 2000 	ldrsh.w	r2, [r2]
 800287c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002880:	b21b      	sxth	r3, r3
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000506 	.word	0x20000506

08002890 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8002898:	2101      	movs	r1, #1
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff76 	bl	800278c <Read16>
 80028a0:	4603      	mov	r3, r0
 80028a2:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 80028a4:	89fb      	ldrh	r3, [r7, #14]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fe3c 	bl	8000524 <__aeabi_i2d>
 80028ac:	a308      	add	r3, pc, #32	; (adr r3, 80028d0 <INA219_ReadShuntVolage+0x40>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd fea1 	bl	80005f8 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f973 	bl	8000ba8 <__aeabi_d2uiz>
 80028c2:	4603      	mov	r3, r0
 80028c4:	b29b      	uxth	r3, r3
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	47ae147b 	.word	0x47ae147b
 80028d4:	3f847ae1 	.word	0x3f847ae1

080028d8 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80028e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028e4:	2100      	movs	r1, #0
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ff72 	bl	80027d0 <Write16>
	HAL_Delay(1);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f000 fb73 	bl	8002fd8 <HAL_Delay>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	461a      	mov	r2, r3
 800290a:	2105      	movs	r1, #5
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff5f 	bl	80027d0 <Write16>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	461a      	mov	r2, r3
 800292a:	2100      	movs	r1, #0
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff4f 	bl	80027d0 <Write16>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8002944:	f643 139f 	movw	r3, #14751	; 0x399f
 8002948:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <INA219_setCalibration_32V_2A+0x40>)
 800294c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002950:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <INA219_setCalibration_32V_2A+0x44>)
 8002954:	220a      	movs	r2, #10
 8002956:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <INA219_setCalibration_32V_2A+0x48>)
 800295a:	2202      	movs	r2, #2
 800295c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <INA219_setCalibration_32V_2A+0x40>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ffc8 	bl	80028fa <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800296a:	89fb      	ldrh	r3, [r7, #14]
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffd3 	bl	800291a <INA219_setConfig>
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000504 	.word	0x20000504
 8002980:	20000506 	.word	0x20000506
 8002984:	20000508 	.word	0x20000508

08002988 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	79fa      	ldrb	r2, [r7, #7]
 80029a0:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <INA219_Init+0x5c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <INA219_Init+0x60>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	b299      	uxth	r1, r3
 80029b6:	2302      	movs	r3, #2
 80029b8:	2203      	movs	r2, #3
 80029ba:	68b8      	ldr	r0, [r7, #8]
 80029bc:	f002 ff56 	bl	800586c <HAL_I2C_IsDeviceReady>
 80029c0:	4603      	mov	r3, r0
 80029c2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d107      	bne.n	80029da <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff ff84 	bl	80028d8 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7ff ffb3 	bl	800293c <INA219_setCalibration_32V_2A>

		return 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <INA219_Init+0x54>
	}

	else
	{
		return 0;
 80029da:	2300      	movs	r3, #0
	}
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000506 	.word	0x20000506
 80029e8:	20000508 	.word	0x20000508

080029ec <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 80029f4:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <DS3231_Init+0x30>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f000 f8a9 	bl	8002b52 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f000 f86d 	bl	8002ae0 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002a06:	f000 f8c6 	bl	8002b96 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002a0a:	f000 f88c 	bl	8002b26 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f000 f846 	bl	8002aa0 <DS3231_SetInterruptMode>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	2000050c 	.word	0x2000050c

08002a20 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	4603      	mov	r3, r0
 8002a28:	460a      	mov	r2, r1
 8002a2a:	71fb      	strb	r3, [r7, #7]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	733b      	strb	r3, [r7, #12]
 8002a34:	79bb      	ldrb	r3, [r7, #6]
 8002a36:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <DS3231_SetRegByte+0x38>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	f107 020c 	add.w	r2, r7, #12
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2302      	movs	r3, #2
 8002a48:	21d0      	movs	r1, #208	; 0xd0
 8002a4a:	f002 f8cb 	bl	8004be4 <HAL_I2C_Master_Transmit>
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000050c 	.word	0x2000050c

08002a5c <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <DS3231_GetRegByte+0x40>)
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	1dfa      	adds	r2, r7, #7
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2301      	movs	r3, #1
 8002a74:	21d0      	movs	r1, #208	; 0xd0
 8002a76:	f002 f8b5 	bl	8004be4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <DS3231_GetRegByte+0x40>)
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	f107 020f 	add.w	r2, r7, #15
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2301      	movs	r3, #1
 8002a8a:	21d0      	movs	r1, #208	; 0xd0
 8002a8c:	f002 f9a8 	bl	8004de0 <HAL_I2C_Master_Receive>
	return val;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000050c 	.word	0x2000050c

08002aa0 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002aaa:	200e      	movs	r0, #14
 8002aac:	f7ff ffd6 	bl	8002a5c <DS3231_GetRegByte>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8002ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	b25a      	sxtb	r2, r3
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	b25b      	sxtb	r3, r3
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b25b      	sxtb	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	200e      	movs	r0, #14
 8002ad4:	f7ff ffa4 	bl	8002a20 <DS3231_SetRegByte>
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002aea:	200e      	movs	r0, #14
 8002aec:	f7ff ffb6 	bl	8002a5c <DS3231_GetRegByte>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8002af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af8:	f023 0302 	bic.w	r3, r3, #2
 8002afc:	b25a      	sxtb	r2, r3
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	b25b      	sxtb	r3, r3
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	4619      	mov	r1, r3
 8002b12:	200e      	movs	r0, #14
 8002b14:	f7ff ff84 	bl	8002a20 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7ff ffc1 	bl	8002aa0 <DS3231_SetInterruptMode>
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8002b2c:	200f      	movs	r0, #15
 8002b2e:	f7ff ff95 	bl	8002a5c <DS3231_GetRegByte>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f023 0302 	bic.w	r3, r3, #2
 8002b38:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f023 0302 	bic.w	r3, r3, #2
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	4619      	mov	r1, r3
 8002b44:	200f      	movs	r0, #15
 8002b46:	f7ff ff6b 	bl	8002a20 <DS3231_SetRegByte>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002b5c:	200e      	movs	r0, #14
 8002b5e:	f7ff ff7d 	bl	8002a5c <DS3231_GetRegByte>
 8002b62:	4603      	mov	r3, r0
 8002b64:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	b25a      	sxtb	r2, r3
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4619      	mov	r1, r3
 8002b82:	200e      	movs	r0, #14
 8002b84:	f7ff ff4c 	bl	8002a20 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f7ff ff89 	bl	8002aa0 <DS3231_SetInterruptMode>
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002b9c:	200f      	movs	r0, #15
 8002b9e:	f7ff ff5d 	bl	8002a5c <DS3231_GetRegByte>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	200f      	movs	r0, #15
 8002bb6:	f7ff ff33 	bl	8002a20 <DS3231_SetRegByte>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8002bc8:	2006      	movs	r0, #6
 8002bca:	f7ff ff47 	bl	8002a5c <DS3231_GetRegByte>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f91a 	bl	8002e0a <DS3231_DecodeBCD>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8002bda:	2005      	movs	r0, #5
 8002bdc:	f7ff ff3e 	bl	8002a5c <DS3231_GetRegByte>
 8002be0:	4603      	mov	r3, r0
 8002be2:	09db      	lsrs	r3, r3, #7
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	0092      	lsls	r2, r2, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	461a      	mov	r2, r3
 8002bf0:	0091      	lsls	r1, r2, #2
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002c00:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	88bb      	ldrh	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b29b      	uxth	r3, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f90b 	bl	8002e3c <DS3231_EncodeBCD>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4619      	mov	r1, r3
 8002c2a:	2003      	movs	r0, #3
 8002c2c:	f7ff fef8 	bl	8002a20 <DS3231_SetRegByte>
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <DS3231_SetDate>:

/**
 * @brief Set the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS3231_SetDate(uint8_t date) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DATE, DS3231_EncodeBCD(date));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f8f9 	bl	8002e3c <DS3231_EncodeBCD>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	2004      	movs	r0, #4
 8002c50:	f7ff fee6 	bl	8002a20 <DS3231_SetRegByte>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <DS3231_SetMonth>:

/**
 * @brief Set the current month.
 * @param month Month, 1 to 12.
 */
void DS3231_SetMonth(uint8_t month) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8002c66:	2005      	movs	r0, #5
 8002c68:	f7ff fef8 	bl	8002a5c <DS3231_GetRegByte>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c72:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f8e0 	bl	8002e3c <DS3231_EncodeBCD>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	4619      	mov	r1, r3
 8002c88:	2005      	movs	r0, #5
 8002c8a:	f7ff fec9 	bl	8002a20 <DS3231_SetRegByte>
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <DS3231_SetYear>:

/**
 * @brief Set the current year.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetYear(uint16_t year) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
	uint8_t century = (year / 100) % 20;
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <DS3231_SetYear+0x80>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <DS3231_SetYear+0x84>)
 8002cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb4:	0919      	lsrs	r1, r3, #4
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	73fb      	strb	r3, [r7, #15]
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 8002cc4:	2005      	movs	r0, #5
 8002cc6:	f7ff fec9 	bl	8002a5c <DS3231_GetRegByte>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd2:	b25a      	sxtb	r2, r3
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	01db      	lsls	r3, r3, #7
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_REG_MONTH, monthReg);
 8002ce0:	7bbb      	ldrb	r3, [r7, #14]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	2005      	movs	r0, #5
 8002ce6:	f7ff fe9b 	bl	8002a20 <DS3231_SetRegByte>
	DS3231_SetRegByte(DS3231_REG_YEAR, DS3231_EncodeBCD(year % 100));
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <DS3231_SetYear+0x80>)
 8002cee:	fba2 1203 	umull	r1, r2, r2, r3
 8002cf2:	0952      	lsrs	r2, r2, #5
 8002cf4:	2164      	movs	r1, #100	; 0x64
 8002cf6:	fb01 f202 	mul.w	r2, r1, r2
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f89b 	bl	8002e3c <DS3231_EncodeBCD>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	2006      	movs	r0, #6
 8002d0c:	f7ff fe88 	bl	8002a20 <DS3231_SetRegByte>
}
 8002d10:	bf00      	nop
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	51eb851f 	.word	0x51eb851f
 8002d1c:	cccccccd 	.word	0xcccccccd

08002d20 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f882 	bl	8002e3c <DS3231_EncodeBCD>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	2002      	movs	r0, #2
 8002d3e:	f7ff fe6f 	bl	8002a20 <DS3231_SetRegByte>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f870 	bl	8002e3c <DS3231_EncodeBCD>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4619      	mov	r1, r3
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7ff fe5d 	bl	8002a20 <DS3231_SetRegByte>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f85e 	bl	8002e3c <DS3231_EncodeBCD>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4619      	mov	r1, r3
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7ff fe4b 	bl	8002a20 <DS3231_SetRegByte>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	71bb      	strb	r3, [r7, #6]
 8002da0:	4613      	mov	r3, r2
 8002da2:	717b      	strb	r3, [r7, #5]
	DS3231_SetHour(hour_24mode);
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffba 	bl	8002d20 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8002dac:	79bb      	ldrb	r3, [r7, #6]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ffcb 	bl	8002d4a <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8002db4:	797b      	ldrb	r3, [r7, #5]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ffd9 	bl	8002d6e <DS3231_SetSecond>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <DS3231_SetFullDate>:
 * @param date Date, 0 to 31.
 * @param month Month, 1 to 12.
 * @param dow Days since last Sunday, 1 to 7.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetFullDate(uint8_t date, uint8_t month, uint8_t dow, uint16_t year){
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4604      	mov	r4, r0
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	71fb      	strb	r3, [r7, #7]
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71bb      	strb	r3, [r7, #6]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	717b      	strb	r3, [r7, #5]
 8002dde:	4613      	mov	r3, r2
 8002de0:	807b      	strh	r3, [r7, #2]
	DS3231_SetDate(date);
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff27 	bl	8002c38 <DS3231_SetDate>
	DS3231_SetMonth(month);
 8002dea:	79bb      	ldrb	r3, [r7, #6]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff35 	bl	8002c5c <DS3231_SetMonth>
	DS3231_SetDayOfWeek(dow);
 8002df2:	797b      	ldrb	r3, [r7, #5]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff0d 	bl	8002c14 <DS3231_SetDayOfWeek>
	DS3231_SetYear(year);
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff4b 	bl	8002c98 <DS3231_SetYear>
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd90      	pop	{r4, r7, pc}

08002e0a <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	b2db      	uxtb	r3, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002e46:	79fa      	ldrb	r2, [r7, #7]
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <DS3231_EncodeBCD+0x40>)
 8002e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4e:	08d9      	lsrs	r1, r3, #3
 8002e50:	460b      	mov	r3, r1
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	4907      	ldr	r1, [pc, #28]	; (8002e7c <DS3231_EncodeBCD+0x40>)
 8002e60:	fba1 1303 	umull	r1, r3, r1, r3
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	b2db      	uxtb	r3, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	cccccccd 	.word	0xcccccccd

08002e80 <M24C32_Init>:
#include "M24C32.h"


I2C_HandleTypeDef *_M24C32_ui2c;

void M24C32_Init(I2C_HandleTypeDef *hi2c) {
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	_M24C32_ui2c = hi2c;
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <M24C32_Init+0x1c>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000510 	.word	0x20000510

08002ea0 <M24C32_ReadRandomAddr>:
	uint8_t val;
	HAL_I2C_Master_Receive(_M24C32_ui2c, M24C32_I2C_ADDR, &val, 1, M24C32_TIMEOUT);
	return val;
}

uint8_t M24C32_ReadRandomAddr(uint16_t regAddr) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
	uint8_t val;
	uint8_t bytes[2] = { regAddr>>8, regAddr&0xFF};
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	0a1b      	lsrs	r3, r3, #8
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	733b      	strb	r3, [r7, #12]
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_M24C32_ui2c, M24C32_I2C_ADDR, bytes, 2, M24C32_TIMEOUT);
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <M24C32_ReadRandomAddr+0x50>)
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	f107 020c 	add.w	r2, r7, #12
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2302      	movs	r3, #2
 8002eca:	21ae      	movs	r1, #174	; 0xae
 8002ecc:	f001 fe8a 	bl	8004be4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_M24C32_ui2c, M24C32_I2C_ADDR, &val, 1, M24C32_TIMEOUT);
 8002ed0:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <M24C32_ReadRandomAddr+0x50>)
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	f107 020f 	add.w	r2, r7, #15
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	21ae      	movs	r1, #174	; 0xae
 8002ee2:	f001 ff7d 	bl	8004de0 <HAL_I2C_Master_Receive>
	return val;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000510 	.word	0x20000510

08002ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_Init+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <HAL_Init+0x40>)
 8002efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_Init+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <HAL_Init+0x40>)
 8002f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <HAL_Init+0x40>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f001 facb 	bl	80044b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f22:	2001      	movs	r0, #1
 8002f24:	f000 f808 	bl	8002f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f28:	f7fe ff30 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00

08002f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_InitTick+0x54>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_InitTick+0x58>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 fae3 	bl	8004522 <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00e      	b.n	8002f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d80a      	bhi.n	8002f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f001 faab 	bl	80044ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <HAL_InitTick+0x5c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	20000008 	.word	0x20000008
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000008 	.word	0x20000008
 8002fbc:	20000514 	.word	0x20000514

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000514 	.word	0x20000514

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000008 	.word	0x20000008

08003020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e033      	b.n	800309e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe ff92 	bl	8001f68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003066:	f023 0302 	bic.w	r3, r3, #2
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fb4a 	bl	800370c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
 800308e:	e001      	b.n	8003094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_Start_IT+0x1a>
 80030be:	2302      	movs	r3, #2
 80030c0:	e0bd      	b.n	800323e <HAL_ADC_Start_IT+0x196>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d018      	beq.n	800310a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030e8:	4b58      	ldr	r3, [pc, #352]	; (800324c <HAL_ADC_Start_IT+0x1a4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_ADC_Start_IT+0x1a8>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0c9a      	lsrs	r2, r3, #18
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030fc:	e002      	b.n	8003104 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3b01      	subs	r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f9      	bne.n	80030fe <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	f040 8085 	bne.w	8003224 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003144:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003158:	d106      	bne.n	8003168 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f023 0206 	bic.w	r2, r3, #6
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
 8003166:	e002      	b.n	800316e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_ADC_Start_IT+0x1ac>)
 8003178:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003182:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003192:	f043 0320 	orr.w	r3, r3, #32
 8003196:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d12a      	bne.n	80031fa <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a2b      	ldr	r2, [pc, #172]	; (8003258 <HAL_ADC_Start_IT+0x1b0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d015      	beq.n	80031da <HAL_ADC_Start_IT+0x132>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2a      	ldr	r2, [pc, #168]	; (800325c <HAL_ADC_Start_IT+0x1b4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d105      	bne.n	80031c4 <HAL_ADC_Start_IT+0x11c>
 80031b8:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_ADC_Start_IT+0x1ac>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a25      	ldr	r2, [pc, #148]	; (8003260 <HAL_ADC_Start_IT+0x1b8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d136      	bne.n	800323c <HAL_ADC_Start_IT+0x194>
 80031ce:	4b21      	ldr	r3, [pc, #132]	; (8003254 <HAL_ADC_Start_IT+0x1ac>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d130      	bne.n	800323c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d129      	bne.n	800323c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	e020      	b.n	800323c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a16      	ldr	r2, [pc, #88]	; (8003258 <HAL_ADC_Start_IT+0x1b0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d11b      	bne.n	800323c <HAL_ADC_Start_IT+0x194>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d114      	bne.n	800323c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	e00b      	b.n	800323c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f043 0210 	orr.w	r2, r3, #16
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000000 	.word	0x20000000
 8003250:	431bde83 	.word	0x431bde83
 8003254:	40012300 	.word	0x40012300
 8003258:	40012000 	.word	0x40012000
 800325c:	40012100 	.word	0x40012100
 8003260:	40012200 	.word	0x40012200

08003264 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d049      	beq.n	800332e <HAL_ADC_IRQHandler+0xca>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d046      	beq.n	800332e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d12b      	bne.n	800331e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d127      	bne.n	800331e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d119      	bne.n	800331e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0220 	bic.w	r2, r2, #32
 80032f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe f8bc 	bl	800149c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0212 	mvn.w	r2, #18
 800332c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d057      	beq.n	80033f4 <HAL_ADC_IRQHandler+0x190>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d054      	beq.n	80033f4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d139      	bne.n	80033e4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003388:	2b00      	cmp	r3, #0
 800338a:	d12b      	bne.n	80033e4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003396:	2b00      	cmp	r3, #0
 8003398:	d124      	bne.n	80033e4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d11d      	bne.n	80033e4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d119      	bne.n	80033e4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fa8d 	bl	8003904 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f06f 020c 	mvn.w	r2, #12
 80033f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d017      	beq.n	800343a <HAL_ADC_IRQHandler+0x1d6>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d014      	beq.n	800343a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10d      	bne.n	800343a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f837 	bl	800349e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0201 	mvn.w	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003448:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d015      	beq.n	800347c <HAL_ADC_IRQHandler+0x218>
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d012      	beq.n	800347c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f043 0202 	orr.w	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f06f 0220 	mvn.w	r2, #32
 800346a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f820 	bl	80034b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f06f 0220 	mvn.w	r2, #32
 800347a:	601a      	str	r2, [r3, #0]
  }
}
 800347c:	bf00      	nop
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x1c>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e105      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x228>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	d925      	bls.n	8003540 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68d9      	ldr	r1, [r3, #12]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	3b1e      	subs	r3, #30
 800350a:	2207      	movs	r2, #7
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43da      	mvns	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	400a      	ands	r2, r1
 8003518:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68d9      	ldr	r1, [r3, #12]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	4618      	mov	r0, r3
 800352c:	4603      	mov	r3, r0
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4403      	add	r3, r0
 8003532:	3b1e      	subs	r3, #30
 8003534:	409a      	lsls	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	e022      	b.n	8003586 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6919      	ldr	r1, [r3, #16]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	2207      	movs	r2, #7
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	400a      	ands	r2, r1
 8003562:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6919      	ldr	r1, [r3, #16]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	4618      	mov	r0, r3
 8003576:	4603      	mov	r3, r0
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4403      	add	r3, r0
 800357c:	409a      	lsls	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b06      	cmp	r3, #6
 800358c:	d824      	bhi.n	80035d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	3b05      	subs	r3, #5
 80035a0:	221f      	movs	r2, #31
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	400a      	ands	r2, r1
 80035ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4618      	mov	r0, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	3b05      	subs	r3, #5
 80035ca:	fa00 f203 	lsl.w	r2, r0, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	635a      	str	r2, [r3, #52]	; 0x34
 80035d6:	e04c      	b.n	8003672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d824      	bhi.n	800362a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	3b23      	subs	r3, #35	; 0x23
 80035f2:	221f      	movs	r2, #31
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43da      	mvns	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	400a      	ands	r2, r1
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	4618      	mov	r0, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	3b23      	subs	r3, #35	; 0x23
 800361c:	fa00 f203 	lsl.w	r2, r0, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
 8003628:	e023      	b.n	8003672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	3b41      	subs	r3, #65	; 0x41
 800363c:	221f      	movs	r2, #31
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43da      	mvns	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	400a      	ands	r2, r1
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	4618      	mov	r0, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	3b41      	subs	r3, #65	; 0x41
 8003666:	fa00 f203 	lsl.w	r2, r0, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003672:	4b22      	ldr	r3, [pc, #136]	; (80036fc <HAL_ADC_ConfigChannel+0x234>)
 8003674:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_ADC_ConfigChannel+0x238>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d109      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x1cc>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b12      	cmp	r3, #18
 8003686:	d105      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_ADC_ConfigChannel+0x238>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d123      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x21e>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d003      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x1e6>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b11      	cmp	r3, #17
 80036ac:	d11b      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d111      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_ADC_ConfigChannel+0x23c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a10      	ldr	r2, [pc, #64]	; (8003708 <HAL_ADC_ConfigChannel+0x240>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	0c9a      	lsrs	r2, r3, #18
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036d8:	e002      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	3b01      	subs	r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f9      	bne.n	80036da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40012300 	.word	0x40012300
 8003700:	40012000 	.word	0x40012000
 8003704:	20000000 	.word	0x20000000
 8003708:	431bde83 	.word	0x431bde83

0800370c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003714:	4b79      	ldr	r3, [pc, #484]	; (80038fc <ADC_Init+0x1f0>)
 8003716:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	021a      	lsls	r2, r3, #8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6899      	ldr	r1, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	4a58      	ldr	r2, [pc, #352]	; (8003900 <ADC_Init+0x1f4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	e00f      	b.n	800380a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003808:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0202 	bic.w	r2, r2, #2
 8003818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6899      	ldr	r1, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	7e1b      	ldrb	r3, [r3, #24]
 8003824:	005a      	lsls	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003846:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003856:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	3b01      	subs	r3, #1
 8003864:	035a      	lsls	r2, r3, #13
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	e007      	b.n	8003880 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800387e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	3b01      	subs	r3, #1
 800389c:	051a      	lsls	r2, r3, #20
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6899      	ldr	r1, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038c2:	025a      	lsls	r2, r3, #9
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6899      	ldr	r1, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	029a      	lsls	r2, r3, #10
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40012300 	.word	0x40012300
 8003900:	0f000001 	.word	0x0f000001

08003904 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0ed      	b.n	8003b06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe fb62 	bl	8002000 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800394c:	f7ff fb38 	bl	8002fc0 <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003952:	e012      	b.n	800397a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003954:	f7ff fb34 	bl	8002fc0 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b0a      	cmp	r3, #10
 8003960:	d90b      	bls.n	800397a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2205      	movs	r2, #5
 8003972:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e0c5      	b.n	8003b06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0e5      	beq.n	8003954 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0202 	bic.w	r2, r2, #2
 8003996:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003998:	f7ff fb12 	bl	8002fc0 <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800399e:	e012      	b.n	80039c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039a0:	f7ff fb0e 	bl	8002fc0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b0a      	cmp	r3, #10
 80039ac:	d90b      	bls.n	80039c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2205      	movs	r2, #5
 80039be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e09f      	b.n	8003b06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e5      	bne.n	80039a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7e1b      	ldrb	r3, [r3, #24]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d108      	bne.n	80039ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e007      	b.n	80039fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7e5b      	ldrb	r3, [r3, #25]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d108      	bne.n	8003a18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e007      	b.n	8003a28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7e9b      	ldrb	r3, [r3, #26]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d108      	bne.n	8003a42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0220 	orr.w	r2, r2, #32
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e007      	b.n	8003a52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0220 	bic.w	r2, r2, #32
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	7edb      	ldrb	r3, [r3, #27]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d108      	bne.n	8003a6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0210 	bic.w	r2, r2, #16
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e007      	b.n	8003a7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0210 	orr.w	r2, r2, #16
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7f1b      	ldrb	r3, [r3, #28]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d108      	bne.n	8003a96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0208 	orr.w	r2, r2, #8
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e007      	b.n	8003aa6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0208 	bic.w	r2, r2, #8
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7f5b      	ldrb	r3, [r3, #29]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d108      	bne.n	8003ac0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0204 	orr.w	r2, r2, #4
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e007      	b.n	8003ad0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0204 	bic.w	r2, r2, #4
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	ea42 0103 	orr.w	r1, r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	1e5a      	subs	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d003      	beq.n	8003b36 <HAL_CAN_ConfigFilter+0x26>
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	f040 80be 	bne.w	8003cb2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003b36:	4b65      	ldr	r3, [pc, #404]	; (8003ccc <HAL_CAN_ConfigFilter+0x1bc>)
 8003b38:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b40:	f043 0201 	orr.w	r2, r3, #1
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	431a      	orrs	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	2201      	movs	r2, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	401a      	ands	r2, r3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d123      	bne.n	8003be0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3248      	adds	r2, #72	; 0x48
 8003bc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bd6:	6979      	ldr	r1, [r7, #20]
 8003bd8:	3348      	adds	r3, #72	; 0x48
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	440b      	add	r3, r1
 8003bde:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d122      	bne.n	8003c2e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	3248      	adds	r2, #72	; 0x48
 8003c0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c24:	6979      	ldr	r1, [r7, #20]
 8003c26:	3348      	adds	r3, #72	; 0x48
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	440b      	add	r3, r1
 8003c2c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	401a      	ands	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003c48:	e007      	b.n	8003c5a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003c74:	e007      	b.n	8003c86 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ca4:	f023 0201 	bic.w	r2, r3, #1
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e006      	b.n	8003cc0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40006400 	.word	0x40006400

08003cd0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d003      	beq.n	8003cf4 <HAL_CAN_GetRxMessage+0x24>
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	f040 80f3 	bne.w	8003eda <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10e      	bne.n	8003d18 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d116      	bne.n	8003d36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0e7      	b.n	8003ee8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0d8      	b.n	8003ee8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	331b      	adds	r3, #27
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	4413      	add	r3, r2
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0204 	and.w	r2, r3, #4
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10c      	bne.n	8003d6e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	331b      	adds	r3, #27
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	4413      	add	r3, r2
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	0d5b      	lsrs	r3, r3, #21
 8003d64:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e00b      	b.n	8003d86 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	331b      	adds	r3, #27
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	4413      	add	r3, r2
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	331b      	adds	r3, #27
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	4413      	add	r3, r2
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0202 	and.w	r2, r3, #2
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	331b      	adds	r3, #27
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	4413      	add	r3, r2
 8003da8:	3304      	adds	r3, #4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 020f 	and.w	r2, r3, #15
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	331b      	adds	r3, #27
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	0a1b      	lsrs	r3, r3, #8
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	331b      	adds	r3, #27
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3304      	adds	r3, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0a1a      	lsrs	r2, r3, #8
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	0c1a      	lsrs	r2, r3, #16
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	0e1a      	lsrs	r2, r3, #24
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	3303      	adds	r3, #3
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0a1a      	lsrs	r2, r3, #8
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	3305      	adds	r3, #5
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	0c1a      	lsrs	r2, r3, #16
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	3306      	adds	r3, #6
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	0e1a      	lsrs	r2, r3, #24
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	3307      	adds	r3, #7
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d108      	bne.n	8003ec6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0220 	orr.w	r2, r2, #32
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	e007      	b.n	8003ed6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0220 	orr.w	r2, r2, #32
 8003ed4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e006      	b.n	8003ee8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
  }
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d07c      	beq.n	8004034 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d023      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd fa5e 	bl	8001418 <HAL_CAN_TxMailbox0CompleteCallback>
 8003f5c:	e016      	b.n	8003f8c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f70:	e00c      	b.n	8003f8c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
 8003f84:	e002      	b.n	8003f8c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f96b 	bl	8004262 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d024      	beq.n	8003fe0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fa42 	bl	8001434 <HAL_CAN_TxMailbox1CompleteCallback>
 8003fb0:	e016      	b.n	8003fe0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d004      	beq.n	8003fc6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc4:	e00c      	b.n	8003fe0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd8:	e002      	b.n	8003fe0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f94b 	bl	8004276 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d024      	beq.n	8004034 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ff2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd fa26 	bl	8001450 <HAL_CAN_TxMailbox2CompleteCallback>
 8004004:	e016      	b.n	8004034 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	e00c      	b.n	8004034 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
 800402c:	e002      	b.n	8004034 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f92b 	bl	800428a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800404e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2210      	movs	r2, #16
 8004056:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2208      	movs	r2, #8
 8004072:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f912 	bl	800429e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd f9ea 	bl	800146c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2210      	movs	r2, #16
 80040ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00b      	beq.n	80040de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d006      	beq.n	80040de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2208      	movs	r2, #8
 80040d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f8f4 	bl	80042c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8db 	bl	80042b2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2210      	movs	r2, #16
 8004116:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f8de 	bl	80042da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d006      	beq.n	8004140 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2208      	movs	r2, #8
 8004138:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f8d7 	bl	80042ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d07b      	beq.n	8004242 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d072      	beq.n	800423a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d043      	beq.n	800423a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d03e      	beq.n	800423a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c2:	2b60      	cmp	r3, #96	; 0x60
 80041c4:	d02b      	beq.n	800421e <HAL_CAN_IRQHandler+0x32a>
 80041c6:	2b60      	cmp	r3, #96	; 0x60
 80041c8:	d82e      	bhi.n	8004228 <HAL_CAN_IRQHandler+0x334>
 80041ca:	2b50      	cmp	r3, #80	; 0x50
 80041cc:	d022      	beq.n	8004214 <HAL_CAN_IRQHandler+0x320>
 80041ce:	2b50      	cmp	r3, #80	; 0x50
 80041d0:	d82a      	bhi.n	8004228 <HAL_CAN_IRQHandler+0x334>
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d019      	beq.n	800420a <HAL_CAN_IRQHandler+0x316>
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d826      	bhi.n	8004228 <HAL_CAN_IRQHandler+0x334>
 80041da:	2b30      	cmp	r3, #48	; 0x30
 80041dc:	d010      	beq.n	8004200 <HAL_CAN_IRQHandler+0x30c>
 80041de:	2b30      	cmp	r3, #48	; 0x30
 80041e0:	d822      	bhi.n	8004228 <HAL_CAN_IRQHandler+0x334>
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d002      	beq.n	80041ec <HAL_CAN_IRQHandler+0x2f8>
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d005      	beq.n	80041f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80041ea:	e01d      	b.n	8004228 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	f043 0308 	orr.w	r3, r3, #8
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041f4:	e019      	b.n	800422a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	f043 0310 	orr.w	r3, r3, #16
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041fe:	e014      	b.n	800422a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f043 0320 	orr.w	r3, r3, #32
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004208:	e00f      	b.n	800422a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004212:	e00a      	b.n	800422a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800421c:	e005      	b.n	800422a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004226:	e000      	b.n	800422a <HAL_CAN_IRQHandler+0x336>
            break;
 8004228:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004238:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2204      	movs	r2, #4
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f854 	bl	8004302 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800425a:	bf00      	nop
 800425c:	3728      	adds	r7, #40	; 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <__NVIC_SetPriorityGrouping+0x44>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004334:	4013      	ands	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800434a:	4a04      	ldr	r2, [pc, #16]	; (800435c <__NVIC_SetPriorityGrouping+0x44>)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	60d3      	str	r3, [r2, #12]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004364:	4b04      	ldr	r3, [pc, #16]	; (8004378 <__NVIC_GetPriorityGrouping+0x18>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	0a1b      	lsrs	r3, r3, #8
 800436a:	f003 0307 	and.w	r3, r3, #7
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	2b00      	cmp	r3, #0
 800438c:	db0b      	blt.n	80043a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	4907      	ldr	r1, [pc, #28]	; (80043b4 <__NVIC_EnableIRQ+0x38>)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2001      	movs	r0, #1
 800439e:	fa00 f202 	lsl.w	r2, r0, r2
 80043a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	e000e100 	.word	0xe000e100

080043b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	db0a      	blt.n	80043e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	490c      	ldr	r1, [pc, #48]	; (8004404 <__NVIC_SetPriority+0x4c>)
 80043d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	440b      	add	r3, r1
 80043dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e0:	e00a      	b.n	80043f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	4908      	ldr	r1, [pc, #32]	; (8004408 <__NVIC_SetPriority+0x50>)
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	3b04      	subs	r3, #4
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	440b      	add	r3, r1
 80043f6:	761a      	strb	r2, [r3, #24]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	e000e100 	.word	0xe000e100
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800440c:	b480      	push	{r7}
 800440e:	b089      	sub	sp, #36	; 0x24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f1c3 0307 	rsb	r3, r3, #7
 8004426:	2b04      	cmp	r3, #4
 8004428:	bf28      	it	cs
 800442a:	2304      	movcs	r3, #4
 800442c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3304      	adds	r3, #4
 8004432:	2b06      	cmp	r3, #6
 8004434:	d902      	bls.n	800443c <NVIC_EncodePriority+0x30>
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3b03      	subs	r3, #3
 800443a:	e000      	b.n	800443e <NVIC_EncodePriority+0x32>
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004440:	f04f 32ff 	mov.w	r2, #4294967295
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43da      	mvns	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	401a      	ands	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004454:	f04f 31ff 	mov.w	r1, #4294967295
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	43d9      	mvns	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004464:	4313      	orrs	r3, r2
         );
}
 8004466:	4618      	mov	r0, r3
 8004468:	3724      	adds	r7, #36	; 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3b01      	subs	r3, #1
 8004480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004484:	d301      	bcc.n	800448a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004486:	2301      	movs	r3, #1
 8004488:	e00f      	b.n	80044aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800448a:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <SysTick_Config+0x40>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004492:	210f      	movs	r1, #15
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	f7ff ff8e 	bl	80043b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <SysTick_Config+0x40>)
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044a2:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <SysTick_Config+0x40>)
 80044a4:	2207      	movs	r2, #7
 80044a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	e000e010 	.word	0xe000e010

080044b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff ff29 	bl	8004318 <__NVIC_SetPriorityGrouping>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	4603      	mov	r3, r0
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044e0:	f7ff ff3e 	bl	8004360 <__NVIC_GetPriorityGrouping>
 80044e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f7ff ff8e 	bl	800440c <NVIC_EncodePriority>
 80044f0:	4602      	mov	r2, r0
 80044f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff5d 	bl	80043b8 <__NVIC_SetPriority>
}
 80044fe:	bf00      	nop
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff31 	bl	800437c <__NVIC_EnableIRQ>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ffa2 	bl	8004474 <SysTick_Config>
 8004530:	4603      	mov	r3, r0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800453e:	f7fd f829 	bl	8001594 <HAL_SYSTICK_Callback>
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d004      	beq.n	8004564 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2280      	movs	r2, #128	; 0x80
 800455e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e00c      	b.n	800457e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2205      	movs	r2, #5
 8004568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e16b      	b.n	8004880 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045a8:	2201      	movs	r2, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	f040 815a 	bne.w	800487a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d005      	beq.n	80045de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d130      	bne.n	8004640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	2203      	movs	r2, #3
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4313      	orrs	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004614:	2201      	movs	r2, #1
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 0201 	and.w	r2, r3, #1
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b03      	cmp	r3, #3
 800464a:	d017      	beq.n	800467c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d123      	bne.n	80046d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	08da      	lsrs	r2, r3, #3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3208      	adds	r2, #8
 8004690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	220f      	movs	r2, #15
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	08da      	lsrs	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3208      	adds	r2, #8
 80046ca:	69b9      	ldr	r1, [r7, #24]
 80046cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4013      	ands	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80b4 	beq.w	800487a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	4b60      	ldr	r3, [pc, #384]	; (8004898 <HAL_GPIO_Init+0x30c>)
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	4a5f      	ldr	r2, [pc, #380]	; (8004898 <HAL_GPIO_Init+0x30c>)
 800471c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004720:	6453      	str	r3, [r2, #68]	; 0x44
 8004722:	4b5d      	ldr	r3, [pc, #372]	; (8004898 <HAL_GPIO_Init+0x30c>)
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800472e:	4a5b      	ldr	r2, [pc, #364]	; (800489c <HAL_GPIO_Init+0x310>)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	3302      	adds	r3, #2
 8004736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	220f      	movs	r2, #15
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a52      	ldr	r2, [pc, #328]	; (80048a0 <HAL_GPIO_Init+0x314>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d02b      	beq.n	80047b2 <HAL_GPIO_Init+0x226>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a51      	ldr	r2, [pc, #324]	; (80048a4 <HAL_GPIO_Init+0x318>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d025      	beq.n	80047ae <HAL_GPIO_Init+0x222>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a50      	ldr	r2, [pc, #320]	; (80048a8 <HAL_GPIO_Init+0x31c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01f      	beq.n	80047aa <HAL_GPIO_Init+0x21e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a4f      	ldr	r2, [pc, #316]	; (80048ac <HAL_GPIO_Init+0x320>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d019      	beq.n	80047a6 <HAL_GPIO_Init+0x21a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a4e      	ldr	r2, [pc, #312]	; (80048b0 <HAL_GPIO_Init+0x324>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_GPIO_Init+0x216>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a4d      	ldr	r2, [pc, #308]	; (80048b4 <HAL_GPIO_Init+0x328>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00d      	beq.n	800479e <HAL_GPIO_Init+0x212>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a4c      	ldr	r2, [pc, #304]	; (80048b8 <HAL_GPIO_Init+0x32c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <HAL_GPIO_Init+0x20e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a4b      	ldr	r2, [pc, #300]	; (80048bc <HAL_GPIO_Init+0x330>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_GPIO_Init+0x20a>
 8004792:	2307      	movs	r3, #7
 8004794:	e00e      	b.n	80047b4 <HAL_GPIO_Init+0x228>
 8004796:	2308      	movs	r3, #8
 8004798:	e00c      	b.n	80047b4 <HAL_GPIO_Init+0x228>
 800479a:	2306      	movs	r3, #6
 800479c:	e00a      	b.n	80047b4 <HAL_GPIO_Init+0x228>
 800479e:	2305      	movs	r3, #5
 80047a0:	e008      	b.n	80047b4 <HAL_GPIO_Init+0x228>
 80047a2:	2304      	movs	r3, #4
 80047a4:	e006      	b.n	80047b4 <HAL_GPIO_Init+0x228>
 80047a6:	2303      	movs	r3, #3
 80047a8:	e004      	b.n	80047b4 <HAL_GPIO_Init+0x228>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e002      	b.n	80047b4 <HAL_GPIO_Init+0x228>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_GPIO_Init+0x228>
 80047b2:	2300      	movs	r3, #0
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	f002 0203 	and.w	r2, r2, #3
 80047ba:	0092      	lsls	r2, r2, #2
 80047bc:	4093      	lsls	r3, r2
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047c4:	4935      	ldr	r1, [pc, #212]	; (800489c <HAL_GPIO_Init+0x310>)
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	3302      	adds	r3, #2
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047d2:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_GPIO_Init+0x334>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	43db      	mvns	r3, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047f6:	4a32      	ldr	r2, [pc, #200]	; (80048c0 <HAL_GPIO_Init+0x334>)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047fc:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <HAL_GPIO_Init+0x334>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	43db      	mvns	r3, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004820:	4a27      	ldr	r2, [pc, #156]	; (80048c0 <HAL_GPIO_Init+0x334>)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004826:	4b26      	ldr	r3, [pc, #152]	; (80048c0 <HAL_GPIO_Init+0x334>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	43db      	mvns	r3, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4013      	ands	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800484a:	4a1d      	ldr	r2, [pc, #116]	; (80048c0 <HAL_GPIO_Init+0x334>)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004850:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <HAL_GPIO_Init+0x334>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004874:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <HAL_GPIO_Init+0x334>)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3301      	adds	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b0f      	cmp	r3, #15
 8004884:	f67f ae90 	bls.w	80045a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	40013800 	.word	0x40013800
 80048a0:	40020000 	.word	0x40020000
 80048a4:	40020400 	.word	0x40020400
 80048a8:	40020800 	.word	0x40020800
 80048ac:	40020c00 	.word	0x40020c00
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40021400 	.word	0x40021400
 80048b8:	40021800 	.word	0x40021800
 80048bc:	40021c00 	.word	0x40021c00
 80048c0:	40013c00 	.word	0x40013c00

080048c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	887b      	ldrh	r3, [r7, #2]
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
 80048e0:	e001      	b.n	80048e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	807b      	strh	r3, [r7, #2]
 8004900:	4613      	mov	r3, r2
 8004902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004904:	787b      	ldrb	r3, [r7, #1]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800490a:	887a      	ldrh	r2, [r7, #2]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004910:	e003      	b.n	800491a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004912:	887b      	ldrh	r3, [r7, #2]
 8004914:	041a      	lsls	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	619a      	str	r2, [r3, #24]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004938:	887a      	ldrh	r2, [r7, #2]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4013      	ands	r3, r2
 800493e:	041a      	lsls	r2, r3, #16
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	43d9      	mvns	r1, r3
 8004944:	887b      	ldrh	r3, [r7, #2]
 8004946:	400b      	ands	r3, r1
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	619a      	str	r2, [r3, #24]
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e12b      	b.n	8004bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd fba4 	bl	80020d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2224      	movs	r2, #36	; 0x24
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049c0:	f002 f99e 	bl	8006d00 <HAL_RCC_GetPCLK1Freq>
 80049c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4a81      	ldr	r2, [pc, #516]	; (8004bd0 <HAL_I2C_Init+0x274>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d807      	bhi.n	80049e0 <HAL_I2C_Init+0x84>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a80      	ldr	r2, [pc, #512]	; (8004bd4 <HAL_I2C_Init+0x278>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	bf94      	ite	ls
 80049d8:	2301      	movls	r3, #1
 80049da:	2300      	movhi	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e006      	b.n	80049ee <HAL_I2C_Init+0x92>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a7d      	ldr	r2, [pc, #500]	; (8004bd8 <HAL_I2C_Init+0x27c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	bf94      	ite	ls
 80049e8:	2301      	movls	r3, #1
 80049ea:	2300      	movhi	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e0e7      	b.n	8004bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a78      	ldr	r2, [pc, #480]	; (8004bdc <HAL_I2C_Init+0x280>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0c9b      	lsrs	r3, r3, #18
 8004a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4a6a      	ldr	r2, [pc, #424]	; (8004bd0 <HAL_I2C_Init+0x274>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d802      	bhi.n	8004a30 <HAL_I2C_Init+0xd4>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	e009      	b.n	8004a44 <HAL_I2C_Init+0xe8>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	4a69      	ldr	r2, [pc, #420]	; (8004be0 <HAL_I2C_Init+0x284>)
 8004a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	3301      	adds	r3, #1
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	495c      	ldr	r1, [pc, #368]	; (8004bd0 <HAL_I2C_Init+0x274>)
 8004a60:	428b      	cmp	r3, r1
 8004a62:	d819      	bhi.n	8004a98 <HAL_I2C_Init+0x13c>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	1e59      	subs	r1, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a78:	400b      	ands	r3, r1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_I2C_Init+0x138>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1e59      	subs	r1, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a92:	e051      	b.n	8004b38 <HAL_I2C_Init+0x1dc>
 8004a94:	2304      	movs	r3, #4
 8004a96:	e04f      	b.n	8004b38 <HAL_I2C_Init+0x1dc>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d111      	bne.n	8004ac4 <HAL_I2C_Init+0x168>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1e58      	subs	r0, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	440b      	add	r3, r1
 8004aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e012      	b.n	8004aea <HAL_I2C_Init+0x18e>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	1e58      	subs	r0, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	0099      	lsls	r1, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_I2C_Init+0x196>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e022      	b.n	8004b38 <HAL_I2C_Init+0x1dc>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10e      	bne.n	8004b18 <HAL_I2C_Init+0x1bc>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1e58      	subs	r0, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6859      	ldr	r1, [r3, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	440b      	add	r3, r1
 8004b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b16:	e00f      	b.n	8004b38 <HAL_I2C_Init+0x1dc>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1e58      	subs	r0, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	0099      	lsls	r1, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	6809      	ldr	r1, [r1, #0]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6911      	ldr	r1, [r2, #16]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68d2      	ldr	r2, [r2, #12]
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	000186a0 	.word	0x000186a0
 8004bd4:	001e847f 	.word	0x001e847f
 8004bd8:	003d08ff 	.word	0x003d08ff
 8004bdc:	431bde83 	.word	0x431bde83
 8004be0:	10624dd3 	.word	0x10624dd3

08004be4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	817b      	strh	r3, [r7, #10]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bf8:	f7fe f9e2 	bl	8002fc0 <HAL_GetTick>
 8004bfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	f040 80e0 	bne.w	8004dcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2319      	movs	r3, #25
 8004c12:	2201      	movs	r2, #1
 8004c14:	4970      	ldr	r1, [pc, #448]	; (8004dd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f001 fa24 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c22:	2302      	movs	r3, #2
 8004c24:	e0d3      	b.n	8004dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_I2C_Master_Transmit+0x50>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e0cc      	b.n	8004dce <HAL_I2C_Master_Transmit+0x1ea>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d007      	beq.n	8004c5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0201 	orr.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2221      	movs	r2, #33	; 0x21
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2210      	movs	r2, #16
 8004c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	893a      	ldrh	r2, [r7, #8]
 8004c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a50      	ldr	r2, [pc, #320]	; (8004ddc <HAL_I2C_Master_Transmit+0x1f8>)
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c9c:	8979      	ldrh	r1, [r7, #10]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6a3a      	ldr	r2, [r7, #32]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 ff10 	bl	8005ac8 <I2C_MasterRequestWrite>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e08d      	b.n	8004dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cc8:	e066      	b.n	8004d98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	6a39      	ldr	r1, [r7, #32]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f001 fa9e 	bl	8006210 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00d      	beq.n	8004cf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d107      	bne.n	8004cf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e06b      	b.n	8004dce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	781a      	ldrb	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d11b      	bne.n	8004d6c <HAL_I2C_Master_Transmit+0x188>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d017      	beq.n	8004d6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	781a      	ldrb	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	6a39      	ldr	r1, [r7, #32]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f001 fa8e 	bl	8006292 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d107      	bne.n	8004d94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e01a      	b.n	8004dce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d194      	bne.n	8004cca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e000      	b.n	8004dce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
  }
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	00100002 	.word	0x00100002
 8004ddc:	ffff0000 	.word	0xffff0000

08004de0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08c      	sub	sp, #48	; 0x30
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	461a      	mov	r2, r3
 8004dec:	460b      	mov	r3, r1
 8004dee:	817b      	strh	r3, [r7, #10]
 8004df0:	4613      	mov	r3, r2
 8004df2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004df4:	f7fe f8e4 	bl	8002fc0 <HAL_GetTick>
 8004df8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	f040 820b 	bne.w	800521e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	2319      	movs	r3, #25
 8004e0e:	2201      	movs	r2, #1
 8004e10:	497c      	ldr	r1, [pc, #496]	; (8005004 <HAL_I2C_Master_Receive+0x224>)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f001 f926 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e1fe      	b.n	8005220 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_I2C_Master_Receive+0x50>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e1f7      	b.n	8005220 <HAL_I2C_Master_Receive+0x440>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d007      	beq.n	8004e56 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0201 	orr.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2222      	movs	r2, #34	; 0x22
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2210      	movs	r2, #16
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	893a      	ldrh	r2, [r7, #8]
 8004e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4a5c      	ldr	r2, [pc, #368]	; (8005008 <HAL_I2C_Master_Receive+0x228>)
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e98:	8979      	ldrh	r1, [r7, #10]
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fe94 	bl	8005bcc <I2C_MasterRequestRead>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e1b8      	b.n	8005220 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d113      	bne.n	8004ede <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	623b      	str	r3, [r7, #32]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	623b      	str	r3, [r7, #32]
 8004eca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e18c      	b.n	80051f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d11b      	bne.n	8004f1e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e16c      	b.n	80051f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d11b      	bne.n	8004f5e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	e14c      	b.n	80051f8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f84:	e138      	b.n	80051f8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	f200 80f1 	bhi.w	8005172 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d123      	bne.n	8004fe0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f001 f9b9 	bl	8006314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e139      	b.n	8005220 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fde:	e10b      	b.n	80051f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d14e      	bne.n	8005086 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	2200      	movs	r2, #0
 8004ff0:	4906      	ldr	r1, [pc, #24]	; (800500c <HAL_I2C_Master_Receive+0x22c>)
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f001 f836 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e10e      	b.n	8005220 <HAL_I2C_Master_Receive+0x440>
 8005002:	bf00      	nop
 8005004:	00100002 	.word	0x00100002
 8005008:	ffff0000 	.word	0xffff0000
 800500c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005084:	e0b8      	b.n	80051f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	2200      	movs	r2, #0
 800508e:	4966      	ldr	r1, [pc, #408]	; (8005228 <HAL_I2C_Master_Receive+0x448>)
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 ffe7 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0bf      	b.n	8005220 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2200      	movs	r2, #0
 80050ea:	494f      	ldr	r1, [pc, #316]	; (8005228 <HAL_I2C_Master_Receive+0x448>)
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 ffb9 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e091      	b.n	8005220 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005170:	e042      	b.n	80051f8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005174:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f001 f8cc 	bl	8006314 <I2C_WaitOnRXNEFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e04c      	b.n	8005220 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d118      	bne.n	80051f8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f47f aec2 	bne.w	8004f86 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e000      	b.n	8005220 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800521e:	2302      	movs	r3, #2
  }
}
 8005220:	4618      	mov	r0, r3
 8005222:	3728      	adds	r7, #40	; 0x28
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	00010004 	.word	0x00010004

0800522c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	461a      	mov	r2, r3
 800523a:	4603      	mov	r3, r0
 800523c:	817b      	strh	r3, [r7, #10]
 800523e:	460b      	mov	r3, r1
 8005240:	813b      	strh	r3, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005246:	f7fd febb 	bl	8002fc0 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b20      	cmp	r3, #32
 8005256:	f040 80d9 	bne.w	800540c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	2319      	movs	r3, #25
 8005260:	2201      	movs	r2, #1
 8005262:	496d      	ldr	r1, [pc, #436]	; (8005418 <HAL_I2C_Mem_Write+0x1ec>)
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fefd 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005270:	2302      	movs	r3, #2
 8005272:	e0cc      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_I2C_Mem_Write+0x56>
 800527e:	2302      	movs	r3, #2
 8005280:	e0c5      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d007      	beq.n	80052a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2221      	movs	r2, #33	; 0x21
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2240      	movs	r2, #64	; 0x40
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4a4d      	ldr	r2, [pc, #308]	; (800541c <HAL_I2C_Mem_Write+0x1f0>)
 80052e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ea:	88f8      	ldrh	r0, [r7, #6]
 80052ec:	893a      	ldrh	r2, [r7, #8]
 80052ee:	8979      	ldrh	r1, [r7, #10]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	4603      	mov	r3, r0
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fd34 	bl	8005d68 <I2C_RequestMemoryWrite>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d052      	beq.n	80053ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e081      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 ff7e 	bl	8006210 <I2C_WaitOnTXEFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00d      	beq.n	8005336 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	2b04      	cmp	r3, #4
 8005320:	d107      	bne.n	8005332 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005330:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e06b      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	781a      	ldrb	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b04      	cmp	r3, #4
 8005372:	d11b      	bne.n	80053ac <HAL_I2C_Mem_Write+0x180>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	d017      	beq.n	80053ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	781a      	ldrb	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1aa      	bne.n	800530a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 ff6a 	bl	8006292 <I2C_WaitOnBTFFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d107      	bne.n	80053dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e016      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e000      	b.n	800540e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	00100002 	.word	0x00100002
 800541c:	ffff0000 	.word	0xffff0000

08005420 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	; 0x30
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	4608      	mov	r0, r1
 800542a:	4611      	mov	r1, r2
 800542c:	461a      	mov	r2, r3
 800542e:	4603      	mov	r3, r0
 8005430:	817b      	strh	r3, [r7, #10]
 8005432:	460b      	mov	r3, r1
 8005434:	813b      	strh	r3, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800543a:	f7fd fdc1 	bl	8002fc0 <HAL_GetTick>
 800543e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b20      	cmp	r3, #32
 800544a:	f040 8208 	bne.w	800585e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	2319      	movs	r3, #25
 8005454:	2201      	movs	r2, #1
 8005456:	497b      	ldr	r1, [pc, #492]	; (8005644 <HAL_I2C_Mem_Read+0x224>)
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 fe03 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
 8005466:	e1fb      	b.n	8005860 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_I2C_Mem_Read+0x56>
 8005472:	2302      	movs	r3, #2
 8005474:	e1f4      	b.n	8005860 <HAL_I2C_Mem_Read+0x440>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b01      	cmp	r3, #1
 800548a:	d007      	beq.n	800549c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2222      	movs	r2, #34	; 0x22
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2240      	movs	r2, #64	; 0x40
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80054cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a5b      	ldr	r2, [pc, #364]	; (8005648 <HAL_I2C_Mem_Read+0x228>)
 80054dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054de:	88f8      	ldrh	r0, [r7, #6]
 80054e0:	893a      	ldrh	r2, [r7, #8]
 80054e2:	8979      	ldrh	r1, [r7, #10]
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4603      	mov	r3, r0
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fcd0 	bl	8005e94 <I2C_RequestMemoryRead>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e1b0      	b.n	8005860 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d113      	bne.n	800552e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005506:	2300      	movs	r3, #0
 8005508:	623b      	str	r3, [r7, #32]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	623b      	str	r3, [r7, #32]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	623b      	str	r3, [r7, #32]
 800551a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e184      	b.n	8005838 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005532:	2b01      	cmp	r3, #1
 8005534:	d11b      	bne.n	800556e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	61fb      	str	r3, [r7, #28]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	61fb      	str	r3, [r7, #28]
 800555a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	e164      	b.n	8005838 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	2b02      	cmp	r3, #2
 8005574:	d11b      	bne.n	80055ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005584:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	e144      	b.n	8005838 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055c4:	e138      	b.n	8005838 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	f200 80f1 	bhi.w	80057b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d123      	bne.n	8005620 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fe99 	bl	8006314 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e139      	b.n	8005860 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800561e:	e10b      	b.n	8005838 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005624:	2b02      	cmp	r3, #2
 8005626:	d14e      	bne.n	80056c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	2200      	movs	r2, #0
 8005630:	4906      	ldr	r1, [pc, #24]	; (800564c <HAL_I2C_Mem_Read+0x22c>)
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fd16 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e10e      	b.n	8005860 <HAL_I2C_Mem_Read+0x440>
 8005642:	bf00      	nop
 8005644:	00100002 	.word	0x00100002
 8005648:	ffff0000 	.word	0xffff0000
 800564c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056c4:	e0b8      	b.n	8005838 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2200      	movs	r2, #0
 80056ce:	4966      	ldr	r1, [pc, #408]	; (8005868 <HAL_I2C_Mem_Read+0x448>)
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fcc7 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0bf      	b.n	8005860 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	2200      	movs	r2, #0
 800572a:	494f      	ldr	r1, [pc, #316]	; (8005868 <HAL_I2C_Mem_Read+0x448>)
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fc99 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e091      	b.n	8005860 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800574a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057b0:	e042      	b.n	8005838 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fdac 	bl	8006314 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e04c      	b.n	8005860 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b04      	cmp	r3, #4
 8005804:	d118      	bne.n	8005838 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	f47f aec2 	bne.w	80055c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	e000      	b.n	8005860 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800585e:	2302      	movs	r3, #2
  }
}
 8005860:	4618      	mov	r0, r3
 8005862:	3728      	adds	r7, #40	; 0x28
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	00010004 	.word	0x00010004

0800586c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	; 0x28
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	607a      	str	r2, [r7, #4]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	460b      	mov	r3, r1
 800587a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800587c:	f7fd fba0 	bl	8002fc0 <HAL_GetTick>
 8005880:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b20      	cmp	r3, #32
 8005890:	f040 8111 	bne.w	8005ab6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	2319      	movs	r3, #25
 800589a:	2201      	movs	r2, #1
 800589c:	4988      	ldr	r1, [pc, #544]	; (8005ac0 <HAL_I2C_IsDeviceReady+0x254>)
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fbe0 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80058aa:	2302      	movs	r3, #2
 80058ac:	e104      	b.n	8005ab8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_I2C_IsDeviceReady+0x50>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e0fd      	b.n	8005ab8 <HAL_I2C_IsDeviceReady+0x24c>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d007      	beq.n	80058e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0201 	orr.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2224      	movs	r2, #36	; 0x24
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4a70      	ldr	r2, [pc, #448]	; (8005ac4 <HAL_I2C_IsDeviceReady+0x258>)
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005914:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2200      	movs	r2, #0
 800591e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fb9e 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593c:	d103      	bne.n	8005946 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e0b6      	b.n	8005ab8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800594a:	897b      	ldrh	r3, [r7, #10]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005958:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800595a:	f7fd fb31 	bl	8002fc0 <HAL_GetTick>
 800595e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b02      	cmp	r3, #2
 800596c:	bf0c      	ite	eq
 800596e:	2301      	moveq	r3, #1
 8005970:	2300      	movne	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800598e:	e025      	b.n	80059dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005990:	f7fd fb16 	bl	8002fc0 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d302      	bcc.n	80059a6 <HAL_I2C_IsDeviceReady+0x13a>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	22a0      	movs	r2, #160	; 0xa0
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	bf0c      	ite	eq
 80059bc:	2301      	moveq	r3, #1
 80059be:	2300      	movne	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d2:	bf0c      	ite	eq
 80059d4:	2301      	moveq	r3, #1
 80059d6:	2300      	movne	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2ba0      	cmp	r3, #160	; 0xa0
 80059e6:	d005      	beq.n	80059f4 <HAL_I2C_IsDeviceReady+0x188>
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d102      	bne.n	80059f4 <HAL_I2C_IsDeviceReady+0x188>
 80059ee:	7dbb      	ldrb	r3, [r7, #22]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0cd      	beq.n	8005990 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d129      	bne.n	8005a5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	2319      	movs	r3, #25
 8005a36:	2201      	movs	r2, #1
 8005a38:	4921      	ldr	r1, [pc, #132]	; (8005ac0 <HAL_I2C_IsDeviceReady+0x254>)
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fb12 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e036      	b.n	8005ab8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e02c      	b.n	8005ab8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	2319      	movs	r3, #25
 8005a7e:	2201      	movs	r2, #1
 8005a80:	490f      	ldr	r1, [pc, #60]	; (8005ac0 <HAL_I2C_IsDeviceReady+0x254>)
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 faee 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e012      	b.n	8005ab8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	3301      	adds	r3, #1
 8005a96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	f4ff af32 	bcc.w	8005906 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
  }
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3720      	adds	r7, #32
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	00100002 	.word	0x00100002
 8005ac4:	ffff0000 	.word	0xffff0000

08005ac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d006      	beq.n	8005af2 <I2C_MasterRequestWrite+0x2a>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d003      	beq.n	8005af2 <I2C_MasterRequestWrite+0x2a>
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005af0:	d108      	bne.n	8005b04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	e00b      	b.n	8005b1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b08:	2b12      	cmp	r3, #18
 8005b0a:	d107      	bne.n	8005b1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 fa9b 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b42:	d103      	bne.n	8005b4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e035      	b.n	8005bbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b58:	d108      	bne.n	8005b6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b5a:	897b      	ldrh	r3, [r7, #10]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b68:	611a      	str	r2, [r3, #16]
 8005b6a:	e01b      	b.n	8005ba4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b6c:	897b      	ldrh	r3, [r7, #10]
 8005b6e:	11db      	asrs	r3, r3, #7
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	f003 0306 	and.w	r3, r3, #6
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f063 030f 	orn	r3, r3, #15
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	490e      	ldr	r1, [pc, #56]	; (8005bc4 <I2C_MasterRequestWrite+0xfc>)
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fac1 	bl	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e010      	b.n	8005bbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b9a:	897b      	ldrh	r3, [r7, #10]
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	4907      	ldr	r1, [pc, #28]	; (8005bc8 <I2C_MasterRequestWrite+0x100>)
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fab1 	bl	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	00010008 	.word	0x00010008
 8005bc8:	00010002 	.word	0x00010002

08005bcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	607a      	str	r2, [r7, #4]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d006      	beq.n	8005c06 <I2C_MasterRequestRead+0x3a>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d003      	beq.n	8005c06 <I2C_MasterRequestRead+0x3a>
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c04:	d108      	bne.n	8005c18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	e00b      	b.n	8005c30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	2b11      	cmp	r3, #17
 8005c1e:	d107      	bne.n	8005c30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fa11 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00d      	beq.n	8005c64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c56:	d103      	bne.n	8005c60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e079      	b.n	8005d58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c6c:	d108      	bne.n	8005c80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c6e:	897b      	ldrh	r3, [r7, #10]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	611a      	str	r2, [r3, #16]
 8005c7e:	e05f      	b.n	8005d40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c80:	897b      	ldrh	r3, [r7, #10]
 8005c82:	11db      	asrs	r3, r3, #7
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f003 0306 	and.w	r3, r3, #6
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f063 030f 	orn	r3, r3, #15
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4930      	ldr	r1, [pc, #192]	; (8005d60 <I2C_MasterRequestRead+0x194>)
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fa37 	bl	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e054      	b.n	8005d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cae:	897b      	ldrh	r3, [r7, #10]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	4929      	ldr	r1, [pc, #164]	; (8005d64 <I2C_MasterRequestRead+0x198>)
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 fa27 	bl	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e044      	b.n	8005d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f9af 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00d      	beq.n	8005d28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1a:	d103      	bne.n	8005d24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e017      	b.n	8005d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d28:	897b      	ldrh	r3, [r7, #10]
 8005d2a:	11db      	asrs	r3, r3, #7
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f003 0306 	and.w	r3, r3, #6
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f063 030e 	orn	r3, r3, #14
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	4907      	ldr	r1, [pc, #28]	; (8005d64 <I2C_MasterRequestRead+0x198>)
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f9e3 	bl	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	00010008 	.word	0x00010008
 8005d64:	00010002 	.word	0x00010002

08005d68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	4608      	mov	r0, r1
 8005d72:	4611      	mov	r1, r2
 8005d74:	461a      	mov	r2, r3
 8005d76:	4603      	mov	r3, r0
 8005d78:	817b      	strh	r3, [r7, #10]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	813b      	strh	r3, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f960 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00d      	beq.n	8005dc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db8:	d103      	bne.n	8005dc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e05f      	b.n	8005e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dc6:	897b      	ldrh	r3, [r7, #10]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	6a3a      	ldr	r2, [r7, #32]
 8005dda:	492d      	ldr	r1, [pc, #180]	; (8005e90 <I2C_RequestMemoryWrite+0x128>)
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f998 	bl	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e04c      	b.n	8005e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e04:	6a39      	ldr	r1, [r7, #32]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fa02 	bl	8006210 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00d      	beq.n	8005e2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d107      	bne.n	8005e2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e02b      	b.n	8005e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d105      	bne.n	8005e40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e34:	893b      	ldrh	r3, [r7, #8]
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	611a      	str	r2, [r3, #16]
 8005e3e:	e021      	b.n	8005e84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e40:	893b      	ldrh	r3, [r7, #8]
 8005e42:	0a1b      	lsrs	r3, r3, #8
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e50:	6a39      	ldr	r1, [r7, #32]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f9dc 	bl	8006210 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00d      	beq.n	8005e7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d107      	bne.n	8005e76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e005      	b.n	8005e86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e7a:	893b      	ldrh	r3, [r7, #8]
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	00010002 	.word	0x00010002

08005e94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	817b      	strh	r3, [r7, #10]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	813b      	strh	r3, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f8c2 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00d      	beq.n	8005f02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef4:	d103      	bne.n	8005efe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e0aa      	b.n	8006058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f02:	897b      	ldrh	r3, [r7, #10]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	6a3a      	ldr	r2, [r7, #32]
 8005f16:	4952      	ldr	r1, [pc, #328]	; (8006060 <I2C_RequestMemoryRead+0x1cc>)
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f8fa 	bl	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e097      	b.n	8006058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	6a39      	ldr	r1, [r7, #32]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 f964 	bl	8006210 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00d      	beq.n	8005f6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d107      	bne.n	8005f66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e076      	b.n	8006058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d105      	bne.n	8005f7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f70:	893b      	ldrh	r3, [r7, #8]
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	611a      	str	r2, [r3, #16]
 8005f7a:	e021      	b.n	8005fc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f7c:	893b      	ldrh	r3, [r7, #8]
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8c:	6a39      	ldr	r1, [r7, #32]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f93e 	bl	8006210 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d107      	bne.n	8005fb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e050      	b.n	8006058 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb6:	893b      	ldrh	r3, [r7, #8]
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc2:	6a39      	ldr	r1, [r7, #32]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f923 	bl	8006210 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00d      	beq.n	8005fec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d107      	bne.n	8005fe8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e035      	b.n	8006058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ffa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	2200      	movs	r2, #0
 8006004:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f82b 	bl	8006064 <I2C_WaitOnFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00d      	beq.n	8006030 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006022:	d103      	bne.n	800602c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800602a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e013      	b.n	8006058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006030:	897b      	ldrh	r3, [r7, #10]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f043 0301 	orr.w	r3, r3, #1
 8006038:	b2da      	uxtb	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	6a3a      	ldr	r2, [r7, #32]
 8006044:	4906      	ldr	r1, [pc, #24]	; (8006060 <I2C_RequestMemoryRead+0x1cc>)
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f863 	bl	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	00010002 	.word	0x00010002

08006064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006074:	e025      	b.n	80060c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d021      	beq.n	80060c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607e:	f7fc ff9f 	bl	8002fc0 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d302      	bcc.n	8006094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d116      	bne.n	80060c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e023      	b.n	800610a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	0c1b      	lsrs	r3, r3, #16
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d10d      	bne.n	80060e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	43da      	mvns	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4013      	ands	r3, r2
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bf0c      	ite	eq
 80060de:	2301      	moveq	r3, #1
 80060e0:	2300      	movne	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	e00c      	b.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	43da      	mvns	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4013      	ands	r3, r2
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bf0c      	ite	eq
 80060fa:	2301      	moveq	r3, #1
 80060fc:	2300      	movne	r3, #0
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	429a      	cmp	r2, r3
 8006106:	d0b6      	beq.n	8006076 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006120:	e051      	b.n	80061c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006130:	d123      	bne.n	800617a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006140:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800614a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f043 0204 	orr.w	r2, r3, #4
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e046      	b.n	8006208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006180:	d021      	beq.n	80061c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006182:	f7fc ff1d 	bl	8002fc0 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	429a      	cmp	r2, r3
 8006190:	d302      	bcc.n	8006198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d116      	bne.n	80061c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e020      	b.n	8006208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	0c1b      	lsrs	r3, r3, #16
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10c      	bne.n	80061ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	43da      	mvns	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4013      	ands	r3, r2
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bf14      	ite	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	2300      	moveq	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	e00b      	b.n	8006202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	43da      	mvns	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	4013      	ands	r3, r2
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d18d      	bne.n	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800621c:	e02d      	b.n	800627a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f8ce 	bl	80063c0 <I2C_IsAcknowledgeFailed>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e02d      	b.n	800628a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d021      	beq.n	800627a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006236:	f7fc fec3 	bl	8002fc0 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	d302      	bcc.n	800624c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d116      	bne.n	800627a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	f043 0220 	orr.w	r2, r3, #32
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e007      	b.n	800628a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d1ca      	bne.n	800621e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800629e:	e02d      	b.n	80062fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f88d 	bl	80063c0 <I2C_IsAcknowledgeFailed>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e02d      	b.n	800630c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d021      	beq.n	80062fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b8:	f7fc fe82 	bl	8002fc0 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d302      	bcc.n	80062ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d116      	bne.n	80062fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	f043 0220 	orr.w	r2, r3, #32
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e007      	b.n	800630c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b04      	cmp	r3, #4
 8006308:	d1ca      	bne.n	80062a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006320:	e042      	b.n	80063a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b10      	cmp	r3, #16
 800632e:	d119      	bne.n	8006364 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0210 	mvn.w	r2, #16
 8006338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e029      	b.n	80063b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006364:	f7fc fe2c 	bl	8002fc0 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	429a      	cmp	r2, r3
 8006372:	d302      	bcc.n	800637a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d116      	bne.n	80063a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	f043 0220 	orr.w	r2, r3, #32
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e007      	b.n	80063b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d1b5      	bne.n	8006322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d6:	d11b      	bne.n	8006410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	f043 0204 	orr.w	r2, r3, #4
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e267      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d075      	beq.n	800652a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800643e:	4b88      	ldr	r3, [pc, #544]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 030c 	and.w	r3, r3, #12
 8006446:	2b04      	cmp	r3, #4
 8006448:	d00c      	beq.n	8006464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800644a:	4b85      	ldr	r3, [pc, #532]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006452:	2b08      	cmp	r3, #8
 8006454:	d112      	bne.n	800647c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006456:	4b82      	ldr	r3, [pc, #520]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800645e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006462:	d10b      	bne.n	800647c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006464:	4b7e      	ldr	r3, [pc, #504]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d05b      	beq.n	8006528 <HAL_RCC_OscConfig+0x108>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d157      	bne.n	8006528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e242      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006484:	d106      	bne.n	8006494 <HAL_RCC_OscConfig+0x74>
 8006486:	4b76      	ldr	r3, [pc, #472]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a75      	ldr	r2, [pc, #468]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 800648c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	e01d      	b.n	80064d0 <HAL_RCC_OscConfig+0xb0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800649c:	d10c      	bne.n	80064b8 <HAL_RCC_OscConfig+0x98>
 800649e:	4b70      	ldr	r3, [pc, #448]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a6f      	ldr	r2, [pc, #444]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	4b6d      	ldr	r3, [pc, #436]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a6c      	ldr	r2, [pc, #432]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e00b      	b.n	80064d0 <HAL_RCC_OscConfig+0xb0>
 80064b8:	4b69      	ldr	r3, [pc, #420]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a68      	ldr	r2, [pc, #416]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	4b66      	ldr	r3, [pc, #408]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a65      	ldr	r2, [pc, #404]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d013      	beq.n	8006500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d8:	f7fc fd72 	bl	8002fc0 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064e0:	f7fc fd6e 	bl	8002fc0 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b64      	cmp	r3, #100	; 0x64
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e207      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064f2:	4b5b      	ldr	r3, [pc, #364]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0xc0>
 80064fe:	e014      	b.n	800652a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006500:	f7fc fd5e 	bl	8002fc0 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006508:	f7fc fd5a 	bl	8002fc0 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b64      	cmp	r3, #100	; 0x64
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e1f3      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800651a:	4b51      	ldr	r3, [pc, #324]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0xe8>
 8006526:	e000      	b.n	800652a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d063      	beq.n	80065fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006536:	4b4a      	ldr	r3, [pc, #296]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00b      	beq.n	800655a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006542:	4b47      	ldr	r3, [pc, #284]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800654a:	2b08      	cmp	r3, #8
 800654c:	d11c      	bne.n	8006588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800654e:	4b44      	ldr	r3, [pc, #272]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d116      	bne.n	8006588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800655a:	4b41      	ldr	r3, [pc, #260]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_RCC_OscConfig+0x152>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d001      	beq.n	8006572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e1c7      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006572:	4b3b      	ldr	r3, [pc, #236]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4937      	ldr	r1, [pc, #220]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006582:	4313      	orrs	r3, r2
 8006584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006586:	e03a      	b.n	80065fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d020      	beq.n	80065d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006590:	4b34      	ldr	r3, [pc, #208]	; (8006664 <HAL_RCC_OscConfig+0x244>)
 8006592:	2201      	movs	r2, #1
 8006594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006596:	f7fc fd13 	bl	8002fc0 <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800659e:	f7fc fd0f 	bl	8002fc0 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e1a8      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b0:	4b2b      	ldr	r3, [pc, #172]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065bc:	4b28      	ldr	r3, [pc, #160]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	4925      	ldr	r1, [pc, #148]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	600b      	str	r3, [r1, #0]
 80065d0:	e015      	b.n	80065fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065d2:	4b24      	ldr	r3, [pc, #144]	; (8006664 <HAL_RCC_OscConfig+0x244>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d8:	f7fc fcf2 	bl	8002fc0 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065e0:	f7fc fcee 	bl	8002fc0 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e187      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065f2:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f0      	bne.n	80065e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d036      	beq.n	8006678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d016      	beq.n	8006640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <HAL_RCC_OscConfig+0x248>)
 8006614:	2201      	movs	r2, #1
 8006616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006618:	f7fc fcd2 	bl	8002fc0 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006620:	f7fc fcce 	bl	8002fc0 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e167      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_RCC_OscConfig+0x240>)
 8006634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0x200>
 800663e:	e01b      	b.n	8006678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006640:	4b09      	ldr	r3, [pc, #36]	; (8006668 <HAL_RCC_OscConfig+0x248>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006646:	f7fc fcbb 	bl	8002fc0 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800664c:	e00e      	b.n	800666c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800664e:	f7fc fcb7 	bl	8002fc0 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d907      	bls.n	800666c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e150      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
 8006660:	40023800 	.word	0x40023800
 8006664:	42470000 	.word	0x42470000
 8006668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800666c:	4b88      	ldr	r3, [pc, #544]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800666e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1ea      	bne.n	800664e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8097 	beq.w	80067b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800668a:	4b81      	ldr	r3, [pc, #516]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10f      	bne.n	80066b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006696:	2300      	movs	r3, #0
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	4b7d      	ldr	r3, [pc, #500]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	4a7c      	ldr	r2, [pc, #496]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80066a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a4:	6413      	str	r3, [r2, #64]	; 0x40
 80066a6:	4b7a      	ldr	r3, [pc, #488]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ae:	60bb      	str	r3, [r7, #8]
 80066b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b6:	4b77      	ldr	r3, [pc, #476]	; (8006894 <HAL_RCC_OscConfig+0x474>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d118      	bne.n	80066f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066c2:	4b74      	ldr	r3, [pc, #464]	; (8006894 <HAL_RCC_OscConfig+0x474>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a73      	ldr	r2, [pc, #460]	; (8006894 <HAL_RCC_OscConfig+0x474>)
 80066c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ce:	f7fc fc77 	bl	8002fc0 <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d6:	f7fc fc73 	bl	8002fc0 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e10c      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e8:	4b6a      	ldr	r3, [pc, #424]	; (8006894 <HAL_RCC_OscConfig+0x474>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0f0      	beq.n	80066d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d106      	bne.n	800670a <HAL_RCC_OscConfig+0x2ea>
 80066fc:	4b64      	ldr	r3, [pc, #400]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	4a63      	ldr	r2, [pc, #396]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	6713      	str	r3, [r2, #112]	; 0x70
 8006708:	e01c      	b.n	8006744 <HAL_RCC_OscConfig+0x324>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b05      	cmp	r3, #5
 8006710:	d10c      	bne.n	800672c <HAL_RCC_OscConfig+0x30c>
 8006712:	4b5f      	ldr	r3, [pc, #380]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006716:	4a5e      	ldr	r2, [pc, #376]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006718:	f043 0304 	orr.w	r3, r3, #4
 800671c:	6713      	str	r3, [r2, #112]	; 0x70
 800671e:	4b5c      	ldr	r3, [pc, #368]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	4a5b      	ldr	r2, [pc, #364]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	6713      	str	r3, [r2, #112]	; 0x70
 800672a:	e00b      	b.n	8006744 <HAL_RCC_OscConfig+0x324>
 800672c:	4b58      	ldr	r3, [pc, #352]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006730:	4a57      	ldr	r2, [pc, #348]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	6713      	str	r3, [r2, #112]	; 0x70
 8006738:	4b55      	ldr	r3, [pc, #340]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	4a54      	ldr	r2, [pc, #336]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800673e:	f023 0304 	bic.w	r3, r3, #4
 8006742:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d015      	beq.n	8006778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800674c:	f7fc fc38 	bl	8002fc0 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006752:	e00a      	b.n	800676a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006754:	f7fc fc34 	bl	8002fc0 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006762:	4293      	cmp	r3, r2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e0cb      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800676a:	4b49      	ldr	r3, [pc, #292]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0ee      	beq.n	8006754 <HAL_RCC_OscConfig+0x334>
 8006776:	e014      	b.n	80067a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006778:	f7fc fc22 	bl	8002fc0 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800677e:	e00a      	b.n	8006796 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006780:	f7fc fc1e 	bl	8002fc0 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	f241 3288 	movw	r2, #5000	; 0x1388
 800678e:	4293      	cmp	r3, r2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e0b5      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006796:	4b3e      	ldr	r3, [pc, #248]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1ee      	bne.n	8006780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d105      	bne.n	80067b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067a8:	4b39      	ldr	r3, [pc, #228]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	4a38      	ldr	r2, [pc, #224]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80067ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80a1 	beq.w	8006900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067be:	4b34      	ldr	r3, [pc, #208]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 030c 	and.w	r3, r3, #12
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d05c      	beq.n	8006884 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d141      	bne.n	8006856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d2:	4b31      	ldr	r3, [pc, #196]	; (8006898 <HAL_RCC_OscConfig+0x478>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fc fbf2 	bl	8002fc0 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e0:	f7fc fbee 	bl	8002fc0 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e087      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f2:	4b27      	ldr	r3, [pc, #156]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f0      	bne.n	80067e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69da      	ldr	r2, [r3, #28]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	019b      	lsls	r3, r3, #6
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	085b      	lsrs	r3, r3, #1
 8006816:	3b01      	subs	r3, #1
 8006818:	041b      	lsls	r3, r3, #16
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	061b      	lsls	r3, r3, #24
 8006822:	491b      	ldr	r1, [pc, #108]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006824:	4313      	orrs	r3, r2
 8006826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006828:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <HAL_RCC_OscConfig+0x478>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682e:	f7fc fbc7 	bl	8002fc0 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006836:	f7fc fbc3 	bl	8002fc0 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e05c      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <HAL_RCC_OscConfig+0x416>
 8006854:	e054      	b.n	8006900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006856:	4b10      	ldr	r3, [pc, #64]	; (8006898 <HAL_RCC_OscConfig+0x478>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685c:	f7fc fbb0 	bl	8002fc0 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006864:	f7fc fbac 	bl	8002fc0 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e045      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006876:	4b06      	ldr	r3, [pc, #24]	; (8006890 <HAL_RCC_OscConfig+0x470>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x444>
 8006882:	e03d      	b.n	8006900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d107      	bne.n	800689c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e038      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
 8006890:	40023800 	.word	0x40023800
 8006894:	40007000 	.word	0x40007000
 8006898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800689c:	4b1b      	ldr	r3, [pc, #108]	; (800690c <HAL_RCC_OscConfig+0x4ec>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d028      	beq.n	80068fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d121      	bne.n	80068fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d11a      	bne.n	80068fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068cc:	4013      	ands	r3, r2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d111      	bne.n	80068fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	3b01      	subs	r3, #1
 80068e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d107      	bne.n	80068fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d001      	beq.n	8006900 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40023800 	.word	0x40023800

08006910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0cc      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006924:	4b68      	ldr	r3, [pc, #416]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d90c      	bls.n	800694c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006932:	4b65      	ldr	r3, [pc, #404]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800693a:	4b63      	ldr	r3, [pc, #396]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d001      	beq.n	800694c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0b8      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d020      	beq.n	800699a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006964:	4b59      	ldr	r3, [pc, #356]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	4a58      	ldr	r2, [pc, #352]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 800696a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800696e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800697c:	4b53      	ldr	r3, [pc, #332]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4a52      	ldr	r2, [pc, #328]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006988:	4b50      	ldr	r3, [pc, #320]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	494d      	ldr	r1, [pc, #308]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	4313      	orrs	r3, r2
 8006998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d044      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d107      	bne.n	80069be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	4b47      	ldr	r3, [pc, #284]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d119      	bne.n	80069ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e07f      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d003      	beq.n	80069ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d107      	bne.n	80069de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ce:	4b3f      	ldr	r3, [pc, #252]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e06f      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069de:	4b3b      	ldr	r3, [pc, #236]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e067      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ee:	4b37      	ldr	r3, [pc, #220]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f023 0203 	bic.w	r2, r3, #3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4934      	ldr	r1, [pc, #208]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a00:	f7fc fade 	bl	8002fc0 <HAL_GetTick>
 8006a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a08:	f7fc fada 	bl	8002fc0 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e04f      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1e:	4b2b      	ldr	r3, [pc, #172]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 020c 	and.w	r2, r3, #12
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d1eb      	bne.n	8006a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a30:	4b25      	ldr	r3, [pc, #148]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20c      	bcs.n	8006a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3e:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a46:	4b20      	ldr	r3, [pc, #128]	; (8006ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d001      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e032      	b.n	8006abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a64:	4b19      	ldr	r3, [pc, #100]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	4916      	ldr	r1, [pc, #88]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a82:	4b12      	ldr	r3, [pc, #72]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	490e      	ldr	r1, [pc, #56]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a96:	f000 f821 	bl	8006adc <HAL_RCC_GetSysClockFreq>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	091b      	lsrs	r3, r3, #4
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	490a      	ldr	r1, [pc, #40]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa8:	5ccb      	ldrb	r3, [r1, r3]
 8006aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8006aae:	4a09      	ldr	r2, [pc, #36]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ab2:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fc fa3e 	bl	8002f38 <HAL_InitTick>

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40023c00 	.word	0x40023c00
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	0800bfc8 	.word	0x0800bfc8
 8006ad4:	20000000 	.word	0x20000000
 8006ad8:	20000004 	.word	0x20000004

08006adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ae0:	b094      	sub	sp, #80	; 0x50
 8006ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae8:	2300      	movs	r3, #0
 8006aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aec:	2300      	movs	r3, #0
 8006aee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006af4:	4b79      	ldr	r3, [pc, #484]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 030c 	and.w	r3, r3, #12
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d00d      	beq.n	8006b1c <HAL_RCC_GetSysClockFreq+0x40>
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	f200 80e1 	bhi.w	8006cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <HAL_RCC_GetSysClockFreq+0x34>
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d003      	beq.n	8006b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b0e:	e0db      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b10:	4b73      	ldr	r3, [pc, #460]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006b14:	e0db      	b.n	8006cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b16:	4b73      	ldr	r3, [pc, #460]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b1a:	e0d8      	b.n	8006cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b1c:	4b6f      	ldr	r3, [pc, #444]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b26:	4b6d      	ldr	r3, [pc, #436]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d063      	beq.n	8006bfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b32:	4b6a      	ldr	r3, [pc, #424]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	099b      	lsrs	r3, r3, #6
 8006b38:	2200      	movs	r2, #0
 8006b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30
 8006b46:	2300      	movs	r3, #0
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
 8006b4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b4e:	4622      	mov	r2, r4
 8006b50:	462b      	mov	r3, r5
 8006b52:	f04f 0000 	mov.w	r0, #0
 8006b56:	f04f 0100 	mov.w	r1, #0
 8006b5a:	0159      	lsls	r1, r3, #5
 8006b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b60:	0150      	lsls	r0, r2, #5
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4621      	mov	r1, r4
 8006b68:	1a51      	subs	r1, r2, r1
 8006b6a:	6139      	str	r1, [r7, #16]
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b80:	4659      	mov	r1, fp
 8006b82:	018b      	lsls	r3, r1, #6
 8006b84:	4651      	mov	r1, sl
 8006b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b8a:	4651      	mov	r1, sl
 8006b8c:	018a      	lsls	r2, r1, #6
 8006b8e:	4651      	mov	r1, sl
 8006b90:	ebb2 0801 	subs.w	r8, r2, r1
 8006b94:	4659      	mov	r1, fp
 8006b96:	eb63 0901 	sbc.w	r9, r3, r1
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bae:	4690      	mov	r8, r2
 8006bb0:	4699      	mov	r9, r3
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	eb18 0303 	adds.w	r3, r8, r3
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	462b      	mov	r3, r5
 8006bbc:	eb49 0303 	adc.w	r3, r9, r3
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006bce:	4629      	mov	r1, r5
 8006bd0:	024b      	lsls	r3, r1, #9
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bd8:	4621      	mov	r1, r4
 8006bda:	024a      	lsls	r2, r1, #9
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4619      	mov	r1, r3
 8006be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be2:	2200      	movs	r2, #0
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bec:	f7f9 fffc 	bl	8000be8 <__aeabi_uldivmod>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bf8:	e058      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bfa:	4b38      	ldr	r3, [pc, #224]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	099b      	lsrs	r3, r3, #6
 8006c00:	2200      	movs	r2, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	4611      	mov	r1, r2
 8006c06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c0a:	623b      	str	r3, [r7, #32]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c14:	4642      	mov	r2, r8
 8006c16:	464b      	mov	r3, r9
 8006c18:	f04f 0000 	mov.w	r0, #0
 8006c1c:	f04f 0100 	mov.w	r1, #0
 8006c20:	0159      	lsls	r1, r3, #5
 8006c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c26:	0150      	lsls	r0, r2, #5
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c32:	4649      	mov	r1, r9
 8006c34:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c4c:	ebb2 040a 	subs.w	r4, r2, sl
 8006c50:	eb63 050b 	sbc.w	r5, r3, fp
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	00eb      	lsls	r3, r5, #3
 8006c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c62:	00e2      	lsls	r2, r4, #3
 8006c64:	4614      	mov	r4, r2
 8006c66:	461d      	mov	r5, r3
 8006c68:	4643      	mov	r3, r8
 8006c6a:	18e3      	adds	r3, r4, r3
 8006c6c:	603b      	str	r3, [r7, #0]
 8006c6e:	464b      	mov	r3, r9
 8006c70:	eb45 0303 	adc.w	r3, r5, r3
 8006c74:	607b      	str	r3, [r7, #4]
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c82:	4629      	mov	r1, r5
 8006c84:	028b      	lsls	r3, r1, #10
 8006c86:	4621      	mov	r1, r4
 8006c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	028a      	lsls	r2, r1, #10
 8006c90:	4610      	mov	r0, r2
 8006c92:	4619      	mov	r1, r3
 8006c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c96:	2200      	movs	r2, #0
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	61fa      	str	r2, [r7, #28]
 8006c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ca0:	f7f9 ffa2 	bl	8000be8 <__aeabi_uldivmod>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4613      	mov	r3, r2
 8006caa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	0c1b      	lsrs	r3, r3, #16
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006cbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cc6:	e002      	b.n	8006cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3750      	adds	r7, #80	; 0x50
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cda:	bf00      	nop
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	00f42400 	.word	0x00f42400
 8006ce4:	007a1200 	.word	0x007a1200

08006ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cec:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8006cee:	681b      	ldr	r3, [r3, #0]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20000000 	.word	0x20000000

08006d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d04:	f7ff fff0 	bl	8006ce8 <HAL_RCC_GetHCLKFreq>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	0a9b      	lsrs	r3, r3, #10
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	4903      	ldr	r1, [pc, #12]	; (8006d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d16:	5ccb      	ldrb	r3, [r1, r3]
 8006d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40023800 	.word	0x40023800
 8006d24:	0800bfd8 	.word	0x0800bfd8

08006d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d2c:	f7ff ffdc 	bl	8006ce8 <HAL_RCC_GetHCLKFreq>
 8006d30:	4602      	mov	r2, r0
 8006d32:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	0b5b      	lsrs	r3, r3, #13
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	4903      	ldr	r1, [pc, #12]	; (8006d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d3e:	5ccb      	ldrb	r3, [r1, r3]
 8006d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	0800bfd8 	.word	0x0800bfd8

08006d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e07b      	b.n	8006e5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d108      	bne.n	8006d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d72:	d009      	beq.n	8006d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	61da      	str	r2, [r3, #28]
 8006d7a:	e005      	b.n	8006d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fb f9dc 	bl	8002160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0c:	ea42 0103 	orr.w	r1, r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	0c1b      	lsrs	r3, r3, #16
 8006e26:	f003 0104 	and.w	r1, r3, #4
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	f003 0210 	and.w	r2, r3, #16
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b088      	sub	sp, #32
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	603b      	str	r3, [r7, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_SPI_Transmit+0x22>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e126      	b.n	80070d2 <HAL_SPI_Transmit+0x270>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e8c:	f7fc f898 	bl	8002fc0 <HAL_GetTick>
 8006e90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d002      	beq.n	8006ea8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ea6:	e10b      	b.n	80070c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_SPI_Transmit+0x52>
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006eb8:	e102      	b.n	80070c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	88fa      	ldrh	r2, [r7, #6]
 8006ed2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f00:	d10f      	bne.n	8006f22 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d007      	beq.n	8006f40 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f48:	d14b      	bne.n	8006fe2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <HAL_SPI_Transmit+0xf6>
 8006f52:	8afb      	ldrh	r3, [r7, #22]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d13e      	bne.n	8006fd6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5c:	881a      	ldrh	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	1c9a      	adds	r2, r3, #2
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f7c:	e02b      	b.n	8006fd6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d112      	bne.n	8006fb2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	881a      	ldrh	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	1c9a      	adds	r2, r3, #2
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fb0:	e011      	b.n	8006fd6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb2:	f7fc f805 	bl	8002fc0 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d803      	bhi.n	8006fca <HAL_SPI_Transmit+0x168>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d102      	bne.n	8006fd0 <HAL_SPI_Transmit+0x16e>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fd4:	e074      	b.n	80070c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1ce      	bne.n	8006f7e <HAL_SPI_Transmit+0x11c>
 8006fe0:	e04c      	b.n	800707c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <HAL_SPI_Transmit+0x18e>
 8006fea:	8afb      	ldrh	r3, [r7, #22]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d140      	bne.n	8007072 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	330c      	adds	r3, #12
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007016:	e02c      	b.n	8007072 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b02      	cmp	r3, #2
 8007024:	d113      	bne.n	800704e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	330c      	adds	r3, #12
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b01      	subs	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	86da      	strh	r2, [r3, #54]	; 0x36
 800704c:	e011      	b.n	8007072 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800704e:	f7fb ffb7 	bl	8002fc0 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d803      	bhi.n	8007066 <HAL_SPI_Transmit+0x204>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007064:	d102      	bne.n	800706c <HAL_SPI_Transmit+0x20a>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d102      	bne.n	8007072 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007070:	e026      	b.n	80070c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007076:	b29b      	uxth	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1cd      	bne.n	8007018 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fce9 	bl	8007a58 <SPI_EndRxTxTransaction>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	e000      	b.n	80070c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80070be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3720      	adds	r7, #32
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b088      	sub	sp, #32
 80070de:	af02      	add	r7, sp, #8
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	603b      	str	r3, [r7, #0]
 80070e6:	4613      	mov	r3, r2
 80070e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f6:	d112      	bne.n	800711e <HAL_SPI_Receive+0x44>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10e      	bne.n	800711e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2204      	movs	r2, #4
 8007104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007108:	88fa      	ldrh	r2, [r7, #6]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	4613      	mov	r3, r2
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 f8f1 	bl	80072fc <HAL_SPI_TransmitReceive>
 800711a:	4603      	mov	r3, r0
 800711c:	e0ea      	b.n	80072f4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_SPI_Receive+0x52>
 8007128:	2302      	movs	r3, #2
 800712a:	e0e3      	b.n	80072f4 <HAL_SPI_Receive+0x21a>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007134:	f7fb ff44 	bl	8002fc0 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	d002      	beq.n	800714c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007146:	2302      	movs	r3, #2
 8007148:	75fb      	strb	r3, [r7, #23]
    goto error;
 800714a:	e0ca      	b.n	80072e2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_SPI_Receive+0x7e>
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800715c:	e0c1      	b.n	80072e2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2204      	movs	r2, #4
 8007162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	88fa      	ldrh	r2, [r7, #6]
 8007176:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	88fa      	ldrh	r2, [r7, #6]
 800717c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a4:	d10f      	bne.n	80071c6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	d007      	beq.n	80071e4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d162      	bne.n	80072b2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071ec:	e02e      	b.n	800724c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d115      	bne.n	8007228 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f103 020c 	add.w	r2, r3, #12
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	7812      	ldrb	r2, [r2, #0]
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007226:	e011      	b.n	800724c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007228:	f7fb feca 	bl	8002fc0 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d803      	bhi.n	8007240 <HAL_SPI_Receive+0x166>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d102      	bne.n	8007246 <HAL_SPI_Receive+0x16c>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d102      	bne.n	800724c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	75fb      	strb	r3, [r7, #23]
          goto error;
 800724a:	e04a      	b.n	80072e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1cb      	bne.n	80071ee <HAL_SPI_Receive+0x114>
 8007256:	e031      	b.n	80072bc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b01      	cmp	r3, #1
 8007264:	d113      	bne.n	800728e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	b292      	uxth	r2, r2
 8007272:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	1c9a      	adds	r2, r3, #2
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800728c:	e011      	b.n	80072b2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800728e:	f7fb fe97 	bl	8002fc0 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d803      	bhi.n	80072a6 <HAL_SPI_Receive+0x1cc>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a4:	d102      	bne.n	80072ac <HAL_SPI_Receive+0x1d2>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072b0:	e017      	b.n	80072e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1cd      	bne.n	8007258 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 fb63 	bl	800798c <SPI_EndRxTransaction>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2220      	movs	r2, #32
 80072d0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	75fb      	strb	r3, [r7, #23]
 80072de:	e000      	b.n	80072e2 <HAL_SPI_Receive+0x208>
  }

error :
 80072e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08c      	sub	sp, #48	; 0x30
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800730a:	2301      	movs	r3, #1
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_SPI_TransmitReceive+0x26>
 800731e:	2302      	movs	r3, #2
 8007320:	e18a      	b.n	8007638 <HAL_SPI_TransmitReceive+0x33c>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800732a:	f7fb fe49 	bl	8002fc0 <HAL_GetTick>
 800732e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007340:	887b      	ldrh	r3, [r7, #2]
 8007342:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007344:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007348:	2b01      	cmp	r3, #1
 800734a:	d00f      	beq.n	800736c <HAL_SPI_TransmitReceive+0x70>
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007352:	d107      	bne.n	8007364 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d103      	bne.n	8007364 <HAL_SPI_TransmitReceive+0x68>
 800735c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007360:	2b04      	cmp	r3, #4
 8007362:	d003      	beq.n	800736c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007364:	2302      	movs	r3, #2
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800736a:	e15b      	b.n	8007624 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <HAL_SPI_TransmitReceive+0x82>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <HAL_SPI_TransmitReceive+0x82>
 8007378:	887b      	ldrh	r3, [r7, #2]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007384:	e14e      	b.n	8007624 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b04      	cmp	r3, #4
 8007390:	d003      	beq.n	800739a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2205      	movs	r2, #5
 8007396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	887a      	ldrh	r2, [r7, #2]
 80073aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	887a      	ldrh	r2, [r7, #2]
 80073b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	887a      	ldrh	r2, [r7, #2]
 80073bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	887a      	ldrh	r2, [r7, #2]
 80073c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073da:	2b40      	cmp	r3, #64	; 0x40
 80073dc:	d007      	beq.n	80073ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073f6:	d178      	bne.n	80074ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <HAL_SPI_TransmitReceive+0x10a>
 8007400:	8b7b      	ldrh	r3, [r7, #26]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d166      	bne.n	80074d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	881a      	ldrh	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	1c9a      	adds	r2, r3, #2
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800742a:	e053      	b.n	80074d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b02      	cmp	r3, #2
 8007438:	d11b      	bne.n	8007472 <HAL_SPI_TransmitReceive+0x176>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800743e:	b29b      	uxth	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d016      	beq.n	8007472 <HAL_SPI_TransmitReceive+0x176>
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	2b01      	cmp	r3, #1
 8007448:	d113      	bne.n	8007472 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	881a      	ldrh	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	1c9a      	adds	r2, r3, #2
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b01      	cmp	r3, #1
 800747e:	d119      	bne.n	80074b4 <HAL_SPI_TransmitReceive+0x1b8>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d014      	beq.n	80074b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	b292      	uxth	r2, r2
 8007496:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	1c9a      	adds	r2, r3, #2
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074b0:	2301      	movs	r3, #1
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074b4:	f7fb fd84 	bl	8002fc0 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d807      	bhi.n	80074d4 <HAL_SPI_TransmitReceive+0x1d8>
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	d003      	beq.n	80074d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074d2:	e0a7      	b.n	8007624 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1a6      	bne.n	800742c <HAL_SPI_TransmitReceive+0x130>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1a1      	bne.n	800742c <HAL_SPI_TransmitReceive+0x130>
 80074e8:	e07c      	b.n	80075e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_SPI_TransmitReceive+0x1fc>
 80074f2:	8b7b      	ldrh	r3, [r7, #26]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d16b      	bne.n	80075d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	330c      	adds	r3, #12
 8007502:	7812      	ldrb	r2, [r2, #0]
 8007504:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007514:	b29b      	uxth	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800751e:	e057      	b.n	80075d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d11c      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x26c>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d017      	beq.n	8007568 <HAL_SPI_TransmitReceive+0x26c>
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	2b01      	cmp	r3, #1
 800753c:	d114      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	330c      	adds	r3, #12
 8007548:	7812      	ldrb	r2, [r2, #0]
 800754a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800755a:	b29b      	uxth	r3, r3
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b01      	cmp	r3, #1
 8007574:	d119      	bne.n	80075aa <HAL_SPI_TransmitReceive+0x2ae>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d014      	beq.n	80075aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075a6:	2301      	movs	r3, #1
 80075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075aa:	f7fb fd09 	bl	8002fc0 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d803      	bhi.n	80075c2 <HAL_SPI_TransmitReceive+0x2c6>
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c0:	d102      	bne.n	80075c8 <HAL_SPI_TransmitReceive+0x2cc>
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d103      	bne.n	80075d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075ce:	e029      	b.n	8007624 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1a2      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x224>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d19d      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fa35 	bl	8007a58 <SPI_EndRxTxTransaction>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d006      	beq.n	8007602 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007600:	e010      	b.n	8007624 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10b      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800760a:	2300      	movs	r3, #0
 800760c:	617b      	str	r3, [r7, #20]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	e000      	b.n	8007624 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007622:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007634:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007638:	4618      	mov	r0, r3
 800763a:	3730      	adds	r7, #48	; 0x30
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	099b      	lsrs	r3, r3, #6
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10f      	bne.n	8007684 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	099b      	lsrs	r3, r3, #6
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d004      	beq.n	8007684 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
    return;
 8007682:	e0d7      	b.n	8007834 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	085b      	lsrs	r3, r3, #1
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <HAL_SPI_IRQHandler+0x66>
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	09db      	lsrs	r3, r3, #7
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
    return;
 80076a4:	e0c6      	b.n	8007834 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10c      	bne.n	80076cc <HAL_SPI_IRQHandler+0x8c>
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	099b      	lsrs	r3, r3, #6
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	0a1b      	lsrs	r3, r3, #8
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 80b4 	beq.w	8007834 <HAL_SPI_IRQHandler+0x1f4>
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 80ad 	beq.w	8007834 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	099b      	lsrs	r3, r3, #6
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d023      	beq.n	800772e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d011      	beq.n	8007716 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f6:	f043 0204 	orr.w	r2, r3, #4
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	e00b      	b.n	800772e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	693b      	ldr	r3, [r7, #16]
        return;
 800772c:	e082      	b.n	8007834 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	095b      	lsrs	r3, r3, #5
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d014      	beq.n	8007764 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773e:	f043 0201 	orr.w	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	0a1b      	lsrs	r3, r3, #8
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00c      	beq.n	800778a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007774:	f043 0208 	orr.w	r2, r3, #8
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800777c:	2300      	movs	r3, #0
 800777e:	60bb      	str	r3, [r7, #8]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	60bb      	str	r3, [r7, #8]
 8007788:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778e:	2b00      	cmp	r3, #0
 8007790:	d04f      	beq.n	8007832 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077a0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <HAL_SPI_IRQHandler+0x17e>
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d034      	beq.n	8007828 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0203 	bic.w	r2, r2, #3
 80077cc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d011      	beq.n	80077fa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077da:	4a18      	ldr	r2, [pc, #96]	; (800783c <HAL_SPI_IRQHandler+0x1fc>)
 80077dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fc feaf 	bl	8004546 <HAL_DMA_Abort_IT>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d005      	beq.n	80077fa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d016      	beq.n	8007830 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007806:	4a0d      	ldr	r2, [pc, #52]	; (800783c <HAL_SPI_IRQHandler+0x1fc>)
 8007808:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780e:	4618      	mov	r0, r3
 8007810:	f7fc fe99 	bl	8004546 <HAL_DMA_Abort_IT>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007826:	e003      	b.n	8007830 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f809 	bl	8007840 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800782e:	e000      	b.n	8007832 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007830:	bf00      	nop
    return;
 8007832:	bf00      	nop
  }
}
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	08007855 	.word	0x08007855

08007840 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f7ff ffe6 	bl	8007840 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007874:	bf00      	nop
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	603b      	str	r3, [r7, #0]
 8007888:	4613      	mov	r3, r2
 800788a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800788c:	f7fb fb98 	bl	8002fc0 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	1a9b      	subs	r3, r3, r2
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	4413      	add	r3, r2
 800789a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800789c:	f7fb fb90 	bl	8002fc0 <HAL_GetTick>
 80078a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078a2:	4b39      	ldr	r3, [pc, #228]	; (8007988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	015b      	lsls	r3, r3, #5
 80078a8:	0d1b      	lsrs	r3, r3, #20
 80078aa:	69fa      	ldr	r2, [r7, #28]
 80078ac:	fb02 f303 	mul.w	r3, r2, r3
 80078b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078b2:	e054      	b.n	800795e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	d050      	beq.n	800795e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078bc:	f7fb fb80 	bl	8002fc0 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	69fa      	ldr	r2, [r7, #28]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d902      	bls.n	80078d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d13d      	bne.n	800794e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ea:	d111      	bne.n	8007910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f4:	d004      	beq.n	8007900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078fe:	d107      	bne.n	8007910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800790e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007918:	d10f      	bne.n	800793a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e017      	b.n	800797e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	3b01      	subs	r3, #1
 800795c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4013      	ands	r3, r2
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	429a      	cmp	r2, r3
 800796c:	bf0c      	ite	eq
 800796e:	2301      	moveq	r3, #1
 8007970:	2300      	movne	r3, #0
 8007972:	b2db      	uxtb	r3, r3
 8007974:	461a      	mov	r2, r3
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	429a      	cmp	r2, r3
 800797a:	d19b      	bne.n	80078b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3720      	adds	r7, #32
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000000 	.word	0x20000000

0800798c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af02      	add	r7, sp, #8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079a0:	d111      	bne.n	80079c6 <SPI_EndRxTransaction+0x3a>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079aa:	d004      	beq.n	80079b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b4:	d107      	bne.n	80079c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079ce:	d12a      	bne.n	8007a26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079d8:	d012      	beq.n	8007a00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2200      	movs	r2, #0
 80079e2:	2180      	movs	r1, #128	; 0x80
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f7ff ff49 	bl	800787c <SPI_WaitFlagStateUntilTimeout>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d02d      	beq.n	8007a4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f4:	f043 0220 	orr.w	r2, r3, #32
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e026      	b.n	8007a4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	2101      	movs	r1, #1
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f7ff ff36 	bl	800787c <SPI_WaitFlagStateUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d01a      	beq.n	8007a4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1a:	f043 0220 	orr.w	r2, r3, #32
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e013      	b.n	8007a4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2101      	movs	r1, #1
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f7ff ff23 	bl	800787c <SPI_WaitFlagStateUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d007      	beq.n	8007a4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a40:	f043 0220 	orr.w	r2, r3, #32
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e000      	b.n	8007a4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a64:	4b1b      	ldr	r3, [pc, #108]	; (8007ad4 <SPI_EndRxTxTransaction+0x7c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1b      	ldr	r2, [pc, #108]	; (8007ad8 <SPI_EndRxTxTransaction+0x80>)
 8007a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6e:	0d5b      	lsrs	r3, r3, #21
 8007a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a74:	fb02 f303 	mul.w	r3, r2, r3
 8007a78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a82:	d112      	bne.n	8007aaa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2180      	movs	r1, #128	; 0x80
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff fef4 	bl	800787c <SPI_WaitFlagStateUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d016      	beq.n	8007ac8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9e:	f043 0220 	orr.w	r2, r3, #32
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e00f      	b.n	8007aca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac0:	2b80      	cmp	r3, #128	; 0x80
 8007ac2:	d0f2      	beq.n	8007aaa <SPI_EndRxTxTransaction+0x52>
 8007ac4:	e000      	b.n	8007ac8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007ac6:	bf00      	nop
  }

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000000 	.word	0x20000000
 8007ad8:	165e9f81 	.word	0x165e9f81

08007adc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e041      	b.n	8007b72 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7fa f96a 	bl	8001ddc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f000 fba8 	bl	8008270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d104      	bne.n	8007b9a <HAL_TIM_IC_Start_IT+0x1e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	e013      	b.n	8007bc2 <HAL_TIM_IC_Start_IT+0x46>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d104      	bne.n	8007baa <HAL_TIM_IC_Start_IT+0x2e>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	e00b      	b.n	8007bc2 <HAL_TIM_IC_Start_IT+0x46>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d104      	bne.n	8007bba <HAL_TIM_IC_Start_IT+0x3e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	e003      	b.n	8007bc2 <HAL_TIM_IC_Start_IT+0x46>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d104      	bne.n	8007bd4 <HAL_TIM_IC_Start_IT+0x58>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	e013      	b.n	8007bfc <HAL_TIM_IC_Start_IT+0x80>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d104      	bne.n	8007be4 <HAL_TIM_IC_Start_IT+0x68>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	e00b      	b.n	8007bfc <HAL_TIM_IC_Start_IT+0x80>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d104      	bne.n	8007bf4 <HAL_TIM_IC_Start_IT+0x78>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	e003      	b.n	8007bfc <HAL_TIM_IC_Start_IT+0x80>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d102      	bne.n	8007c0a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c04:	7b7b      	ldrb	r3, [r7, #13]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d001      	beq.n	8007c0e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e0cc      	b.n	8007da8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <HAL_TIM_IC_Start_IT+0xa2>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c1c:	e013      	b.n	8007c46 <HAL_TIM_IC_Start_IT+0xca>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d104      	bne.n	8007c2e <HAL_TIM_IC_Start_IT+0xb2>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c2c:	e00b      	b.n	8007c46 <HAL_TIM_IC_Start_IT+0xca>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d104      	bne.n	8007c3e <HAL_TIM_IC_Start_IT+0xc2>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c3c:	e003      	b.n	8007c46 <HAL_TIM_IC_Start_IT+0xca>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2202      	movs	r2, #2
 8007c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <HAL_TIM_IC_Start_IT+0xda>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c54:	e013      	b.n	8007c7e <HAL_TIM_IC_Start_IT+0x102>
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d104      	bne.n	8007c66 <HAL_TIM_IC_Start_IT+0xea>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c64:	e00b      	b.n	8007c7e <HAL_TIM_IC_Start_IT+0x102>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d104      	bne.n	8007c76 <HAL_TIM_IC_Start_IT+0xfa>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c74:	e003      	b.n	8007c7e <HAL_TIM_IC_Start_IT+0x102>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b0c      	cmp	r3, #12
 8007c82:	d841      	bhi.n	8007d08 <HAL_TIM_IC_Start_IT+0x18c>
 8007c84:	a201      	add	r2, pc, #4	; (adr r2, 8007c8c <HAL_TIM_IC_Start_IT+0x110>)
 8007c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8a:	bf00      	nop
 8007c8c:	08007cc1 	.word	0x08007cc1
 8007c90:	08007d09 	.word	0x08007d09
 8007c94:	08007d09 	.word	0x08007d09
 8007c98:	08007d09 	.word	0x08007d09
 8007c9c:	08007cd3 	.word	0x08007cd3
 8007ca0:	08007d09 	.word	0x08007d09
 8007ca4:	08007d09 	.word	0x08007d09
 8007ca8:	08007d09 	.word	0x08007d09
 8007cac:	08007ce5 	.word	0x08007ce5
 8007cb0:	08007d09 	.word	0x08007d09
 8007cb4:	08007d09 	.word	0x08007d09
 8007cb8:	08007d09 	.word	0x08007d09
 8007cbc:	08007cf7 	.word	0x08007cf7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0202 	orr.w	r2, r2, #2
 8007cce:	60da      	str	r2, [r3, #12]
      break;
 8007cd0:	e01d      	b.n	8007d0e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68da      	ldr	r2, [r3, #12]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f042 0204 	orr.w	r2, r2, #4
 8007ce0:	60da      	str	r2, [r3, #12]
      break;
 8007ce2:	e014      	b.n	8007d0e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0208 	orr.w	r2, r2, #8
 8007cf2:	60da      	str	r2, [r3, #12]
      break;
 8007cf4:	e00b      	b.n	8007d0e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0210 	orr.w	r2, r2, #16
 8007d04:	60da      	str	r2, [r3, #12]
      break;
 8007d06:	e002      	b.n	8007d0e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d148      	bne.n	8007da6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 fd82 	bl	8008826 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a22      	ldr	r2, [pc, #136]	; (8007db0 <HAL_TIM_IC_Start_IT+0x234>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d022      	beq.n	8007d72 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d34:	d01d      	beq.n	8007d72 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1e      	ldr	r2, [pc, #120]	; (8007db4 <HAL_TIM_IC_Start_IT+0x238>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d018      	beq.n	8007d72 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1c      	ldr	r2, [pc, #112]	; (8007db8 <HAL_TIM_IC_Start_IT+0x23c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d013      	beq.n	8007d72 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1b      	ldr	r2, [pc, #108]	; (8007dbc <HAL_TIM_IC_Start_IT+0x240>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00e      	beq.n	8007d72 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a19      	ldr	r2, [pc, #100]	; (8007dc0 <HAL_TIM_IC_Start_IT+0x244>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d009      	beq.n	8007d72 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a18      	ldr	r2, [pc, #96]	; (8007dc4 <HAL_TIM_IC_Start_IT+0x248>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d004      	beq.n	8007d72 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a16      	ldr	r2, [pc, #88]	; (8007dc8 <HAL_TIM_IC_Start_IT+0x24c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d111      	bne.n	8007d96 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b06      	cmp	r3, #6
 8007d82:	d010      	beq.n	8007da6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0201 	orr.w	r2, r2, #1
 8007d92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d94:	e007      	b.n	8007da6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0201 	orr.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	40010000 	.word	0x40010000
 8007db4:	40000400 	.word	0x40000400
 8007db8:	40000800 	.word	0x40000800
 8007dbc:	40000c00 	.word	0x40000c00
 8007dc0:	40010400 	.word	0x40010400
 8007dc4:	40014000 	.word	0x40014000
 8007dc8:	40001800 	.word	0x40001800

08007dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d122      	bne.n	8007e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d11b      	bne.n	8007e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f06f 0202 	mvn.w	r2, #2
 8007df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7f9 fb54 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8007e14:	e005      	b.n	8007e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa0c 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fa13 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d122      	bne.n	8007e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d11b      	bne.n	8007e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f06f 0204 	mvn.w	r2, #4
 8007e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2202      	movs	r2, #2
 8007e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7f9 fb2a 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8007e68:	e005      	b.n	8007e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f9e2 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f9e9 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f003 0308 	and.w	r3, r3, #8
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d122      	bne.n	8007ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d11b      	bne.n	8007ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f06f 0208 	mvn.w	r2, #8
 8007ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2204      	movs	r2, #4
 8007ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7f9 fb00 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8007ebc:	e005      	b.n	8007eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f9b8 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9bf 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f003 0310 	and.w	r3, r3, #16
 8007eda:	2b10      	cmp	r3, #16
 8007edc:	d122      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f003 0310 	and.w	r3, r3, #16
 8007ee8:	2b10      	cmp	r3, #16
 8007eea:	d11b      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f06f 0210 	mvn.w	r2, #16
 8007ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2208      	movs	r2, #8
 8007efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7f9 fad6 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8007f10:	e005      	b.n	8007f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f98e 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f995 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d10e      	bne.n	8007f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d107      	bne.n	8007f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f06f 0201 	mvn.w	r2, #1
 8007f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f968 	bl	8008220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5a:	2b80      	cmp	r3, #128	; 0x80
 8007f5c:	d10e      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f68:	2b80      	cmp	r3, #128	; 0x80
 8007f6a:	d107      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fc84 	bl	8008884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b40      	cmp	r3, #64	; 0x40
 8007f88:	d10e      	bne.n	8007fa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f94:	2b40      	cmp	r3, #64	; 0x40
 8007f96:	d107      	bne.n	8007fa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f95a 	bl	800825c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d10e      	bne.n	8007fd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b20      	cmp	r3, #32
 8007fc2:	d107      	bne.n	8007fd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0220 	mvn.w	r2, #32
 8007fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fc4e 	bl	8008870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d101      	bne.n	8007ffa <HAL_TIM_IC_ConfigChannel+0x1e>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e088      	b.n	800810c <HAL_TIM_IC_ConfigChannel+0x130>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d11b      	bne.n	8008040 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6818      	ldr	r0, [r3, #0]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	6819      	ldr	r1, [r3, #0]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f000 fa5c 	bl	80084d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699a      	ldr	r2, [r3, #24]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 020c 	bic.w	r2, r2, #12
 800802a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6999      	ldr	r1, [r3, #24]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	689a      	ldr	r2, [r3, #8]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	619a      	str	r2, [r3, #24]
 800803e:	e060      	b.n	8008102 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b04      	cmp	r3, #4
 8008044:	d11c      	bne.n	8008080 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6819      	ldr	r1, [r3, #0]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f000 fae0 	bl	800861a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699a      	ldr	r2, [r3, #24]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008068:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6999      	ldr	r1, [r3, #24]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	021a      	lsls	r2, r3, #8
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	619a      	str	r2, [r3, #24]
 800807e:	e040      	b.n	8008102 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b08      	cmp	r3, #8
 8008084:	d11b      	bne.n	80080be <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f000 fb2d 	bl	80086f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	69da      	ldr	r2, [r3, #28]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 020c 	bic.w	r2, r2, #12
 80080a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	69d9      	ldr	r1, [r3, #28]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	61da      	str	r2, [r3, #28]
 80080bc:	e021      	b.n	8008102 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b0c      	cmp	r3, #12
 80080c2:	d11c      	bne.n	80080fe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	6819      	ldr	r1, [r3, #0]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f000 fb4a 	bl	800876c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69da      	ldr	r2, [r3, #28]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80080e6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69d9      	ldr	r1, [r3, #28]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	021a      	lsls	r2, r3, #8
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	61da      	str	r2, [r3, #28]
 80080fc:	e001      	b.n	8008102 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800810a:	7dfb      	ldrb	r3, [r7, #23]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008124:	2b01      	cmp	r3, #1
 8008126:	d101      	bne.n	800812c <HAL_TIM_SlaveConfigSynchro+0x18>
 8008128:	2302      	movs	r3, #2
 800812a:	e031      	b.n	8008190 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f936 	bl	80083b0 <TIM_SlaveTimer_SetConfig>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e018      	b.n	8008190 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800816c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800817c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b0c      	cmp	r3, #12
 80081aa:	d831      	bhi.n	8008210 <HAL_TIM_ReadCapturedValue+0x78>
 80081ac:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	080081e9 	.word	0x080081e9
 80081b8:	08008211 	.word	0x08008211
 80081bc:	08008211 	.word	0x08008211
 80081c0:	08008211 	.word	0x08008211
 80081c4:	080081f3 	.word	0x080081f3
 80081c8:	08008211 	.word	0x08008211
 80081cc:	08008211 	.word	0x08008211
 80081d0:	08008211 	.word	0x08008211
 80081d4:	080081fd 	.word	0x080081fd
 80081d8:	08008211 	.word	0x08008211
 80081dc:	08008211 	.word	0x08008211
 80081e0:	08008211 	.word	0x08008211
 80081e4:	08008207 	.word	0x08008207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ee:	60fb      	str	r3, [r7, #12]

      break;
 80081f0:	e00f      	b.n	8008212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	60fb      	str	r3, [r7, #12]

      break;
 80081fa:	e00a      	b.n	8008212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008202:	60fb      	str	r3, [r7, #12]

      break;
 8008204:	e005      	b.n	8008212 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	60fb      	str	r3, [r7, #12]

      break;
 800820e:	e000      	b.n	8008212 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008210:	bf00      	nop
  }

  return tmpreg;
 8008212:	68fb      	ldr	r3, [r7, #12]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a40      	ldr	r2, [pc, #256]	; (8008384 <TIM_Base_SetConfig+0x114>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d013      	beq.n	80082b0 <TIM_Base_SetConfig+0x40>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828e:	d00f      	beq.n	80082b0 <TIM_Base_SetConfig+0x40>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a3d      	ldr	r2, [pc, #244]	; (8008388 <TIM_Base_SetConfig+0x118>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00b      	beq.n	80082b0 <TIM_Base_SetConfig+0x40>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a3c      	ldr	r2, [pc, #240]	; (800838c <TIM_Base_SetConfig+0x11c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d007      	beq.n	80082b0 <TIM_Base_SetConfig+0x40>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a3b      	ldr	r2, [pc, #236]	; (8008390 <TIM_Base_SetConfig+0x120>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d003      	beq.n	80082b0 <TIM_Base_SetConfig+0x40>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a3a      	ldr	r2, [pc, #232]	; (8008394 <TIM_Base_SetConfig+0x124>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d108      	bne.n	80082c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a2f      	ldr	r2, [pc, #188]	; (8008384 <TIM_Base_SetConfig+0x114>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d02b      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d0:	d027      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a2c      	ldr	r2, [pc, #176]	; (8008388 <TIM_Base_SetConfig+0x118>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d023      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2b      	ldr	r2, [pc, #172]	; (800838c <TIM_Base_SetConfig+0x11c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d01f      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a2a      	ldr	r2, [pc, #168]	; (8008390 <TIM_Base_SetConfig+0x120>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d01b      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a29      	ldr	r2, [pc, #164]	; (8008394 <TIM_Base_SetConfig+0x124>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d017      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a28      	ldr	r2, [pc, #160]	; (8008398 <TIM_Base_SetConfig+0x128>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a27      	ldr	r2, [pc, #156]	; (800839c <TIM_Base_SetConfig+0x12c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00f      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a26      	ldr	r2, [pc, #152]	; (80083a0 <TIM_Base_SetConfig+0x130>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00b      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a25      	ldr	r2, [pc, #148]	; (80083a4 <TIM_Base_SetConfig+0x134>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d007      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a24      	ldr	r2, [pc, #144]	; (80083a8 <TIM_Base_SetConfig+0x138>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d003      	beq.n	8008322 <TIM_Base_SetConfig+0xb2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a23      	ldr	r2, [pc, #140]	; (80083ac <TIM_Base_SetConfig+0x13c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d108      	bne.n	8008334 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a0a      	ldr	r2, [pc, #40]	; (8008384 <TIM_Base_SetConfig+0x114>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d003      	beq.n	8008368 <TIM_Base_SetConfig+0xf8>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a0c      	ldr	r2, [pc, #48]	; (8008394 <TIM_Base_SetConfig+0x124>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d103      	bne.n	8008370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	615a      	str	r2, [r3, #20]
}
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	40010000 	.word	0x40010000
 8008388:	40000400 	.word	0x40000400
 800838c:	40000800 	.word	0x40000800
 8008390:	40000c00 	.word	0x40000c00
 8008394:	40010400 	.word	0x40010400
 8008398:	40014000 	.word	0x40014000
 800839c:	40014400 	.word	0x40014400
 80083a0:	40014800 	.word	0x40014800
 80083a4:	40001800 	.word	0x40001800
 80083a8:	40001c00 	.word	0x40001c00
 80083ac:	40002000 	.word	0x40002000

080083b0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083cc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f023 0307 	bic.w	r3, r3, #7
 80083de:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2b70      	cmp	r3, #112	; 0x70
 80083f8:	d01a      	beq.n	8008430 <TIM_SlaveTimer_SetConfig+0x80>
 80083fa:	2b70      	cmp	r3, #112	; 0x70
 80083fc:	d860      	bhi.n	80084c0 <TIM_SlaveTimer_SetConfig+0x110>
 80083fe:	2b60      	cmp	r3, #96	; 0x60
 8008400:	d054      	beq.n	80084ac <TIM_SlaveTimer_SetConfig+0xfc>
 8008402:	2b60      	cmp	r3, #96	; 0x60
 8008404:	d85c      	bhi.n	80084c0 <TIM_SlaveTimer_SetConfig+0x110>
 8008406:	2b50      	cmp	r3, #80	; 0x50
 8008408:	d046      	beq.n	8008498 <TIM_SlaveTimer_SetConfig+0xe8>
 800840a:	2b50      	cmp	r3, #80	; 0x50
 800840c:	d858      	bhi.n	80084c0 <TIM_SlaveTimer_SetConfig+0x110>
 800840e:	2b40      	cmp	r3, #64	; 0x40
 8008410:	d019      	beq.n	8008446 <TIM_SlaveTimer_SetConfig+0x96>
 8008412:	2b40      	cmp	r3, #64	; 0x40
 8008414:	d854      	bhi.n	80084c0 <TIM_SlaveTimer_SetConfig+0x110>
 8008416:	2b30      	cmp	r3, #48	; 0x30
 8008418:	d055      	beq.n	80084c6 <TIM_SlaveTimer_SetConfig+0x116>
 800841a:	2b30      	cmp	r3, #48	; 0x30
 800841c:	d850      	bhi.n	80084c0 <TIM_SlaveTimer_SetConfig+0x110>
 800841e:	2b20      	cmp	r3, #32
 8008420:	d051      	beq.n	80084c6 <TIM_SlaveTimer_SetConfig+0x116>
 8008422:	2b20      	cmp	r3, #32
 8008424:	d84c      	bhi.n	80084c0 <TIM_SlaveTimer_SetConfig+0x110>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d04d      	beq.n	80084c6 <TIM_SlaveTimer_SetConfig+0x116>
 800842a:	2b10      	cmp	r3, #16
 800842c:	d04b      	beq.n	80084c6 <TIM_SlaveTimer_SetConfig+0x116>
 800842e:	e047      	b.n	80084c0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6818      	ldr	r0, [r3, #0]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68d9      	ldr	r1, [r3, #12]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f000 f9d1 	bl	80087e6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008444:	e040      	b.n	80084c8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b05      	cmp	r3, #5
 800844c:	d101      	bne.n	8008452 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e03b      	b.n	80084ca <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6a1a      	ldr	r2, [r3, #32]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0201 	bic.w	r2, r2, #1
 8008468:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008478:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	4313      	orrs	r3, r2
 8008484:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	621a      	str	r2, [r3, #32]
      break;
 8008496:	e017      	b.n	80084c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	6899      	ldr	r1, [r3, #8]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	461a      	mov	r2, r3
 80084a6:	f000 f889 	bl	80085bc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80084aa:	e00d      	b.n	80084c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	6899      	ldr	r1, [r3, #8]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	461a      	mov	r2, r3
 80084ba:	f000 f8eb 	bl	8008694 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80084be:	e003      	b.n	80084c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	75fb      	strb	r3, [r7, #23]
      break;
 80084c4:	e000      	b.n	80084c8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80084c6:	bf00      	nop
  }

  return status;
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	f023 0201 	bic.w	r2, r3, #1
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4a28      	ldr	r2, [pc, #160]	; (80085a0 <TIM_TI1_SetConfig+0xcc>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01b      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008508:	d017      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4a25      	ldr	r2, [pc, #148]	; (80085a4 <TIM_TI1_SetConfig+0xd0>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4a24      	ldr	r2, [pc, #144]	; (80085a8 <TIM_TI1_SetConfig+0xd4>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00f      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4a23      	ldr	r2, [pc, #140]	; (80085ac <TIM_TI1_SetConfig+0xd8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00b      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4a22      	ldr	r2, [pc, #136]	; (80085b0 <TIM_TI1_SetConfig+0xdc>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d007      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4a21      	ldr	r2, [pc, #132]	; (80085b4 <TIM_TI1_SetConfig+0xe0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <TIM_TI1_SetConfig+0xe4>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d101      	bne.n	800853e <TIM_TI1_SetConfig+0x6a>
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <TIM_TI1_SetConfig+0x6c>
 800853e:	2300      	movs	r3, #0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d008      	beq.n	8008556 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4313      	orrs	r3, r2
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	e003      	b.n	800855e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f043 0301 	orr.w	r3, r3, #1
 800855c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	b2db      	uxtb	r3, r3
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	4313      	orrs	r3, r2
 8008570:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f023 030a 	bic.w	r3, r3, #10
 8008578:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f003 030a 	and.w	r3, r3, #10
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	621a      	str	r2, [r3, #32]
}
 8008592:	bf00      	nop
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	40010000 	.word	0x40010000
 80085a4:	40000400 	.word	0x40000400
 80085a8:	40000800 	.word	0x40000800
 80085ac:	40000c00 	.word	0x40000c00
 80085b0:	40010400 	.word	0x40010400
 80085b4:	40014000 	.word	0x40014000
 80085b8:	40001800 	.word	0x40001800

080085bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	f023 0201 	bic.w	r2, r3, #1
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f023 030a 	bic.w	r3, r3, #10
 80085f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800861a:	b480      	push	{r7}
 800861c:	b087      	sub	sp, #28
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	f023 0210 	bic.w	r2, r3, #16
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008646:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	021b      	lsls	r3, r3, #8
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008658:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	031b      	lsls	r3, r3, #12
 800865e:	b29b      	uxth	r3, r3
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800866c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	011b      	lsls	r3, r3, #4
 8008672:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	621a      	str	r2, [r3, #32]
}
 8008688:	bf00      	nop
 800868a:	371c      	adds	r7, #28
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	f023 0210 	bic.w	r2, r3, #16
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	031b      	lsls	r3, r3, #12
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	4313      	orrs	r3, r2
 80086da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	621a      	str	r2, [r3, #32]
}
 80086e8:	bf00      	nop
 80086ea:	371c      	adds	r7, #28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f023 0303 	bic.w	r3, r3, #3
 8008720:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008730:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	011b      	lsls	r3, r3, #4
 8008736:	b2db      	uxtb	r3, r3
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	4313      	orrs	r3, r2
 800873c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008744:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	4313      	orrs	r3, r2
 8008752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	621a      	str	r2, [r3, #32]
}
 8008760:	bf00      	nop
 8008762:	371c      	adds	r7, #28
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008798:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	021b      	lsls	r3, r3, #8
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	031b      	lsls	r3, r3, #12
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80087be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	031b      	lsls	r3, r3, #12
 80087c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	621a      	str	r2, [r3, #32]
}
 80087da:	bf00      	nop
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b087      	sub	sp, #28
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	60b9      	str	r1, [r7, #8]
 80087f0:	607a      	str	r2, [r7, #4]
 80087f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008800:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	021a      	lsls	r2, r3, #8
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	431a      	orrs	r2, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	4313      	orrs	r3, r2
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	4313      	orrs	r3, r2
 8008812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	609a      	str	r2, [r3, #8]
}
 800881a:	bf00      	nop
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008826:	b480      	push	{r7}
 8008828:	b087      	sub	sp, #28
 800882a:	af00      	add	r7, sp, #0
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f003 031f 	and.w	r3, r3, #31
 8008838:	2201      	movs	r2, #1
 800883a:	fa02 f303 	lsl.w	r3, r2, r3
 800883e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a1a      	ldr	r2, [r3, #32]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	43db      	mvns	r3, r3
 8008848:	401a      	ands	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a1a      	ldr	r2, [r3, #32]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	fa01 f303 	lsl.w	r3, r1, r3
 800885e:	431a      	orrs	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	621a      	str	r2, [r3, #32]
}
 8008864:	bf00      	nop
 8008866:	371c      	adds	r7, #28
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e03f      	b.n	800892a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7f9 fc9e 	bl	8002200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2224      	movs	r2, #36	; 0x24
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f929 	bl	8008b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	695a      	ldr	r2, [r3, #20]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2220      	movs	r2, #32
 8008924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b08a      	sub	sp, #40	; 0x28
 8008936:	af02      	add	r7, sp, #8
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	603b      	str	r3, [r7, #0]
 800893e:	4613      	mov	r3, r2
 8008940:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b20      	cmp	r3, #32
 8008950:	d17c      	bne.n	8008a4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <HAL_UART_Transmit+0x2c>
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e075      	b.n	8008a4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008968:	2b01      	cmp	r3, #1
 800896a:	d101      	bne.n	8008970 <HAL_UART_Transmit+0x3e>
 800896c:	2302      	movs	r3, #2
 800896e:	e06e      	b.n	8008a4e <HAL_UART_Transmit+0x11c>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2221      	movs	r2, #33	; 0x21
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008986:	f7fa fb1b 	bl	8002fc0 <HAL_GetTick>
 800898a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	88fa      	ldrh	r2, [r7, #6]
 8008996:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089a0:	d108      	bne.n	80089b4 <HAL_UART_Transmit+0x82>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d104      	bne.n	80089b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	e003      	b.n	80089bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80089c4:	e02a      	b.n	8008a1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2200      	movs	r2, #0
 80089ce:	2180      	movs	r1, #128	; 0x80
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 f840 	bl	8008a56 <UART_WaitOnFlagUntilTimeout>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e036      	b.n	8008a4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10b      	bne.n	80089fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	3302      	adds	r3, #2
 80089fa:	61bb      	str	r3, [r7, #24]
 80089fc:	e007      	b.n	8008a0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	781a      	ldrb	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1cf      	bne.n	80089c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2140      	movs	r1, #64	; 0x40
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 f810 	bl	8008a56 <UART_WaitOnFlagUntilTimeout>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e006      	b.n	8008a4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e000      	b.n	8008a4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008a4c:	2302      	movs	r3, #2
  }
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b090      	sub	sp, #64	; 0x40
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	603b      	str	r3, [r7, #0]
 8008a62:	4613      	mov	r3, r2
 8008a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a66:	e050      	b.n	8008b0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d04c      	beq.n	8008b0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d007      	beq.n	8008a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a76:	f7fa faa3 	bl	8002fc0 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d241      	bcs.n	8008b0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	330c      	adds	r3, #12
 8008a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	330c      	adds	r3, #12
 8008aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008aa6:	637a      	str	r2, [r7, #52]	; 0x34
 8008aa8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e5      	bne.n	8008a86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3314      	adds	r3, #20
 8008ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f023 0301 	bic.w	r3, r3, #1
 8008ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3314      	adds	r3, #20
 8008ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ada:	623a      	str	r2, [r7, #32]
 8008adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	69f9      	ldr	r1, [r7, #28]
 8008ae0:	6a3a      	ldr	r2, [r7, #32]
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e5      	bne.n	8008aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e00f      	b.n	8008b2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	4013      	ands	r3, r2
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	bf0c      	ite	eq
 8008b1a:	2301      	moveq	r3, #1
 8008b1c:	2300      	movne	r3, #0
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	461a      	mov	r2, r3
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d09f      	beq.n	8008a68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3740      	adds	r7, #64	; 0x40
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b38:	b0c0      	sub	sp, #256	; 0x100
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b50:	68d9      	ldr	r1, [r3, #12]
 8008b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	ea40 0301 	orr.w	r3, r0, r1
 8008b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b8c:	f021 010c 	bic.w	r1, r1, #12
 8008b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bae:	6999      	ldr	r1, [r3, #24]
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	ea40 0301 	orr.w	r3, r0, r1
 8008bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b8f      	ldr	r3, [pc, #572]	; (8008e00 <UART_SetConfig+0x2cc>)
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d005      	beq.n	8008bd4 <UART_SetConfig+0xa0>
 8008bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	4b8d      	ldr	r3, [pc, #564]	; (8008e04 <UART_SetConfig+0x2d0>)
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d104      	bne.n	8008bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bd4:	f7fe f8a8 	bl	8006d28 <HAL_RCC_GetPCLK2Freq>
 8008bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bdc:	e003      	b.n	8008be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bde:	f7fe f88f 	bl	8006d00 <HAL_RCC_GetPCLK1Freq>
 8008be2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bf0:	f040 810c 	bne.w	8008e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c06:	4622      	mov	r2, r4
 8008c08:	462b      	mov	r3, r5
 8008c0a:	1891      	adds	r1, r2, r2
 8008c0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c0e:	415b      	adcs	r3, r3
 8008c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c16:	4621      	mov	r1, r4
 8008c18:	eb12 0801 	adds.w	r8, r2, r1
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	eb43 0901 	adc.w	r9, r3, r1
 8008c22:	f04f 0200 	mov.w	r2, #0
 8008c26:	f04f 0300 	mov.w	r3, #0
 8008c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c36:	4690      	mov	r8, r2
 8008c38:	4699      	mov	r9, r3
 8008c3a:	4623      	mov	r3, r4
 8008c3c:	eb18 0303 	adds.w	r3, r8, r3
 8008c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c44:	462b      	mov	r3, r5
 8008c46:	eb49 0303 	adc.w	r3, r9, r3
 8008c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c62:	460b      	mov	r3, r1
 8008c64:	18db      	adds	r3, r3, r3
 8008c66:	653b      	str	r3, [r7, #80]	; 0x50
 8008c68:	4613      	mov	r3, r2
 8008c6a:	eb42 0303 	adc.w	r3, r2, r3
 8008c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c78:	f7f7 ffb6 	bl	8000be8 <__aeabi_uldivmod>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4b61      	ldr	r3, [pc, #388]	; (8008e08 <UART_SetConfig+0x2d4>)
 8008c82:	fba3 2302 	umull	r2, r3, r3, r2
 8008c86:	095b      	lsrs	r3, r3, #5
 8008c88:	011c      	lsls	r4, r3, #4
 8008c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c9c:	4642      	mov	r2, r8
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	1891      	adds	r1, r2, r2
 8008ca2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ca4:	415b      	adcs	r3, r3
 8008ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008cac:	4641      	mov	r1, r8
 8008cae:	eb12 0a01 	adds.w	sl, r2, r1
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8008cb8:	f04f 0200 	mov.w	r2, #0
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ccc:	4692      	mov	sl, r2
 8008cce:	469b      	mov	fp, r3
 8008cd0:	4643      	mov	r3, r8
 8008cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8008cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cda:	464b      	mov	r3, r9
 8008cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8008ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	18db      	adds	r3, r3, r3
 8008cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8008cfe:	4613      	mov	r3, r2
 8008d00:	eb42 0303 	adc.w	r3, r2, r3
 8008d04:	647b      	str	r3, [r7, #68]	; 0x44
 8008d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d0e:	f7f7 ff6b 	bl	8000be8 <__aeabi_uldivmod>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4611      	mov	r1, r2
 8008d18:	4b3b      	ldr	r3, [pc, #236]	; (8008e08 <UART_SetConfig+0x2d4>)
 8008d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8008d1e:	095b      	lsrs	r3, r3, #5
 8008d20:	2264      	movs	r2, #100	; 0x64
 8008d22:	fb02 f303 	mul.w	r3, r2, r3
 8008d26:	1acb      	subs	r3, r1, r3
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d2e:	4b36      	ldr	r3, [pc, #216]	; (8008e08 <UART_SetConfig+0x2d4>)
 8008d30:	fba3 2302 	umull	r2, r3, r3, r2
 8008d34:	095b      	lsrs	r3, r3, #5
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d3c:	441c      	add	r4, r3
 8008d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d50:	4642      	mov	r2, r8
 8008d52:	464b      	mov	r3, r9
 8008d54:	1891      	adds	r1, r2, r2
 8008d56:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d58:	415b      	adcs	r3, r3
 8008d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d60:	4641      	mov	r1, r8
 8008d62:	1851      	adds	r1, r2, r1
 8008d64:	6339      	str	r1, [r7, #48]	; 0x30
 8008d66:	4649      	mov	r1, r9
 8008d68:	414b      	adcs	r3, r1
 8008d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d78:	4659      	mov	r1, fp
 8008d7a:	00cb      	lsls	r3, r1, #3
 8008d7c:	4651      	mov	r1, sl
 8008d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d82:	4651      	mov	r1, sl
 8008d84:	00ca      	lsls	r2, r1, #3
 8008d86:	4610      	mov	r0, r2
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	4642      	mov	r2, r8
 8008d8e:	189b      	adds	r3, r3, r2
 8008d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d94:	464b      	mov	r3, r9
 8008d96:	460a      	mov	r2, r1
 8008d98:	eb42 0303 	adc.w	r3, r2, r3
 8008d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008dac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008db4:	460b      	mov	r3, r1
 8008db6:	18db      	adds	r3, r3, r3
 8008db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dba:	4613      	mov	r3, r2
 8008dbc:	eb42 0303 	adc.w	r3, r2, r3
 8008dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008dca:	f7f7 ff0d 	bl	8000be8 <__aeabi_uldivmod>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <UART_SetConfig+0x2d4>)
 8008dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8008dd8:	095b      	lsrs	r3, r3, #5
 8008dda:	2164      	movs	r1, #100	; 0x64
 8008ddc:	fb01 f303 	mul.w	r3, r1, r3
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	3332      	adds	r3, #50	; 0x32
 8008de6:	4a08      	ldr	r2, [pc, #32]	; (8008e08 <UART_SetConfig+0x2d4>)
 8008de8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dec:	095b      	lsrs	r3, r3, #5
 8008dee:	f003 0207 	and.w	r2, r3, #7
 8008df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4422      	add	r2, r4
 8008dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008dfc:	e105      	b.n	800900a <UART_SetConfig+0x4d6>
 8008dfe:	bf00      	nop
 8008e00:	40011000 	.word	0x40011000
 8008e04:	40011400 	.word	0x40011400
 8008e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e10:	2200      	movs	r2, #0
 8008e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e1e:	4642      	mov	r2, r8
 8008e20:	464b      	mov	r3, r9
 8008e22:	1891      	adds	r1, r2, r2
 8008e24:	6239      	str	r1, [r7, #32]
 8008e26:	415b      	adcs	r3, r3
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e2e:	4641      	mov	r1, r8
 8008e30:	1854      	adds	r4, r2, r1
 8008e32:	4649      	mov	r1, r9
 8008e34:	eb43 0501 	adc.w	r5, r3, r1
 8008e38:	f04f 0200 	mov.w	r2, #0
 8008e3c:	f04f 0300 	mov.w	r3, #0
 8008e40:	00eb      	lsls	r3, r5, #3
 8008e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e46:	00e2      	lsls	r2, r4, #3
 8008e48:	4614      	mov	r4, r2
 8008e4a:	461d      	mov	r5, r3
 8008e4c:	4643      	mov	r3, r8
 8008e4e:	18e3      	adds	r3, r4, r3
 8008e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e54:	464b      	mov	r3, r9
 8008e56:	eb45 0303 	adc.w	r3, r5, r3
 8008e5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	008b      	lsls	r3, r1, #2
 8008e7e:	4621      	mov	r1, r4
 8008e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e84:	4621      	mov	r1, r4
 8008e86:	008a      	lsls	r2, r1, #2
 8008e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e8c:	f7f7 feac 	bl	8000be8 <__aeabi_uldivmod>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4b60      	ldr	r3, [pc, #384]	; (8009018 <UART_SetConfig+0x4e4>)
 8008e96:	fba3 2302 	umull	r2, r3, r3, r2
 8008e9a:	095b      	lsrs	r3, r3, #5
 8008e9c:	011c      	lsls	r4, r3, #4
 8008e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ea8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	1891      	adds	r1, r2, r2
 8008eb6:	61b9      	str	r1, [r7, #24]
 8008eb8:	415b      	adcs	r3, r3
 8008eba:	61fb      	str	r3, [r7, #28]
 8008ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	1851      	adds	r1, r2, r1
 8008ec4:	6139      	str	r1, [r7, #16]
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	414b      	adcs	r3, r1
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	f04f 0200 	mov.w	r2, #0
 8008ed0:	f04f 0300 	mov.w	r3, #0
 8008ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ed8:	4659      	mov	r1, fp
 8008eda:	00cb      	lsls	r3, r1, #3
 8008edc:	4651      	mov	r1, sl
 8008ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ee2:	4651      	mov	r1, sl
 8008ee4:	00ca      	lsls	r2, r1, #3
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4603      	mov	r3, r0
 8008eec:	4642      	mov	r2, r8
 8008eee:	189b      	adds	r3, r3, r2
 8008ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ef4:	464b      	mov	r3, r9
 8008ef6:	460a      	mov	r2, r1
 8008ef8:	eb42 0303 	adc.w	r3, r2, r3
 8008efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	f04f 0300 	mov.w	r3, #0
 8008f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f18:	4649      	mov	r1, r9
 8008f1a:	008b      	lsls	r3, r1, #2
 8008f1c:	4641      	mov	r1, r8
 8008f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f22:	4641      	mov	r1, r8
 8008f24:	008a      	lsls	r2, r1, #2
 8008f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f2a:	f7f7 fe5d 	bl	8000be8 <__aeabi_uldivmod>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4b39      	ldr	r3, [pc, #228]	; (8009018 <UART_SetConfig+0x4e4>)
 8008f34:	fba3 1302 	umull	r1, r3, r3, r2
 8008f38:	095b      	lsrs	r3, r3, #5
 8008f3a:	2164      	movs	r1, #100	; 0x64
 8008f3c:	fb01 f303 	mul.w	r3, r1, r3
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	3332      	adds	r3, #50	; 0x32
 8008f46:	4a34      	ldr	r2, [pc, #208]	; (8009018 <UART_SetConfig+0x4e4>)
 8008f48:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4c:	095b      	lsrs	r3, r3, #5
 8008f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f52:	441c      	add	r4, r3
 8008f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f58:	2200      	movs	r2, #0
 8008f5a:	673b      	str	r3, [r7, #112]	; 0x70
 8008f5c:	677a      	str	r2, [r7, #116]	; 0x74
 8008f5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f62:	4642      	mov	r2, r8
 8008f64:	464b      	mov	r3, r9
 8008f66:	1891      	adds	r1, r2, r2
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	415b      	adcs	r3, r3
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f72:	4641      	mov	r1, r8
 8008f74:	1851      	adds	r1, r2, r1
 8008f76:	6039      	str	r1, [r7, #0]
 8008f78:	4649      	mov	r1, r9
 8008f7a:	414b      	adcs	r3, r1
 8008f7c:	607b      	str	r3, [r7, #4]
 8008f7e:	f04f 0200 	mov.w	r2, #0
 8008f82:	f04f 0300 	mov.w	r3, #0
 8008f86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f8a:	4659      	mov	r1, fp
 8008f8c:	00cb      	lsls	r3, r1, #3
 8008f8e:	4651      	mov	r1, sl
 8008f90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f94:	4651      	mov	r1, sl
 8008f96:	00ca      	lsls	r2, r1, #3
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	4642      	mov	r2, r8
 8008fa0:	189b      	adds	r3, r3, r2
 8008fa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fa4:	464b      	mov	r3, r9
 8008fa6:	460a      	mov	r2, r1
 8008fa8:	eb42 0303 	adc.w	r3, r2, r3
 8008fac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8008fb8:	667a      	str	r2, [r7, #100]	; 0x64
 8008fba:	f04f 0200 	mov.w	r2, #0
 8008fbe:	f04f 0300 	mov.w	r3, #0
 8008fc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	008b      	lsls	r3, r1, #2
 8008fca:	4641      	mov	r1, r8
 8008fcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	008a      	lsls	r2, r1, #2
 8008fd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fd8:	f7f7 fe06 	bl	8000be8 <__aeabi_uldivmod>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <UART_SetConfig+0x4e4>)
 8008fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8008fe6:	095b      	lsrs	r3, r3, #5
 8008fe8:	2164      	movs	r1, #100	; 0x64
 8008fea:	fb01 f303 	mul.w	r3, r1, r3
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	011b      	lsls	r3, r3, #4
 8008ff2:	3332      	adds	r3, #50	; 0x32
 8008ff4:	4a08      	ldr	r2, [pc, #32]	; (8009018 <UART_SetConfig+0x4e4>)
 8008ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffa:	095b      	lsrs	r3, r3, #5
 8008ffc:	f003 020f 	and.w	r2, r3, #15
 8009000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4422      	add	r2, r4
 8009008:	609a      	str	r2, [r3, #8]
}
 800900a:	bf00      	nop
 800900c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009010:	46bd      	mov	sp, r7
 8009012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009016:	bf00      	nop
 8009018:	51eb851f 	.word	0x51eb851f

0800901c <__errno>:
 800901c:	4b01      	ldr	r3, [pc, #4]	; (8009024 <__errno+0x8>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	2000000c 	.word	0x2000000c

08009028 <__libc_init_array>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	4d0d      	ldr	r5, [pc, #52]	; (8009060 <__libc_init_array+0x38>)
 800902c:	4c0d      	ldr	r4, [pc, #52]	; (8009064 <__libc_init_array+0x3c>)
 800902e:	1b64      	subs	r4, r4, r5
 8009030:	10a4      	asrs	r4, r4, #2
 8009032:	2600      	movs	r6, #0
 8009034:	42a6      	cmp	r6, r4
 8009036:	d109      	bne.n	800904c <__libc_init_array+0x24>
 8009038:	4d0b      	ldr	r5, [pc, #44]	; (8009068 <__libc_init_array+0x40>)
 800903a:	4c0c      	ldr	r4, [pc, #48]	; (800906c <__libc_init_array+0x44>)
 800903c:	f002 ff0a 	bl	800be54 <_init>
 8009040:	1b64      	subs	r4, r4, r5
 8009042:	10a4      	asrs	r4, r4, #2
 8009044:	2600      	movs	r6, #0
 8009046:	42a6      	cmp	r6, r4
 8009048:	d105      	bne.n	8009056 <__libc_init_array+0x2e>
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009050:	4798      	blx	r3
 8009052:	3601      	adds	r6, #1
 8009054:	e7ee      	b.n	8009034 <__libc_init_array+0xc>
 8009056:	f855 3b04 	ldr.w	r3, [r5], #4
 800905a:	4798      	blx	r3
 800905c:	3601      	adds	r6, #1
 800905e:	e7f2      	b.n	8009046 <__libc_init_array+0x1e>
 8009060:	0800c3c4 	.word	0x0800c3c4
 8009064:	0800c3c4 	.word	0x0800c3c4
 8009068:	0800c3c4 	.word	0x0800c3c4
 800906c:	0800c3c8 	.word	0x0800c3c8

08009070 <malloc>:
 8009070:	4b02      	ldr	r3, [pc, #8]	; (800907c <malloc+0xc>)
 8009072:	4601      	mov	r1, r0
 8009074:	6818      	ldr	r0, [r3, #0]
 8009076:	f000 b885 	b.w	8009184 <_malloc_r>
 800907a:	bf00      	nop
 800907c:	2000000c 	.word	0x2000000c

08009080 <memcpy>:
 8009080:	440a      	add	r2, r1
 8009082:	4291      	cmp	r1, r2
 8009084:	f100 33ff 	add.w	r3, r0, #4294967295
 8009088:	d100      	bne.n	800908c <memcpy+0xc>
 800908a:	4770      	bx	lr
 800908c:	b510      	push	{r4, lr}
 800908e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009096:	4291      	cmp	r1, r2
 8009098:	d1f9      	bne.n	800908e <memcpy+0xe>
 800909a:	bd10      	pop	{r4, pc}

0800909c <memset>:
 800909c:	4402      	add	r2, r0
 800909e:	4603      	mov	r3, r0
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d100      	bne.n	80090a6 <memset+0xa>
 80090a4:	4770      	bx	lr
 80090a6:	f803 1b01 	strb.w	r1, [r3], #1
 80090aa:	e7f9      	b.n	80090a0 <memset+0x4>

080090ac <_free_r>:
 80090ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090ae:	2900      	cmp	r1, #0
 80090b0:	d044      	beq.n	800913c <_free_r+0x90>
 80090b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b6:	9001      	str	r0, [sp, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f1a1 0404 	sub.w	r4, r1, #4
 80090be:	bfb8      	it	lt
 80090c0:	18e4      	addlt	r4, r4, r3
 80090c2:	f001 fbf3 	bl	800a8ac <__malloc_lock>
 80090c6:	4a1e      	ldr	r2, [pc, #120]	; (8009140 <_free_r+0x94>)
 80090c8:	9801      	ldr	r0, [sp, #4]
 80090ca:	6813      	ldr	r3, [r2, #0]
 80090cc:	b933      	cbnz	r3, 80090dc <_free_r+0x30>
 80090ce:	6063      	str	r3, [r4, #4]
 80090d0:	6014      	str	r4, [r2, #0]
 80090d2:	b003      	add	sp, #12
 80090d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090d8:	f001 bbee 	b.w	800a8b8 <__malloc_unlock>
 80090dc:	42a3      	cmp	r3, r4
 80090de:	d908      	bls.n	80090f2 <_free_r+0x46>
 80090e0:	6825      	ldr	r5, [r4, #0]
 80090e2:	1961      	adds	r1, r4, r5
 80090e4:	428b      	cmp	r3, r1
 80090e6:	bf01      	itttt	eq
 80090e8:	6819      	ldreq	r1, [r3, #0]
 80090ea:	685b      	ldreq	r3, [r3, #4]
 80090ec:	1949      	addeq	r1, r1, r5
 80090ee:	6021      	streq	r1, [r4, #0]
 80090f0:	e7ed      	b.n	80090ce <_free_r+0x22>
 80090f2:	461a      	mov	r2, r3
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	b10b      	cbz	r3, 80090fc <_free_r+0x50>
 80090f8:	42a3      	cmp	r3, r4
 80090fa:	d9fa      	bls.n	80090f2 <_free_r+0x46>
 80090fc:	6811      	ldr	r1, [r2, #0]
 80090fe:	1855      	adds	r5, r2, r1
 8009100:	42a5      	cmp	r5, r4
 8009102:	d10b      	bne.n	800911c <_free_r+0x70>
 8009104:	6824      	ldr	r4, [r4, #0]
 8009106:	4421      	add	r1, r4
 8009108:	1854      	adds	r4, r2, r1
 800910a:	42a3      	cmp	r3, r4
 800910c:	6011      	str	r1, [r2, #0]
 800910e:	d1e0      	bne.n	80090d2 <_free_r+0x26>
 8009110:	681c      	ldr	r4, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	6053      	str	r3, [r2, #4]
 8009116:	4421      	add	r1, r4
 8009118:	6011      	str	r1, [r2, #0]
 800911a:	e7da      	b.n	80090d2 <_free_r+0x26>
 800911c:	d902      	bls.n	8009124 <_free_r+0x78>
 800911e:	230c      	movs	r3, #12
 8009120:	6003      	str	r3, [r0, #0]
 8009122:	e7d6      	b.n	80090d2 <_free_r+0x26>
 8009124:	6825      	ldr	r5, [r4, #0]
 8009126:	1961      	adds	r1, r4, r5
 8009128:	428b      	cmp	r3, r1
 800912a:	bf04      	itt	eq
 800912c:	6819      	ldreq	r1, [r3, #0]
 800912e:	685b      	ldreq	r3, [r3, #4]
 8009130:	6063      	str	r3, [r4, #4]
 8009132:	bf04      	itt	eq
 8009134:	1949      	addeq	r1, r1, r5
 8009136:	6021      	streq	r1, [r4, #0]
 8009138:	6054      	str	r4, [r2, #4]
 800913a:	e7ca      	b.n	80090d2 <_free_r+0x26>
 800913c:	b003      	add	sp, #12
 800913e:	bd30      	pop	{r4, r5, pc}
 8009140:	20000518 	.word	0x20000518

08009144 <sbrk_aligned>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4e0e      	ldr	r6, [pc, #56]	; (8009180 <sbrk_aligned+0x3c>)
 8009148:	460c      	mov	r4, r1
 800914a:	6831      	ldr	r1, [r6, #0]
 800914c:	4605      	mov	r5, r0
 800914e:	b911      	cbnz	r1, 8009156 <sbrk_aligned+0x12>
 8009150:	f000 fcf6 	bl	8009b40 <_sbrk_r>
 8009154:	6030      	str	r0, [r6, #0]
 8009156:	4621      	mov	r1, r4
 8009158:	4628      	mov	r0, r5
 800915a:	f000 fcf1 	bl	8009b40 <_sbrk_r>
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	d00a      	beq.n	8009178 <sbrk_aligned+0x34>
 8009162:	1cc4      	adds	r4, r0, #3
 8009164:	f024 0403 	bic.w	r4, r4, #3
 8009168:	42a0      	cmp	r0, r4
 800916a:	d007      	beq.n	800917c <sbrk_aligned+0x38>
 800916c:	1a21      	subs	r1, r4, r0
 800916e:	4628      	mov	r0, r5
 8009170:	f000 fce6 	bl	8009b40 <_sbrk_r>
 8009174:	3001      	adds	r0, #1
 8009176:	d101      	bne.n	800917c <sbrk_aligned+0x38>
 8009178:	f04f 34ff 	mov.w	r4, #4294967295
 800917c:	4620      	mov	r0, r4
 800917e:	bd70      	pop	{r4, r5, r6, pc}
 8009180:	2000051c 	.word	0x2000051c

08009184 <_malloc_r>:
 8009184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009188:	1ccd      	adds	r5, r1, #3
 800918a:	f025 0503 	bic.w	r5, r5, #3
 800918e:	3508      	adds	r5, #8
 8009190:	2d0c      	cmp	r5, #12
 8009192:	bf38      	it	cc
 8009194:	250c      	movcc	r5, #12
 8009196:	2d00      	cmp	r5, #0
 8009198:	4607      	mov	r7, r0
 800919a:	db01      	blt.n	80091a0 <_malloc_r+0x1c>
 800919c:	42a9      	cmp	r1, r5
 800919e:	d905      	bls.n	80091ac <_malloc_r+0x28>
 80091a0:	230c      	movs	r3, #12
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	2600      	movs	r6, #0
 80091a6:	4630      	mov	r0, r6
 80091a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ac:	4e2e      	ldr	r6, [pc, #184]	; (8009268 <_malloc_r+0xe4>)
 80091ae:	f001 fb7d 	bl	800a8ac <__malloc_lock>
 80091b2:	6833      	ldr	r3, [r6, #0]
 80091b4:	461c      	mov	r4, r3
 80091b6:	bb34      	cbnz	r4, 8009206 <_malloc_r+0x82>
 80091b8:	4629      	mov	r1, r5
 80091ba:	4638      	mov	r0, r7
 80091bc:	f7ff ffc2 	bl	8009144 <sbrk_aligned>
 80091c0:	1c43      	adds	r3, r0, #1
 80091c2:	4604      	mov	r4, r0
 80091c4:	d14d      	bne.n	8009262 <_malloc_r+0xde>
 80091c6:	6834      	ldr	r4, [r6, #0]
 80091c8:	4626      	mov	r6, r4
 80091ca:	2e00      	cmp	r6, #0
 80091cc:	d140      	bne.n	8009250 <_malloc_r+0xcc>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	4631      	mov	r1, r6
 80091d2:	4638      	mov	r0, r7
 80091d4:	eb04 0803 	add.w	r8, r4, r3
 80091d8:	f000 fcb2 	bl	8009b40 <_sbrk_r>
 80091dc:	4580      	cmp	r8, r0
 80091de:	d13a      	bne.n	8009256 <_malloc_r+0xd2>
 80091e0:	6821      	ldr	r1, [r4, #0]
 80091e2:	3503      	adds	r5, #3
 80091e4:	1a6d      	subs	r5, r5, r1
 80091e6:	f025 0503 	bic.w	r5, r5, #3
 80091ea:	3508      	adds	r5, #8
 80091ec:	2d0c      	cmp	r5, #12
 80091ee:	bf38      	it	cc
 80091f0:	250c      	movcc	r5, #12
 80091f2:	4629      	mov	r1, r5
 80091f4:	4638      	mov	r0, r7
 80091f6:	f7ff ffa5 	bl	8009144 <sbrk_aligned>
 80091fa:	3001      	adds	r0, #1
 80091fc:	d02b      	beq.n	8009256 <_malloc_r+0xd2>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	442b      	add	r3, r5
 8009202:	6023      	str	r3, [r4, #0]
 8009204:	e00e      	b.n	8009224 <_malloc_r+0xa0>
 8009206:	6822      	ldr	r2, [r4, #0]
 8009208:	1b52      	subs	r2, r2, r5
 800920a:	d41e      	bmi.n	800924a <_malloc_r+0xc6>
 800920c:	2a0b      	cmp	r2, #11
 800920e:	d916      	bls.n	800923e <_malloc_r+0xba>
 8009210:	1961      	adds	r1, r4, r5
 8009212:	42a3      	cmp	r3, r4
 8009214:	6025      	str	r5, [r4, #0]
 8009216:	bf18      	it	ne
 8009218:	6059      	strne	r1, [r3, #4]
 800921a:	6863      	ldr	r3, [r4, #4]
 800921c:	bf08      	it	eq
 800921e:	6031      	streq	r1, [r6, #0]
 8009220:	5162      	str	r2, [r4, r5]
 8009222:	604b      	str	r3, [r1, #4]
 8009224:	4638      	mov	r0, r7
 8009226:	f104 060b 	add.w	r6, r4, #11
 800922a:	f001 fb45 	bl	800a8b8 <__malloc_unlock>
 800922e:	f026 0607 	bic.w	r6, r6, #7
 8009232:	1d23      	adds	r3, r4, #4
 8009234:	1af2      	subs	r2, r6, r3
 8009236:	d0b6      	beq.n	80091a6 <_malloc_r+0x22>
 8009238:	1b9b      	subs	r3, r3, r6
 800923a:	50a3      	str	r3, [r4, r2]
 800923c:	e7b3      	b.n	80091a6 <_malloc_r+0x22>
 800923e:	6862      	ldr	r2, [r4, #4]
 8009240:	42a3      	cmp	r3, r4
 8009242:	bf0c      	ite	eq
 8009244:	6032      	streq	r2, [r6, #0]
 8009246:	605a      	strne	r2, [r3, #4]
 8009248:	e7ec      	b.n	8009224 <_malloc_r+0xa0>
 800924a:	4623      	mov	r3, r4
 800924c:	6864      	ldr	r4, [r4, #4]
 800924e:	e7b2      	b.n	80091b6 <_malloc_r+0x32>
 8009250:	4634      	mov	r4, r6
 8009252:	6876      	ldr	r6, [r6, #4]
 8009254:	e7b9      	b.n	80091ca <_malloc_r+0x46>
 8009256:	230c      	movs	r3, #12
 8009258:	603b      	str	r3, [r7, #0]
 800925a:	4638      	mov	r0, r7
 800925c:	f001 fb2c 	bl	800a8b8 <__malloc_unlock>
 8009260:	e7a1      	b.n	80091a6 <_malloc_r+0x22>
 8009262:	6025      	str	r5, [r4, #0]
 8009264:	e7de      	b.n	8009224 <_malloc_r+0xa0>
 8009266:	bf00      	nop
 8009268:	20000518 	.word	0x20000518

0800926c <__cvt>:
 800926c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009270:	ec55 4b10 	vmov	r4, r5, d0
 8009274:	2d00      	cmp	r5, #0
 8009276:	460e      	mov	r6, r1
 8009278:	4619      	mov	r1, r3
 800927a:	462b      	mov	r3, r5
 800927c:	bfbb      	ittet	lt
 800927e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009282:	461d      	movlt	r5, r3
 8009284:	2300      	movge	r3, #0
 8009286:	232d      	movlt	r3, #45	; 0x2d
 8009288:	700b      	strb	r3, [r1, #0]
 800928a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800928c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009290:	4691      	mov	r9, r2
 8009292:	f023 0820 	bic.w	r8, r3, #32
 8009296:	bfbc      	itt	lt
 8009298:	4622      	movlt	r2, r4
 800929a:	4614      	movlt	r4, r2
 800929c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092a0:	d005      	beq.n	80092ae <__cvt+0x42>
 80092a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092a6:	d100      	bne.n	80092aa <__cvt+0x3e>
 80092a8:	3601      	adds	r6, #1
 80092aa:	2102      	movs	r1, #2
 80092ac:	e000      	b.n	80092b0 <__cvt+0x44>
 80092ae:	2103      	movs	r1, #3
 80092b0:	ab03      	add	r3, sp, #12
 80092b2:	9301      	str	r3, [sp, #4]
 80092b4:	ab02      	add	r3, sp, #8
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	ec45 4b10 	vmov	d0, r4, r5
 80092bc:	4653      	mov	r3, sl
 80092be:	4632      	mov	r2, r6
 80092c0:	f000 fd02 	bl	8009cc8 <_dtoa_r>
 80092c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092c8:	4607      	mov	r7, r0
 80092ca:	d102      	bne.n	80092d2 <__cvt+0x66>
 80092cc:	f019 0f01 	tst.w	r9, #1
 80092d0:	d022      	beq.n	8009318 <__cvt+0xac>
 80092d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092d6:	eb07 0906 	add.w	r9, r7, r6
 80092da:	d110      	bne.n	80092fe <__cvt+0x92>
 80092dc:	783b      	ldrb	r3, [r7, #0]
 80092de:	2b30      	cmp	r3, #48	; 0x30
 80092e0:	d10a      	bne.n	80092f8 <__cvt+0x8c>
 80092e2:	2200      	movs	r2, #0
 80092e4:	2300      	movs	r3, #0
 80092e6:	4620      	mov	r0, r4
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7f7 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ee:	b918      	cbnz	r0, 80092f8 <__cvt+0x8c>
 80092f0:	f1c6 0601 	rsb	r6, r6, #1
 80092f4:	f8ca 6000 	str.w	r6, [sl]
 80092f8:	f8da 3000 	ldr.w	r3, [sl]
 80092fc:	4499      	add	r9, r3
 80092fe:	2200      	movs	r2, #0
 8009300:	2300      	movs	r3, #0
 8009302:	4620      	mov	r0, r4
 8009304:	4629      	mov	r1, r5
 8009306:	f7f7 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800930a:	b108      	cbz	r0, 8009310 <__cvt+0xa4>
 800930c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009310:	2230      	movs	r2, #48	; 0x30
 8009312:	9b03      	ldr	r3, [sp, #12]
 8009314:	454b      	cmp	r3, r9
 8009316:	d307      	bcc.n	8009328 <__cvt+0xbc>
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800931c:	1bdb      	subs	r3, r3, r7
 800931e:	4638      	mov	r0, r7
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	b004      	add	sp, #16
 8009324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009328:	1c59      	adds	r1, r3, #1
 800932a:	9103      	str	r1, [sp, #12]
 800932c:	701a      	strb	r2, [r3, #0]
 800932e:	e7f0      	b.n	8009312 <__cvt+0xa6>

08009330 <__exponent>:
 8009330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009332:	4603      	mov	r3, r0
 8009334:	2900      	cmp	r1, #0
 8009336:	bfb8      	it	lt
 8009338:	4249      	neglt	r1, r1
 800933a:	f803 2b02 	strb.w	r2, [r3], #2
 800933e:	bfb4      	ite	lt
 8009340:	222d      	movlt	r2, #45	; 0x2d
 8009342:	222b      	movge	r2, #43	; 0x2b
 8009344:	2909      	cmp	r1, #9
 8009346:	7042      	strb	r2, [r0, #1]
 8009348:	dd2a      	ble.n	80093a0 <__exponent+0x70>
 800934a:	f10d 0407 	add.w	r4, sp, #7
 800934e:	46a4      	mov	ip, r4
 8009350:	270a      	movs	r7, #10
 8009352:	46a6      	mov	lr, r4
 8009354:	460a      	mov	r2, r1
 8009356:	fb91 f6f7 	sdiv	r6, r1, r7
 800935a:	fb07 1516 	mls	r5, r7, r6, r1
 800935e:	3530      	adds	r5, #48	; 0x30
 8009360:	2a63      	cmp	r2, #99	; 0x63
 8009362:	f104 34ff 	add.w	r4, r4, #4294967295
 8009366:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800936a:	4631      	mov	r1, r6
 800936c:	dcf1      	bgt.n	8009352 <__exponent+0x22>
 800936e:	3130      	adds	r1, #48	; 0x30
 8009370:	f1ae 0502 	sub.w	r5, lr, #2
 8009374:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009378:	1c44      	adds	r4, r0, #1
 800937a:	4629      	mov	r1, r5
 800937c:	4561      	cmp	r1, ip
 800937e:	d30a      	bcc.n	8009396 <__exponent+0x66>
 8009380:	f10d 0209 	add.w	r2, sp, #9
 8009384:	eba2 020e 	sub.w	r2, r2, lr
 8009388:	4565      	cmp	r5, ip
 800938a:	bf88      	it	hi
 800938c:	2200      	movhi	r2, #0
 800938e:	4413      	add	r3, r2
 8009390:	1a18      	subs	r0, r3, r0
 8009392:	b003      	add	sp, #12
 8009394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800939a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800939e:	e7ed      	b.n	800937c <__exponent+0x4c>
 80093a0:	2330      	movs	r3, #48	; 0x30
 80093a2:	3130      	adds	r1, #48	; 0x30
 80093a4:	7083      	strb	r3, [r0, #2]
 80093a6:	70c1      	strb	r1, [r0, #3]
 80093a8:	1d03      	adds	r3, r0, #4
 80093aa:	e7f1      	b.n	8009390 <__exponent+0x60>

080093ac <_printf_float>:
 80093ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b0:	ed2d 8b02 	vpush	{d8}
 80093b4:	b08d      	sub	sp, #52	; 0x34
 80093b6:	460c      	mov	r4, r1
 80093b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093bc:	4616      	mov	r6, r2
 80093be:	461f      	mov	r7, r3
 80093c0:	4605      	mov	r5, r0
 80093c2:	f001 fa6f 	bl	800a8a4 <_localeconv_r>
 80093c6:	f8d0 a000 	ldr.w	sl, [r0]
 80093ca:	4650      	mov	r0, sl
 80093cc:	f7f6 ff00 	bl	80001d0 <strlen>
 80093d0:	2300      	movs	r3, #0
 80093d2:	930a      	str	r3, [sp, #40]	; 0x28
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	9305      	str	r3, [sp, #20]
 80093d8:	f8d8 3000 	ldr.w	r3, [r8]
 80093dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093e0:	3307      	adds	r3, #7
 80093e2:	f023 0307 	bic.w	r3, r3, #7
 80093e6:	f103 0208 	add.w	r2, r3, #8
 80093ea:	f8c8 2000 	str.w	r2, [r8]
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093fe:	9307      	str	r3, [sp, #28]
 8009400:	f8cd 8018 	str.w	r8, [sp, #24]
 8009404:	ee08 0a10 	vmov	s16, r0
 8009408:	4b9f      	ldr	r3, [pc, #636]	; (8009688 <_printf_float+0x2dc>)
 800940a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800940e:	f04f 32ff 	mov.w	r2, #4294967295
 8009412:	f7f7 fb8b 	bl	8000b2c <__aeabi_dcmpun>
 8009416:	bb88      	cbnz	r0, 800947c <_printf_float+0xd0>
 8009418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800941c:	4b9a      	ldr	r3, [pc, #616]	; (8009688 <_printf_float+0x2dc>)
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	f7f7 fb65 	bl	8000af0 <__aeabi_dcmple>
 8009426:	bb48      	cbnz	r0, 800947c <_printf_float+0xd0>
 8009428:	2200      	movs	r2, #0
 800942a:	2300      	movs	r3, #0
 800942c:	4640      	mov	r0, r8
 800942e:	4649      	mov	r1, r9
 8009430:	f7f7 fb54 	bl	8000adc <__aeabi_dcmplt>
 8009434:	b110      	cbz	r0, 800943c <_printf_float+0x90>
 8009436:	232d      	movs	r3, #45	; 0x2d
 8009438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800943c:	4b93      	ldr	r3, [pc, #588]	; (800968c <_printf_float+0x2e0>)
 800943e:	4894      	ldr	r0, [pc, #592]	; (8009690 <_printf_float+0x2e4>)
 8009440:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009444:	bf94      	ite	ls
 8009446:	4698      	movls	r8, r3
 8009448:	4680      	movhi	r8, r0
 800944a:	2303      	movs	r3, #3
 800944c:	6123      	str	r3, [r4, #16]
 800944e:	9b05      	ldr	r3, [sp, #20]
 8009450:	f023 0204 	bic.w	r2, r3, #4
 8009454:	6022      	str	r2, [r4, #0]
 8009456:	f04f 0900 	mov.w	r9, #0
 800945a:	9700      	str	r7, [sp, #0]
 800945c:	4633      	mov	r3, r6
 800945e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009460:	4621      	mov	r1, r4
 8009462:	4628      	mov	r0, r5
 8009464:	f000 f9d8 	bl	8009818 <_printf_common>
 8009468:	3001      	adds	r0, #1
 800946a:	f040 8090 	bne.w	800958e <_printf_float+0x1e2>
 800946e:	f04f 30ff 	mov.w	r0, #4294967295
 8009472:	b00d      	add	sp, #52	; 0x34
 8009474:	ecbd 8b02 	vpop	{d8}
 8009478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947c:	4642      	mov	r2, r8
 800947e:	464b      	mov	r3, r9
 8009480:	4640      	mov	r0, r8
 8009482:	4649      	mov	r1, r9
 8009484:	f7f7 fb52 	bl	8000b2c <__aeabi_dcmpun>
 8009488:	b140      	cbz	r0, 800949c <_printf_float+0xf0>
 800948a:	464b      	mov	r3, r9
 800948c:	2b00      	cmp	r3, #0
 800948e:	bfbc      	itt	lt
 8009490:	232d      	movlt	r3, #45	; 0x2d
 8009492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009496:	487f      	ldr	r0, [pc, #508]	; (8009694 <_printf_float+0x2e8>)
 8009498:	4b7f      	ldr	r3, [pc, #508]	; (8009698 <_printf_float+0x2ec>)
 800949a:	e7d1      	b.n	8009440 <_printf_float+0x94>
 800949c:	6863      	ldr	r3, [r4, #4]
 800949e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80094a2:	9206      	str	r2, [sp, #24]
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	d13f      	bne.n	8009528 <_printf_float+0x17c>
 80094a8:	2306      	movs	r3, #6
 80094aa:	6063      	str	r3, [r4, #4]
 80094ac:	9b05      	ldr	r3, [sp, #20]
 80094ae:	6861      	ldr	r1, [r4, #4]
 80094b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094b4:	2300      	movs	r3, #0
 80094b6:	9303      	str	r3, [sp, #12]
 80094b8:	ab0a      	add	r3, sp, #40	; 0x28
 80094ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80094be:	ab09      	add	r3, sp, #36	; 0x24
 80094c0:	ec49 8b10 	vmov	d0, r8, r9
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	6022      	str	r2, [r4, #0]
 80094c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094cc:	4628      	mov	r0, r5
 80094ce:	f7ff fecd 	bl	800926c <__cvt>
 80094d2:	9b06      	ldr	r3, [sp, #24]
 80094d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094d6:	2b47      	cmp	r3, #71	; 0x47
 80094d8:	4680      	mov	r8, r0
 80094da:	d108      	bne.n	80094ee <_printf_float+0x142>
 80094dc:	1cc8      	adds	r0, r1, #3
 80094de:	db02      	blt.n	80094e6 <_printf_float+0x13a>
 80094e0:	6863      	ldr	r3, [r4, #4]
 80094e2:	4299      	cmp	r1, r3
 80094e4:	dd41      	ble.n	800956a <_printf_float+0x1be>
 80094e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80094ea:	fa5f fb8b 	uxtb.w	fp, fp
 80094ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094f2:	d820      	bhi.n	8009536 <_printf_float+0x18a>
 80094f4:	3901      	subs	r1, #1
 80094f6:	465a      	mov	r2, fp
 80094f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094fc:	9109      	str	r1, [sp, #36]	; 0x24
 80094fe:	f7ff ff17 	bl	8009330 <__exponent>
 8009502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009504:	1813      	adds	r3, r2, r0
 8009506:	2a01      	cmp	r2, #1
 8009508:	4681      	mov	r9, r0
 800950a:	6123      	str	r3, [r4, #16]
 800950c:	dc02      	bgt.n	8009514 <_printf_float+0x168>
 800950e:	6822      	ldr	r2, [r4, #0]
 8009510:	07d2      	lsls	r2, r2, #31
 8009512:	d501      	bpl.n	8009518 <_printf_float+0x16c>
 8009514:	3301      	adds	r3, #1
 8009516:	6123      	str	r3, [r4, #16]
 8009518:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800951c:	2b00      	cmp	r3, #0
 800951e:	d09c      	beq.n	800945a <_printf_float+0xae>
 8009520:	232d      	movs	r3, #45	; 0x2d
 8009522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009526:	e798      	b.n	800945a <_printf_float+0xae>
 8009528:	9a06      	ldr	r2, [sp, #24]
 800952a:	2a47      	cmp	r2, #71	; 0x47
 800952c:	d1be      	bne.n	80094ac <_printf_float+0x100>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1bc      	bne.n	80094ac <_printf_float+0x100>
 8009532:	2301      	movs	r3, #1
 8009534:	e7b9      	b.n	80094aa <_printf_float+0xfe>
 8009536:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800953a:	d118      	bne.n	800956e <_printf_float+0x1c2>
 800953c:	2900      	cmp	r1, #0
 800953e:	6863      	ldr	r3, [r4, #4]
 8009540:	dd0b      	ble.n	800955a <_printf_float+0x1ae>
 8009542:	6121      	str	r1, [r4, #16]
 8009544:	b913      	cbnz	r3, 800954c <_printf_float+0x1a0>
 8009546:	6822      	ldr	r2, [r4, #0]
 8009548:	07d0      	lsls	r0, r2, #31
 800954a:	d502      	bpl.n	8009552 <_printf_float+0x1a6>
 800954c:	3301      	adds	r3, #1
 800954e:	440b      	add	r3, r1
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	65a1      	str	r1, [r4, #88]	; 0x58
 8009554:	f04f 0900 	mov.w	r9, #0
 8009558:	e7de      	b.n	8009518 <_printf_float+0x16c>
 800955a:	b913      	cbnz	r3, 8009562 <_printf_float+0x1b6>
 800955c:	6822      	ldr	r2, [r4, #0]
 800955e:	07d2      	lsls	r2, r2, #31
 8009560:	d501      	bpl.n	8009566 <_printf_float+0x1ba>
 8009562:	3302      	adds	r3, #2
 8009564:	e7f4      	b.n	8009550 <_printf_float+0x1a4>
 8009566:	2301      	movs	r3, #1
 8009568:	e7f2      	b.n	8009550 <_printf_float+0x1a4>
 800956a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800956e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009570:	4299      	cmp	r1, r3
 8009572:	db05      	blt.n	8009580 <_printf_float+0x1d4>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	6121      	str	r1, [r4, #16]
 8009578:	07d8      	lsls	r0, r3, #31
 800957a:	d5ea      	bpl.n	8009552 <_printf_float+0x1a6>
 800957c:	1c4b      	adds	r3, r1, #1
 800957e:	e7e7      	b.n	8009550 <_printf_float+0x1a4>
 8009580:	2900      	cmp	r1, #0
 8009582:	bfd4      	ite	le
 8009584:	f1c1 0202 	rsble	r2, r1, #2
 8009588:	2201      	movgt	r2, #1
 800958a:	4413      	add	r3, r2
 800958c:	e7e0      	b.n	8009550 <_printf_float+0x1a4>
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	055a      	lsls	r2, r3, #21
 8009592:	d407      	bmi.n	80095a4 <_printf_float+0x1f8>
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	4642      	mov	r2, r8
 8009598:	4631      	mov	r1, r6
 800959a:	4628      	mov	r0, r5
 800959c:	47b8      	blx	r7
 800959e:	3001      	adds	r0, #1
 80095a0:	d12c      	bne.n	80095fc <_printf_float+0x250>
 80095a2:	e764      	b.n	800946e <_printf_float+0xc2>
 80095a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095a8:	f240 80e0 	bls.w	800976c <_printf_float+0x3c0>
 80095ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095b0:	2200      	movs	r2, #0
 80095b2:	2300      	movs	r3, #0
 80095b4:	f7f7 fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d034      	beq.n	8009626 <_printf_float+0x27a>
 80095bc:	4a37      	ldr	r2, [pc, #220]	; (800969c <_printf_float+0x2f0>)
 80095be:	2301      	movs	r3, #1
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	f43f af51 	beq.w	800946e <_printf_float+0xc2>
 80095cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095d0:	429a      	cmp	r2, r3
 80095d2:	db02      	blt.n	80095da <_printf_float+0x22e>
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	07d8      	lsls	r0, r3, #31
 80095d8:	d510      	bpl.n	80095fc <_printf_float+0x250>
 80095da:	ee18 3a10 	vmov	r3, s16
 80095de:	4652      	mov	r2, sl
 80095e0:	4631      	mov	r1, r6
 80095e2:	4628      	mov	r0, r5
 80095e4:	47b8      	blx	r7
 80095e6:	3001      	adds	r0, #1
 80095e8:	f43f af41 	beq.w	800946e <_printf_float+0xc2>
 80095ec:	f04f 0800 	mov.w	r8, #0
 80095f0:	f104 091a 	add.w	r9, r4, #26
 80095f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f6:	3b01      	subs	r3, #1
 80095f8:	4543      	cmp	r3, r8
 80095fa:	dc09      	bgt.n	8009610 <_printf_float+0x264>
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	079b      	lsls	r3, r3, #30
 8009600:	f100 8105 	bmi.w	800980e <_printf_float+0x462>
 8009604:	68e0      	ldr	r0, [r4, #12]
 8009606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009608:	4298      	cmp	r0, r3
 800960a:	bfb8      	it	lt
 800960c:	4618      	movlt	r0, r3
 800960e:	e730      	b.n	8009472 <_printf_float+0xc6>
 8009610:	2301      	movs	r3, #1
 8009612:	464a      	mov	r2, r9
 8009614:	4631      	mov	r1, r6
 8009616:	4628      	mov	r0, r5
 8009618:	47b8      	blx	r7
 800961a:	3001      	adds	r0, #1
 800961c:	f43f af27 	beq.w	800946e <_printf_float+0xc2>
 8009620:	f108 0801 	add.w	r8, r8, #1
 8009624:	e7e6      	b.n	80095f4 <_printf_float+0x248>
 8009626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009628:	2b00      	cmp	r3, #0
 800962a:	dc39      	bgt.n	80096a0 <_printf_float+0x2f4>
 800962c:	4a1b      	ldr	r2, [pc, #108]	; (800969c <_printf_float+0x2f0>)
 800962e:	2301      	movs	r3, #1
 8009630:	4631      	mov	r1, r6
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	f43f af19 	beq.w	800946e <_printf_float+0xc2>
 800963c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009640:	4313      	orrs	r3, r2
 8009642:	d102      	bne.n	800964a <_printf_float+0x29e>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	07d9      	lsls	r1, r3, #31
 8009648:	d5d8      	bpl.n	80095fc <_printf_float+0x250>
 800964a:	ee18 3a10 	vmov	r3, s16
 800964e:	4652      	mov	r2, sl
 8009650:	4631      	mov	r1, r6
 8009652:	4628      	mov	r0, r5
 8009654:	47b8      	blx	r7
 8009656:	3001      	adds	r0, #1
 8009658:	f43f af09 	beq.w	800946e <_printf_float+0xc2>
 800965c:	f04f 0900 	mov.w	r9, #0
 8009660:	f104 0a1a 	add.w	sl, r4, #26
 8009664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009666:	425b      	negs	r3, r3
 8009668:	454b      	cmp	r3, r9
 800966a:	dc01      	bgt.n	8009670 <_printf_float+0x2c4>
 800966c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800966e:	e792      	b.n	8009596 <_printf_float+0x1ea>
 8009670:	2301      	movs	r3, #1
 8009672:	4652      	mov	r2, sl
 8009674:	4631      	mov	r1, r6
 8009676:	4628      	mov	r0, r5
 8009678:	47b8      	blx	r7
 800967a:	3001      	adds	r0, #1
 800967c:	f43f aef7 	beq.w	800946e <_printf_float+0xc2>
 8009680:	f109 0901 	add.w	r9, r9, #1
 8009684:	e7ee      	b.n	8009664 <_printf_float+0x2b8>
 8009686:	bf00      	nop
 8009688:	7fefffff 	.word	0x7fefffff
 800968c:	0800bfe4 	.word	0x0800bfe4
 8009690:	0800bfe8 	.word	0x0800bfe8
 8009694:	0800bff0 	.word	0x0800bff0
 8009698:	0800bfec 	.word	0x0800bfec
 800969c:	0800bff4 	.word	0x0800bff4
 80096a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096a4:	429a      	cmp	r2, r3
 80096a6:	bfa8      	it	ge
 80096a8:	461a      	movge	r2, r3
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	4691      	mov	r9, r2
 80096ae:	dc37      	bgt.n	8009720 <_printf_float+0x374>
 80096b0:	f04f 0b00 	mov.w	fp, #0
 80096b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096b8:	f104 021a 	add.w	r2, r4, #26
 80096bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096be:	9305      	str	r3, [sp, #20]
 80096c0:	eba3 0309 	sub.w	r3, r3, r9
 80096c4:	455b      	cmp	r3, fp
 80096c6:	dc33      	bgt.n	8009730 <_printf_float+0x384>
 80096c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096cc:	429a      	cmp	r2, r3
 80096ce:	db3b      	blt.n	8009748 <_printf_float+0x39c>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	07da      	lsls	r2, r3, #31
 80096d4:	d438      	bmi.n	8009748 <_printf_float+0x39c>
 80096d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d8:	9a05      	ldr	r2, [sp, #20]
 80096da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096dc:	1a9a      	subs	r2, r3, r2
 80096de:	eba3 0901 	sub.w	r9, r3, r1
 80096e2:	4591      	cmp	r9, r2
 80096e4:	bfa8      	it	ge
 80096e6:	4691      	movge	r9, r2
 80096e8:	f1b9 0f00 	cmp.w	r9, #0
 80096ec:	dc35      	bgt.n	800975a <_printf_float+0x3ae>
 80096ee:	f04f 0800 	mov.w	r8, #0
 80096f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096f6:	f104 0a1a 	add.w	sl, r4, #26
 80096fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096fe:	1a9b      	subs	r3, r3, r2
 8009700:	eba3 0309 	sub.w	r3, r3, r9
 8009704:	4543      	cmp	r3, r8
 8009706:	f77f af79 	ble.w	80095fc <_printf_float+0x250>
 800970a:	2301      	movs	r3, #1
 800970c:	4652      	mov	r2, sl
 800970e:	4631      	mov	r1, r6
 8009710:	4628      	mov	r0, r5
 8009712:	47b8      	blx	r7
 8009714:	3001      	adds	r0, #1
 8009716:	f43f aeaa 	beq.w	800946e <_printf_float+0xc2>
 800971a:	f108 0801 	add.w	r8, r8, #1
 800971e:	e7ec      	b.n	80096fa <_printf_float+0x34e>
 8009720:	4613      	mov	r3, r2
 8009722:	4631      	mov	r1, r6
 8009724:	4642      	mov	r2, r8
 8009726:	4628      	mov	r0, r5
 8009728:	47b8      	blx	r7
 800972a:	3001      	adds	r0, #1
 800972c:	d1c0      	bne.n	80096b0 <_printf_float+0x304>
 800972e:	e69e      	b.n	800946e <_printf_float+0xc2>
 8009730:	2301      	movs	r3, #1
 8009732:	4631      	mov	r1, r6
 8009734:	4628      	mov	r0, r5
 8009736:	9205      	str	r2, [sp, #20]
 8009738:	47b8      	blx	r7
 800973a:	3001      	adds	r0, #1
 800973c:	f43f ae97 	beq.w	800946e <_printf_float+0xc2>
 8009740:	9a05      	ldr	r2, [sp, #20]
 8009742:	f10b 0b01 	add.w	fp, fp, #1
 8009746:	e7b9      	b.n	80096bc <_printf_float+0x310>
 8009748:	ee18 3a10 	vmov	r3, s16
 800974c:	4652      	mov	r2, sl
 800974e:	4631      	mov	r1, r6
 8009750:	4628      	mov	r0, r5
 8009752:	47b8      	blx	r7
 8009754:	3001      	adds	r0, #1
 8009756:	d1be      	bne.n	80096d6 <_printf_float+0x32a>
 8009758:	e689      	b.n	800946e <_printf_float+0xc2>
 800975a:	9a05      	ldr	r2, [sp, #20]
 800975c:	464b      	mov	r3, r9
 800975e:	4442      	add	r2, r8
 8009760:	4631      	mov	r1, r6
 8009762:	4628      	mov	r0, r5
 8009764:	47b8      	blx	r7
 8009766:	3001      	adds	r0, #1
 8009768:	d1c1      	bne.n	80096ee <_printf_float+0x342>
 800976a:	e680      	b.n	800946e <_printf_float+0xc2>
 800976c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800976e:	2a01      	cmp	r2, #1
 8009770:	dc01      	bgt.n	8009776 <_printf_float+0x3ca>
 8009772:	07db      	lsls	r3, r3, #31
 8009774:	d538      	bpl.n	80097e8 <_printf_float+0x43c>
 8009776:	2301      	movs	r3, #1
 8009778:	4642      	mov	r2, r8
 800977a:	4631      	mov	r1, r6
 800977c:	4628      	mov	r0, r5
 800977e:	47b8      	blx	r7
 8009780:	3001      	adds	r0, #1
 8009782:	f43f ae74 	beq.w	800946e <_printf_float+0xc2>
 8009786:	ee18 3a10 	vmov	r3, s16
 800978a:	4652      	mov	r2, sl
 800978c:	4631      	mov	r1, r6
 800978e:	4628      	mov	r0, r5
 8009790:	47b8      	blx	r7
 8009792:	3001      	adds	r0, #1
 8009794:	f43f ae6b 	beq.w	800946e <_printf_float+0xc2>
 8009798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800979c:	2200      	movs	r2, #0
 800979e:	2300      	movs	r3, #0
 80097a0:	f7f7 f992 	bl	8000ac8 <__aeabi_dcmpeq>
 80097a4:	b9d8      	cbnz	r0, 80097de <_printf_float+0x432>
 80097a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a8:	f108 0201 	add.w	r2, r8, #1
 80097ac:	3b01      	subs	r3, #1
 80097ae:	4631      	mov	r1, r6
 80097b0:	4628      	mov	r0, r5
 80097b2:	47b8      	blx	r7
 80097b4:	3001      	adds	r0, #1
 80097b6:	d10e      	bne.n	80097d6 <_printf_float+0x42a>
 80097b8:	e659      	b.n	800946e <_printf_float+0xc2>
 80097ba:	2301      	movs	r3, #1
 80097bc:	4652      	mov	r2, sl
 80097be:	4631      	mov	r1, r6
 80097c0:	4628      	mov	r0, r5
 80097c2:	47b8      	blx	r7
 80097c4:	3001      	adds	r0, #1
 80097c6:	f43f ae52 	beq.w	800946e <_printf_float+0xc2>
 80097ca:	f108 0801 	add.w	r8, r8, #1
 80097ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d0:	3b01      	subs	r3, #1
 80097d2:	4543      	cmp	r3, r8
 80097d4:	dcf1      	bgt.n	80097ba <_printf_float+0x40e>
 80097d6:	464b      	mov	r3, r9
 80097d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097dc:	e6dc      	b.n	8009598 <_printf_float+0x1ec>
 80097de:	f04f 0800 	mov.w	r8, #0
 80097e2:	f104 0a1a 	add.w	sl, r4, #26
 80097e6:	e7f2      	b.n	80097ce <_printf_float+0x422>
 80097e8:	2301      	movs	r3, #1
 80097ea:	4642      	mov	r2, r8
 80097ec:	e7df      	b.n	80097ae <_printf_float+0x402>
 80097ee:	2301      	movs	r3, #1
 80097f0:	464a      	mov	r2, r9
 80097f2:	4631      	mov	r1, r6
 80097f4:	4628      	mov	r0, r5
 80097f6:	47b8      	blx	r7
 80097f8:	3001      	adds	r0, #1
 80097fa:	f43f ae38 	beq.w	800946e <_printf_float+0xc2>
 80097fe:	f108 0801 	add.w	r8, r8, #1
 8009802:	68e3      	ldr	r3, [r4, #12]
 8009804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009806:	1a5b      	subs	r3, r3, r1
 8009808:	4543      	cmp	r3, r8
 800980a:	dcf0      	bgt.n	80097ee <_printf_float+0x442>
 800980c:	e6fa      	b.n	8009604 <_printf_float+0x258>
 800980e:	f04f 0800 	mov.w	r8, #0
 8009812:	f104 0919 	add.w	r9, r4, #25
 8009816:	e7f4      	b.n	8009802 <_printf_float+0x456>

08009818 <_printf_common>:
 8009818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	4616      	mov	r6, r2
 800981e:	4699      	mov	r9, r3
 8009820:	688a      	ldr	r2, [r1, #8]
 8009822:	690b      	ldr	r3, [r1, #16]
 8009824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009828:	4293      	cmp	r3, r2
 800982a:	bfb8      	it	lt
 800982c:	4613      	movlt	r3, r2
 800982e:	6033      	str	r3, [r6, #0]
 8009830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009834:	4607      	mov	r7, r0
 8009836:	460c      	mov	r4, r1
 8009838:	b10a      	cbz	r2, 800983e <_printf_common+0x26>
 800983a:	3301      	adds	r3, #1
 800983c:	6033      	str	r3, [r6, #0]
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	0699      	lsls	r1, r3, #26
 8009842:	bf42      	ittt	mi
 8009844:	6833      	ldrmi	r3, [r6, #0]
 8009846:	3302      	addmi	r3, #2
 8009848:	6033      	strmi	r3, [r6, #0]
 800984a:	6825      	ldr	r5, [r4, #0]
 800984c:	f015 0506 	ands.w	r5, r5, #6
 8009850:	d106      	bne.n	8009860 <_printf_common+0x48>
 8009852:	f104 0a19 	add.w	sl, r4, #25
 8009856:	68e3      	ldr	r3, [r4, #12]
 8009858:	6832      	ldr	r2, [r6, #0]
 800985a:	1a9b      	subs	r3, r3, r2
 800985c:	42ab      	cmp	r3, r5
 800985e:	dc26      	bgt.n	80098ae <_printf_common+0x96>
 8009860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009864:	1e13      	subs	r3, r2, #0
 8009866:	6822      	ldr	r2, [r4, #0]
 8009868:	bf18      	it	ne
 800986a:	2301      	movne	r3, #1
 800986c:	0692      	lsls	r2, r2, #26
 800986e:	d42b      	bmi.n	80098c8 <_printf_common+0xb0>
 8009870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009874:	4649      	mov	r1, r9
 8009876:	4638      	mov	r0, r7
 8009878:	47c0      	blx	r8
 800987a:	3001      	adds	r0, #1
 800987c:	d01e      	beq.n	80098bc <_printf_common+0xa4>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	68e5      	ldr	r5, [r4, #12]
 8009882:	6832      	ldr	r2, [r6, #0]
 8009884:	f003 0306 	and.w	r3, r3, #6
 8009888:	2b04      	cmp	r3, #4
 800988a:	bf08      	it	eq
 800988c:	1aad      	subeq	r5, r5, r2
 800988e:	68a3      	ldr	r3, [r4, #8]
 8009890:	6922      	ldr	r2, [r4, #16]
 8009892:	bf0c      	ite	eq
 8009894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009898:	2500      	movne	r5, #0
 800989a:	4293      	cmp	r3, r2
 800989c:	bfc4      	itt	gt
 800989e:	1a9b      	subgt	r3, r3, r2
 80098a0:	18ed      	addgt	r5, r5, r3
 80098a2:	2600      	movs	r6, #0
 80098a4:	341a      	adds	r4, #26
 80098a6:	42b5      	cmp	r5, r6
 80098a8:	d11a      	bne.n	80098e0 <_printf_common+0xc8>
 80098aa:	2000      	movs	r0, #0
 80098ac:	e008      	b.n	80098c0 <_printf_common+0xa8>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4652      	mov	r2, sl
 80098b2:	4649      	mov	r1, r9
 80098b4:	4638      	mov	r0, r7
 80098b6:	47c0      	blx	r8
 80098b8:	3001      	adds	r0, #1
 80098ba:	d103      	bne.n	80098c4 <_printf_common+0xac>
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c4:	3501      	adds	r5, #1
 80098c6:	e7c6      	b.n	8009856 <_printf_common+0x3e>
 80098c8:	18e1      	adds	r1, r4, r3
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	2030      	movs	r0, #48	; 0x30
 80098ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098d2:	4422      	add	r2, r4
 80098d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098dc:	3302      	adds	r3, #2
 80098de:	e7c7      	b.n	8009870 <_printf_common+0x58>
 80098e0:	2301      	movs	r3, #1
 80098e2:	4622      	mov	r2, r4
 80098e4:	4649      	mov	r1, r9
 80098e6:	4638      	mov	r0, r7
 80098e8:	47c0      	blx	r8
 80098ea:	3001      	adds	r0, #1
 80098ec:	d0e6      	beq.n	80098bc <_printf_common+0xa4>
 80098ee:	3601      	adds	r6, #1
 80098f0:	e7d9      	b.n	80098a6 <_printf_common+0x8e>
	...

080098f4 <_printf_i>:
 80098f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098f8:	7e0f      	ldrb	r7, [r1, #24]
 80098fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098fc:	2f78      	cmp	r7, #120	; 0x78
 80098fe:	4691      	mov	r9, r2
 8009900:	4680      	mov	r8, r0
 8009902:	460c      	mov	r4, r1
 8009904:	469a      	mov	sl, r3
 8009906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800990a:	d807      	bhi.n	800991c <_printf_i+0x28>
 800990c:	2f62      	cmp	r7, #98	; 0x62
 800990e:	d80a      	bhi.n	8009926 <_printf_i+0x32>
 8009910:	2f00      	cmp	r7, #0
 8009912:	f000 80d8 	beq.w	8009ac6 <_printf_i+0x1d2>
 8009916:	2f58      	cmp	r7, #88	; 0x58
 8009918:	f000 80a3 	beq.w	8009a62 <_printf_i+0x16e>
 800991c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009924:	e03a      	b.n	800999c <_printf_i+0xa8>
 8009926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800992a:	2b15      	cmp	r3, #21
 800992c:	d8f6      	bhi.n	800991c <_printf_i+0x28>
 800992e:	a101      	add	r1, pc, #4	; (adr r1, 8009934 <_printf_i+0x40>)
 8009930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009934:	0800998d 	.word	0x0800998d
 8009938:	080099a1 	.word	0x080099a1
 800993c:	0800991d 	.word	0x0800991d
 8009940:	0800991d 	.word	0x0800991d
 8009944:	0800991d 	.word	0x0800991d
 8009948:	0800991d 	.word	0x0800991d
 800994c:	080099a1 	.word	0x080099a1
 8009950:	0800991d 	.word	0x0800991d
 8009954:	0800991d 	.word	0x0800991d
 8009958:	0800991d 	.word	0x0800991d
 800995c:	0800991d 	.word	0x0800991d
 8009960:	08009aad 	.word	0x08009aad
 8009964:	080099d1 	.word	0x080099d1
 8009968:	08009a8f 	.word	0x08009a8f
 800996c:	0800991d 	.word	0x0800991d
 8009970:	0800991d 	.word	0x0800991d
 8009974:	08009acf 	.word	0x08009acf
 8009978:	0800991d 	.word	0x0800991d
 800997c:	080099d1 	.word	0x080099d1
 8009980:	0800991d 	.word	0x0800991d
 8009984:	0800991d 	.word	0x0800991d
 8009988:	08009a97 	.word	0x08009a97
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	1d1a      	adds	r2, r3, #4
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	602a      	str	r2, [r5, #0]
 8009994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800999c:	2301      	movs	r3, #1
 800999e:	e0a3      	b.n	8009ae8 <_printf_i+0x1f4>
 80099a0:	6820      	ldr	r0, [r4, #0]
 80099a2:	6829      	ldr	r1, [r5, #0]
 80099a4:	0606      	lsls	r6, r0, #24
 80099a6:	f101 0304 	add.w	r3, r1, #4
 80099aa:	d50a      	bpl.n	80099c2 <_printf_i+0xce>
 80099ac:	680e      	ldr	r6, [r1, #0]
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	2e00      	cmp	r6, #0
 80099b2:	da03      	bge.n	80099bc <_printf_i+0xc8>
 80099b4:	232d      	movs	r3, #45	; 0x2d
 80099b6:	4276      	negs	r6, r6
 80099b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099bc:	485e      	ldr	r0, [pc, #376]	; (8009b38 <_printf_i+0x244>)
 80099be:	230a      	movs	r3, #10
 80099c0:	e019      	b.n	80099f6 <_printf_i+0x102>
 80099c2:	680e      	ldr	r6, [r1, #0]
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099ca:	bf18      	it	ne
 80099cc:	b236      	sxthne	r6, r6
 80099ce:	e7ef      	b.n	80099b0 <_printf_i+0xbc>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	6820      	ldr	r0, [r4, #0]
 80099d4:	1d19      	adds	r1, r3, #4
 80099d6:	6029      	str	r1, [r5, #0]
 80099d8:	0601      	lsls	r1, r0, #24
 80099da:	d501      	bpl.n	80099e0 <_printf_i+0xec>
 80099dc:	681e      	ldr	r6, [r3, #0]
 80099de:	e002      	b.n	80099e6 <_printf_i+0xf2>
 80099e0:	0646      	lsls	r6, r0, #25
 80099e2:	d5fb      	bpl.n	80099dc <_printf_i+0xe8>
 80099e4:	881e      	ldrh	r6, [r3, #0]
 80099e6:	4854      	ldr	r0, [pc, #336]	; (8009b38 <_printf_i+0x244>)
 80099e8:	2f6f      	cmp	r7, #111	; 0x6f
 80099ea:	bf0c      	ite	eq
 80099ec:	2308      	moveq	r3, #8
 80099ee:	230a      	movne	r3, #10
 80099f0:	2100      	movs	r1, #0
 80099f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099f6:	6865      	ldr	r5, [r4, #4]
 80099f8:	60a5      	str	r5, [r4, #8]
 80099fa:	2d00      	cmp	r5, #0
 80099fc:	bfa2      	ittt	ge
 80099fe:	6821      	ldrge	r1, [r4, #0]
 8009a00:	f021 0104 	bicge.w	r1, r1, #4
 8009a04:	6021      	strge	r1, [r4, #0]
 8009a06:	b90e      	cbnz	r6, 8009a0c <_printf_i+0x118>
 8009a08:	2d00      	cmp	r5, #0
 8009a0a:	d04d      	beq.n	8009aa8 <_printf_i+0x1b4>
 8009a0c:	4615      	mov	r5, r2
 8009a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a12:	fb03 6711 	mls	r7, r3, r1, r6
 8009a16:	5dc7      	ldrb	r7, [r0, r7]
 8009a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a1c:	4637      	mov	r7, r6
 8009a1e:	42bb      	cmp	r3, r7
 8009a20:	460e      	mov	r6, r1
 8009a22:	d9f4      	bls.n	8009a0e <_printf_i+0x11a>
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	d10b      	bne.n	8009a40 <_printf_i+0x14c>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	07de      	lsls	r6, r3, #31
 8009a2c:	d508      	bpl.n	8009a40 <_printf_i+0x14c>
 8009a2e:	6923      	ldr	r3, [r4, #16]
 8009a30:	6861      	ldr	r1, [r4, #4]
 8009a32:	4299      	cmp	r1, r3
 8009a34:	bfde      	ittt	le
 8009a36:	2330      	movle	r3, #48	; 0x30
 8009a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a40:	1b52      	subs	r2, r2, r5
 8009a42:	6122      	str	r2, [r4, #16]
 8009a44:	f8cd a000 	str.w	sl, [sp]
 8009a48:	464b      	mov	r3, r9
 8009a4a:	aa03      	add	r2, sp, #12
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4640      	mov	r0, r8
 8009a50:	f7ff fee2 	bl	8009818 <_printf_common>
 8009a54:	3001      	adds	r0, #1
 8009a56:	d14c      	bne.n	8009af2 <_printf_i+0x1fe>
 8009a58:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5c:	b004      	add	sp, #16
 8009a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a62:	4835      	ldr	r0, [pc, #212]	; (8009b38 <_printf_i+0x244>)
 8009a64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a68:	6829      	ldr	r1, [r5, #0]
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a70:	6029      	str	r1, [r5, #0]
 8009a72:	061d      	lsls	r5, r3, #24
 8009a74:	d514      	bpl.n	8009aa0 <_printf_i+0x1ac>
 8009a76:	07df      	lsls	r7, r3, #31
 8009a78:	bf44      	itt	mi
 8009a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a7e:	6023      	strmi	r3, [r4, #0]
 8009a80:	b91e      	cbnz	r6, 8009a8a <_printf_i+0x196>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	f023 0320 	bic.w	r3, r3, #32
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	2310      	movs	r3, #16
 8009a8c:	e7b0      	b.n	80099f0 <_printf_i+0xfc>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	f043 0320 	orr.w	r3, r3, #32
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	2378      	movs	r3, #120	; 0x78
 8009a98:	4828      	ldr	r0, [pc, #160]	; (8009b3c <_printf_i+0x248>)
 8009a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a9e:	e7e3      	b.n	8009a68 <_printf_i+0x174>
 8009aa0:	0659      	lsls	r1, r3, #25
 8009aa2:	bf48      	it	mi
 8009aa4:	b2b6      	uxthmi	r6, r6
 8009aa6:	e7e6      	b.n	8009a76 <_printf_i+0x182>
 8009aa8:	4615      	mov	r5, r2
 8009aaa:	e7bb      	b.n	8009a24 <_printf_i+0x130>
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	6826      	ldr	r6, [r4, #0]
 8009ab0:	6961      	ldr	r1, [r4, #20]
 8009ab2:	1d18      	adds	r0, r3, #4
 8009ab4:	6028      	str	r0, [r5, #0]
 8009ab6:	0635      	lsls	r5, r6, #24
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	d501      	bpl.n	8009ac0 <_printf_i+0x1cc>
 8009abc:	6019      	str	r1, [r3, #0]
 8009abe:	e002      	b.n	8009ac6 <_printf_i+0x1d2>
 8009ac0:	0670      	lsls	r0, r6, #25
 8009ac2:	d5fb      	bpl.n	8009abc <_printf_i+0x1c8>
 8009ac4:	8019      	strh	r1, [r3, #0]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	6123      	str	r3, [r4, #16]
 8009aca:	4615      	mov	r5, r2
 8009acc:	e7ba      	b.n	8009a44 <_printf_i+0x150>
 8009ace:	682b      	ldr	r3, [r5, #0]
 8009ad0:	1d1a      	adds	r2, r3, #4
 8009ad2:	602a      	str	r2, [r5, #0]
 8009ad4:	681d      	ldr	r5, [r3, #0]
 8009ad6:	6862      	ldr	r2, [r4, #4]
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4628      	mov	r0, r5
 8009adc:	f7f6 fb80 	bl	80001e0 <memchr>
 8009ae0:	b108      	cbz	r0, 8009ae6 <_printf_i+0x1f2>
 8009ae2:	1b40      	subs	r0, r0, r5
 8009ae4:	6060      	str	r0, [r4, #4]
 8009ae6:	6863      	ldr	r3, [r4, #4]
 8009ae8:	6123      	str	r3, [r4, #16]
 8009aea:	2300      	movs	r3, #0
 8009aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009af0:	e7a8      	b.n	8009a44 <_printf_i+0x150>
 8009af2:	6923      	ldr	r3, [r4, #16]
 8009af4:	462a      	mov	r2, r5
 8009af6:	4649      	mov	r1, r9
 8009af8:	4640      	mov	r0, r8
 8009afa:	47d0      	blx	sl
 8009afc:	3001      	adds	r0, #1
 8009afe:	d0ab      	beq.n	8009a58 <_printf_i+0x164>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	079b      	lsls	r3, r3, #30
 8009b04:	d413      	bmi.n	8009b2e <_printf_i+0x23a>
 8009b06:	68e0      	ldr	r0, [r4, #12]
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	4298      	cmp	r0, r3
 8009b0c:	bfb8      	it	lt
 8009b0e:	4618      	movlt	r0, r3
 8009b10:	e7a4      	b.n	8009a5c <_printf_i+0x168>
 8009b12:	2301      	movs	r3, #1
 8009b14:	4632      	mov	r2, r6
 8009b16:	4649      	mov	r1, r9
 8009b18:	4640      	mov	r0, r8
 8009b1a:	47d0      	blx	sl
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d09b      	beq.n	8009a58 <_printf_i+0x164>
 8009b20:	3501      	adds	r5, #1
 8009b22:	68e3      	ldr	r3, [r4, #12]
 8009b24:	9903      	ldr	r1, [sp, #12]
 8009b26:	1a5b      	subs	r3, r3, r1
 8009b28:	42ab      	cmp	r3, r5
 8009b2a:	dcf2      	bgt.n	8009b12 <_printf_i+0x21e>
 8009b2c:	e7eb      	b.n	8009b06 <_printf_i+0x212>
 8009b2e:	2500      	movs	r5, #0
 8009b30:	f104 0619 	add.w	r6, r4, #25
 8009b34:	e7f5      	b.n	8009b22 <_printf_i+0x22e>
 8009b36:	bf00      	nop
 8009b38:	0800bff6 	.word	0x0800bff6
 8009b3c:	0800c007 	.word	0x0800c007

08009b40 <_sbrk_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d06      	ldr	r5, [pc, #24]	; (8009b5c <_sbrk_r+0x1c>)
 8009b44:	2300      	movs	r3, #0
 8009b46:	4604      	mov	r4, r0
 8009b48:	4608      	mov	r0, r1
 8009b4a:	602b      	str	r3, [r5, #0]
 8009b4c:	f7f8 fcec 	bl	8002528 <_sbrk>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	d102      	bne.n	8009b5a <_sbrk_r+0x1a>
 8009b54:	682b      	ldr	r3, [r5, #0]
 8009b56:	b103      	cbz	r3, 8009b5a <_sbrk_r+0x1a>
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	20000520 	.word	0x20000520

08009b60 <siprintf>:
 8009b60:	b40e      	push	{r1, r2, r3}
 8009b62:	b500      	push	{lr}
 8009b64:	b09c      	sub	sp, #112	; 0x70
 8009b66:	ab1d      	add	r3, sp, #116	; 0x74
 8009b68:	9002      	str	r0, [sp, #8]
 8009b6a:	9006      	str	r0, [sp, #24]
 8009b6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b70:	4809      	ldr	r0, [pc, #36]	; (8009b98 <siprintf+0x38>)
 8009b72:	9107      	str	r1, [sp, #28]
 8009b74:	9104      	str	r1, [sp, #16]
 8009b76:	4909      	ldr	r1, [pc, #36]	; (8009b9c <siprintf+0x3c>)
 8009b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b7c:	9105      	str	r1, [sp, #20]
 8009b7e:	6800      	ldr	r0, [r0, #0]
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	a902      	add	r1, sp, #8
 8009b84:	f001 fa94 	bl	800b0b0 <_svfiprintf_r>
 8009b88:	9b02      	ldr	r3, [sp, #8]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	b01c      	add	sp, #112	; 0x70
 8009b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b94:	b003      	add	sp, #12
 8009b96:	4770      	bx	lr
 8009b98:	2000000c 	.word	0x2000000c
 8009b9c:	ffff0208 	.word	0xffff0208

08009ba0 <strcpy>:
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ba6:	f803 2b01 	strb.w	r2, [r3], #1
 8009baa:	2a00      	cmp	r2, #0
 8009bac:	d1f9      	bne.n	8009ba2 <strcpy+0x2>
 8009bae:	4770      	bx	lr

08009bb0 <quorem>:
 8009bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	6903      	ldr	r3, [r0, #16]
 8009bb6:	690c      	ldr	r4, [r1, #16]
 8009bb8:	42a3      	cmp	r3, r4
 8009bba:	4607      	mov	r7, r0
 8009bbc:	f2c0 8081 	blt.w	8009cc2 <quorem+0x112>
 8009bc0:	3c01      	subs	r4, #1
 8009bc2:	f101 0814 	add.w	r8, r1, #20
 8009bc6:	f100 0514 	add.w	r5, r0, #20
 8009bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bce:	9301      	str	r3, [sp, #4]
 8009bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009be8:	d331      	bcc.n	8009c4e <quorem+0x9e>
 8009bea:	f04f 0e00 	mov.w	lr, #0
 8009bee:	4640      	mov	r0, r8
 8009bf0:	46ac      	mov	ip, r5
 8009bf2:	46f2      	mov	sl, lr
 8009bf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bf8:	b293      	uxth	r3, r2
 8009bfa:	fb06 e303 	mla	r3, r6, r3, lr
 8009bfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	ebaa 0303 	sub.w	r3, sl, r3
 8009c08:	f8dc a000 	ldr.w	sl, [ip]
 8009c0c:	0c12      	lsrs	r2, r2, #16
 8009c0e:	fa13 f38a 	uxtah	r3, r3, sl
 8009c12:	fb06 e202 	mla	r2, r6, r2, lr
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	9b00      	ldr	r3, [sp, #0]
 8009c1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c1e:	b292      	uxth	r2, r2
 8009c20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c28:	f8bd 3000 	ldrh.w	r3, [sp]
 8009c2c:	4581      	cmp	r9, r0
 8009c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c32:	f84c 3b04 	str.w	r3, [ip], #4
 8009c36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c3a:	d2db      	bcs.n	8009bf4 <quorem+0x44>
 8009c3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c40:	b92b      	cbnz	r3, 8009c4e <quorem+0x9e>
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	3b04      	subs	r3, #4
 8009c46:	429d      	cmp	r5, r3
 8009c48:	461a      	mov	r2, r3
 8009c4a:	d32e      	bcc.n	8009caa <quorem+0xfa>
 8009c4c:	613c      	str	r4, [r7, #16]
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f001 f8ba 	bl	800adc8 <__mcmp>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	db24      	blt.n	8009ca2 <quorem+0xf2>
 8009c58:	3601      	adds	r6, #1
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f04f 0c00 	mov.w	ip, #0
 8009c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c64:	f8d0 e000 	ldr.w	lr, [r0]
 8009c68:	b293      	uxth	r3, r2
 8009c6a:	ebac 0303 	sub.w	r3, ip, r3
 8009c6e:	0c12      	lsrs	r2, r2, #16
 8009c70:	fa13 f38e 	uxtah	r3, r3, lr
 8009c74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c82:	45c1      	cmp	r9, r8
 8009c84:	f840 3b04 	str.w	r3, [r0], #4
 8009c88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c8c:	d2e8      	bcs.n	8009c60 <quorem+0xb0>
 8009c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c96:	b922      	cbnz	r2, 8009ca2 <quorem+0xf2>
 8009c98:	3b04      	subs	r3, #4
 8009c9a:	429d      	cmp	r5, r3
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	d30a      	bcc.n	8009cb6 <quorem+0x106>
 8009ca0:	613c      	str	r4, [r7, #16]
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	b003      	add	sp, #12
 8009ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009caa:	6812      	ldr	r2, [r2, #0]
 8009cac:	3b04      	subs	r3, #4
 8009cae:	2a00      	cmp	r2, #0
 8009cb0:	d1cc      	bne.n	8009c4c <quorem+0x9c>
 8009cb2:	3c01      	subs	r4, #1
 8009cb4:	e7c7      	b.n	8009c46 <quorem+0x96>
 8009cb6:	6812      	ldr	r2, [r2, #0]
 8009cb8:	3b04      	subs	r3, #4
 8009cba:	2a00      	cmp	r2, #0
 8009cbc:	d1f0      	bne.n	8009ca0 <quorem+0xf0>
 8009cbe:	3c01      	subs	r4, #1
 8009cc0:	e7eb      	b.n	8009c9a <quorem+0xea>
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e7ee      	b.n	8009ca4 <quorem+0xf4>
	...

08009cc8 <_dtoa_r>:
 8009cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ccc:	ed2d 8b04 	vpush	{d8-d9}
 8009cd0:	ec57 6b10 	vmov	r6, r7, d0
 8009cd4:	b093      	sub	sp, #76	; 0x4c
 8009cd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009cd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009cdc:	9106      	str	r1, [sp, #24]
 8009cde:	ee10 aa10 	vmov	sl, s0
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ce8:	46bb      	mov	fp, r7
 8009cea:	b975      	cbnz	r5, 8009d0a <_dtoa_r+0x42>
 8009cec:	2010      	movs	r0, #16
 8009cee:	f7ff f9bf 	bl	8009070 <malloc>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	6260      	str	r0, [r4, #36]	; 0x24
 8009cf6:	b920      	cbnz	r0, 8009d02 <_dtoa_r+0x3a>
 8009cf8:	4ba7      	ldr	r3, [pc, #668]	; (8009f98 <_dtoa_r+0x2d0>)
 8009cfa:	21ea      	movs	r1, #234	; 0xea
 8009cfc:	48a7      	ldr	r0, [pc, #668]	; (8009f9c <_dtoa_r+0x2d4>)
 8009cfe:	f001 fad7 	bl	800b2b0 <__assert_func>
 8009d02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d06:	6005      	str	r5, [r0, #0]
 8009d08:	60c5      	str	r5, [r0, #12]
 8009d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d0c:	6819      	ldr	r1, [r3, #0]
 8009d0e:	b151      	cbz	r1, 8009d26 <_dtoa_r+0x5e>
 8009d10:	685a      	ldr	r2, [r3, #4]
 8009d12:	604a      	str	r2, [r1, #4]
 8009d14:	2301      	movs	r3, #1
 8009d16:	4093      	lsls	r3, r2
 8009d18:	608b      	str	r3, [r1, #8]
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 fe12 	bl	800a944 <_Bfree>
 8009d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	1e3b      	subs	r3, r7, #0
 8009d28:	bfaa      	itet	ge
 8009d2a:	2300      	movge	r3, #0
 8009d2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009d30:	f8c8 3000 	strge.w	r3, [r8]
 8009d34:	4b9a      	ldr	r3, [pc, #616]	; (8009fa0 <_dtoa_r+0x2d8>)
 8009d36:	bfbc      	itt	lt
 8009d38:	2201      	movlt	r2, #1
 8009d3a:	f8c8 2000 	strlt.w	r2, [r8]
 8009d3e:	ea33 030b 	bics.w	r3, r3, fp
 8009d42:	d11b      	bne.n	8009d7c <_dtoa_r+0xb4>
 8009d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d46:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d50:	4333      	orrs	r3, r6
 8009d52:	f000 8592 	beq.w	800a87a <_dtoa_r+0xbb2>
 8009d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d58:	b963      	cbnz	r3, 8009d74 <_dtoa_r+0xac>
 8009d5a:	4b92      	ldr	r3, [pc, #584]	; (8009fa4 <_dtoa_r+0x2dc>)
 8009d5c:	e022      	b.n	8009da4 <_dtoa_r+0xdc>
 8009d5e:	4b92      	ldr	r3, [pc, #584]	; (8009fa8 <_dtoa_r+0x2e0>)
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	3308      	adds	r3, #8
 8009d64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d66:	6013      	str	r3, [r2, #0]
 8009d68:	9801      	ldr	r0, [sp, #4]
 8009d6a:	b013      	add	sp, #76	; 0x4c
 8009d6c:	ecbd 8b04 	vpop	{d8-d9}
 8009d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d74:	4b8b      	ldr	r3, [pc, #556]	; (8009fa4 <_dtoa_r+0x2dc>)
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	3303      	adds	r3, #3
 8009d7a:	e7f3      	b.n	8009d64 <_dtoa_r+0x9c>
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	4650      	mov	r0, sl
 8009d82:	4659      	mov	r1, fp
 8009d84:	f7f6 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d88:	ec4b ab19 	vmov	d9, sl, fp
 8009d8c:	4680      	mov	r8, r0
 8009d8e:	b158      	cbz	r0, 8009da8 <_dtoa_r+0xe0>
 8009d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d92:	2301      	movs	r3, #1
 8009d94:	6013      	str	r3, [r2, #0]
 8009d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 856b 	beq.w	800a874 <_dtoa_r+0xbac>
 8009d9e:	4883      	ldr	r0, [pc, #524]	; (8009fac <_dtoa_r+0x2e4>)
 8009da0:	6018      	str	r0, [r3, #0]
 8009da2:	1e43      	subs	r3, r0, #1
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	e7df      	b.n	8009d68 <_dtoa_r+0xa0>
 8009da8:	ec4b ab10 	vmov	d0, sl, fp
 8009dac:	aa10      	add	r2, sp, #64	; 0x40
 8009dae:	a911      	add	r1, sp, #68	; 0x44
 8009db0:	4620      	mov	r0, r4
 8009db2:	f001 f8af 	bl	800af14 <__d2b>
 8009db6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009dba:	ee08 0a10 	vmov	s16, r0
 8009dbe:	2d00      	cmp	r5, #0
 8009dc0:	f000 8084 	beq.w	8009ecc <_dtoa_r+0x204>
 8009dc4:	ee19 3a90 	vmov	r3, s19
 8009dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009dd0:	4656      	mov	r6, sl
 8009dd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009dd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009dda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009dde:	4b74      	ldr	r3, [pc, #464]	; (8009fb0 <_dtoa_r+0x2e8>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	4630      	mov	r0, r6
 8009de4:	4639      	mov	r1, r7
 8009de6:	f7f6 fa4f 	bl	8000288 <__aeabi_dsub>
 8009dea:	a365      	add	r3, pc, #404	; (adr r3, 8009f80 <_dtoa_r+0x2b8>)
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f7f6 fc02 	bl	80005f8 <__aeabi_dmul>
 8009df4:	a364      	add	r3, pc, #400	; (adr r3, 8009f88 <_dtoa_r+0x2c0>)
 8009df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfa:	f7f6 fa47 	bl	800028c <__adddf3>
 8009dfe:	4606      	mov	r6, r0
 8009e00:	4628      	mov	r0, r5
 8009e02:	460f      	mov	r7, r1
 8009e04:	f7f6 fb8e 	bl	8000524 <__aeabi_i2d>
 8009e08:	a361      	add	r3, pc, #388	; (adr r3, 8009f90 <_dtoa_r+0x2c8>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	f7f6 fbf3 	bl	80005f8 <__aeabi_dmul>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4630      	mov	r0, r6
 8009e18:	4639      	mov	r1, r7
 8009e1a:	f7f6 fa37 	bl	800028c <__adddf3>
 8009e1e:	4606      	mov	r6, r0
 8009e20:	460f      	mov	r7, r1
 8009e22:	f7f6 fe99 	bl	8000b58 <__aeabi_d2iz>
 8009e26:	2200      	movs	r2, #0
 8009e28:	9000      	str	r0, [sp, #0]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	4639      	mov	r1, r7
 8009e30:	f7f6 fe54 	bl	8000adc <__aeabi_dcmplt>
 8009e34:	b150      	cbz	r0, 8009e4c <_dtoa_r+0x184>
 8009e36:	9800      	ldr	r0, [sp, #0]
 8009e38:	f7f6 fb74 	bl	8000524 <__aeabi_i2d>
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	463b      	mov	r3, r7
 8009e40:	f7f6 fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e44:	b910      	cbnz	r0, 8009e4c <_dtoa_r+0x184>
 8009e46:	9b00      	ldr	r3, [sp, #0]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	2b16      	cmp	r3, #22
 8009e50:	d85a      	bhi.n	8009f08 <_dtoa_r+0x240>
 8009e52:	9a00      	ldr	r2, [sp, #0]
 8009e54:	4b57      	ldr	r3, [pc, #348]	; (8009fb4 <_dtoa_r+0x2ec>)
 8009e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5e:	ec51 0b19 	vmov	r0, r1, d9
 8009e62:	f7f6 fe3b 	bl	8000adc <__aeabi_dcmplt>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d050      	beq.n	8009f0c <_dtoa_r+0x244>
 8009e6a:	9b00      	ldr	r3, [sp, #0]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	2300      	movs	r3, #0
 8009e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e76:	1b5d      	subs	r5, r3, r5
 8009e78:	1e6b      	subs	r3, r5, #1
 8009e7a:	9305      	str	r3, [sp, #20]
 8009e7c:	bf45      	ittet	mi
 8009e7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009e82:	9304      	strmi	r3, [sp, #16]
 8009e84:	2300      	movpl	r3, #0
 8009e86:	2300      	movmi	r3, #0
 8009e88:	bf4c      	ite	mi
 8009e8a:	9305      	strmi	r3, [sp, #20]
 8009e8c:	9304      	strpl	r3, [sp, #16]
 8009e8e:	9b00      	ldr	r3, [sp, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	db3d      	blt.n	8009f10 <_dtoa_r+0x248>
 8009e94:	9b05      	ldr	r3, [sp, #20]
 8009e96:	9a00      	ldr	r2, [sp, #0]
 8009e98:	920a      	str	r2, [sp, #40]	; 0x28
 8009e9a:	4413      	add	r3, r2
 8009e9c:	9305      	str	r3, [sp, #20]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	9307      	str	r3, [sp, #28]
 8009ea2:	9b06      	ldr	r3, [sp, #24]
 8009ea4:	2b09      	cmp	r3, #9
 8009ea6:	f200 8089 	bhi.w	8009fbc <_dtoa_r+0x2f4>
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	bfc4      	itt	gt
 8009eae:	3b04      	subgt	r3, #4
 8009eb0:	9306      	strgt	r3, [sp, #24]
 8009eb2:	9b06      	ldr	r3, [sp, #24]
 8009eb4:	f1a3 0302 	sub.w	r3, r3, #2
 8009eb8:	bfcc      	ite	gt
 8009eba:	2500      	movgt	r5, #0
 8009ebc:	2501      	movle	r5, #1
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	f200 8087 	bhi.w	8009fd2 <_dtoa_r+0x30a>
 8009ec4:	e8df f003 	tbb	[pc, r3]
 8009ec8:	59383a2d 	.word	0x59383a2d
 8009ecc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009ed0:	441d      	add	r5, r3
 8009ed2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ed6:	2b20      	cmp	r3, #32
 8009ed8:	bfc1      	itttt	gt
 8009eda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ede:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009ee2:	fa0b f303 	lslgt.w	r3, fp, r3
 8009ee6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009eea:	bfda      	itte	le
 8009eec:	f1c3 0320 	rsble	r3, r3, #32
 8009ef0:	fa06 f003 	lslle.w	r0, r6, r3
 8009ef4:	4318      	orrgt	r0, r3
 8009ef6:	f7f6 fb05 	bl	8000504 <__aeabi_ui2d>
 8009efa:	2301      	movs	r3, #1
 8009efc:	4606      	mov	r6, r0
 8009efe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009f02:	3d01      	subs	r5, #1
 8009f04:	930e      	str	r3, [sp, #56]	; 0x38
 8009f06:	e76a      	b.n	8009dde <_dtoa_r+0x116>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e7b2      	b.n	8009e72 <_dtoa_r+0x1aa>
 8009f0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f0e:	e7b1      	b.n	8009e74 <_dtoa_r+0x1ac>
 8009f10:	9b04      	ldr	r3, [sp, #16]
 8009f12:	9a00      	ldr	r2, [sp, #0]
 8009f14:	1a9b      	subs	r3, r3, r2
 8009f16:	9304      	str	r3, [sp, #16]
 8009f18:	4253      	negs	r3, r2
 8009f1a:	9307      	str	r3, [sp, #28]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f20:	e7bf      	b.n	8009ea2 <_dtoa_r+0x1da>
 8009f22:	2300      	movs	r3, #0
 8009f24:	9308      	str	r3, [sp, #32]
 8009f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	dc55      	bgt.n	8009fd8 <_dtoa_r+0x310>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f32:	461a      	mov	r2, r3
 8009f34:	9209      	str	r2, [sp, #36]	; 0x24
 8009f36:	e00c      	b.n	8009f52 <_dtoa_r+0x28a>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e7f3      	b.n	8009f24 <_dtoa_r+0x25c>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f40:	9308      	str	r3, [sp, #32]
 8009f42:	9b00      	ldr	r3, [sp, #0]
 8009f44:	4413      	add	r3, r2
 8009f46:	9302      	str	r3, [sp, #8]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	9303      	str	r3, [sp, #12]
 8009f4e:	bfb8      	it	lt
 8009f50:	2301      	movlt	r3, #1
 8009f52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009f54:	2200      	movs	r2, #0
 8009f56:	6042      	str	r2, [r0, #4]
 8009f58:	2204      	movs	r2, #4
 8009f5a:	f102 0614 	add.w	r6, r2, #20
 8009f5e:	429e      	cmp	r6, r3
 8009f60:	6841      	ldr	r1, [r0, #4]
 8009f62:	d93d      	bls.n	8009fe0 <_dtoa_r+0x318>
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 fcad 	bl	800a8c4 <_Balloc>
 8009f6a:	9001      	str	r0, [sp, #4]
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d13b      	bne.n	8009fe8 <_dtoa_r+0x320>
 8009f70:	4b11      	ldr	r3, [pc, #68]	; (8009fb8 <_dtoa_r+0x2f0>)
 8009f72:	4602      	mov	r2, r0
 8009f74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f78:	e6c0      	b.n	8009cfc <_dtoa_r+0x34>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e7df      	b.n	8009f3e <_dtoa_r+0x276>
 8009f7e:	bf00      	nop
 8009f80:	636f4361 	.word	0x636f4361
 8009f84:	3fd287a7 	.word	0x3fd287a7
 8009f88:	8b60c8b3 	.word	0x8b60c8b3
 8009f8c:	3fc68a28 	.word	0x3fc68a28
 8009f90:	509f79fb 	.word	0x509f79fb
 8009f94:	3fd34413 	.word	0x3fd34413
 8009f98:	0800c025 	.word	0x0800c025
 8009f9c:	0800c03c 	.word	0x0800c03c
 8009fa0:	7ff00000 	.word	0x7ff00000
 8009fa4:	0800c021 	.word	0x0800c021
 8009fa8:	0800c018 	.word	0x0800c018
 8009fac:	0800bff5 	.word	0x0800bff5
 8009fb0:	3ff80000 	.word	0x3ff80000
 8009fb4:	0800c130 	.word	0x0800c130
 8009fb8:	0800c097 	.word	0x0800c097
 8009fbc:	2501      	movs	r5, #1
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	9306      	str	r3, [sp, #24]
 8009fc2:	9508      	str	r5, [sp, #32]
 8009fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2312      	movs	r3, #18
 8009fd0:	e7b0      	b.n	8009f34 <_dtoa_r+0x26c>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	9308      	str	r3, [sp, #32]
 8009fd6:	e7f5      	b.n	8009fc4 <_dtoa_r+0x2fc>
 8009fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009fde:	e7b8      	b.n	8009f52 <_dtoa_r+0x28a>
 8009fe0:	3101      	adds	r1, #1
 8009fe2:	6041      	str	r1, [r0, #4]
 8009fe4:	0052      	lsls	r2, r2, #1
 8009fe6:	e7b8      	b.n	8009f5a <_dtoa_r+0x292>
 8009fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fea:	9a01      	ldr	r2, [sp, #4]
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	9b03      	ldr	r3, [sp, #12]
 8009ff0:	2b0e      	cmp	r3, #14
 8009ff2:	f200 809d 	bhi.w	800a130 <_dtoa_r+0x468>
 8009ff6:	2d00      	cmp	r5, #0
 8009ff8:	f000 809a 	beq.w	800a130 <_dtoa_r+0x468>
 8009ffc:	9b00      	ldr	r3, [sp, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	dd32      	ble.n	800a068 <_dtoa_r+0x3a0>
 800a002:	4ab7      	ldr	r2, [pc, #732]	; (800a2e0 <_dtoa_r+0x618>)
 800a004:	f003 030f 	and.w	r3, r3, #15
 800a008:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a00c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a010:	9b00      	ldr	r3, [sp, #0]
 800a012:	05d8      	lsls	r0, r3, #23
 800a014:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a018:	d516      	bpl.n	800a048 <_dtoa_r+0x380>
 800a01a:	4bb2      	ldr	r3, [pc, #712]	; (800a2e4 <_dtoa_r+0x61c>)
 800a01c:	ec51 0b19 	vmov	r0, r1, d9
 800a020:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a024:	f7f6 fc12 	bl	800084c <__aeabi_ddiv>
 800a028:	f007 070f 	and.w	r7, r7, #15
 800a02c:	4682      	mov	sl, r0
 800a02e:	468b      	mov	fp, r1
 800a030:	2503      	movs	r5, #3
 800a032:	4eac      	ldr	r6, [pc, #688]	; (800a2e4 <_dtoa_r+0x61c>)
 800a034:	b957      	cbnz	r7, 800a04c <_dtoa_r+0x384>
 800a036:	4642      	mov	r2, r8
 800a038:	464b      	mov	r3, r9
 800a03a:	4650      	mov	r0, sl
 800a03c:	4659      	mov	r1, fp
 800a03e:	f7f6 fc05 	bl	800084c <__aeabi_ddiv>
 800a042:	4682      	mov	sl, r0
 800a044:	468b      	mov	fp, r1
 800a046:	e028      	b.n	800a09a <_dtoa_r+0x3d2>
 800a048:	2502      	movs	r5, #2
 800a04a:	e7f2      	b.n	800a032 <_dtoa_r+0x36a>
 800a04c:	07f9      	lsls	r1, r7, #31
 800a04e:	d508      	bpl.n	800a062 <_dtoa_r+0x39a>
 800a050:	4640      	mov	r0, r8
 800a052:	4649      	mov	r1, r9
 800a054:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a058:	f7f6 face 	bl	80005f8 <__aeabi_dmul>
 800a05c:	3501      	adds	r5, #1
 800a05e:	4680      	mov	r8, r0
 800a060:	4689      	mov	r9, r1
 800a062:	107f      	asrs	r7, r7, #1
 800a064:	3608      	adds	r6, #8
 800a066:	e7e5      	b.n	800a034 <_dtoa_r+0x36c>
 800a068:	f000 809b 	beq.w	800a1a2 <_dtoa_r+0x4da>
 800a06c:	9b00      	ldr	r3, [sp, #0]
 800a06e:	4f9d      	ldr	r7, [pc, #628]	; (800a2e4 <_dtoa_r+0x61c>)
 800a070:	425e      	negs	r6, r3
 800a072:	4b9b      	ldr	r3, [pc, #620]	; (800a2e0 <_dtoa_r+0x618>)
 800a074:	f006 020f 	and.w	r2, r6, #15
 800a078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	ec51 0b19 	vmov	r0, r1, d9
 800a084:	f7f6 fab8 	bl	80005f8 <__aeabi_dmul>
 800a088:	1136      	asrs	r6, r6, #4
 800a08a:	4682      	mov	sl, r0
 800a08c:	468b      	mov	fp, r1
 800a08e:	2300      	movs	r3, #0
 800a090:	2502      	movs	r5, #2
 800a092:	2e00      	cmp	r6, #0
 800a094:	d17a      	bne.n	800a18c <_dtoa_r+0x4c4>
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1d3      	bne.n	800a042 <_dtoa_r+0x37a>
 800a09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 8082 	beq.w	800a1a6 <_dtoa_r+0x4de>
 800a0a2:	4b91      	ldr	r3, [pc, #580]	; (800a2e8 <_dtoa_r+0x620>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	4650      	mov	r0, sl
 800a0a8:	4659      	mov	r1, fp
 800a0aa:	f7f6 fd17 	bl	8000adc <__aeabi_dcmplt>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d079      	beq.n	800a1a6 <_dtoa_r+0x4de>
 800a0b2:	9b03      	ldr	r3, [sp, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d076      	beq.n	800a1a6 <_dtoa_r+0x4de>
 800a0b8:	9b02      	ldr	r3, [sp, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	dd36      	ble.n	800a12c <_dtoa_r+0x464>
 800a0be:	9b00      	ldr	r3, [sp, #0]
 800a0c0:	4650      	mov	r0, sl
 800a0c2:	4659      	mov	r1, fp
 800a0c4:	1e5f      	subs	r7, r3, #1
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	4b88      	ldr	r3, [pc, #544]	; (800a2ec <_dtoa_r+0x624>)
 800a0ca:	f7f6 fa95 	bl	80005f8 <__aeabi_dmul>
 800a0ce:	9e02      	ldr	r6, [sp, #8]
 800a0d0:	4682      	mov	sl, r0
 800a0d2:	468b      	mov	fp, r1
 800a0d4:	3501      	adds	r5, #1
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f7f6 fa24 	bl	8000524 <__aeabi_i2d>
 800a0dc:	4652      	mov	r2, sl
 800a0de:	465b      	mov	r3, fp
 800a0e0:	f7f6 fa8a 	bl	80005f8 <__aeabi_dmul>
 800a0e4:	4b82      	ldr	r3, [pc, #520]	; (800a2f0 <_dtoa_r+0x628>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f7f6 f8d0 	bl	800028c <__adddf3>
 800a0ec:	46d0      	mov	r8, sl
 800a0ee:	46d9      	mov	r9, fp
 800a0f0:	4682      	mov	sl, r0
 800a0f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a0f6:	2e00      	cmp	r6, #0
 800a0f8:	d158      	bne.n	800a1ac <_dtoa_r+0x4e4>
 800a0fa:	4b7e      	ldr	r3, [pc, #504]	; (800a2f4 <_dtoa_r+0x62c>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	4640      	mov	r0, r8
 800a100:	4649      	mov	r1, r9
 800a102:	f7f6 f8c1 	bl	8000288 <__aeabi_dsub>
 800a106:	4652      	mov	r2, sl
 800a108:	465b      	mov	r3, fp
 800a10a:	4680      	mov	r8, r0
 800a10c:	4689      	mov	r9, r1
 800a10e:	f7f6 fd03 	bl	8000b18 <__aeabi_dcmpgt>
 800a112:	2800      	cmp	r0, #0
 800a114:	f040 8295 	bne.w	800a642 <_dtoa_r+0x97a>
 800a118:	4652      	mov	r2, sl
 800a11a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a11e:	4640      	mov	r0, r8
 800a120:	4649      	mov	r1, r9
 800a122:	f7f6 fcdb 	bl	8000adc <__aeabi_dcmplt>
 800a126:	2800      	cmp	r0, #0
 800a128:	f040 8289 	bne.w	800a63e <_dtoa_r+0x976>
 800a12c:	ec5b ab19 	vmov	sl, fp, d9
 800a130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a132:	2b00      	cmp	r3, #0
 800a134:	f2c0 8148 	blt.w	800a3c8 <_dtoa_r+0x700>
 800a138:	9a00      	ldr	r2, [sp, #0]
 800a13a:	2a0e      	cmp	r2, #14
 800a13c:	f300 8144 	bgt.w	800a3c8 <_dtoa_r+0x700>
 800a140:	4b67      	ldr	r3, [pc, #412]	; (800a2e0 <_dtoa_r+0x618>)
 800a142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a146:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f280 80d5 	bge.w	800a2fc <_dtoa_r+0x634>
 800a152:	9b03      	ldr	r3, [sp, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f300 80d1 	bgt.w	800a2fc <_dtoa_r+0x634>
 800a15a:	f040 826f 	bne.w	800a63c <_dtoa_r+0x974>
 800a15e:	4b65      	ldr	r3, [pc, #404]	; (800a2f4 <_dtoa_r+0x62c>)
 800a160:	2200      	movs	r2, #0
 800a162:	4640      	mov	r0, r8
 800a164:	4649      	mov	r1, r9
 800a166:	f7f6 fa47 	bl	80005f8 <__aeabi_dmul>
 800a16a:	4652      	mov	r2, sl
 800a16c:	465b      	mov	r3, fp
 800a16e:	f7f6 fcc9 	bl	8000b04 <__aeabi_dcmpge>
 800a172:	9e03      	ldr	r6, [sp, #12]
 800a174:	4637      	mov	r7, r6
 800a176:	2800      	cmp	r0, #0
 800a178:	f040 8245 	bne.w	800a606 <_dtoa_r+0x93e>
 800a17c:	9d01      	ldr	r5, [sp, #4]
 800a17e:	2331      	movs	r3, #49	; 0x31
 800a180:	f805 3b01 	strb.w	r3, [r5], #1
 800a184:	9b00      	ldr	r3, [sp, #0]
 800a186:	3301      	adds	r3, #1
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	e240      	b.n	800a60e <_dtoa_r+0x946>
 800a18c:	07f2      	lsls	r2, r6, #31
 800a18e:	d505      	bpl.n	800a19c <_dtoa_r+0x4d4>
 800a190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a194:	f7f6 fa30 	bl	80005f8 <__aeabi_dmul>
 800a198:	3501      	adds	r5, #1
 800a19a:	2301      	movs	r3, #1
 800a19c:	1076      	asrs	r6, r6, #1
 800a19e:	3708      	adds	r7, #8
 800a1a0:	e777      	b.n	800a092 <_dtoa_r+0x3ca>
 800a1a2:	2502      	movs	r5, #2
 800a1a4:	e779      	b.n	800a09a <_dtoa_r+0x3d2>
 800a1a6:	9f00      	ldr	r7, [sp, #0]
 800a1a8:	9e03      	ldr	r6, [sp, #12]
 800a1aa:	e794      	b.n	800a0d6 <_dtoa_r+0x40e>
 800a1ac:	9901      	ldr	r1, [sp, #4]
 800a1ae:	4b4c      	ldr	r3, [pc, #304]	; (800a2e0 <_dtoa_r+0x618>)
 800a1b0:	4431      	add	r1, r6
 800a1b2:	910d      	str	r1, [sp, #52]	; 0x34
 800a1b4:	9908      	ldr	r1, [sp, #32]
 800a1b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1be:	2900      	cmp	r1, #0
 800a1c0:	d043      	beq.n	800a24a <_dtoa_r+0x582>
 800a1c2:	494d      	ldr	r1, [pc, #308]	; (800a2f8 <_dtoa_r+0x630>)
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	f7f6 fb41 	bl	800084c <__aeabi_ddiv>
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	465b      	mov	r3, fp
 800a1ce:	f7f6 f85b 	bl	8000288 <__aeabi_dsub>
 800a1d2:	9d01      	ldr	r5, [sp, #4]
 800a1d4:	4682      	mov	sl, r0
 800a1d6:	468b      	mov	fp, r1
 800a1d8:	4649      	mov	r1, r9
 800a1da:	4640      	mov	r0, r8
 800a1dc:	f7f6 fcbc 	bl	8000b58 <__aeabi_d2iz>
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	f7f6 f99f 	bl	8000524 <__aeabi_i2d>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	4649      	mov	r1, r9
 800a1ee:	f7f6 f84b 	bl	8000288 <__aeabi_dsub>
 800a1f2:	3630      	adds	r6, #48	; 0x30
 800a1f4:	f805 6b01 	strb.w	r6, [r5], #1
 800a1f8:	4652      	mov	r2, sl
 800a1fa:	465b      	mov	r3, fp
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	4689      	mov	r9, r1
 800a200:	f7f6 fc6c 	bl	8000adc <__aeabi_dcmplt>
 800a204:	2800      	cmp	r0, #0
 800a206:	d163      	bne.n	800a2d0 <_dtoa_r+0x608>
 800a208:	4642      	mov	r2, r8
 800a20a:	464b      	mov	r3, r9
 800a20c:	4936      	ldr	r1, [pc, #216]	; (800a2e8 <_dtoa_r+0x620>)
 800a20e:	2000      	movs	r0, #0
 800a210:	f7f6 f83a 	bl	8000288 <__aeabi_dsub>
 800a214:	4652      	mov	r2, sl
 800a216:	465b      	mov	r3, fp
 800a218:	f7f6 fc60 	bl	8000adc <__aeabi_dcmplt>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	f040 80b5 	bne.w	800a38c <_dtoa_r+0x6c4>
 800a222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a224:	429d      	cmp	r5, r3
 800a226:	d081      	beq.n	800a12c <_dtoa_r+0x464>
 800a228:	4b30      	ldr	r3, [pc, #192]	; (800a2ec <_dtoa_r+0x624>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	4650      	mov	r0, sl
 800a22e:	4659      	mov	r1, fp
 800a230:	f7f6 f9e2 	bl	80005f8 <__aeabi_dmul>
 800a234:	4b2d      	ldr	r3, [pc, #180]	; (800a2ec <_dtoa_r+0x624>)
 800a236:	4682      	mov	sl, r0
 800a238:	468b      	mov	fp, r1
 800a23a:	4640      	mov	r0, r8
 800a23c:	4649      	mov	r1, r9
 800a23e:	2200      	movs	r2, #0
 800a240:	f7f6 f9da 	bl	80005f8 <__aeabi_dmul>
 800a244:	4680      	mov	r8, r0
 800a246:	4689      	mov	r9, r1
 800a248:	e7c6      	b.n	800a1d8 <_dtoa_r+0x510>
 800a24a:	4650      	mov	r0, sl
 800a24c:	4659      	mov	r1, fp
 800a24e:	f7f6 f9d3 	bl	80005f8 <__aeabi_dmul>
 800a252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a254:	9d01      	ldr	r5, [sp, #4]
 800a256:	930f      	str	r3, [sp, #60]	; 0x3c
 800a258:	4682      	mov	sl, r0
 800a25a:	468b      	mov	fp, r1
 800a25c:	4649      	mov	r1, r9
 800a25e:	4640      	mov	r0, r8
 800a260:	f7f6 fc7a 	bl	8000b58 <__aeabi_d2iz>
 800a264:	4606      	mov	r6, r0
 800a266:	f7f6 f95d 	bl	8000524 <__aeabi_i2d>
 800a26a:	3630      	adds	r6, #48	; 0x30
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	4640      	mov	r0, r8
 800a272:	4649      	mov	r1, r9
 800a274:	f7f6 f808 	bl	8000288 <__aeabi_dsub>
 800a278:	f805 6b01 	strb.w	r6, [r5], #1
 800a27c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a27e:	429d      	cmp	r5, r3
 800a280:	4680      	mov	r8, r0
 800a282:	4689      	mov	r9, r1
 800a284:	f04f 0200 	mov.w	r2, #0
 800a288:	d124      	bne.n	800a2d4 <_dtoa_r+0x60c>
 800a28a:	4b1b      	ldr	r3, [pc, #108]	; (800a2f8 <_dtoa_r+0x630>)
 800a28c:	4650      	mov	r0, sl
 800a28e:	4659      	mov	r1, fp
 800a290:	f7f5 fffc 	bl	800028c <__adddf3>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4640      	mov	r0, r8
 800a29a:	4649      	mov	r1, r9
 800a29c:	f7f6 fc3c 	bl	8000b18 <__aeabi_dcmpgt>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d173      	bne.n	800a38c <_dtoa_r+0x6c4>
 800a2a4:	4652      	mov	r2, sl
 800a2a6:	465b      	mov	r3, fp
 800a2a8:	4913      	ldr	r1, [pc, #76]	; (800a2f8 <_dtoa_r+0x630>)
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	f7f5 ffec 	bl	8000288 <__aeabi_dsub>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	f7f6 fc10 	bl	8000adc <__aeabi_dcmplt>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	f43f af35 	beq.w	800a12c <_dtoa_r+0x464>
 800a2c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a2c4:	1e6b      	subs	r3, r5, #1
 800a2c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2cc:	2b30      	cmp	r3, #48	; 0x30
 800a2ce:	d0f8      	beq.n	800a2c2 <_dtoa_r+0x5fa>
 800a2d0:	9700      	str	r7, [sp, #0]
 800a2d2:	e049      	b.n	800a368 <_dtoa_r+0x6a0>
 800a2d4:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <_dtoa_r+0x624>)
 800a2d6:	f7f6 f98f 	bl	80005f8 <__aeabi_dmul>
 800a2da:	4680      	mov	r8, r0
 800a2dc:	4689      	mov	r9, r1
 800a2de:	e7bd      	b.n	800a25c <_dtoa_r+0x594>
 800a2e0:	0800c130 	.word	0x0800c130
 800a2e4:	0800c108 	.word	0x0800c108
 800a2e8:	3ff00000 	.word	0x3ff00000
 800a2ec:	40240000 	.word	0x40240000
 800a2f0:	401c0000 	.word	0x401c0000
 800a2f4:	40140000 	.word	0x40140000
 800a2f8:	3fe00000 	.word	0x3fe00000
 800a2fc:	9d01      	ldr	r5, [sp, #4]
 800a2fe:	4656      	mov	r6, sl
 800a300:	465f      	mov	r7, fp
 800a302:	4642      	mov	r2, r8
 800a304:	464b      	mov	r3, r9
 800a306:	4630      	mov	r0, r6
 800a308:	4639      	mov	r1, r7
 800a30a:	f7f6 fa9f 	bl	800084c <__aeabi_ddiv>
 800a30e:	f7f6 fc23 	bl	8000b58 <__aeabi_d2iz>
 800a312:	4682      	mov	sl, r0
 800a314:	f7f6 f906 	bl	8000524 <__aeabi_i2d>
 800a318:	4642      	mov	r2, r8
 800a31a:	464b      	mov	r3, r9
 800a31c:	f7f6 f96c 	bl	80005f8 <__aeabi_dmul>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4630      	mov	r0, r6
 800a326:	4639      	mov	r1, r7
 800a328:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a32c:	f7f5 ffac 	bl	8000288 <__aeabi_dsub>
 800a330:	f805 6b01 	strb.w	r6, [r5], #1
 800a334:	9e01      	ldr	r6, [sp, #4]
 800a336:	9f03      	ldr	r7, [sp, #12]
 800a338:	1bae      	subs	r6, r5, r6
 800a33a:	42b7      	cmp	r7, r6
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	d135      	bne.n	800a3ae <_dtoa_r+0x6e6>
 800a342:	f7f5 ffa3 	bl	800028c <__adddf3>
 800a346:	4642      	mov	r2, r8
 800a348:	464b      	mov	r3, r9
 800a34a:	4606      	mov	r6, r0
 800a34c:	460f      	mov	r7, r1
 800a34e:	f7f6 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 800a352:	b9d0      	cbnz	r0, 800a38a <_dtoa_r+0x6c2>
 800a354:	4642      	mov	r2, r8
 800a356:	464b      	mov	r3, r9
 800a358:	4630      	mov	r0, r6
 800a35a:	4639      	mov	r1, r7
 800a35c:	f7f6 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a360:	b110      	cbz	r0, 800a368 <_dtoa_r+0x6a0>
 800a362:	f01a 0f01 	tst.w	sl, #1
 800a366:	d110      	bne.n	800a38a <_dtoa_r+0x6c2>
 800a368:	4620      	mov	r0, r4
 800a36a:	ee18 1a10 	vmov	r1, s16
 800a36e:	f000 fae9 	bl	800a944 <_Bfree>
 800a372:	2300      	movs	r3, #0
 800a374:	9800      	ldr	r0, [sp, #0]
 800a376:	702b      	strb	r3, [r5, #0]
 800a378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a37a:	3001      	adds	r0, #1
 800a37c:	6018      	str	r0, [r3, #0]
 800a37e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a380:	2b00      	cmp	r3, #0
 800a382:	f43f acf1 	beq.w	8009d68 <_dtoa_r+0xa0>
 800a386:	601d      	str	r5, [r3, #0]
 800a388:	e4ee      	b.n	8009d68 <_dtoa_r+0xa0>
 800a38a:	9f00      	ldr	r7, [sp, #0]
 800a38c:	462b      	mov	r3, r5
 800a38e:	461d      	mov	r5, r3
 800a390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a394:	2a39      	cmp	r2, #57	; 0x39
 800a396:	d106      	bne.n	800a3a6 <_dtoa_r+0x6de>
 800a398:	9a01      	ldr	r2, [sp, #4]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d1f7      	bne.n	800a38e <_dtoa_r+0x6c6>
 800a39e:	9901      	ldr	r1, [sp, #4]
 800a3a0:	2230      	movs	r2, #48	; 0x30
 800a3a2:	3701      	adds	r7, #1
 800a3a4:	700a      	strb	r2, [r1, #0]
 800a3a6:	781a      	ldrb	r2, [r3, #0]
 800a3a8:	3201      	adds	r2, #1
 800a3aa:	701a      	strb	r2, [r3, #0]
 800a3ac:	e790      	b.n	800a2d0 <_dtoa_r+0x608>
 800a3ae:	4ba6      	ldr	r3, [pc, #664]	; (800a648 <_dtoa_r+0x980>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f7f6 f921 	bl	80005f8 <__aeabi_dmul>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460f      	mov	r7, r1
 800a3be:	f7f6 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d09d      	beq.n	800a302 <_dtoa_r+0x63a>
 800a3c6:	e7cf      	b.n	800a368 <_dtoa_r+0x6a0>
 800a3c8:	9a08      	ldr	r2, [sp, #32]
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	f000 80d7 	beq.w	800a57e <_dtoa_r+0x8b6>
 800a3d0:	9a06      	ldr	r2, [sp, #24]
 800a3d2:	2a01      	cmp	r2, #1
 800a3d4:	f300 80ba 	bgt.w	800a54c <_dtoa_r+0x884>
 800a3d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3da:	2a00      	cmp	r2, #0
 800a3dc:	f000 80b2 	beq.w	800a544 <_dtoa_r+0x87c>
 800a3e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3e4:	9e07      	ldr	r6, [sp, #28]
 800a3e6:	9d04      	ldr	r5, [sp, #16]
 800a3e8:	9a04      	ldr	r2, [sp, #16]
 800a3ea:	441a      	add	r2, r3
 800a3ec:	9204      	str	r2, [sp, #16]
 800a3ee:	9a05      	ldr	r2, [sp, #20]
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	441a      	add	r2, r3
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	9205      	str	r2, [sp, #20]
 800a3f8:	f000 fb5c 	bl	800aab4 <__i2b>
 800a3fc:	4607      	mov	r7, r0
 800a3fe:	2d00      	cmp	r5, #0
 800a400:	dd0c      	ble.n	800a41c <_dtoa_r+0x754>
 800a402:	9b05      	ldr	r3, [sp, #20]
 800a404:	2b00      	cmp	r3, #0
 800a406:	dd09      	ble.n	800a41c <_dtoa_r+0x754>
 800a408:	42ab      	cmp	r3, r5
 800a40a:	9a04      	ldr	r2, [sp, #16]
 800a40c:	bfa8      	it	ge
 800a40e:	462b      	movge	r3, r5
 800a410:	1ad2      	subs	r2, r2, r3
 800a412:	9204      	str	r2, [sp, #16]
 800a414:	9a05      	ldr	r2, [sp, #20]
 800a416:	1aed      	subs	r5, r5, r3
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	9305      	str	r3, [sp, #20]
 800a41c:	9b07      	ldr	r3, [sp, #28]
 800a41e:	b31b      	cbz	r3, 800a468 <_dtoa_r+0x7a0>
 800a420:	9b08      	ldr	r3, [sp, #32]
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 80af 	beq.w	800a586 <_dtoa_r+0x8be>
 800a428:	2e00      	cmp	r6, #0
 800a42a:	dd13      	ble.n	800a454 <_dtoa_r+0x78c>
 800a42c:	4639      	mov	r1, r7
 800a42e:	4632      	mov	r2, r6
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fbff 	bl	800ac34 <__pow5mult>
 800a436:	ee18 2a10 	vmov	r2, s16
 800a43a:	4601      	mov	r1, r0
 800a43c:	4607      	mov	r7, r0
 800a43e:	4620      	mov	r0, r4
 800a440:	f000 fb4e 	bl	800aae0 <__multiply>
 800a444:	ee18 1a10 	vmov	r1, s16
 800a448:	4680      	mov	r8, r0
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 fa7a 	bl	800a944 <_Bfree>
 800a450:	ee08 8a10 	vmov	s16, r8
 800a454:	9b07      	ldr	r3, [sp, #28]
 800a456:	1b9a      	subs	r2, r3, r6
 800a458:	d006      	beq.n	800a468 <_dtoa_r+0x7a0>
 800a45a:	ee18 1a10 	vmov	r1, s16
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 fbe8 	bl	800ac34 <__pow5mult>
 800a464:	ee08 0a10 	vmov	s16, r0
 800a468:	2101      	movs	r1, #1
 800a46a:	4620      	mov	r0, r4
 800a46c:	f000 fb22 	bl	800aab4 <__i2b>
 800a470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a472:	2b00      	cmp	r3, #0
 800a474:	4606      	mov	r6, r0
 800a476:	f340 8088 	ble.w	800a58a <_dtoa_r+0x8c2>
 800a47a:	461a      	mov	r2, r3
 800a47c:	4601      	mov	r1, r0
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 fbd8 	bl	800ac34 <__pow5mult>
 800a484:	9b06      	ldr	r3, [sp, #24]
 800a486:	2b01      	cmp	r3, #1
 800a488:	4606      	mov	r6, r0
 800a48a:	f340 8081 	ble.w	800a590 <_dtoa_r+0x8c8>
 800a48e:	f04f 0800 	mov.w	r8, #0
 800a492:	6933      	ldr	r3, [r6, #16]
 800a494:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a498:	6918      	ldr	r0, [r3, #16]
 800a49a:	f000 fabb 	bl	800aa14 <__hi0bits>
 800a49e:	f1c0 0020 	rsb	r0, r0, #32
 800a4a2:	9b05      	ldr	r3, [sp, #20]
 800a4a4:	4418      	add	r0, r3
 800a4a6:	f010 001f 	ands.w	r0, r0, #31
 800a4aa:	f000 8092 	beq.w	800a5d2 <_dtoa_r+0x90a>
 800a4ae:	f1c0 0320 	rsb	r3, r0, #32
 800a4b2:	2b04      	cmp	r3, #4
 800a4b4:	f340 808a 	ble.w	800a5cc <_dtoa_r+0x904>
 800a4b8:	f1c0 001c 	rsb	r0, r0, #28
 800a4bc:	9b04      	ldr	r3, [sp, #16]
 800a4be:	4403      	add	r3, r0
 800a4c0:	9304      	str	r3, [sp, #16]
 800a4c2:	9b05      	ldr	r3, [sp, #20]
 800a4c4:	4403      	add	r3, r0
 800a4c6:	4405      	add	r5, r0
 800a4c8:	9305      	str	r3, [sp, #20]
 800a4ca:	9b04      	ldr	r3, [sp, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	dd07      	ble.n	800a4e0 <_dtoa_r+0x818>
 800a4d0:	ee18 1a10 	vmov	r1, s16
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f000 fc06 	bl	800ace8 <__lshift>
 800a4dc:	ee08 0a10 	vmov	s16, r0
 800a4e0:	9b05      	ldr	r3, [sp, #20]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dd05      	ble.n	800a4f2 <_dtoa_r+0x82a>
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 fbfc 	bl	800ace8 <__lshift>
 800a4f0:	4606      	mov	r6, r0
 800a4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d06e      	beq.n	800a5d6 <_dtoa_r+0x90e>
 800a4f8:	ee18 0a10 	vmov	r0, s16
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	f000 fc63 	bl	800adc8 <__mcmp>
 800a502:	2800      	cmp	r0, #0
 800a504:	da67      	bge.n	800a5d6 <_dtoa_r+0x90e>
 800a506:	9b00      	ldr	r3, [sp, #0]
 800a508:	3b01      	subs	r3, #1
 800a50a:	ee18 1a10 	vmov	r1, s16
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	220a      	movs	r2, #10
 800a512:	2300      	movs	r3, #0
 800a514:	4620      	mov	r0, r4
 800a516:	f000 fa37 	bl	800a988 <__multadd>
 800a51a:	9b08      	ldr	r3, [sp, #32]
 800a51c:	ee08 0a10 	vmov	s16, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 81b1 	beq.w	800a888 <_dtoa_r+0xbc0>
 800a526:	2300      	movs	r3, #0
 800a528:	4639      	mov	r1, r7
 800a52a:	220a      	movs	r2, #10
 800a52c:	4620      	mov	r0, r4
 800a52e:	f000 fa2b 	bl	800a988 <__multadd>
 800a532:	9b02      	ldr	r3, [sp, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	4607      	mov	r7, r0
 800a538:	f300 808e 	bgt.w	800a658 <_dtoa_r+0x990>
 800a53c:	9b06      	ldr	r3, [sp, #24]
 800a53e:	2b02      	cmp	r3, #2
 800a540:	dc51      	bgt.n	800a5e6 <_dtoa_r+0x91e>
 800a542:	e089      	b.n	800a658 <_dtoa_r+0x990>
 800a544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a54a:	e74b      	b.n	800a3e4 <_dtoa_r+0x71c>
 800a54c:	9b03      	ldr	r3, [sp, #12]
 800a54e:	1e5e      	subs	r6, r3, #1
 800a550:	9b07      	ldr	r3, [sp, #28]
 800a552:	42b3      	cmp	r3, r6
 800a554:	bfbf      	itttt	lt
 800a556:	9b07      	ldrlt	r3, [sp, #28]
 800a558:	9607      	strlt	r6, [sp, #28]
 800a55a:	1af2      	sublt	r2, r6, r3
 800a55c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a55e:	bfb6      	itet	lt
 800a560:	189b      	addlt	r3, r3, r2
 800a562:	1b9e      	subge	r6, r3, r6
 800a564:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	bfb8      	it	lt
 800a56a:	2600      	movlt	r6, #0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	bfb7      	itett	lt
 800a570:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a574:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a578:	1a9d      	sublt	r5, r3, r2
 800a57a:	2300      	movlt	r3, #0
 800a57c:	e734      	b.n	800a3e8 <_dtoa_r+0x720>
 800a57e:	9e07      	ldr	r6, [sp, #28]
 800a580:	9d04      	ldr	r5, [sp, #16]
 800a582:	9f08      	ldr	r7, [sp, #32]
 800a584:	e73b      	b.n	800a3fe <_dtoa_r+0x736>
 800a586:	9a07      	ldr	r2, [sp, #28]
 800a588:	e767      	b.n	800a45a <_dtoa_r+0x792>
 800a58a:	9b06      	ldr	r3, [sp, #24]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	dc18      	bgt.n	800a5c2 <_dtoa_r+0x8fa>
 800a590:	f1ba 0f00 	cmp.w	sl, #0
 800a594:	d115      	bne.n	800a5c2 <_dtoa_r+0x8fa>
 800a596:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a59a:	b993      	cbnz	r3, 800a5c2 <_dtoa_r+0x8fa>
 800a59c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a5a0:	0d1b      	lsrs	r3, r3, #20
 800a5a2:	051b      	lsls	r3, r3, #20
 800a5a4:	b183      	cbz	r3, 800a5c8 <_dtoa_r+0x900>
 800a5a6:	9b04      	ldr	r3, [sp, #16]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	9304      	str	r3, [sp, #16]
 800a5ac:	9b05      	ldr	r3, [sp, #20]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	9305      	str	r3, [sp, #20]
 800a5b2:	f04f 0801 	mov.w	r8, #1
 800a5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f47f af6a 	bne.w	800a492 <_dtoa_r+0x7ca>
 800a5be:	2001      	movs	r0, #1
 800a5c0:	e76f      	b.n	800a4a2 <_dtoa_r+0x7da>
 800a5c2:	f04f 0800 	mov.w	r8, #0
 800a5c6:	e7f6      	b.n	800a5b6 <_dtoa_r+0x8ee>
 800a5c8:	4698      	mov	r8, r3
 800a5ca:	e7f4      	b.n	800a5b6 <_dtoa_r+0x8ee>
 800a5cc:	f43f af7d 	beq.w	800a4ca <_dtoa_r+0x802>
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	301c      	adds	r0, #28
 800a5d4:	e772      	b.n	800a4bc <_dtoa_r+0x7f4>
 800a5d6:	9b03      	ldr	r3, [sp, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	dc37      	bgt.n	800a64c <_dtoa_r+0x984>
 800a5dc:	9b06      	ldr	r3, [sp, #24]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	dd34      	ble.n	800a64c <_dtoa_r+0x984>
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	9302      	str	r3, [sp, #8]
 800a5e6:	9b02      	ldr	r3, [sp, #8]
 800a5e8:	b96b      	cbnz	r3, 800a606 <_dtoa_r+0x93e>
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	2205      	movs	r2, #5
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 f9ca 	bl	800a988 <__multadd>
 800a5f4:	4601      	mov	r1, r0
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	ee18 0a10 	vmov	r0, s16
 800a5fc:	f000 fbe4 	bl	800adc8 <__mcmp>
 800a600:	2800      	cmp	r0, #0
 800a602:	f73f adbb 	bgt.w	800a17c <_dtoa_r+0x4b4>
 800a606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a608:	9d01      	ldr	r5, [sp, #4]
 800a60a:	43db      	mvns	r3, r3
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	f04f 0800 	mov.w	r8, #0
 800a612:	4631      	mov	r1, r6
 800a614:	4620      	mov	r0, r4
 800a616:	f000 f995 	bl	800a944 <_Bfree>
 800a61a:	2f00      	cmp	r7, #0
 800a61c:	f43f aea4 	beq.w	800a368 <_dtoa_r+0x6a0>
 800a620:	f1b8 0f00 	cmp.w	r8, #0
 800a624:	d005      	beq.n	800a632 <_dtoa_r+0x96a>
 800a626:	45b8      	cmp	r8, r7
 800a628:	d003      	beq.n	800a632 <_dtoa_r+0x96a>
 800a62a:	4641      	mov	r1, r8
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 f989 	bl	800a944 <_Bfree>
 800a632:	4639      	mov	r1, r7
 800a634:	4620      	mov	r0, r4
 800a636:	f000 f985 	bl	800a944 <_Bfree>
 800a63a:	e695      	b.n	800a368 <_dtoa_r+0x6a0>
 800a63c:	2600      	movs	r6, #0
 800a63e:	4637      	mov	r7, r6
 800a640:	e7e1      	b.n	800a606 <_dtoa_r+0x93e>
 800a642:	9700      	str	r7, [sp, #0]
 800a644:	4637      	mov	r7, r6
 800a646:	e599      	b.n	800a17c <_dtoa_r+0x4b4>
 800a648:	40240000 	.word	0x40240000
 800a64c:	9b08      	ldr	r3, [sp, #32]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 80ca 	beq.w	800a7e8 <_dtoa_r+0xb20>
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	9302      	str	r3, [sp, #8]
 800a658:	2d00      	cmp	r5, #0
 800a65a:	dd05      	ble.n	800a668 <_dtoa_r+0x9a0>
 800a65c:	4639      	mov	r1, r7
 800a65e:	462a      	mov	r2, r5
 800a660:	4620      	mov	r0, r4
 800a662:	f000 fb41 	bl	800ace8 <__lshift>
 800a666:	4607      	mov	r7, r0
 800a668:	f1b8 0f00 	cmp.w	r8, #0
 800a66c:	d05b      	beq.n	800a726 <_dtoa_r+0xa5e>
 800a66e:	6879      	ldr	r1, [r7, #4]
 800a670:	4620      	mov	r0, r4
 800a672:	f000 f927 	bl	800a8c4 <_Balloc>
 800a676:	4605      	mov	r5, r0
 800a678:	b928      	cbnz	r0, 800a686 <_dtoa_r+0x9be>
 800a67a:	4b87      	ldr	r3, [pc, #540]	; (800a898 <_dtoa_r+0xbd0>)
 800a67c:	4602      	mov	r2, r0
 800a67e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a682:	f7ff bb3b 	b.w	8009cfc <_dtoa_r+0x34>
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	3202      	adds	r2, #2
 800a68a:	0092      	lsls	r2, r2, #2
 800a68c:	f107 010c 	add.w	r1, r7, #12
 800a690:	300c      	adds	r0, #12
 800a692:	f7fe fcf5 	bl	8009080 <memcpy>
 800a696:	2201      	movs	r2, #1
 800a698:	4629      	mov	r1, r5
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fb24 	bl	800ace8 <__lshift>
 800a6a0:	9b01      	ldr	r3, [sp, #4]
 800a6a2:	f103 0901 	add.w	r9, r3, #1
 800a6a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	9305      	str	r3, [sp, #20]
 800a6ae:	f00a 0301 	and.w	r3, sl, #1
 800a6b2:	46b8      	mov	r8, r7
 800a6b4:	9304      	str	r3, [sp, #16]
 800a6b6:	4607      	mov	r7, r0
 800a6b8:	4631      	mov	r1, r6
 800a6ba:	ee18 0a10 	vmov	r0, s16
 800a6be:	f7ff fa77 	bl	8009bb0 <quorem>
 800a6c2:	4641      	mov	r1, r8
 800a6c4:	9002      	str	r0, [sp, #8]
 800a6c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a6ca:	ee18 0a10 	vmov	r0, s16
 800a6ce:	f000 fb7b 	bl	800adc8 <__mcmp>
 800a6d2:	463a      	mov	r2, r7
 800a6d4:	9003      	str	r0, [sp, #12]
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 fb91 	bl	800ae00 <__mdiff>
 800a6de:	68c2      	ldr	r2, [r0, #12]
 800a6e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	bb02      	cbnz	r2, 800a72a <_dtoa_r+0xa62>
 800a6e8:	4601      	mov	r1, r0
 800a6ea:	ee18 0a10 	vmov	r0, s16
 800a6ee:	f000 fb6b 	bl	800adc8 <__mcmp>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	9207      	str	r2, [sp, #28]
 800a6fa:	f000 f923 	bl	800a944 <_Bfree>
 800a6fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a702:	ea43 0102 	orr.w	r1, r3, r2
 800a706:	9b04      	ldr	r3, [sp, #16]
 800a708:	430b      	orrs	r3, r1
 800a70a:	464d      	mov	r5, r9
 800a70c:	d10f      	bne.n	800a72e <_dtoa_r+0xa66>
 800a70e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a712:	d02a      	beq.n	800a76a <_dtoa_r+0xaa2>
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	dd02      	ble.n	800a720 <_dtoa_r+0xa58>
 800a71a:	9b02      	ldr	r3, [sp, #8]
 800a71c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a720:	f88b a000 	strb.w	sl, [fp]
 800a724:	e775      	b.n	800a612 <_dtoa_r+0x94a>
 800a726:	4638      	mov	r0, r7
 800a728:	e7ba      	b.n	800a6a0 <_dtoa_r+0x9d8>
 800a72a:	2201      	movs	r2, #1
 800a72c:	e7e2      	b.n	800a6f4 <_dtoa_r+0xa2c>
 800a72e:	9b03      	ldr	r3, [sp, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	db04      	blt.n	800a73e <_dtoa_r+0xa76>
 800a734:	9906      	ldr	r1, [sp, #24]
 800a736:	430b      	orrs	r3, r1
 800a738:	9904      	ldr	r1, [sp, #16]
 800a73a:	430b      	orrs	r3, r1
 800a73c:	d122      	bne.n	800a784 <_dtoa_r+0xabc>
 800a73e:	2a00      	cmp	r2, #0
 800a740:	ddee      	ble.n	800a720 <_dtoa_r+0xa58>
 800a742:	ee18 1a10 	vmov	r1, s16
 800a746:	2201      	movs	r2, #1
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 facd 	bl	800ace8 <__lshift>
 800a74e:	4631      	mov	r1, r6
 800a750:	ee08 0a10 	vmov	s16, r0
 800a754:	f000 fb38 	bl	800adc8 <__mcmp>
 800a758:	2800      	cmp	r0, #0
 800a75a:	dc03      	bgt.n	800a764 <_dtoa_r+0xa9c>
 800a75c:	d1e0      	bne.n	800a720 <_dtoa_r+0xa58>
 800a75e:	f01a 0f01 	tst.w	sl, #1
 800a762:	d0dd      	beq.n	800a720 <_dtoa_r+0xa58>
 800a764:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a768:	d1d7      	bne.n	800a71a <_dtoa_r+0xa52>
 800a76a:	2339      	movs	r3, #57	; 0x39
 800a76c:	f88b 3000 	strb.w	r3, [fp]
 800a770:	462b      	mov	r3, r5
 800a772:	461d      	mov	r5, r3
 800a774:	3b01      	subs	r3, #1
 800a776:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a77a:	2a39      	cmp	r2, #57	; 0x39
 800a77c:	d071      	beq.n	800a862 <_dtoa_r+0xb9a>
 800a77e:	3201      	adds	r2, #1
 800a780:	701a      	strb	r2, [r3, #0]
 800a782:	e746      	b.n	800a612 <_dtoa_r+0x94a>
 800a784:	2a00      	cmp	r2, #0
 800a786:	dd07      	ble.n	800a798 <_dtoa_r+0xad0>
 800a788:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a78c:	d0ed      	beq.n	800a76a <_dtoa_r+0xaa2>
 800a78e:	f10a 0301 	add.w	r3, sl, #1
 800a792:	f88b 3000 	strb.w	r3, [fp]
 800a796:	e73c      	b.n	800a612 <_dtoa_r+0x94a>
 800a798:	9b05      	ldr	r3, [sp, #20]
 800a79a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a79e:	4599      	cmp	r9, r3
 800a7a0:	d047      	beq.n	800a832 <_dtoa_r+0xb6a>
 800a7a2:	ee18 1a10 	vmov	r1, s16
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	220a      	movs	r2, #10
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f000 f8ec 	bl	800a988 <__multadd>
 800a7b0:	45b8      	cmp	r8, r7
 800a7b2:	ee08 0a10 	vmov	s16, r0
 800a7b6:	f04f 0300 	mov.w	r3, #0
 800a7ba:	f04f 020a 	mov.w	r2, #10
 800a7be:	4641      	mov	r1, r8
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	d106      	bne.n	800a7d2 <_dtoa_r+0xb0a>
 800a7c4:	f000 f8e0 	bl	800a988 <__multadd>
 800a7c8:	4680      	mov	r8, r0
 800a7ca:	4607      	mov	r7, r0
 800a7cc:	f109 0901 	add.w	r9, r9, #1
 800a7d0:	e772      	b.n	800a6b8 <_dtoa_r+0x9f0>
 800a7d2:	f000 f8d9 	bl	800a988 <__multadd>
 800a7d6:	4639      	mov	r1, r7
 800a7d8:	4680      	mov	r8, r0
 800a7da:	2300      	movs	r3, #0
 800a7dc:	220a      	movs	r2, #10
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 f8d2 	bl	800a988 <__multadd>
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	e7f1      	b.n	800a7cc <_dtoa_r+0xb04>
 800a7e8:	9b03      	ldr	r3, [sp, #12]
 800a7ea:	9302      	str	r3, [sp, #8]
 800a7ec:	9d01      	ldr	r5, [sp, #4]
 800a7ee:	ee18 0a10 	vmov	r0, s16
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	f7ff f9dc 	bl	8009bb0 <quorem>
 800a7f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a7fc:	9b01      	ldr	r3, [sp, #4]
 800a7fe:	f805 ab01 	strb.w	sl, [r5], #1
 800a802:	1aea      	subs	r2, r5, r3
 800a804:	9b02      	ldr	r3, [sp, #8]
 800a806:	4293      	cmp	r3, r2
 800a808:	dd09      	ble.n	800a81e <_dtoa_r+0xb56>
 800a80a:	ee18 1a10 	vmov	r1, s16
 800a80e:	2300      	movs	r3, #0
 800a810:	220a      	movs	r2, #10
 800a812:	4620      	mov	r0, r4
 800a814:	f000 f8b8 	bl	800a988 <__multadd>
 800a818:	ee08 0a10 	vmov	s16, r0
 800a81c:	e7e7      	b.n	800a7ee <_dtoa_r+0xb26>
 800a81e:	9b02      	ldr	r3, [sp, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	bfc8      	it	gt
 800a824:	461d      	movgt	r5, r3
 800a826:	9b01      	ldr	r3, [sp, #4]
 800a828:	bfd8      	it	le
 800a82a:	2501      	movle	r5, #1
 800a82c:	441d      	add	r5, r3
 800a82e:	f04f 0800 	mov.w	r8, #0
 800a832:	ee18 1a10 	vmov	r1, s16
 800a836:	2201      	movs	r2, #1
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 fa55 	bl	800ace8 <__lshift>
 800a83e:	4631      	mov	r1, r6
 800a840:	ee08 0a10 	vmov	s16, r0
 800a844:	f000 fac0 	bl	800adc8 <__mcmp>
 800a848:	2800      	cmp	r0, #0
 800a84a:	dc91      	bgt.n	800a770 <_dtoa_r+0xaa8>
 800a84c:	d102      	bne.n	800a854 <_dtoa_r+0xb8c>
 800a84e:	f01a 0f01 	tst.w	sl, #1
 800a852:	d18d      	bne.n	800a770 <_dtoa_r+0xaa8>
 800a854:	462b      	mov	r3, r5
 800a856:	461d      	mov	r5, r3
 800a858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a85c:	2a30      	cmp	r2, #48	; 0x30
 800a85e:	d0fa      	beq.n	800a856 <_dtoa_r+0xb8e>
 800a860:	e6d7      	b.n	800a612 <_dtoa_r+0x94a>
 800a862:	9a01      	ldr	r2, [sp, #4]
 800a864:	429a      	cmp	r2, r3
 800a866:	d184      	bne.n	800a772 <_dtoa_r+0xaaa>
 800a868:	9b00      	ldr	r3, [sp, #0]
 800a86a:	3301      	adds	r3, #1
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	2331      	movs	r3, #49	; 0x31
 800a870:	7013      	strb	r3, [r2, #0]
 800a872:	e6ce      	b.n	800a612 <_dtoa_r+0x94a>
 800a874:	4b09      	ldr	r3, [pc, #36]	; (800a89c <_dtoa_r+0xbd4>)
 800a876:	f7ff ba95 	b.w	8009da4 <_dtoa_r+0xdc>
 800a87a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f47f aa6e 	bne.w	8009d5e <_dtoa_r+0x96>
 800a882:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <_dtoa_r+0xbd8>)
 800a884:	f7ff ba8e 	b.w	8009da4 <_dtoa_r+0xdc>
 800a888:	9b02      	ldr	r3, [sp, #8]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	dcae      	bgt.n	800a7ec <_dtoa_r+0xb24>
 800a88e:	9b06      	ldr	r3, [sp, #24]
 800a890:	2b02      	cmp	r3, #2
 800a892:	f73f aea8 	bgt.w	800a5e6 <_dtoa_r+0x91e>
 800a896:	e7a9      	b.n	800a7ec <_dtoa_r+0xb24>
 800a898:	0800c097 	.word	0x0800c097
 800a89c:	0800bff4 	.word	0x0800bff4
 800a8a0:	0800c018 	.word	0x0800c018

0800a8a4 <_localeconv_r>:
 800a8a4:	4800      	ldr	r0, [pc, #0]	; (800a8a8 <_localeconv_r+0x4>)
 800a8a6:	4770      	bx	lr
 800a8a8:	20000160 	.word	0x20000160

0800a8ac <__malloc_lock>:
 800a8ac:	4801      	ldr	r0, [pc, #4]	; (800a8b4 <__malloc_lock+0x8>)
 800a8ae:	f000 bd30 	b.w	800b312 <__retarget_lock_acquire_recursive>
 800a8b2:	bf00      	nop
 800a8b4:	20000524 	.word	0x20000524

0800a8b8 <__malloc_unlock>:
 800a8b8:	4801      	ldr	r0, [pc, #4]	; (800a8c0 <__malloc_unlock+0x8>)
 800a8ba:	f000 bd2b 	b.w	800b314 <__retarget_lock_release_recursive>
 800a8be:	bf00      	nop
 800a8c0:	20000524 	.word	0x20000524

0800a8c4 <_Balloc>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	460d      	mov	r5, r1
 800a8cc:	b976      	cbnz	r6, 800a8ec <_Balloc+0x28>
 800a8ce:	2010      	movs	r0, #16
 800a8d0:	f7fe fbce 	bl	8009070 <malloc>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	6260      	str	r0, [r4, #36]	; 0x24
 800a8d8:	b920      	cbnz	r0, 800a8e4 <_Balloc+0x20>
 800a8da:	4b18      	ldr	r3, [pc, #96]	; (800a93c <_Balloc+0x78>)
 800a8dc:	4818      	ldr	r0, [pc, #96]	; (800a940 <_Balloc+0x7c>)
 800a8de:	2166      	movs	r1, #102	; 0x66
 800a8e0:	f000 fce6 	bl	800b2b0 <__assert_func>
 800a8e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8e8:	6006      	str	r6, [r0, #0]
 800a8ea:	60c6      	str	r6, [r0, #12]
 800a8ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8ee:	68f3      	ldr	r3, [r6, #12]
 800a8f0:	b183      	cbz	r3, 800a914 <_Balloc+0x50>
 800a8f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8fa:	b9b8      	cbnz	r0, 800a92c <_Balloc+0x68>
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	fa01 f605 	lsl.w	r6, r1, r5
 800a902:	1d72      	adds	r2, r6, #5
 800a904:	0092      	lsls	r2, r2, #2
 800a906:	4620      	mov	r0, r4
 800a908:	f000 fb60 	bl	800afcc <_calloc_r>
 800a90c:	b160      	cbz	r0, 800a928 <_Balloc+0x64>
 800a90e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a912:	e00e      	b.n	800a932 <_Balloc+0x6e>
 800a914:	2221      	movs	r2, #33	; 0x21
 800a916:	2104      	movs	r1, #4
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 fb57 	bl	800afcc <_calloc_r>
 800a91e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a920:	60f0      	str	r0, [r6, #12]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e4      	bne.n	800a8f2 <_Balloc+0x2e>
 800a928:	2000      	movs	r0, #0
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	6802      	ldr	r2, [r0, #0]
 800a92e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a932:	2300      	movs	r3, #0
 800a934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a938:	e7f7      	b.n	800a92a <_Balloc+0x66>
 800a93a:	bf00      	nop
 800a93c:	0800c025 	.word	0x0800c025
 800a940:	0800c0a8 	.word	0x0800c0a8

0800a944 <_Bfree>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a948:	4605      	mov	r5, r0
 800a94a:	460c      	mov	r4, r1
 800a94c:	b976      	cbnz	r6, 800a96c <_Bfree+0x28>
 800a94e:	2010      	movs	r0, #16
 800a950:	f7fe fb8e 	bl	8009070 <malloc>
 800a954:	4602      	mov	r2, r0
 800a956:	6268      	str	r0, [r5, #36]	; 0x24
 800a958:	b920      	cbnz	r0, 800a964 <_Bfree+0x20>
 800a95a:	4b09      	ldr	r3, [pc, #36]	; (800a980 <_Bfree+0x3c>)
 800a95c:	4809      	ldr	r0, [pc, #36]	; (800a984 <_Bfree+0x40>)
 800a95e:	218a      	movs	r1, #138	; 0x8a
 800a960:	f000 fca6 	bl	800b2b0 <__assert_func>
 800a964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a968:	6006      	str	r6, [r0, #0]
 800a96a:	60c6      	str	r6, [r0, #12]
 800a96c:	b13c      	cbz	r4, 800a97e <_Bfree+0x3a>
 800a96e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a970:	6862      	ldr	r2, [r4, #4]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a978:	6021      	str	r1, [r4, #0]
 800a97a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a97e:	bd70      	pop	{r4, r5, r6, pc}
 800a980:	0800c025 	.word	0x0800c025
 800a984:	0800c0a8 	.word	0x0800c0a8

0800a988 <__multadd>:
 800a988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a98c:	690d      	ldr	r5, [r1, #16]
 800a98e:	4607      	mov	r7, r0
 800a990:	460c      	mov	r4, r1
 800a992:	461e      	mov	r6, r3
 800a994:	f101 0c14 	add.w	ip, r1, #20
 800a998:	2000      	movs	r0, #0
 800a99a:	f8dc 3000 	ldr.w	r3, [ip]
 800a99e:	b299      	uxth	r1, r3
 800a9a0:	fb02 6101 	mla	r1, r2, r1, r6
 800a9a4:	0c1e      	lsrs	r6, r3, #16
 800a9a6:	0c0b      	lsrs	r3, r1, #16
 800a9a8:	fb02 3306 	mla	r3, r2, r6, r3
 800a9ac:	b289      	uxth	r1, r1
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9b4:	4285      	cmp	r5, r0
 800a9b6:	f84c 1b04 	str.w	r1, [ip], #4
 800a9ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9be:	dcec      	bgt.n	800a99a <__multadd+0x12>
 800a9c0:	b30e      	cbz	r6, 800aa06 <__multadd+0x7e>
 800a9c2:	68a3      	ldr	r3, [r4, #8]
 800a9c4:	42ab      	cmp	r3, r5
 800a9c6:	dc19      	bgt.n	800a9fc <__multadd+0x74>
 800a9c8:	6861      	ldr	r1, [r4, #4]
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	3101      	adds	r1, #1
 800a9ce:	f7ff ff79 	bl	800a8c4 <_Balloc>
 800a9d2:	4680      	mov	r8, r0
 800a9d4:	b928      	cbnz	r0, 800a9e2 <__multadd+0x5a>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <__multadd+0x84>)
 800a9da:	480d      	ldr	r0, [pc, #52]	; (800aa10 <__multadd+0x88>)
 800a9dc:	21b5      	movs	r1, #181	; 0xb5
 800a9de:	f000 fc67 	bl	800b2b0 <__assert_func>
 800a9e2:	6922      	ldr	r2, [r4, #16]
 800a9e4:	3202      	adds	r2, #2
 800a9e6:	f104 010c 	add.w	r1, r4, #12
 800a9ea:	0092      	lsls	r2, r2, #2
 800a9ec:	300c      	adds	r0, #12
 800a9ee:	f7fe fb47 	bl	8009080 <memcpy>
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff ffa5 	bl	800a944 <_Bfree>
 800a9fa:	4644      	mov	r4, r8
 800a9fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa00:	3501      	adds	r5, #1
 800aa02:	615e      	str	r6, [r3, #20]
 800aa04:	6125      	str	r5, [r4, #16]
 800aa06:	4620      	mov	r0, r4
 800aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0c:	0800c097 	.word	0x0800c097
 800aa10:	0800c0a8 	.word	0x0800c0a8

0800aa14 <__hi0bits>:
 800aa14:	0c03      	lsrs	r3, r0, #16
 800aa16:	041b      	lsls	r3, r3, #16
 800aa18:	b9d3      	cbnz	r3, 800aa50 <__hi0bits+0x3c>
 800aa1a:	0400      	lsls	r0, r0, #16
 800aa1c:	2310      	movs	r3, #16
 800aa1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa22:	bf04      	itt	eq
 800aa24:	0200      	lsleq	r0, r0, #8
 800aa26:	3308      	addeq	r3, #8
 800aa28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa2c:	bf04      	itt	eq
 800aa2e:	0100      	lsleq	r0, r0, #4
 800aa30:	3304      	addeq	r3, #4
 800aa32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa36:	bf04      	itt	eq
 800aa38:	0080      	lsleq	r0, r0, #2
 800aa3a:	3302      	addeq	r3, #2
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	db05      	blt.n	800aa4c <__hi0bits+0x38>
 800aa40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aa44:	f103 0301 	add.w	r3, r3, #1
 800aa48:	bf08      	it	eq
 800aa4a:	2320      	moveq	r3, #32
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	4770      	bx	lr
 800aa50:	2300      	movs	r3, #0
 800aa52:	e7e4      	b.n	800aa1e <__hi0bits+0xa>

0800aa54 <__lo0bits>:
 800aa54:	6803      	ldr	r3, [r0, #0]
 800aa56:	f013 0207 	ands.w	r2, r3, #7
 800aa5a:	4601      	mov	r1, r0
 800aa5c:	d00b      	beq.n	800aa76 <__lo0bits+0x22>
 800aa5e:	07da      	lsls	r2, r3, #31
 800aa60:	d423      	bmi.n	800aaaa <__lo0bits+0x56>
 800aa62:	0798      	lsls	r0, r3, #30
 800aa64:	bf49      	itett	mi
 800aa66:	085b      	lsrmi	r3, r3, #1
 800aa68:	089b      	lsrpl	r3, r3, #2
 800aa6a:	2001      	movmi	r0, #1
 800aa6c:	600b      	strmi	r3, [r1, #0]
 800aa6e:	bf5c      	itt	pl
 800aa70:	600b      	strpl	r3, [r1, #0]
 800aa72:	2002      	movpl	r0, #2
 800aa74:	4770      	bx	lr
 800aa76:	b298      	uxth	r0, r3
 800aa78:	b9a8      	cbnz	r0, 800aaa6 <__lo0bits+0x52>
 800aa7a:	0c1b      	lsrs	r3, r3, #16
 800aa7c:	2010      	movs	r0, #16
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	b90a      	cbnz	r2, 800aa86 <__lo0bits+0x32>
 800aa82:	3008      	adds	r0, #8
 800aa84:	0a1b      	lsrs	r3, r3, #8
 800aa86:	071a      	lsls	r2, r3, #28
 800aa88:	bf04      	itt	eq
 800aa8a:	091b      	lsreq	r3, r3, #4
 800aa8c:	3004      	addeq	r0, #4
 800aa8e:	079a      	lsls	r2, r3, #30
 800aa90:	bf04      	itt	eq
 800aa92:	089b      	lsreq	r3, r3, #2
 800aa94:	3002      	addeq	r0, #2
 800aa96:	07da      	lsls	r2, r3, #31
 800aa98:	d403      	bmi.n	800aaa2 <__lo0bits+0x4e>
 800aa9a:	085b      	lsrs	r3, r3, #1
 800aa9c:	f100 0001 	add.w	r0, r0, #1
 800aaa0:	d005      	beq.n	800aaae <__lo0bits+0x5a>
 800aaa2:	600b      	str	r3, [r1, #0]
 800aaa4:	4770      	bx	lr
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	e7e9      	b.n	800aa7e <__lo0bits+0x2a>
 800aaaa:	2000      	movs	r0, #0
 800aaac:	4770      	bx	lr
 800aaae:	2020      	movs	r0, #32
 800aab0:	4770      	bx	lr
	...

0800aab4 <__i2b>:
 800aab4:	b510      	push	{r4, lr}
 800aab6:	460c      	mov	r4, r1
 800aab8:	2101      	movs	r1, #1
 800aaba:	f7ff ff03 	bl	800a8c4 <_Balloc>
 800aabe:	4602      	mov	r2, r0
 800aac0:	b928      	cbnz	r0, 800aace <__i2b+0x1a>
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <__i2b+0x24>)
 800aac4:	4805      	ldr	r0, [pc, #20]	; (800aadc <__i2b+0x28>)
 800aac6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aaca:	f000 fbf1 	bl	800b2b0 <__assert_func>
 800aace:	2301      	movs	r3, #1
 800aad0:	6144      	str	r4, [r0, #20]
 800aad2:	6103      	str	r3, [r0, #16]
 800aad4:	bd10      	pop	{r4, pc}
 800aad6:	bf00      	nop
 800aad8:	0800c097 	.word	0x0800c097
 800aadc:	0800c0a8 	.word	0x0800c0a8

0800aae0 <__multiply>:
 800aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae4:	4691      	mov	r9, r2
 800aae6:	690a      	ldr	r2, [r1, #16]
 800aae8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	bfb8      	it	lt
 800aaf0:	460b      	movlt	r3, r1
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	bfbc      	itt	lt
 800aaf6:	464c      	movlt	r4, r9
 800aaf8:	4699      	movlt	r9, r3
 800aafa:	6927      	ldr	r7, [r4, #16]
 800aafc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab00:	68a3      	ldr	r3, [r4, #8]
 800ab02:	6861      	ldr	r1, [r4, #4]
 800ab04:	eb07 060a 	add.w	r6, r7, sl
 800ab08:	42b3      	cmp	r3, r6
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	bfb8      	it	lt
 800ab0e:	3101      	addlt	r1, #1
 800ab10:	f7ff fed8 	bl	800a8c4 <_Balloc>
 800ab14:	b930      	cbnz	r0, 800ab24 <__multiply+0x44>
 800ab16:	4602      	mov	r2, r0
 800ab18:	4b44      	ldr	r3, [pc, #272]	; (800ac2c <__multiply+0x14c>)
 800ab1a:	4845      	ldr	r0, [pc, #276]	; (800ac30 <__multiply+0x150>)
 800ab1c:	f240 115d 	movw	r1, #349	; 0x15d
 800ab20:	f000 fbc6 	bl	800b2b0 <__assert_func>
 800ab24:	f100 0514 	add.w	r5, r0, #20
 800ab28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab2c:	462b      	mov	r3, r5
 800ab2e:	2200      	movs	r2, #0
 800ab30:	4543      	cmp	r3, r8
 800ab32:	d321      	bcc.n	800ab78 <__multiply+0x98>
 800ab34:	f104 0314 	add.w	r3, r4, #20
 800ab38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ab3c:	f109 0314 	add.w	r3, r9, #20
 800ab40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ab44:	9202      	str	r2, [sp, #8]
 800ab46:	1b3a      	subs	r2, r7, r4
 800ab48:	3a15      	subs	r2, #21
 800ab4a:	f022 0203 	bic.w	r2, r2, #3
 800ab4e:	3204      	adds	r2, #4
 800ab50:	f104 0115 	add.w	r1, r4, #21
 800ab54:	428f      	cmp	r7, r1
 800ab56:	bf38      	it	cc
 800ab58:	2204      	movcc	r2, #4
 800ab5a:	9201      	str	r2, [sp, #4]
 800ab5c:	9a02      	ldr	r2, [sp, #8]
 800ab5e:	9303      	str	r3, [sp, #12]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d80c      	bhi.n	800ab7e <__multiply+0x9e>
 800ab64:	2e00      	cmp	r6, #0
 800ab66:	dd03      	ble.n	800ab70 <__multiply+0x90>
 800ab68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d05a      	beq.n	800ac26 <__multiply+0x146>
 800ab70:	6106      	str	r6, [r0, #16]
 800ab72:	b005      	add	sp, #20
 800ab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab78:	f843 2b04 	str.w	r2, [r3], #4
 800ab7c:	e7d8      	b.n	800ab30 <__multiply+0x50>
 800ab7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab82:	f1ba 0f00 	cmp.w	sl, #0
 800ab86:	d024      	beq.n	800abd2 <__multiply+0xf2>
 800ab88:	f104 0e14 	add.w	lr, r4, #20
 800ab8c:	46a9      	mov	r9, r5
 800ab8e:	f04f 0c00 	mov.w	ip, #0
 800ab92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab96:	f8d9 1000 	ldr.w	r1, [r9]
 800ab9a:	fa1f fb82 	uxth.w	fp, r2
 800ab9e:	b289      	uxth	r1, r1
 800aba0:	fb0a 110b 	mla	r1, sl, fp, r1
 800aba4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aba8:	f8d9 2000 	ldr.w	r2, [r9]
 800abac:	4461      	add	r1, ip
 800abae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800abb2:	fb0a c20b 	mla	r2, sl, fp, ip
 800abb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800abba:	b289      	uxth	r1, r1
 800abbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800abc0:	4577      	cmp	r7, lr
 800abc2:	f849 1b04 	str.w	r1, [r9], #4
 800abc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800abca:	d8e2      	bhi.n	800ab92 <__multiply+0xb2>
 800abcc:	9a01      	ldr	r2, [sp, #4]
 800abce:	f845 c002 	str.w	ip, [r5, r2]
 800abd2:	9a03      	ldr	r2, [sp, #12]
 800abd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800abd8:	3304      	adds	r3, #4
 800abda:	f1b9 0f00 	cmp.w	r9, #0
 800abde:	d020      	beq.n	800ac22 <__multiply+0x142>
 800abe0:	6829      	ldr	r1, [r5, #0]
 800abe2:	f104 0c14 	add.w	ip, r4, #20
 800abe6:	46ae      	mov	lr, r5
 800abe8:	f04f 0a00 	mov.w	sl, #0
 800abec:	f8bc b000 	ldrh.w	fp, [ip]
 800abf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800abf4:	fb09 220b 	mla	r2, r9, fp, r2
 800abf8:	4492      	add	sl, r2
 800abfa:	b289      	uxth	r1, r1
 800abfc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ac00:	f84e 1b04 	str.w	r1, [lr], #4
 800ac04:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac08:	f8be 1000 	ldrh.w	r1, [lr]
 800ac0c:	0c12      	lsrs	r2, r2, #16
 800ac0e:	fb09 1102 	mla	r1, r9, r2, r1
 800ac12:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ac16:	4567      	cmp	r7, ip
 800ac18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac1c:	d8e6      	bhi.n	800abec <__multiply+0x10c>
 800ac1e:	9a01      	ldr	r2, [sp, #4]
 800ac20:	50a9      	str	r1, [r5, r2]
 800ac22:	3504      	adds	r5, #4
 800ac24:	e79a      	b.n	800ab5c <__multiply+0x7c>
 800ac26:	3e01      	subs	r6, #1
 800ac28:	e79c      	b.n	800ab64 <__multiply+0x84>
 800ac2a:	bf00      	nop
 800ac2c:	0800c097 	.word	0x0800c097
 800ac30:	0800c0a8 	.word	0x0800c0a8

0800ac34 <__pow5mult>:
 800ac34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac38:	4615      	mov	r5, r2
 800ac3a:	f012 0203 	ands.w	r2, r2, #3
 800ac3e:	4606      	mov	r6, r0
 800ac40:	460f      	mov	r7, r1
 800ac42:	d007      	beq.n	800ac54 <__pow5mult+0x20>
 800ac44:	4c25      	ldr	r4, [pc, #148]	; (800acdc <__pow5mult+0xa8>)
 800ac46:	3a01      	subs	r2, #1
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac4e:	f7ff fe9b 	bl	800a988 <__multadd>
 800ac52:	4607      	mov	r7, r0
 800ac54:	10ad      	asrs	r5, r5, #2
 800ac56:	d03d      	beq.n	800acd4 <__pow5mult+0xa0>
 800ac58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac5a:	b97c      	cbnz	r4, 800ac7c <__pow5mult+0x48>
 800ac5c:	2010      	movs	r0, #16
 800ac5e:	f7fe fa07 	bl	8009070 <malloc>
 800ac62:	4602      	mov	r2, r0
 800ac64:	6270      	str	r0, [r6, #36]	; 0x24
 800ac66:	b928      	cbnz	r0, 800ac74 <__pow5mult+0x40>
 800ac68:	4b1d      	ldr	r3, [pc, #116]	; (800ace0 <__pow5mult+0xac>)
 800ac6a:	481e      	ldr	r0, [pc, #120]	; (800ace4 <__pow5mult+0xb0>)
 800ac6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac70:	f000 fb1e 	bl	800b2b0 <__assert_func>
 800ac74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac78:	6004      	str	r4, [r0, #0]
 800ac7a:	60c4      	str	r4, [r0, #12]
 800ac7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac84:	b94c      	cbnz	r4, 800ac9a <__pow5mult+0x66>
 800ac86:	f240 2171 	movw	r1, #625	; 0x271
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f7ff ff12 	bl	800aab4 <__i2b>
 800ac90:	2300      	movs	r3, #0
 800ac92:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac96:	4604      	mov	r4, r0
 800ac98:	6003      	str	r3, [r0, #0]
 800ac9a:	f04f 0900 	mov.w	r9, #0
 800ac9e:	07eb      	lsls	r3, r5, #31
 800aca0:	d50a      	bpl.n	800acb8 <__pow5mult+0x84>
 800aca2:	4639      	mov	r1, r7
 800aca4:	4622      	mov	r2, r4
 800aca6:	4630      	mov	r0, r6
 800aca8:	f7ff ff1a 	bl	800aae0 <__multiply>
 800acac:	4639      	mov	r1, r7
 800acae:	4680      	mov	r8, r0
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7ff fe47 	bl	800a944 <_Bfree>
 800acb6:	4647      	mov	r7, r8
 800acb8:	106d      	asrs	r5, r5, #1
 800acba:	d00b      	beq.n	800acd4 <__pow5mult+0xa0>
 800acbc:	6820      	ldr	r0, [r4, #0]
 800acbe:	b938      	cbnz	r0, 800acd0 <__pow5mult+0x9c>
 800acc0:	4622      	mov	r2, r4
 800acc2:	4621      	mov	r1, r4
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7ff ff0b 	bl	800aae0 <__multiply>
 800acca:	6020      	str	r0, [r4, #0]
 800accc:	f8c0 9000 	str.w	r9, [r0]
 800acd0:	4604      	mov	r4, r0
 800acd2:	e7e4      	b.n	800ac9e <__pow5mult+0x6a>
 800acd4:	4638      	mov	r0, r7
 800acd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acda:	bf00      	nop
 800acdc:	0800c1f8 	.word	0x0800c1f8
 800ace0:	0800c025 	.word	0x0800c025
 800ace4:	0800c0a8 	.word	0x0800c0a8

0800ace8 <__lshift>:
 800ace8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acec:	460c      	mov	r4, r1
 800acee:	6849      	ldr	r1, [r1, #4]
 800acf0:	6923      	ldr	r3, [r4, #16]
 800acf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acf6:	68a3      	ldr	r3, [r4, #8]
 800acf8:	4607      	mov	r7, r0
 800acfa:	4691      	mov	r9, r2
 800acfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad00:	f108 0601 	add.w	r6, r8, #1
 800ad04:	42b3      	cmp	r3, r6
 800ad06:	db0b      	blt.n	800ad20 <__lshift+0x38>
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7ff fddb 	bl	800a8c4 <_Balloc>
 800ad0e:	4605      	mov	r5, r0
 800ad10:	b948      	cbnz	r0, 800ad26 <__lshift+0x3e>
 800ad12:	4602      	mov	r2, r0
 800ad14:	4b2a      	ldr	r3, [pc, #168]	; (800adc0 <__lshift+0xd8>)
 800ad16:	482b      	ldr	r0, [pc, #172]	; (800adc4 <__lshift+0xdc>)
 800ad18:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad1c:	f000 fac8 	bl	800b2b0 <__assert_func>
 800ad20:	3101      	adds	r1, #1
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	e7ee      	b.n	800ad04 <__lshift+0x1c>
 800ad26:	2300      	movs	r3, #0
 800ad28:	f100 0114 	add.w	r1, r0, #20
 800ad2c:	f100 0210 	add.w	r2, r0, #16
 800ad30:	4618      	mov	r0, r3
 800ad32:	4553      	cmp	r3, sl
 800ad34:	db37      	blt.n	800ada6 <__lshift+0xbe>
 800ad36:	6920      	ldr	r0, [r4, #16]
 800ad38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad3c:	f104 0314 	add.w	r3, r4, #20
 800ad40:	f019 091f 	ands.w	r9, r9, #31
 800ad44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ad4c:	d02f      	beq.n	800adae <__lshift+0xc6>
 800ad4e:	f1c9 0e20 	rsb	lr, r9, #32
 800ad52:	468a      	mov	sl, r1
 800ad54:	f04f 0c00 	mov.w	ip, #0
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	fa02 f209 	lsl.w	r2, r2, r9
 800ad5e:	ea42 020c 	orr.w	r2, r2, ip
 800ad62:	f84a 2b04 	str.w	r2, [sl], #4
 800ad66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6a:	4298      	cmp	r0, r3
 800ad6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ad70:	d8f2      	bhi.n	800ad58 <__lshift+0x70>
 800ad72:	1b03      	subs	r3, r0, r4
 800ad74:	3b15      	subs	r3, #21
 800ad76:	f023 0303 	bic.w	r3, r3, #3
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	f104 0215 	add.w	r2, r4, #21
 800ad80:	4290      	cmp	r0, r2
 800ad82:	bf38      	it	cc
 800ad84:	2304      	movcc	r3, #4
 800ad86:	f841 c003 	str.w	ip, [r1, r3]
 800ad8a:	f1bc 0f00 	cmp.w	ip, #0
 800ad8e:	d001      	beq.n	800ad94 <__lshift+0xac>
 800ad90:	f108 0602 	add.w	r6, r8, #2
 800ad94:	3e01      	subs	r6, #1
 800ad96:	4638      	mov	r0, r7
 800ad98:	612e      	str	r6, [r5, #16]
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	f7ff fdd2 	bl	800a944 <_Bfree>
 800ada0:	4628      	mov	r0, r5
 800ada2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada6:	f842 0f04 	str.w	r0, [r2, #4]!
 800adaa:	3301      	adds	r3, #1
 800adac:	e7c1      	b.n	800ad32 <__lshift+0x4a>
 800adae:	3904      	subs	r1, #4
 800adb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800adb4:	f841 2f04 	str.w	r2, [r1, #4]!
 800adb8:	4298      	cmp	r0, r3
 800adba:	d8f9      	bhi.n	800adb0 <__lshift+0xc8>
 800adbc:	e7ea      	b.n	800ad94 <__lshift+0xac>
 800adbe:	bf00      	nop
 800adc0:	0800c097 	.word	0x0800c097
 800adc4:	0800c0a8 	.word	0x0800c0a8

0800adc8 <__mcmp>:
 800adc8:	b530      	push	{r4, r5, lr}
 800adca:	6902      	ldr	r2, [r0, #16]
 800adcc:	690c      	ldr	r4, [r1, #16]
 800adce:	1b12      	subs	r2, r2, r4
 800add0:	d10e      	bne.n	800adf0 <__mcmp+0x28>
 800add2:	f100 0314 	add.w	r3, r0, #20
 800add6:	3114      	adds	r1, #20
 800add8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800addc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ade0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ade4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ade8:	42a5      	cmp	r5, r4
 800adea:	d003      	beq.n	800adf4 <__mcmp+0x2c>
 800adec:	d305      	bcc.n	800adfa <__mcmp+0x32>
 800adee:	2201      	movs	r2, #1
 800adf0:	4610      	mov	r0, r2
 800adf2:	bd30      	pop	{r4, r5, pc}
 800adf4:	4283      	cmp	r3, r0
 800adf6:	d3f3      	bcc.n	800ade0 <__mcmp+0x18>
 800adf8:	e7fa      	b.n	800adf0 <__mcmp+0x28>
 800adfa:	f04f 32ff 	mov.w	r2, #4294967295
 800adfe:	e7f7      	b.n	800adf0 <__mcmp+0x28>

0800ae00 <__mdiff>:
 800ae00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	460c      	mov	r4, r1
 800ae06:	4606      	mov	r6, r0
 800ae08:	4611      	mov	r1, r2
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	4690      	mov	r8, r2
 800ae0e:	f7ff ffdb 	bl	800adc8 <__mcmp>
 800ae12:	1e05      	subs	r5, r0, #0
 800ae14:	d110      	bne.n	800ae38 <__mdiff+0x38>
 800ae16:	4629      	mov	r1, r5
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7ff fd53 	bl	800a8c4 <_Balloc>
 800ae1e:	b930      	cbnz	r0, 800ae2e <__mdiff+0x2e>
 800ae20:	4b3a      	ldr	r3, [pc, #232]	; (800af0c <__mdiff+0x10c>)
 800ae22:	4602      	mov	r2, r0
 800ae24:	f240 2132 	movw	r1, #562	; 0x232
 800ae28:	4839      	ldr	r0, [pc, #228]	; (800af10 <__mdiff+0x110>)
 800ae2a:	f000 fa41 	bl	800b2b0 <__assert_func>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae38:	bfa4      	itt	ge
 800ae3a:	4643      	movge	r3, r8
 800ae3c:	46a0      	movge	r8, r4
 800ae3e:	4630      	mov	r0, r6
 800ae40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae44:	bfa6      	itte	ge
 800ae46:	461c      	movge	r4, r3
 800ae48:	2500      	movge	r5, #0
 800ae4a:	2501      	movlt	r5, #1
 800ae4c:	f7ff fd3a 	bl	800a8c4 <_Balloc>
 800ae50:	b920      	cbnz	r0, 800ae5c <__mdiff+0x5c>
 800ae52:	4b2e      	ldr	r3, [pc, #184]	; (800af0c <__mdiff+0x10c>)
 800ae54:	4602      	mov	r2, r0
 800ae56:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae5a:	e7e5      	b.n	800ae28 <__mdiff+0x28>
 800ae5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae60:	6926      	ldr	r6, [r4, #16]
 800ae62:	60c5      	str	r5, [r0, #12]
 800ae64:	f104 0914 	add.w	r9, r4, #20
 800ae68:	f108 0514 	add.w	r5, r8, #20
 800ae6c:	f100 0e14 	add.w	lr, r0, #20
 800ae70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae78:	f108 0210 	add.w	r2, r8, #16
 800ae7c:	46f2      	mov	sl, lr
 800ae7e:	2100      	movs	r1, #0
 800ae80:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae88:	fa1f f883 	uxth.w	r8, r3
 800ae8c:	fa11 f18b 	uxtah	r1, r1, fp
 800ae90:	0c1b      	lsrs	r3, r3, #16
 800ae92:	eba1 0808 	sub.w	r8, r1, r8
 800ae96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae9e:	fa1f f888 	uxth.w	r8, r8
 800aea2:	1419      	asrs	r1, r3, #16
 800aea4:	454e      	cmp	r6, r9
 800aea6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aeaa:	f84a 3b04 	str.w	r3, [sl], #4
 800aeae:	d8e7      	bhi.n	800ae80 <__mdiff+0x80>
 800aeb0:	1b33      	subs	r3, r6, r4
 800aeb2:	3b15      	subs	r3, #21
 800aeb4:	f023 0303 	bic.w	r3, r3, #3
 800aeb8:	3304      	adds	r3, #4
 800aeba:	3415      	adds	r4, #21
 800aebc:	42a6      	cmp	r6, r4
 800aebe:	bf38      	it	cc
 800aec0:	2304      	movcc	r3, #4
 800aec2:	441d      	add	r5, r3
 800aec4:	4473      	add	r3, lr
 800aec6:	469e      	mov	lr, r3
 800aec8:	462e      	mov	r6, r5
 800aeca:	4566      	cmp	r6, ip
 800aecc:	d30e      	bcc.n	800aeec <__mdiff+0xec>
 800aece:	f10c 0203 	add.w	r2, ip, #3
 800aed2:	1b52      	subs	r2, r2, r5
 800aed4:	f022 0203 	bic.w	r2, r2, #3
 800aed8:	3d03      	subs	r5, #3
 800aeda:	45ac      	cmp	ip, r5
 800aedc:	bf38      	it	cc
 800aede:	2200      	movcc	r2, #0
 800aee0:	441a      	add	r2, r3
 800aee2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aee6:	b17b      	cbz	r3, 800af08 <__mdiff+0x108>
 800aee8:	6107      	str	r7, [r0, #16]
 800aeea:	e7a3      	b.n	800ae34 <__mdiff+0x34>
 800aeec:	f856 8b04 	ldr.w	r8, [r6], #4
 800aef0:	fa11 f288 	uxtah	r2, r1, r8
 800aef4:	1414      	asrs	r4, r2, #16
 800aef6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aefa:	b292      	uxth	r2, r2
 800aefc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800af00:	f84e 2b04 	str.w	r2, [lr], #4
 800af04:	1421      	asrs	r1, r4, #16
 800af06:	e7e0      	b.n	800aeca <__mdiff+0xca>
 800af08:	3f01      	subs	r7, #1
 800af0a:	e7ea      	b.n	800aee2 <__mdiff+0xe2>
 800af0c:	0800c097 	.word	0x0800c097
 800af10:	0800c0a8 	.word	0x0800c0a8

0800af14 <__d2b>:
 800af14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af18:	4689      	mov	r9, r1
 800af1a:	2101      	movs	r1, #1
 800af1c:	ec57 6b10 	vmov	r6, r7, d0
 800af20:	4690      	mov	r8, r2
 800af22:	f7ff fccf 	bl	800a8c4 <_Balloc>
 800af26:	4604      	mov	r4, r0
 800af28:	b930      	cbnz	r0, 800af38 <__d2b+0x24>
 800af2a:	4602      	mov	r2, r0
 800af2c:	4b25      	ldr	r3, [pc, #148]	; (800afc4 <__d2b+0xb0>)
 800af2e:	4826      	ldr	r0, [pc, #152]	; (800afc8 <__d2b+0xb4>)
 800af30:	f240 310a 	movw	r1, #778	; 0x30a
 800af34:	f000 f9bc 	bl	800b2b0 <__assert_func>
 800af38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800af3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af40:	bb35      	cbnz	r5, 800af90 <__d2b+0x7c>
 800af42:	2e00      	cmp	r6, #0
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	d028      	beq.n	800af9a <__d2b+0x86>
 800af48:	4668      	mov	r0, sp
 800af4a:	9600      	str	r6, [sp, #0]
 800af4c:	f7ff fd82 	bl	800aa54 <__lo0bits>
 800af50:	9900      	ldr	r1, [sp, #0]
 800af52:	b300      	cbz	r0, 800af96 <__d2b+0x82>
 800af54:	9a01      	ldr	r2, [sp, #4]
 800af56:	f1c0 0320 	rsb	r3, r0, #32
 800af5a:	fa02 f303 	lsl.w	r3, r2, r3
 800af5e:	430b      	orrs	r3, r1
 800af60:	40c2      	lsrs	r2, r0
 800af62:	6163      	str	r3, [r4, #20]
 800af64:	9201      	str	r2, [sp, #4]
 800af66:	9b01      	ldr	r3, [sp, #4]
 800af68:	61a3      	str	r3, [r4, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	bf14      	ite	ne
 800af6e:	2202      	movne	r2, #2
 800af70:	2201      	moveq	r2, #1
 800af72:	6122      	str	r2, [r4, #16]
 800af74:	b1d5      	cbz	r5, 800afac <__d2b+0x98>
 800af76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af7a:	4405      	add	r5, r0
 800af7c:	f8c9 5000 	str.w	r5, [r9]
 800af80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af84:	f8c8 0000 	str.w	r0, [r8]
 800af88:	4620      	mov	r0, r4
 800af8a:	b003      	add	sp, #12
 800af8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af94:	e7d5      	b.n	800af42 <__d2b+0x2e>
 800af96:	6161      	str	r1, [r4, #20]
 800af98:	e7e5      	b.n	800af66 <__d2b+0x52>
 800af9a:	a801      	add	r0, sp, #4
 800af9c:	f7ff fd5a 	bl	800aa54 <__lo0bits>
 800afa0:	9b01      	ldr	r3, [sp, #4]
 800afa2:	6163      	str	r3, [r4, #20]
 800afa4:	2201      	movs	r2, #1
 800afa6:	6122      	str	r2, [r4, #16]
 800afa8:	3020      	adds	r0, #32
 800afaa:	e7e3      	b.n	800af74 <__d2b+0x60>
 800afac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800afb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800afb4:	f8c9 0000 	str.w	r0, [r9]
 800afb8:	6918      	ldr	r0, [r3, #16]
 800afba:	f7ff fd2b 	bl	800aa14 <__hi0bits>
 800afbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800afc2:	e7df      	b.n	800af84 <__d2b+0x70>
 800afc4:	0800c097 	.word	0x0800c097
 800afc8:	0800c0a8 	.word	0x0800c0a8

0800afcc <_calloc_r>:
 800afcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afce:	fba1 2402 	umull	r2, r4, r1, r2
 800afd2:	b94c      	cbnz	r4, 800afe8 <_calloc_r+0x1c>
 800afd4:	4611      	mov	r1, r2
 800afd6:	9201      	str	r2, [sp, #4]
 800afd8:	f7fe f8d4 	bl	8009184 <_malloc_r>
 800afdc:	9a01      	ldr	r2, [sp, #4]
 800afde:	4605      	mov	r5, r0
 800afe0:	b930      	cbnz	r0, 800aff0 <_calloc_r+0x24>
 800afe2:	4628      	mov	r0, r5
 800afe4:	b003      	add	sp, #12
 800afe6:	bd30      	pop	{r4, r5, pc}
 800afe8:	220c      	movs	r2, #12
 800afea:	6002      	str	r2, [r0, #0]
 800afec:	2500      	movs	r5, #0
 800afee:	e7f8      	b.n	800afe2 <_calloc_r+0x16>
 800aff0:	4621      	mov	r1, r4
 800aff2:	f7fe f853 	bl	800909c <memset>
 800aff6:	e7f4      	b.n	800afe2 <_calloc_r+0x16>

0800aff8 <__ssputs_r>:
 800aff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800affc:	688e      	ldr	r6, [r1, #8]
 800affe:	429e      	cmp	r6, r3
 800b000:	4682      	mov	sl, r0
 800b002:	460c      	mov	r4, r1
 800b004:	4690      	mov	r8, r2
 800b006:	461f      	mov	r7, r3
 800b008:	d838      	bhi.n	800b07c <__ssputs_r+0x84>
 800b00a:	898a      	ldrh	r2, [r1, #12]
 800b00c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b010:	d032      	beq.n	800b078 <__ssputs_r+0x80>
 800b012:	6825      	ldr	r5, [r4, #0]
 800b014:	6909      	ldr	r1, [r1, #16]
 800b016:	eba5 0901 	sub.w	r9, r5, r1
 800b01a:	6965      	ldr	r5, [r4, #20]
 800b01c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b020:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b024:	3301      	adds	r3, #1
 800b026:	444b      	add	r3, r9
 800b028:	106d      	asrs	r5, r5, #1
 800b02a:	429d      	cmp	r5, r3
 800b02c:	bf38      	it	cc
 800b02e:	461d      	movcc	r5, r3
 800b030:	0553      	lsls	r3, r2, #21
 800b032:	d531      	bpl.n	800b098 <__ssputs_r+0xa0>
 800b034:	4629      	mov	r1, r5
 800b036:	f7fe f8a5 	bl	8009184 <_malloc_r>
 800b03a:	4606      	mov	r6, r0
 800b03c:	b950      	cbnz	r0, 800b054 <__ssputs_r+0x5c>
 800b03e:	230c      	movs	r3, #12
 800b040:	f8ca 3000 	str.w	r3, [sl]
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b04a:	81a3      	strh	r3, [r4, #12]
 800b04c:	f04f 30ff 	mov.w	r0, #4294967295
 800b050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b054:	6921      	ldr	r1, [r4, #16]
 800b056:	464a      	mov	r2, r9
 800b058:	f7fe f812 	bl	8009080 <memcpy>
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b066:	81a3      	strh	r3, [r4, #12]
 800b068:	6126      	str	r6, [r4, #16]
 800b06a:	6165      	str	r5, [r4, #20]
 800b06c:	444e      	add	r6, r9
 800b06e:	eba5 0509 	sub.w	r5, r5, r9
 800b072:	6026      	str	r6, [r4, #0]
 800b074:	60a5      	str	r5, [r4, #8]
 800b076:	463e      	mov	r6, r7
 800b078:	42be      	cmp	r6, r7
 800b07a:	d900      	bls.n	800b07e <__ssputs_r+0x86>
 800b07c:	463e      	mov	r6, r7
 800b07e:	6820      	ldr	r0, [r4, #0]
 800b080:	4632      	mov	r2, r6
 800b082:	4641      	mov	r1, r8
 800b084:	f000 f959 	bl	800b33a <memmove>
 800b088:	68a3      	ldr	r3, [r4, #8]
 800b08a:	1b9b      	subs	r3, r3, r6
 800b08c:	60a3      	str	r3, [r4, #8]
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	4433      	add	r3, r6
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	2000      	movs	r0, #0
 800b096:	e7db      	b.n	800b050 <__ssputs_r+0x58>
 800b098:	462a      	mov	r2, r5
 800b09a:	f000 f968 	bl	800b36e <_realloc_r>
 800b09e:	4606      	mov	r6, r0
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d1e1      	bne.n	800b068 <__ssputs_r+0x70>
 800b0a4:	6921      	ldr	r1, [r4, #16]
 800b0a6:	4650      	mov	r0, sl
 800b0a8:	f7fe f800 	bl	80090ac <_free_r>
 800b0ac:	e7c7      	b.n	800b03e <__ssputs_r+0x46>
	...

0800b0b0 <_svfiprintf_r>:
 800b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	4698      	mov	r8, r3
 800b0b6:	898b      	ldrh	r3, [r1, #12]
 800b0b8:	061b      	lsls	r3, r3, #24
 800b0ba:	b09d      	sub	sp, #116	; 0x74
 800b0bc:	4607      	mov	r7, r0
 800b0be:	460d      	mov	r5, r1
 800b0c0:	4614      	mov	r4, r2
 800b0c2:	d50e      	bpl.n	800b0e2 <_svfiprintf_r+0x32>
 800b0c4:	690b      	ldr	r3, [r1, #16]
 800b0c6:	b963      	cbnz	r3, 800b0e2 <_svfiprintf_r+0x32>
 800b0c8:	2140      	movs	r1, #64	; 0x40
 800b0ca:	f7fe f85b 	bl	8009184 <_malloc_r>
 800b0ce:	6028      	str	r0, [r5, #0]
 800b0d0:	6128      	str	r0, [r5, #16]
 800b0d2:	b920      	cbnz	r0, 800b0de <_svfiprintf_r+0x2e>
 800b0d4:	230c      	movs	r3, #12
 800b0d6:	603b      	str	r3, [r7, #0]
 800b0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0dc:	e0d1      	b.n	800b282 <_svfiprintf_r+0x1d2>
 800b0de:	2340      	movs	r3, #64	; 0x40
 800b0e0:	616b      	str	r3, [r5, #20]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e6:	2320      	movs	r3, #32
 800b0e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0f0:	2330      	movs	r3, #48	; 0x30
 800b0f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b29c <_svfiprintf_r+0x1ec>
 800b0f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0fa:	f04f 0901 	mov.w	r9, #1
 800b0fe:	4623      	mov	r3, r4
 800b100:	469a      	mov	sl, r3
 800b102:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b106:	b10a      	cbz	r2, 800b10c <_svfiprintf_r+0x5c>
 800b108:	2a25      	cmp	r2, #37	; 0x25
 800b10a:	d1f9      	bne.n	800b100 <_svfiprintf_r+0x50>
 800b10c:	ebba 0b04 	subs.w	fp, sl, r4
 800b110:	d00b      	beq.n	800b12a <_svfiprintf_r+0x7a>
 800b112:	465b      	mov	r3, fp
 800b114:	4622      	mov	r2, r4
 800b116:	4629      	mov	r1, r5
 800b118:	4638      	mov	r0, r7
 800b11a:	f7ff ff6d 	bl	800aff8 <__ssputs_r>
 800b11e:	3001      	adds	r0, #1
 800b120:	f000 80aa 	beq.w	800b278 <_svfiprintf_r+0x1c8>
 800b124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b126:	445a      	add	r2, fp
 800b128:	9209      	str	r2, [sp, #36]	; 0x24
 800b12a:	f89a 3000 	ldrb.w	r3, [sl]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f000 80a2 	beq.w	800b278 <_svfiprintf_r+0x1c8>
 800b134:	2300      	movs	r3, #0
 800b136:	f04f 32ff 	mov.w	r2, #4294967295
 800b13a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b13e:	f10a 0a01 	add.w	sl, sl, #1
 800b142:	9304      	str	r3, [sp, #16]
 800b144:	9307      	str	r3, [sp, #28]
 800b146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b14a:	931a      	str	r3, [sp, #104]	; 0x68
 800b14c:	4654      	mov	r4, sl
 800b14e:	2205      	movs	r2, #5
 800b150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b154:	4851      	ldr	r0, [pc, #324]	; (800b29c <_svfiprintf_r+0x1ec>)
 800b156:	f7f5 f843 	bl	80001e0 <memchr>
 800b15a:	9a04      	ldr	r2, [sp, #16]
 800b15c:	b9d8      	cbnz	r0, 800b196 <_svfiprintf_r+0xe6>
 800b15e:	06d0      	lsls	r0, r2, #27
 800b160:	bf44      	itt	mi
 800b162:	2320      	movmi	r3, #32
 800b164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b168:	0711      	lsls	r1, r2, #28
 800b16a:	bf44      	itt	mi
 800b16c:	232b      	movmi	r3, #43	; 0x2b
 800b16e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b172:	f89a 3000 	ldrb.w	r3, [sl]
 800b176:	2b2a      	cmp	r3, #42	; 0x2a
 800b178:	d015      	beq.n	800b1a6 <_svfiprintf_r+0xf6>
 800b17a:	9a07      	ldr	r2, [sp, #28]
 800b17c:	4654      	mov	r4, sl
 800b17e:	2000      	movs	r0, #0
 800b180:	f04f 0c0a 	mov.w	ip, #10
 800b184:	4621      	mov	r1, r4
 800b186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b18a:	3b30      	subs	r3, #48	; 0x30
 800b18c:	2b09      	cmp	r3, #9
 800b18e:	d94e      	bls.n	800b22e <_svfiprintf_r+0x17e>
 800b190:	b1b0      	cbz	r0, 800b1c0 <_svfiprintf_r+0x110>
 800b192:	9207      	str	r2, [sp, #28]
 800b194:	e014      	b.n	800b1c0 <_svfiprintf_r+0x110>
 800b196:	eba0 0308 	sub.w	r3, r0, r8
 800b19a:	fa09 f303 	lsl.w	r3, r9, r3
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	9304      	str	r3, [sp, #16]
 800b1a2:	46a2      	mov	sl, r4
 800b1a4:	e7d2      	b.n	800b14c <_svfiprintf_r+0x9c>
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	1d19      	adds	r1, r3, #4
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	9103      	str	r1, [sp, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	bfbb      	ittet	lt
 800b1b2:	425b      	neglt	r3, r3
 800b1b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b1b8:	9307      	strge	r3, [sp, #28]
 800b1ba:	9307      	strlt	r3, [sp, #28]
 800b1bc:	bfb8      	it	lt
 800b1be:	9204      	strlt	r2, [sp, #16]
 800b1c0:	7823      	ldrb	r3, [r4, #0]
 800b1c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b1c4:	d10c      	bne.n	800b1e0 <_svfiprintf_r+0x130>
 800b1c6:	7863      	ldrb	r3, [r4, #1]
 800b1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ca:	d135      	bne.n	800b238 <_svfiprintf_r+0x188>
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	1d1a      	adds	r2, r3, #4
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	9203      	str	r2, [sp, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bfb8      	it	lt
 800b1d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1dc:	3402      	adds	r4, #2
 800b1de:	9305      	str	r3, [sp, #20]
 800b1e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2ac <_svfiprintf_r+0x1fc>
 800b1e4:	7821      	ldrb	r1, [r4, #0]
 800b1e6:	2203      	movs	r2, #3
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	f7f4 fff9 	bl	80001e0 <memchr>
 800b1ee:	b140      	cbz	r0, 800b202 <_svfiprintf_r+0x152>
 800b1f0:	2340      	movs	r3, #64	; 0x40
 800b1f2:	eba0 000a 	sub.w	r0, r0, sl
 800b1f6:	fa03 f000 	lsl.w	r0, r3, r0
 800b1fa:	9b04      	ldr	r3, [sp, #16]
 800b1fc:	4303      	orrs	r3, r0
 800b1fe:	3401      	adds	r4, #1
 800b200:	9304      	str	r3, [sp, #16]
 800b202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b206:	4826      	ldr	r0, [pc, #152]	; (800b2a0 <_svfiprintf_r+0x1f0>)
 800b208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b20c:	2206      	movs	r2, #6
 800b20e:	f7f4 ffe7 	bl	80001e0 <memchr>
 800b212:	2800      	cmp	r0, #0
 800b214:	d038      	beq.n	800b288 <_svfiprintf_r+0x1d8>
 800b216:	4b23      	ldr	r3, [pc, #140]	; (800b2a4 <_svfiprintf_r+0x1f4>)
 800b218:	bb1b      	cbnz	r3, 800b262 <_svfiprintf_r+0x1b2>
 800b21a:	9b03      	ldr	r3, [sp, #12]
 800b21c:	3307      	adds	r3, #7
 800b21e:	f023 0307 	bic.w	r3, r3, #7
 800b222:	3308      	adds	r3, #8
 800b224:	9303      	str	r3, [sp, #12]
 800b226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b228:	4433      	add	r3, r6
 800b22a:	9309      	str	r3, [sp, #36]	; 0x24
 800b22c:	e767      	b.n	800b0fe <_svfiprintf_r+0x4e>
 800b22e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b232:	460c      	mov	r4, r1
 800b234:	2001      	movs	r0, #1
 800b236:	e7a5      	b.n	800b184 <_svfiprintf_r+0xd4>
 800b238:	2300      	movs	r3, #0
 800b23a:	3401      	adds	r4, #1
 800b23c:	9305      	str	r3, [sp, #20]
 800b23e:	4619      	mov	r1, r3
 800b240:	f04f 0c0a 	mov.w	ip, #10
 800b244:	4620      	mov	r0, r4
 800b246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b24a:	3a30      	subs	r2, #48	; 0x30
 800b24c:	2a09      	cmp	r2, #9
 800b24e:	d903      	bls.n	800b258 <_svfiprintf_r+0x1a8>
 800b250:	2b00      	cmp	r3, #0
 800b252:	d0c5      	beq.n	800b1e0 <_svfiprintf_r+0x130>
 800b254:	9105      	str	r1, [sp, #20]
 800b256:	e7c3      	b.n	800b1e0 <_svfiprintf_r+0x130>
 800b258:	fb0c 2101 	mla	r1, ip, r1, r2
 800b25c:	4604      	mov	r4, r0
 800b25e:	2301      	movs	r3, #1
 800b260:	e7f0      	b.n	800b244 <_svfiprintf_r+0x194>
 800b262:	ab03      	add	r3, sp, #12
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	462a      	mov	r2, r5
 800b268:	4b0f      	ldr	r3, [pc, #60]	; (800b2a8 <_svfiprintf_r+0x1f8>)
 800b26a:	a904      	add	r1, sp, #16
 800b26c:	4638      	mov	r0, r7
 800b26e:	f7fe f89d 	bl	80093ac <_printf_float>
 800b272:	1c42      	adds	r2, r0, #1
 800b274:	4606      	mov	r6, r0
 800b276:	d1d6      	bne.n	800b226 <_svfiprintf_r+0x176>
 800b278:	89ab      	ldrh	r3, [r5, #12]
 800b27a:	065b      	lsls	r3, r3, #25
 800b27c:	f53f af2c 	bmi.w	800b0d8 <_svfiprintf_r+0x28>
 800b280:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b282:	b01d      	add	sp, #116	; 0x74
 800b284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b288:	ab03      	add	r3, sp, #12
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	462a      	mov	r2, r5
 800b28e:	4b06      	ldr	r3, [pc, #24]	; (800b2a8 <_svfiprintf_r+0x1f8>)
 800b290:	a904      	add	r1, sp, #16
 800b292:	4638      	mov	r0, r7
 800b294:	f7fe fb2e 	bl	80098f4 <_printf_i>
 800b298:	e7eb      	b.n	800b272 <_svfiprintf_r+0x1c2>
 800b29a:	bf00      	nop
 800b29c:	0800c204 	.word	0x0800c204
 800b2a0:	0800c20e 	.word	0x0800c20e
 800b2a4:	080093ad 	.word	0x080093ad
 800b2a8:	0800aff9 	.word	0x0800aff9
 800b2ac:	0800c20a 	.word	0x0800c20a

0800b2b0 <__assert_func>:
 800b2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2b2:	4614      	mov	r4, r2
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <__assert_func+0x2c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	68d8      	ldr	r0, [r3, #12]
 800b2be:	b14c      	cbz	r4, 800b2d4 <__assert_func+0x24>
 800b2c0:	4b07      	ldr	r3, [pc, #28]	; (800b2e0 <__assert_func+0x30>)
 800b2c2:	9100      	str	r1, [sp, #0]
 800b2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2c8:	4906      	ldr	r1, [pc, #24]	; (800b2e4 <__assert_func+0x34>)
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	f000 f80e 	bl	800b2ec <fiprintf>
 800b2d0:	f000 faa4 	bl	800b81c <abort>
 800b2d4:	4b04      	ldr	r3, [pc, #16]	; (800b2e8 <__assert_func+0x38>)
 800b2d6:	461c      	mov	r4, r3
 800b2d8:	e7f3      	b.n	800b2c2 <__assert_func+0x12>
 800b2da:	bf00      	nop
 800b2dc:	2000000c 	.word	0x2000000c
 800b2e0:	0800c215 	.word	0x0800c215
 800b2e4:	0800c222 	.word	0x0800c222
 800b2e8:	0800c250 	.word	0x0800c250

0800b2ec <fiprintf>:
 800b2ec:	b40e      	push	{r1, r2, r3}
 800b2ee:	b503      	push	{r0, r1, lr}
 800b2f0:	4601      	mov	r1, r0
 800b2f2:	ab03      	add	r3, sp, #12
 800b2f4:	4805      	ldr	r0, [pc, #20]	; (800b30c <fiprintf+0x20>)
 800b2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fa:	6800      	ldr	r0, [r0, #0]
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	f000 f88f 	bl	800b420 <_vfiprintf_r>
 800b302:	b002      	add	sp, #8
 800b304:	f85d eb04 	ldr.w	lr, [sp], #4
 800b308:	b003      	add	sp, #12
 800b30a:	4770      	bx	lr
 800b30c:	2000000c 	.word	0x2000000c

0800b310 <__retarget_lock_init_recursive>:
 800b310:	4770      	bx	lr

0800b312 <__retarget_lock_acquire_recursive>:
 800b312:	4770      	bx	lr

0800b314 <__retarget_lock_release_recursive>:
 800b314:	4770      	bx	lr

0800b316 <__ascii_mbtowc>:
 800b316:	b082      	sub	sp, #8
 800b318:	b901      	cbnz	r1, 800b31c <__ascii_mbtowc+0x6>
 800b31a:	a901      	add	r1, sp, #4
 800b31c:	b142      	cbz	r2, 800b330 <__ascii_mbtowc+0x1a>
 800b31e:	b14b      	cbz	r3, 800b334 <__ascii_mbtowc+0x1e>
 800b320:	7813      	ldrb	r3, [r2, #0]
 800b322:	600b      	str	r3, [r1, #0]
 800b324:	7812      	ldrb	r2, [r2, #0]
 800b326:	1e10      	subs	r0, r2, #0
 800b328:	bf18      	it	ne
 800b32a:	2001      	movne	r0, #1
 800b32c:	b002      	add	sp, #8
 800b32e:	4770      	bx	lr
 800b330:	4610      	mov	r0, r2
 800b332:	e7fb      	b.n	800b32c <__ascii_mbtowc+0x16>
 800b334:	f06f 0001 	mvn.w	r0, #1
 800b338:	e7f8      	b.n	800b32c <__ascii_mbtowc+0x16>

0800b33a <memmove>:
 800b33a:	4288      	cmp	r0, r1
 800b33c:	b510      	push	{r4, lr}
 800b33e:	eb01 0402 	add.w	r4, r1, r2
 800b342:	d902      	bls.n	800b34a <memmove+0x10>
 800b344:	4284      	cmp	r4, r0
 800b346:	4623      	mov	r3, r4
 800b348:	d807      	bhi.n	800b35a <memmove+0x20>
 800b34a:	1e43      	subs	r3, r0, #1
 800b34c:	42a1      	cmp	r1, r4
 800b34e:	d008      	beq.n	800b362 <memmove+0x28>
 800b350:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b354:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b358:	e7f8      	b.n	800b34c <memmove+0x12>
 800b35a:	4402      	add	r2, r0
 800b35c:	4601      	mov	r1, r0
 800b35e:	428a      	cmp	r2, r1
 800b360:	d100      	bne.n	800b364 <memmove+0x2a>
 800b362:	bd10      	pop	{r4, pc}
 800b364:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b368:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b36c:	e7f7      	b.n	800b35e <memmove+0x24>

0800b36e <_realloc_r>:
 800b36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b372:	4680      	mov	r8, r0
 800b374:	4614      	mov	r4, r2
 800b376:	460e      	mov	r6, r1
 800b378:	b921      	cbnz	r1, 800b384 <_realloc_r+0x16>
 800b37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b37e:	4611      	mov	r1, r2
 800b380:	f7fd bf00 	b.w	8009184 <_malloc_r>
 800b384:	b92a      	cbnz	r2, 800b392 <_realloc_r+0x24>
 800b386:	f7fd fe91 	bl	80090ac <_free_r>
 800b38a:	4625      	mov	r5, r4
 800b38c:	4628      	mov	r0, r5
 800b38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b392:	f000 fc67 	bl	800bc64 <_malloc_usable_size_r>
 800b396:	4284      	cmp	r4, r0
 800b398:	4607      	mov	r7, r0
 800b39a:	d802      	bhi.n	800b3a2 <_realloc_r+0x34>
 800b39c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3a0:	d812      	bhi.n	800b3c8 <_realloc_r+0x5a>
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	f7fd feed 	bl	8009184 <_malloc_r>
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d0ed      	beq.n	800b38c <_realloc_r+0x1e>
 800b3b0:	42bc      	cmp	r4, r7
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	bf28      	it	cs
 800b3b8:	463a      	movcs	r2, r7
 800b3ba:	f7fd fe61 	bl	8009080 <memcpy>
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4640      	mov	r0, r8
 800b3c2:	f7fd fe73 	bl	80090ac <_free_r>
 800b3c6:	e7e1      	b.n	800b38c <_realloc_r+0x1e>
 800b3c8:	4635      	mov	r5, r6
 800b3ca:	e7df      	b.n	800b38c <_realloc_r+0x1e>

0800b3cc <__sfputc_r>:
 800b3cc:	6893      	ldr	r3, [r2, #8]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	b410      	push	{r4}
 800b3d4:	6093      	str	r3, [r2, #8]
 800b3d6:	da08      	bge.n	800b3ea <__sfputc_r+0x1e>
 800b3d8:	6994      	ldr	r4, [r2, #24]
 800b3da:	42a3      	cmp	r3, r4
 800b3dc:	db01      	blt.n	800b3e2 <__sfputc_r+0x16>
 800b3de:	290a      	cmp	r1, #10
 800b3e0:	d103      	bne.n	800b3ea <__sfputc_r+0x1e>
 800b3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3e6:	f000 b94b 	b.w	800b680 <__swbuf_r>
 800b3ea:	6813      	ldr	r3, [r2, #0]
 800b3ec:	1c58      	adds	r0, r3, #1
 800b3ee:	6010      	str	r0, [r2, #0]
 800b3f0:	7019      	strb	r1, [r3, #0]
 800b3f2:	4608      	mov	r0, r1
 800b3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <__sfputs_r>:
 800b3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fc:	4606      	mov	r6, r0
 800b3fe:	460f      	mov	r7, r1
 800b400:	4614      	mov	r4, r2
 800b402:	18d5      	adds	r5, r2, r3
 800b404:	42ac      	cmp	r4, r5
 800b406:	d101      	bne.n	800b40c <__sfputs_r+0x12>
 800b408:	2000      	movs	r0, #0
 800b40a:	e007      	b.n	800b41c <__sfputs_r+0x22>
 800b40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b410:	463a      	mov	r2, r7
 800b412:	4630      	mov	r0, r6
 800b414:	f7ff ffda 	bl	800b3cc <__sfputc_r>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d1f3      	bne.n	800b404 <__sfputs_r+0xa>
 800b41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b420 <_vfiprintf_r>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	460d      	mov	r5, r1
 800b426:	b09d      	sub	sp, #116	; 0x74
 800b428:	4614      	mov	r4, r2
 800b42a:	4698      	mov	r8, r3
 800b42c:	4606      	mov	r6, r0
 800b42e:	b118      	cbz	r0, 800b438 <_vfiprintf_r+0x18>
 800b430:	6983      	ldr	r3, [r0, #24]
 800b432:	b90b      	cbnz	r3, 800b438 <_vfiprintf_r+0x18>
 800b434:	f000 fb14 	bl	800ba60 <__sinit>
 800b438:	4b89      	ldr	r3, [pc, #548]	; (800b660 <_vfiprintf_r+0x240>)
 800b43a:	429d      	cmp	r5, r3
 800b43c:	d11b      	bne.n	800b476 <_vfiprintf_r+0x56>
 800b43e:	6875      	ldr	r5, [r6, #4]
 800b440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b442:	07d9      	lsls	r1, r3, #31
 800b444:	d405      	bmi.n	800b452 <_vfiprintf_r+0x32>
 800b446:	89ab      	ldrh	r3, [r5, #12]
 800b448:	059a      	lsls	r2, r3, #22
 800b44a:	d402      	bmi.n	800b452 <_vfiprintf_r+0x32>
 800b44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b44e:	f7ff ff60 	bl	800b312 <__retarget_lock_acquire_recursive>
 800b452:	89ab      	ldrh	r3, [r5, #12]
 800b454:	071b      	lsls	r3, r3, #28
 800b456:	d501      	bpl.n	800b45c <_vfiprintf_r+0x3c>
 800b458:	692b      	ldr	r3, [r5, #16]
 800b45a:	b9eb      	cbnz	r3, 800b498 <_vfiprintf_r+0x78>
 800b45c:	4629      	mov	r1, r5
 800b45e:	4630      	mov	r0, r6
 800b460:	f000 f96e 	bl	800b740 <__swsetup_r>
 800b464:	b1c0      	cbz	r0, 800b498 <_vfiprintf_r+0x78>
 800b466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b468:	07dc      	lsls	r4, r3, #31
 800b46a:	d50e      	bpl.n	800b48a <_vfiprintf_r+0x6a>
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	b01d      	add	sp, #116	; 0x74
 800b472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b476:	4b7b      	ldr	r3, [pc, #492]	; (800b664 <_vfiprintf_r+0x244>)
 800b478:	429d      	cmp	r5, r3
 800b47a:	d101      	bne.n	800b480 <_vfiprintf_r+0x60>
 800b47c:	68b5      	ldr	r5, [r6, #8]
 800b47e:	e7df      	b.n	800b440 <_vfiprintf_r+0x20>
 800b480:	4b79      	ldr	r3, [pc, #484]	; (800b668 <_vfiprintf_r+0x248>)
 800b482:	429d      	cmp	r5, r3
 800b484:	bf08      	it	eq
 800b486:	68f5      	ldreq	r5, [r6, #12]
 800b488:	e7da      	b.n	800b440 <_vfiprintf_r+0x20>
 800b48a:	89ab      	ldrh	r3, [r5, #12]
 800b48c:	0598      	lsls	r0, r3, #22
 800b48e:	d4ed      	bmi.n	800b46c <_vfiprintf_r+0x4c>
 800b490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b492:	f7ff ff3f 	bl	800b314 <__retarget_lock_release_recursive>
 800b496:	e7e9      	b.n	800b46c <_vfiprintf_r+0x4c>
 800b498:	2300      	movs	r3, #0
 800b49a:	9309      	str	r3, [sp, #36]	; 0x24
 800b49c:	2320      	movs	r3, #32
 800b49e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4a6:	2330      	movs	r3, #48	; 0x30
 800b4a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b66c <_vfiprintf_r+0x24c>
 800b4ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4b0:	f04f 0901 	mov.w	r9, #1
 800b4b4:	4623      	mov	r3, r4
 800b4b6:	469a      	mov	sl, r3
 800b4b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4bc:	b10a      	cbz	r2, 800b4c2 <_vfiprintf_r+0xa2>
 800b4be:	2a25      	cmp	r2, #37	; 0x25
 800b4c0:	d1f9      	bne.n	800b4b6 <_vfiprintf_r+0x96>
 800b4c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b4c6:	d00b      	beq.n	800b4e0 <_vfiprintf_r+0xc0>
 800b4c8:	465b      	mov	r3, fp
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7ff ff93 	bl	800b3fa <__sfputs_r>
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	f000 80aa 	beq.w	800b62e <_vfiprintf_r+0x20e>
 800b4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4dc:	445a      	add	r2, fp
 800b4de:	9209      	str	r2, [sp, #36]	; 0x24
 800b4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 80a2 	beq.w	800b62e <_vfiprintf_r+0x20e>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4f4:	f10a 0a01 	add.w	sl, sl, #1
 800b4f8:	9304      	str	r3, [sp, #16]
 800b4fa:	9307      	str	r3, [sp, #28]
 800b4fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b500:	931a      	str	r3, [sp, #104]	; 0x68
 800b502:	4654      	mov	r4, sl
 800b504:	2205      	movs	r2, #5
 800b506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b50a:	4858      	ldr	r0, [pc, #352]	; (800b66c <_vfiprintf_r+0x24c>)
 800b50c:	f7f4 fe68 	bl	80001e0 <memchr>
 800b510:	9a04      	ldr	r2, [sp, #16]
 800b512:	b9d8      	cbnz	r0, 800b54c <_vfiprintf_r+0x12c>
 800b514:	06d1      	lsls	r1, r2, #27
 800b516:	bf44      	itt	mi
 800b518:	2320      	movmi	r3, #32
 800b51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b51e:	0713      	lsls	r3, r2, #28
 800b520:	bf44      	itt	mi
 800b522:	232b      	movmi	r3, #43	; 0x2b
 800b524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b528:	f89a 3000 	ldrb.w	r3, [sl]
 800b52c:	2b2a      	cmp	r3, #42	; 0x2a
 800b52e:	d015      	beq.n	800b55c <_vfiprintf_r+0x13c>
 800b530:	9a07      	ldr	r2, [sp, #28]
 800b532:	4654      	mov	r4, sl
 800b534:	2000      	movs	r0, #0
 800b536:	f04f 0c0a 	mov.w	ip, #10
 800b53a:	4621      	mov	r1, r4
 800b53c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b540:	3b30      	subs	r3, #48	; 0x30
 800b542:	2b09      	cmp	r3, #9
 800b544:	d94e      	bls.n	800b5e4 <_vfiprintf_r+0x1c4>
 800b546:	b1b0      	cbz	r0, 800b576 <_vfiprintf_r+0x156>
 800b548:	9207      	str	r2, [sp, #28]
 800b54a:	e014      	b.n	800b576 <_vfiprintf_r+0x156>
 800b54c:	eba0 0308 	sub.w	r3, r0, r8
 800b550:	fa09 f303 	lsl.w	r3, r9, r3
 800b554:	4313      	orrs	r3, r2
 800b556:	9304      	str	r3, [sp, #16]
 800b558:	46a2      	mov	sl, r4
 800b55a:	e7d2      	b.n	800b502 <_vfiprintf_r+0xe2>
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	1d19      	adds	r1, r3, #4
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	9103      	str	r1, [sp, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	bfbb      	ittet	lt
 800b568:	425b      	neglt	r3, r3
 800b56a:	f042 0202 	orrlt.w	r2, r2, #2
 800b56e:	9307      	strge	r3, [sp, #28]
 800b570:	9307      	strlt	r3, [sp, #28]
 800b572:	bfb8      	it	lt
 800b574:	9204      	strlt	r2, [sp, #16]
 800b576:	7823      	ldrb	r3, [r4, #0]
 800b578:	2b2e      	cmp	r3, #46	; 0x2e
 800b57a:	d10c      	bne.n	800b596 <_vfiprintf_r+0x176>
 800b57c:	7863      	ldrb	r3, [r4, #1]
 800b57e:	2b2a      	cmp	r3, #42	; 0x2a
 800b580:	d135      	bne.n	800b5ee <_vfiprintf_r+0x1ce>
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	1d1a      	adds	r2, r3, #4
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	9203      	str	r2, [sp, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	bfb8      	it	lt
 800b58e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b592:	3402      	adds	r4, #2
 800b594:	9305      	str	r3, [sp, #20]
 800b596:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b67c <_vfiprintf_r+0x25c>
 800b59a:	7821      	ldrb	r1, [r4, #0]
 800b59c:	2203      	movs	r2, #3
 800b59e:	4650      	mov	r0, sl
 800b5a0:	f7f4 fe1e 	bl	80001e0 <memchr>
 800b5a4:	b140      	cbz	r0, 800b5b8 <_vfiprintf_r+0x198>
 800b5a6:	2340      	movs	r3, #64	; 0x40
 800b5a8:	eba0 000a 	sub.w	r0, r0, sl
 800b5ac:	fa03 f000 	lsl.w	r0, r3, r0
 800b5b0:	9b04      	ldr	r3, [sp, #16]
 800b5b2:	4303      	orrs	r3, r0
 800b5b4:	3401      	adds	r4, #1
 800b5b6:	9304      	str	r3, [sp, #16]
 800b5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5bc:	482c      	ldr	r0, [pc, #176]	; (800b670 <_vfiprintf_r+0x250>)
 800b5be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5c2:	2206      	movs	r2, #6
 800b5c4:	f7f4 fe0c 	bl	80001e0 <memchr>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d03f      	beq.n	800b64c <_vfiprintf_r+0x22c>
 800b5cc:	4b29      	ldr	r3, [pc, #164]	; (800b674 <_vfiprintf_r+0x254>)
 800b5ce:	bb1b      	cbnz	r3, 800b618 <_vfiprintf_r+0x1f8>
 800b5d0:	9b03      	ldr	r3, [sp, #12]
 800b5d2:	3307      	adds	r3, #7
 800b5d4:	f023 0307 	bic.w	r3, r3, #7
 800b5d8:	3308      	adds	r3, #8
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5de:	443b      	add	r3, r7
 800b5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e2:	e767      	b.n	800b4b4 <_vfiprintf_r+0x94>
 800b5e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	2001      	movs	r0, #1
 800b5ec:	e7a5      	b.n	800b53a <_vfiprintf_r+0x11a>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	3401      	adds	r4, #1
 800b5f2:	9305      	str	r3, [sp, #20]
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f04f 0c0a 	mov.w	ip, #10
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b600:	3a30      	subs	r2, #48	; 0x30
 800b602:	2a09      	cmp	r2, #9
 800b604:	d903      	bls.n	800b60e <_vfiprintf_r+0x1ee>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d0c5      	beq.n	800b596 <_vfiprintf_r+0x176>
 800b60a:	9105      	str	r1, [sp, #20]
 800b60c:	e7c3      	b.n	800b596 <_vfiprintf_r+0x176>
 800b60e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b612:	4604      	mov	r4, r0
 800b614:	2301      	movs	r3, #1
 800b616:	e7f0      	b.n	800b5fa <_vfiprintf_r+0x1da>
 800b618:	ab03      	add	r3, sp, #12
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	462a      	mov	r2, r5
 800b61e:	4b16      	ldr	r3, [pc, #88]	; (800b678 <_vfiprintf_r+0x258>)
 800b620:	a904      	add	r1, sp, #16
 800b622:	4630      	mov	r0, r6
 800b624:	f7fd fec2 	bl	80093ac <_printf_float>
 800b628:	4607      	mov	r7, r0
 800b62a:	1c78      	adds	r0, r7, #1
 800b62c:	d1d6      	bne.n	800b5dc <_vfiprintf_r+0x1bc>
 800b62e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b630:	07d9      	lsls	r1, r3, #31
 800b632:	d405      	bmi.n	800b640 <_vfiprintf_r+0x220>
 800b634:	89ab      	ldrh	r3, [r5, #12]
 800b636:	059a      	lsls	r2, r3, #22
 800b638:	d402      	bmi.n	800b640 <_vfiprintf_r+0x220>
 800b63a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b63c:	f7ff fe6a 	bl	800b314 <__retarget_lock_release_recursive>
 800b640:	89ab      	ldrh	r3, [r5, #12]
 800b642:	065b      	lsls	r3, r3, #25
 800b644:	f53f af12 	bmi.w	800b46c <_vfiprintf_r+0x4c>
 800b648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b64a:	e711      	b.n	800b470 <_vfiprintf_r+0x50>
 800b64c:	ab03      	add	r3, sp, #12
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	462a      	mov	r2, r5
 800b652:	4b09      	ldr	r3, [pc, #36]	; (800b678 <_vfiprintf_r+0x258>)
 800b654:	a904      	add	r1, sp, #16
 800b656:	4630      	mov	r0, r6
 800b658:	f7fe f94c 	bl	80098f4 <_printf_i>
 800b65c:	e7e4      	b.n	800b628 <_vfiprintf_r+0x208>
 800b65e:	bf00      	nop
 800b660:	0800c37c 	.word	0x0800c37c
 800b664:	0800c39c 	.word	0x0800c39c
 800b668:	0800c35c 	.word	0x0800c35c
 800b66c:	0800c204 	.word	0x0800c204
 800b670:	0800c20e 	.word	0x0800c20e
 800b674:	080093ad 	.word	0x080093ad
 800b678:	0800b3fb 	.word	0x0800b3fb
 800b67c:	0800c20a 	.word	0x0800c20a

0800b680 <__swbuf_r>:
 800b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b682:	460e      	mov	r6, r1
 800b684:	4614      	mov	r4, r2
 800b686:	4605      	mov	r5, r0
 800b688:	b118      	cbz	r0, 800b692 <__swbuf_r+0x12>
 800b68a:	6983      	ldr	r3, [r0, #24]
 800b68c:	b90b      	cbnz	r3, 800b692 <__swbuf_r+0x12>
 800b68e:	f000 f9e7 	bl	800ba60 <__sinit>
 800b692:	4b21      	ldr	r3, [pc, #132]	; (800b718 <__swbuf_r+0x98>)
 800b694:	429c      	cmp	r4, r3
 800b696:	d12b      	bne.n	800b6f0 <__swbuf_r+0x70>
 800b698:	686c      	ldr	r4, [r5, #4]
 800b69a:	69a3      	ldr	r3, [r4, #24]
 800b69c:	60a3      	str	r3, [r4, #8]
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	071a      	lsls	r2, r3, #28
 800b6a2:	d52f      	bpl.n	800b704 <__swbuf_r+0x84>
 800b6a4:	6923      	ldr	r3, [r4, #16]
 800b6a6:	b36b      	cbz	r3, 800b704 <__swbuf_r+0x84>
 800b6a8:	6923      	ldr	r3, [r4, #16]
 800b6aa:	6820      	ldr	r0, [r4, #0]
 800b6ac:	1ac0      	subs	r0, r0, r3
 800b6ae:	6963      	ldr	r3, [r4, #20]
 800b6b0:	b2f6      	uxtb	r6, r6
 800b6b2:	4283      	cmp	r3, r0
 800b6b4:	4637      	mov	r7, r6
 800b6b6:	dc04      	bgt.n	800b6c2 <__swbuf_r+0x42>
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f000 f93c 	bl	800b938 <_fflush_r>
 800b6c0:	bb30      	cbnz	r0, 800b710 <__swbuf_r+0x90>
 800b6c2:	68a3      	ldr	r3, [r4, #8]
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	60a3      	str	r3, [r4, #8]
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	6022      	str	r2, [r4, #0]
 800b6ce:	701e      	strb	r6, [r3, #0]
 800b6d0:	6963      	ldr	r3, [r4, #20]
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	4283      	cmp	r3, r0
 800b6d6:	d004      	beq.n	800b6e2 <__swbuf_r+0x62>
 800b6d8:	89a3      	ldrh	r3, [r4, #12]
 800b6da:	07db      	lsls	r3, r3, #31
 800b6dc:	d506      	bpl.n	800b6ec <__swbuf_r+0x6c>
 800b6de:	2e0a      	cmp	r6, #10
 800b6e0:	d104      	bne.n	800b6ec <__swbuf_r+0x6c>
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f000 f927 	bl	800b938 <_fflush_r>
 800b6ea:	b988      	cbnz	r0, 800b710 <__swbuf_r+0x90>
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6f0:	4b0a      	ldr	r3, [pc, #40]	; (800b71c <__swbuf_r+0x9c>)
 800b6f2:	429c      	cmp	r4, r3
 800b6f4:	d101      	bne.n	800b6fa <__swbuf_r+0x7a>
 800b6f6:	68ac      	ldr	r4, [r5, #8]
 800b6f8:	e7cf      	b.n	800b69a <__swbuf_r+0x1a>
 800b6fa:	4b09      	ldr	r3, [pc, #36]	; (800b720 <__swbuf_r+0xa0>)
 800b6fc:	429c      	cmp	r4, r3
 800b6fe:	bf08      	it	eq
 800b700:	68ec      	ldreq	r4, [r5, #12]
 800b702:	e7ca      	b.n	800b69a <__swbuf_r+0x1a>
 800b704:	4621      	mov	r1, r4
 800b706:	4628      	mov	r0, r5
 800b708:	f000 f81a 	bl	800b740 <__swsetup_r>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d0cb      	beq.n	800b6a8 <__swbuf_r+0x28>
 800b710:	f04f 37ff 	mov.w	r7, #4294967295
 800b714:	e7ea      	b.n	800b6ec <__swbuf_r+0x6c>
 800b716:	bf00      	nop
 800b718:	0800c37c 	.word	0x0800c37c
 800b71c:	0800c39c 	.word	0x0800c39c
 800b720:	0800c35c 	.word	0x0800c35c

0800b724 <__ascii_wctomb>:
 800b724:	b149      	cbz	r1, 800b73a <__ascii_wctomb+0x16>
 800b726:	2aff      	cmp	r2, #255	; 0xff
 800b728:	bf85      	ittet	hi
 800b72a:	238a      	movhi	r3, #138	; 0x8a
 800b72c:	6003      	strhi	r3, [r0, #0]
 800b72e:	700a      	strbls	r2, [r1, #0]
 800b730:	f04f 30ff 	movhi.w	r0, #4294967295
 800b734:	bf98      	it	ls
 800b736:	2001      	movls	r0, #1
 800b738:	4770      	bx	lr
 800b73a:	4608      	mov	r0, r1
 800b73c:	4770      	bx	lr
	...

0800b740 <__swsetup_r>:
 800b740:	4b32      	ldr	r3, [pc, #200]	; (800b80c <__swsetup_r+0xcc>)
 800b742:	b570      	push	{r4, r5, r6, lr}
 800b744:	681d      	ldr	r5, [r3, #0]
 800b746:	4606      	mov	r6, r0
 800b748:	460c      	mov	r4, r1
 800b74a:	b125      	cbz	r5, 800b756 <__swsetup_r+0x16>
 800b74c:	69ab      	ldr	r3, [r5, #24]
 800b74e:	b913      	cbnz	r3, 800b756 <__swsetup_r+0x16>
 800b750:	4628      	mov	r0, r5
 800b752:	f000 f985 	bl	800ba60 <__sinit>
 800b756:	4b2e      	ldr	r3, [pc, #184]	; (800b810 <__swsetup_r+0xd0>)
 800b758:	429c      	cmp	r4, r3
 800b75a:	d10f      	bne.n	800b77c <__swsetup_r+0x3c>
 800b75c:	686c      	ldr	r4, [r5, #4]
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b764:	0719      	lsls	r1, r3, #28
 800b766:	d42c      	bmi.n	800b7c2 <__swsetup_r+0x82>
 800b768:	06dd      	lsls	r5, r3, #27
 800b76a:	d411      	bmi.n	800b790 <__swsetup_r+0x50>
 800b76c:	2309      	movs	r3, #9
 800b76e:	6033      	str	r3, [r6, #0]
 800b770:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	f04f 30ff 	mov.w	r0, #4294967295
 800b77a:	e03e      	b.n	800b7fa <__swsetup_r+0xba>
 800b77c:	4b25      	ldr	r3, [pc, #148]	; (800b814 <__swsetup_r+0xd4>)
 800b77e:	429c      	cmp	r4, r3
 800b780:	d101      	bne.n	800b786 <__swsetup_r+0x46>
 800b782:	68ac      	ldr	r4, [r5, #8]
 800b784:	e7eb      	b.n	800b75e <__swsetup_r+0x1e>
 800b786:	4b24      	ldr	r3, [pc, #144]	; (800b818 <__swsetup_r+0xd8>)
 800b788:	429c      	cmp	r4, r3
 800b78a:	bf08      	it	eq
 800b78c:	68ec      	ldreq	r4, [r5, #12]
 800b78e:	e7e6      	b.n	800b75e <__swsetup_r+0x1e>
 800b790:	0758      	lsls	r0, r3, #29
 800b792:	d512      	bpl.n	800b7ba <__swsetup_r+0x7a>
 800b794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b796:	b141      	cbz	r1, 800b7aa <__swsetup_r+0x6a>
 800b798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b79c:	4299      	cmp	r1, r3
 800b79e:	d002      	beq.n	800b7a6 <__swsetup_r+0x66>
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7fd fc83 	bl	80090ac <_free_r>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7b0:	81a3      	strh	r3, [r4, #12]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	6063      	str	r3, [r4, #4]
 800b7b6:	6923      	ldr	r3, [r4, #16]
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	f043 0308 	orr.w	r3, r3, #8
 800b7c0:	81a3      	strh	r3, [r4, #12]
 800b7c2:	6923      	ldr	r3, [r4, #16]
 800b7c4:	b94b      	cbnz	r3, 800b7da <__swsetup_r+0x9a>
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7d0:	d003      	beq.n	800b7da <__swsetup_r+0x9a>
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f000 fa05 	bl	800bbe4 <__smakebuf_r>
 800b7da:	89a0      	ldrh	r0, [r4, #12]
 800b7dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7e0:	f010 0301 	ands.w	r3, r0, #1
 800b7e4:	d00a      	beq.n	800b7fc <__swsetup_r+0xbc>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60a3      	str	r3, [r4, #8]
 800b7ea:	6963      	ldr	r3, [r4, #20]
 800b7ec:	425b      	negs	r3, r3
 800b7ee:	61a3      	str	r3, [r4, #24]
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	b943      	cbnz	r3, 800b806 <__swsetup_r+0xc6>
 800b7f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7f8:	d1ba      	bne.n	800b770 <__swsetup_r+0x30>
 800b7fa:	bd70      	pop	{r4, r5, r6, pc}
 800b7fc:	0781      	lsls	r1, r0, #30
 800b7fe:	bf58      	it	pl
 800b800:	6963      	ldrpl	r3, [r4, #20]
 800b802:	60a3      	str	r3, [r4, #8]
 800b804:	e7f4      	b.n	800b7f0 <__swsetup_r+0xb0>
 800b806:	2000      	movs	r0, #0
 800b808:	e7f7      	b.n	800b7fa <__swsetup_r+0xba>
 800b80a:	bf00      	nop
 800b80c:	2000000c 	.word	0x2000000c
 800b810:	0800c37c 	.word	0x0800c37c
 800b814:	0800c39c 	.word	0x0800c39c
 800b818:	0800c35c 	.word	0x0800c35c

0800b81c <abort>:
 800b81c:	b508      	push	{r3, lr}
 800b81e:	2006      	movs	r0, #6
 800b820:	f000 fa50 	bl	800bcc4 <raise>
 800b824:	2001      	movs	r0, #1
 800b826:	f7f6 fe07 	bl	8002438 <_exit>
	...

0800b82c <__sflush_r>:
 800b82c:	898a      	ldrh	r2, [r1, #12]
 800b82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b832:	4605      	mov	r5, r0
 800b834:	0710      	lsls	r0, r2, #28
 800b836:	460c      	mov	r4, r1
 800b838:	d458      	bmi.n	800b8ec <__sflush_r+0xc0>
 800b83a:	684b      	ldr	r3, [r1, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	dc05      	bgt.n	800b84c <__sflush_r+0x20>
 800b840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b842:	2b00      	cmp	r3, #0
 800b844:	dc02      	bgt.n	800b84c <__sflush_r+0x20>
 800b846:	2000      	movs	r0, #0
 800b848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b84c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b84e:	2e00      	cmp	r6, #0
 800b850:	d0f9      	beq.n	800b846 <__sflush_r+0x1a>
 800b852:	2300      	movs	r3, #0
 800b854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b858:	682f      	ldr	r7, [r5, #0]
 800b85a:	602b      	str	r3, [r5, #0]
 800b85c:	d032      	beq.n	800b8c4 <__sflush_r+0x98>
 800b85e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	075a      	lsls	r2, r3, #29
 800b864:	d505      	bpl.n	800b872 <__sflush_r+0x46>
 800b866:	6863      	ldr	r3, [r4, #4]
 800b868:	1ac0      	subs	r0, r0, r3
 800b86a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b86c:	b10b      	cbz	r3, 800b872 <__sflush_r+0x46>
 800b86e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b870:	1ac0      	subs	r0, r0, r3
 800b872:	2300      	movs	r3, #0
 800b874:	4602      	mov	r2, r0
 800b876:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b878:	6a21      	ldr	r1, [r4, #32]
 800b87a:	4628      	mov	r0, r5
 800b87c:	47b0      	blx	r6
 800b87e:	1c43      	adds	r3, r0, #1
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	d106      	bne.n	800b892 <__sflush_r+0x66>
 800b884:	6829      	ldr	r1, [r5, #0]
 800b886:	291d      	cmp	r1, #29
 800b888:	d82c      	bhi.n	800b8e4 <__sflush_r+0xb8>
 800b88a:	4a2a      	ldr	r2, [pc, #168]	; (800b934 <__sflush_r+0x108>)
 800b88c:	40ca      	lsrs	r2, r1
 800b88e:	07d6      	lsls	r6, r2, #31
 800b890:	d528      	bpl.n	800b8e4 <__sflush_r+0xb8>
 800b892:	2200      	movs	r2, #0
 800b894:	6062      	str	r2, [r4, #4]
 800b896:	04d9      	lsls	r1, r3, #19
 800b898:	6922      	ldr	r2, [r4, #16]
 800b89a:	6022      	str	r2, [r4, #0]
 800b89c:	d504      	bpl.n	800b8a8 <__sflush_r+0x7c>
 800b89e:	1c42      	adds	r2, r0, #1
 800b8a0:	d101      	bne.n	800b8a6 <__sflush_r+0x7a>
 800b8a2:	682b      	ldr	r3, [r5, #0]
 800b8a4:	b903      	cbnz	r3, 800b8a8 <__sflush_r+0x7c>
 800b8a6:	6560      	str	r0, [r4, #84]	; 0x54
 800b8a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8aa:	602f      	str	r7, [r5, #0]
 800b8ac:	2900      	cmp	r1, #0
 800b8ae:	d0ca      	beq.n	800b846 <__sflush_r+0x1a>
 800b8b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8b4:	4299      	cmp	r1, r3
 800b8b6:	d002      	beq.n	800b8be <__sflush_r+0x92>
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	f7fd fbf7 	bl	80090ac <_free_r>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	6360      	str	r0, [r4, #52]	; 0x34
 800b8c2:	e7c1      	b.n	800b848 <__sflush_r+0x1c>
 800b8c4:	6a21      	ldr	r1, [r4, #32]
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	47b0      	blx	r6
 800b8cc:	1c41      	adds	r1, r0, #1
 800b8ce:	d1c7      	bne.n	800b860 <__sflush_r+0x34>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d0c4      	beq.n	800b860 <__sflush_r+0x34>
 800b8d6:	2b1d      	cmp	r3, #29
 800b8d8:	d001      	beq.n	800b8de <__sflush_r+0xb2>
 800b8da:	2b16      	cmp	r3, #22
 800b8dc:	d101      	bne.n	800b8e2 <__sflush_r+0xb6>
 800b8de:	602f      	str	r7, [r5, #0]
 800b8e0:	e7b1      	b.n	800b846 <__sflush_r+0x1a>
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8e8:	81a3      	strh	r3, [r4, #12]
 800b8ea:	e7ad      	b.n	800b848 <__sflush_r+0x1c>
 800b8ec:	690f      	ldr	r7, [r1, #16]
 800b8ee:	2f00      	cmp	r7, #0
 800b8f0:	d0a9      	beq.n	800b846 <__sflush_r+0x1a>
 800b8f2:	0793      	lsls	r3, r2, #30
 800b8f4:	680e      	ldr	r6, [r1, #0]
 800b8f6:	bf08      	it	eq
 800b8f8:	694b      	ldreq	r3, [r1, #20]
 800b8fa:	600f      	str	r7, [r1, #0]
 800b8fc:	bf18      	it	ne
 800b8fe:	2300      	movne	r3, #0
 800b900:	eba6 0807 	sub.w	r8, r6, r7
 800b904:	608b      	str	r3, [r1, #8]
 800b906:	f1b8 0f00 	cmp.w	r8, #0
 800b90a:	dd9c      	ble.n	800b846 <__sflush_r+0x1a>
 800b90c:	6a21      	ldr	r1, [r4, #32]
 800b90e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b910:	4643      	mov	r3, r8
 800b912:	463a      	mov	r2, r7
 800b914:	4628      	mov	r0, r5
 800b916:	47b0      	blx	r6
 800b918:	2800      	cmp	r0, #0
 800b91a:	dc06      	bgt.n	800b92a <__sflush_r+0xfe>
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b922:	81a3      	strh	r3, [r4, #12]
 800b924:	f04f 30ff 	mov.w	r0, #4294967295
 800b928:	e78e      	b.n	800b848 <__sflush_r+0x1c>
 800b92a:	4407      	add	r7, r0
 800b92c:	eba8 0800 	sub.w	r8, r8, r0
 800b930:	e7e9      	b.n	800b906 <__sflush_r+0xda>
 800b932:	bf00      	nop
 800b934:	20400001 	.word	0x20400001

0800b938 <_fflush_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	690b      	ldr	r3, [r1, #16]
 800b93c:	4605      	mov	r5, r0
 800b93e:	460c      	mov	r4, r1
 800b940:	b913      	cbnz	r3, 800b948 <_fflush_r+0x10>
 800b942:	2500      	movs	r5, #0
 800b944:	4628      	mov	r0, r5
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	b118      	cbz	r0, 800b952 <_fflush_r+0x1a>
 800b94a:	6983      	ldr	r3, [r0, #24]
 800b94c:	b90b      	cbnz	r3, 800b952 <_fflush_r+0x1a>
 800b94e:	f000 f887 	bl	800ba60 <__sinit>
 800b952:	4b14      	ldr	r3, [pc, #80]	; (800b9a4 <_fflush_r+0x6c>)
 800b954:	429c      	cmp	r4, r3
 800b956:	d11b      	bne.n	800b990 <_fflush_r+0x58>
 800b958:	686c      	ldr	r4, [r5, #4]
 800b95a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d0ef      	beq.n	800b942 <_fflush_r+0xa>
 800b962:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b964:	07d0      	lsls	r0, r2, #31
 800b966:	d404      	bmi.n	800b972 <_fflush_r+0x3a>
 800b968:	0599      	lsls	r1, r3, #22
 800b96a:	d402      	bmi.n	800b972 <_fflush_r+0x3a>
 800b96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b96e:	f7ff fcd0 	bl	800b312 <__retarget_lock_acquire_recursive>
 800b972:	4628      	mov	r0, r5
 800b974:	4621      	mov	r1, r4
 800b976:	f7ff ff59 	bl	800b82c <__sflush_r>
 800b97a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b97c:	07da      	lsls	r2, r3, #31
 800b97e:	4605      	mov	r5, r0
 800b980:	d4e0      	bmi.n	800b944 <_fflush_r+0xc>
 800b982:	89a3      	ldrh	r3, [r4, #12]
 800b984:	059b      	lsls	r3, r3, #22
 800b986:	d4dd      	bmi.n	800b944 <_fflush_r+0xc>
 800b988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b98a:	f7ff fcc3 	bl	800b314 <__retarget_lock_release_recursive>
 800b98e:	e7d9      	b.n	800b944 <_fflush_r+0xc>
 800b990:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <_fflush_r+0x70>)
 800b992:	429c      	cmp	r4, r3
 800b994:	d101      	bne.n	800b99a <_fflush_r+0x62>
 800b996:	68ac      	ldr	r4, [r5, #8]
 800b998:	e7df      	b.n	800b95a <_fflush_r+0x22>
 800b99a:	4b04      	ldr	r3, [pc, #16]	; (800b9ac <_fflush_r+0x74>)
 800b99c:	429c      	cmp	r4, r3
 800b99e:	bf08      	it	eq
 800b9a0:	68ec      	ldreq	r4, [r5, #12]
 800b9a2:	e7da      	b.n	800b95a <_fflush_r+0x22>
 800b9a4:	0800c37c 	.word	0x0800c37c
 800b9a8:	0800c39c 	.word	0x0800c39c
 800b9ac:	0800c35c 	.word	0x0800c35c

0800b9b0 <std>:
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	b510      	push	{r4, lr}
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b9ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9be:	6083      	str	r3, [r0, #8]
 800b9c0:	8181      	strh	r1, [r0, #12]
 800b9c2:	6643      	str	r3, [r0, #100]	; 0x64
 800b9c4:	81c2      	strh	r2, [r0, #14]
 800b9c6:	6183      	str	r3, [r0, #24]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	2208      	movs	r2, #8
 800b9cc:	305c      	adds	r0, #92	; 0x5c
 800b9ce:	f7fd fb65 	bl	800909c <memset>
 800b9d2:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <std+0x38>)
 800b9d4:	6263      	str	r3, [r4, #36]	; 0x24
 800b9d6:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <std+0x3c>)
 800b9d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9da:	4b05      	ldr	r3, [pc, #20]	; (800b9f0 <std+0x40>)
 800b9dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9de:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <std+0x44>)
 800b9e0:	6224      	str	r4, [r4, #32]
 800b9e2:	6323      	str	r3, [r4, #48]	; 0x30
 800b9e4:	bd10      	pop	{r4, pc}
 800b9e6:	bf00      	nop
 800b9e8:	0800bcfd 	.word	0x0800bcfd
 800b9ec:	0800bd1f 	.word	0x0800bd1f
 800b9f0:	0800bd57 	.word	0x0800bd57
 800b9f4:	0800bd7b 	.word	0x0800bd7b

0800b9f8 <_cleanup_r>:
 800b9f8:	4901      	ldr	r1, [pc, #4]	; (800ba00 <_cleanup_r+0x8>)
 800b9fa:	f000 b8af 	b.w	800bb5c <_fwalk_reent>
 800b9fe:	bf00      	nop
 800ba00:	0800b939 	.word	0x0800b939

0800ba04 <__sfmoreglue>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	2268      	movs	r2, #104	; 0x68
 800ba08:	1e4d      	subs	r5, r1, #1
 800ba0a:	4355      	muls	r5, r2
 800ba0c:	460e      	mov	r6, r1
 800ba0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba12:	f7fd fbb7 	bl	8009184 <_malloc_r>
 800ba16:	4604      	mov	r4, r0
 800ba18:	b140      	cbz	r0, 800ba2c <__sfmoreglue+0x28>
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	e9c0 1600 	strd	r1, r6, [r0]
 800ba20:	300c      	adds	r0, #12
 800ba22:	60a0      	str	r0, [r4, #8]
 800ba24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba28:	f7fd fb38 	bl	800909c <memset>
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	bd70      	pop	{r4, r5, r6, pc}

0800ba30 <__sfp_lock_acquire>:
 800ba30:	4801      	ldr	r0, [pc, #4]	; (800ba38 <__sfp_lock_acquire+0x8>)
 800ba32:	f7ff bc6e 	b.w	800b312 <__retarget_lock_acquire_recursive>
 800ba36:	bf00      	nop
 800ba38:	20000525 	.word	0x20000525

0800ba3c <__sfp_lock_release>:
 800ba3c:	4801      	ldr	r0, [pc, #4]	; (800ba44 <__sfp_lock_release+0x8>)
 800ba3e:	f7ff bc69 	b.w	800b314 <__retarget_lock_release_recursive>
 800ba42:	bf00      	nop
 800ba44:	20000525 	.word	0x20000525

0800ba48 <__sinit_lock_acquire>:
 800ba48:	4801      	ldr	r0, [pc, #4]	; (800ba50 <__sinit_lock_acquire+0x8>)
 800ba4a:	f7ff bc62 	b.w	800b312 <__retarget_lock_acquire_recursive>
 800ba4e:	bf00      	nop
 800ba50:	20000526 	.word	0x20000526

0800ba54 <__sinit_lock_release>:
 800ba54:	4801      	ldr	r0, [pc, #4]	; (800ba5c <__sinit_lock_release+0x8>)
 800ba56:	f7ff bc5d 	b.w	800b314 <__retarget_lock_release_recursive>
 800ba5a:	bf00      	nop
 800ba5c:	20000526 	.word	0x20000526

0800ba60 <__sinit>:
 800ba60:	b510      	push	{r4, lr}
 800ba62:	4604      	mov	r4, r0
 800ba64:	f7ff fff0 	bl	800ba48 <__sinit_lock_acquire>
 800ba68:	69a3      	ldr	r3, [r4, #24]
 800ba6a:	b11b      	cbz	r3, 800ba74 <__sinit+0x14>
 800ba6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba70:	f7ff bff0 	b.w	800ba54 <__sinit_lock_release>
 800ba74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba78:	6523      	str	r3, [r4, #80]	; 0x50
 800ba7a:	4b13      	ldr	r3, [pc, #76]	; (800bac8 <__sinit+0x68>)
 800ba7c:	4a13      	ldr	r2, [pc, #76]	; (800bacc <__sinit+0x6c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba82:	42a3      	cmp	r3, r4
 800ba84:	bf04      	itt	eq
 800ba86:	2301      	moveq	r3, #1
 800ba88:	61a3      	streq	r3, [r4, #24]
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f000 f820 	bl	800bad0 <__sfp>
 800ba90:	6060      	str	r0, [r4, #4]
 800ba92:	4620      	mov	r0, r4
 800ba94:	f000 f81c 	bl	800bad0 <__sfp>
 800ba98:	60a0      	str	r0, [r4, #8]
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 f818 	bl	800bad0 <__sfp>
 800baa0:	2200      	movs	r2, #0
 800baa2:	60e0      	str	r0, [r4, #12]
 800baa4:	2104      	movs	r1, #4
 800baa6:	6860      	ldr	r0, [r4, #4]
 800baa8:	f7ff ff82 	bl	800b9b0 <std>
 800baac:	68a0      	ldr	r0, [r4, #8]
 800baae:	2201      	movs	r2, #1
 800bab0:	2109      	movs	r1, #9
 800bab2:	f7ff ff7d 	bl	800b9b0 <std>
 800bab6:	68e0      	ldr	r0, [r4, #12]
 800bab8:	2202      	movs	r2, #2
 800baba:	2112      	movs	r1, #18
 800babc:	f7ff ff78 	bl	800b9b0 <std>
 800bac0:	2301      	movs	r3, #1
 800bac2:	61a3      	str	r3, [r4, #24]
 800bac4:	e7d2      	b.n	800ba6c <__sinit+0xc>
 800bac6:	bf00      	nop
 800bac8:	0800bfe0 	.word	0x0800bfe0
 800bacc:	0800b9f9 	.word	0x0800b9f9

0800bad0 <__sfp>:
 800bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad2:	4607      	mov	r7, r0
 800bad4:	f7ff ffac 	bl	800ba30 <__sfp_lock_acquire>
 800bad8:	4b1e      	ldr	r3, [pc, #120]	; (800bb54 <__sfp+0x84>)
 800bada:	681e      	ldr	r6, [r3, #0]
 800badc:	69b3      	ldr	r3, [r6, #24]
 800bade:	b913      	cbnz	r3, 800bae6 <__sfp+0x16>
 800bae0:	4630      	mov	r0, r6
 800bae2:	f7ff ffbd 	bl	800ba60 <__sinit>
 800bae6:	3648      	adds	r6, #72	; 0x48
 800bae8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800baec:	3b01      	subs	r3, #1
 800baee:	d503      	bpl.n	800baf8 <__sfp+0x28>
 800baf0:	6833      	ldr	r3, [r6, #0]
 800baf2:	b30b      	cbz	r3, 800bb38 <__sfp+0x68>
 800baf4:	6836      	ldr	r6, [r6, #0]
 800baf6:	e7f7      	b.n	800bae8 <__sfp+0x18>
 800baf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bafc:	b9d5      	cbnz	r5, 800bb34 <__sfp+0x64>
 800bafe:	4b16      	ldr	r3, [pc, #88]	; (800bb58 <__sfp+0x88>)
 800bb00:	60e3      	str	r3, [r4, #12]
 800bb02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb06:	6665      	str	r5, [r4, #100]	; 0x64
 800bb08:	f7ff fc02 	bl	800b310 <__retarget_lock_init_recursive>
 800bb0c:	f7ff ff96 	bl	800ba3c <__sfp_lock_release>
 800bb10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb18:	6025      	str	r5, [r4, #0]
 800bb1a:	61a5      	str	r5, [r4, #24]
 800bb1c:	2208      	movs	r2, #8
 800bb1e:	4629      	mov	r1, r5
 800bb20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb24:	f7fd faba 	bl	800909c <memset>
 800bb28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb30:	4620      	mov	r0, r4
 800bb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb34:	3468      	adds	r4, #104	; 0x68
 800bb36:	e7d9      	b.n	800baec <__sfp+0x1c>
 800bb38:	2104      	movs	r1, #4
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	f7ff ff62 	bl	800ba04 <__sfmoreglue>
 800bb40:	4604      	mov	r4, r0
 800bb42:	6030      	str	r0, [r6, #0]
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d1d5      	bne.n	800baf4 <__sfp+0x24>
 800bb48:	f7ff ff78 	bl	800ba3c <__sfp_lock_release>
 800bb4c:	230c      	movs	r3, #12
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	e7ee      	b.n	800bb30 <__sfp+0x60>
 800bb52:	bf00      	nop
 800bb54:	0800bfe0 	.word	0x0800bfe0
 800bb58:	ffff0001 	.word	0xffff0001

0800bb5c <_fwalk_reent>:
 800bb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb60:	4606      	mov	r6, r0
 800bb62:	4688      	mov	r8, r1
 800bb64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb68:	2700      	movs	r7, #0
 800bb6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb6e:	f1b9 0901 	subs.w	r9, r9, #1
 800bb72:	d505      	bpl.n	800bb80 <_fwalk_reent+0x24>
 800bb74:	6824      	ldr	r4, [r4, #0]
 800bb76:	2c00      	cmp	r4, #0
 800bb78:	d1f7      	bne.n	800bb6a <_fwalk_reent+0xe>
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb80:	89ab      	ldrh	r3, [r5, #12]
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d907      	bls.n	800bb96 <_fwalk_reent+0x3a>
 800bb86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	d003      	beq.n	800bb96 <_fwalk_reent+0x3a>
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4630      	mov	r0, r6
 800bb92:	47c0      	blx	r8
 800bb94:	4307      	orrs	r7, r0
 800bb96:	3568      	adds	r5, #104	; 0x68
 800bb98:	e7e9      	b.n	800bb6e <_fwalk_reent+0x12>

0800bb9a <__swhatbuf_r>:
 800bb9a:	b570      	push	{r4, r5, r6, lr}
 800bb9c:	460e      	mov	r6, r1
 800bb9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bba2:	2900      	cmp	r1, #0
 800bba4:	b096      	sub	sp, #88	; 0x58
 800bba6:	4614      	mov	r4, r2
 800bba8:	461d      	mov	r5, r3
 800bbaa:	da08      	bge.n	800bbbe <__swhatbuf_r+0x24>
 800bbac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	602a      	str	r2, [r5, #0]
 800bbb4:	061a      	lsls	r2, r3, #24
 800bbb6:	d410      	bmi.n	800bbda <__swhatbuf_r+0x40>
 800bbb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbbc:	e00e      	b.n	800bbdc <__swhatbuf_r+0x42>
 800bbbe:	466a      	mov	r2, sp
 800bbc0:	f000 f902 	bl	800bdc8 <_fstat_r>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	dbf1      	blt.n	800bbac <__swhatbuf_r+0x12>
 800bbc8:	9a01      	ldr	r2, [sp, #4]
 800bbca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bbce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bbd2:	425a      	negs	r2, r3
 800bbd4:	415a      	adcs	r2, r3
 800bbd6:	602a      	str	r2, [r5, #0]
 800bbd8:	e7ee      	b.n	800bbb8 <__swhatbuf_r+0x1e>
 800bbda:	2340      	movs	r3, #64	; 0x40
 800bbdc:	2000      	movs	r0, #0
 800bbde:	6023      	str	r3, [r4, #0]
 800bbe0:	b016      	add	sp, #88	; 0x58
 800bbe2:	bd70      	pop	{r4, r5, r6, pc}

0800bbe4 <__smakebuf_r>:
 800bbe4:	898b      	ldrh	r3, [r1, #12]
 800bbe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbe8:	079d      	lsls	r5, r3, #30
 800bbea:	4606      	mov	r6, r0
 800bbec:	460c      	mov	r4, r1
 800bbee:	d507      	bpl.n	800bc00 <__smakebuf_r+0x1c>
 800bbf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	6123      	str	r3, [r4, #16]
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	6163      	str	r3, [r4, #20]
 800bbfc:	b002      	add	sp, #8
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}
 800bc00:	ab01      	add	r3, sp, #4
 800bc02:	466a      	mov	r2, sp
 800bc04:	f7ff ffc9 	bl	800bb9a <__swhatbuf_r>
 800bc08:	9900      	ldr	r1, [sp, #0]
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7fd fab9 	bl	8009184 <_malloc_r>
 800bc12:	b948      	cbnz	r0, 800bc28 <__smakebuf_r+0x44>
 800bc14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc18:	059a      	lsls	r2, r3, #22
 800bc1a:	d4ef      	bmi.n	800bbfc <__smakebuf_r+0x18>
 800bc1c:	f023 0303 	bic.w	r3, r3, #3
 800bc20:	f043 0302 	orr.w	r3, r3, #2
 800bc24:	81a3      	strh	r3, [r4, #12]
 800bc26:	e7e3      	b.n	800bbf0 <__smakebuf_r+0xc>
 800bc28:	4b0d      	ldr	r3, [pc, #52]	; (800bc60 <__smakebuf_r+0x7c>)
 800bc2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	6020      	str	r0, [r4, #0]
 800bc30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	9b00      	ldr	r3, [sp, #0]
 800bc38:	6163      	str	r3, [r4, #20]
 800bc3a:	9b01      	ldr	r3, [sp, #4]
 800bc3c:	6120      	str	r0, [r4, #16]
 800bc3e:	b15b      	cbz	r3, 800bc58 <__smakebuf_r+0x74>
 800bc40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc44:	4630      	mov	r0, r6
 800bc46:	f000 f8d1 	bl	800bdec <_isatty_r>
 800bc4a:	b128      	cbz	r0, 800bc58 <__smakebuf_r+0x74>
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	f023 0303 	bic.w	r3, r3, #3
 800bc52:	f043 0301 	orr.w	r3, r3, #1
 800bc56:	81a3      	strh	r3, [r4, #12]
 800bc58:	89a0      	ldrh	r0, [r4, #12]
 800bc5a:	4305      	orrs	r5, r0
 800bc5c:	81a5      	strh	r5, [r4, #12]
 800bc5e:	e7cd      	b.n	800bbfc <__smakebuf_r+0x18>
 800bc60:	0800b9f9 	.word	0x0800b9f9

0800bc64 <_malloc_usable_size_r>:
 800bc64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc68:	1f18      	subs	r0, r3, #4
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	bfbc      	itt	lt
 800bc6e:	580b      	ldrlt	r3, [r1, r0]
 800bc70:	18c0      	addlt	r0, r0, r3
 800bc72:	4770      	bx	lr

0800bc74 <_raise_r>:
 800bc74:	291f      	cmp	r1, #31
 800bc76:	b538      	push	{r3, r4, r5, lr}
 800bc78:	4604      	mov	r4, r0
 800bc7a:	460d      	mov	r5, r1
 800bc7c:	d904      	bls.n	800bc88 <_raise_r+0x14>
 800bc7e:	2316      	movs	r3, #22
 800bc80:	6003      	str	r3, [r0, #0]
 800bc82:	f04f 30ff 	mov.w	r0, #4294967295
 800bc86:	bd38      	pop	{r3, r4, r5, pc}
 800bc88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc8a:	b112      	cbz	r2, 800bc92 <_raise_r+0x1e>
 800bc8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc90:	b94b      	cbnz	r3, 800bca6 <_raise_r+0x32>
 800bc92:	4620      	mov	r0, r4
 800bc94:	f000 f830 	bl	800bcf8 <_getpid_r>
 800bc98:	462a      	mov	r2, r5
 800bc9a:	4601      	mov	r1, r0
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bca2:	f000 b817 	b.w	800bcd4 <_kill_r>
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d00a      	beq.n	800bcc0 <_raise_r+0x4c>
 800bcaa:	1c59      	adds	r1, r3, #1
 800bcac:	d103      	bne.n	800bcb6 <_raise_r+0x42>
 800bcae:	2316      	movs	r3, #22
 800bcb0:	6003      	str	r3, [r0, #0]
 800bcb2:	2001      	movs	r0, #1
 800bcb4:	e7e7      	b.n	800bc86 <_raise_r+0x12>
 800bcb6:	2400      	movs	r4, #0
 800bcb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	4798      	blx	r3
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	e7e0      	b.n	800bc86 <_raise_r+0x12>

0800bcc4 <raise>:
 800bcc4:	4b02      	ldr	r3, [pc, #8]	; (800bcd0 <raise+0xc>)
 800bcc6:	4601      	mov	r1, r0
 800bcc8:	6818      	ldr	r0, [r3, #0]
 800bcca:	f7ff bfd3 	b.w	800bc74 <_raise_r>
 800bcce:	bf00      	nop
 800bcd0:	2000000c 	.word	0x2000000c

0800bcd4 <_kill_r>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	4d07      	ldr	r5, [pc, #28]	; (800bcf4 <_kill_r+0x20>)
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4604      	mov	r4, r0
 800bcdc:	4608      	mov	r0, r1
 800bcde:	4611      	mov	r1, r2
 800bce0:	602b      	str	r3, [r5, #0]
 800bce2:	f7f6 fb99 	bl	8002418 <_kill>
 800bce6:	1c43      	adds	r3, r0, #1
 800bce8:	d102      	bne.n	800bcf0 <_kill_r+0x1c>
 800bcea:	682b      	ldr	r3, [r5, #0]
 800bcec:	b103      	cbz	r3, 800bcf0 <_kill_r+0x1c>
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	bd38      	pop	{r3, r4, r5, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20000520 	.word	0x20000520

0800bcf8 <_getpid_r>:
 800bcf8:	f7f6 bb86 	b.w	8002408 <_getpid>

0800bcfc <__sread>:
 800bcfc:	b510      	push	{r4, lr}
 800bcfe:	460c      	mov	r4, r1
 800bd00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd04:	f000 f894 	bl	800be30 <_read_r>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	bfab      	itete	ge
 800bd0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd0e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd10:	181b      	addge	r3, r3, r0
 800bd12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd16:	bfac      	ite	ge
 800bd18:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd1a:	81a3      	strhlt	r3, [r4, #12]
 800bd1c:	bd10      	pop	{r4, pc}

0800bd1e <__swrite>:
 800bd1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd22:	461f      	mov	r7, r3
 800bd24:	898b      	ldrh	r3, [r1, #12]
 800bd26:	05db      	lsls	r3, r3, #23
 800bd28:	4605      	mov	r5, r0
 800bd2a:	460c      	mov	r4, r1
 800bd2c:	4616      	mov	r6, r2
 800bd2e:	d505      	bpl.n	800bd3c <__swrite+0x1e>
 800bd30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd34:	2302      	movs	r3, #2
 800bd36:	2200      	movs	r2, #0
 800bd38:	f000 f868 	bl	800be0c <_lseek_r>
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd46:	81a3      	strh	r3, [r4, #12]
 800bd48:	4632      	mov	r2, r6
 800bd4a:	463b      	mov	r3, r7
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd52:	f000 b817 	b.w	800bd84 <_write_r>

0800bd56 <__sseek>:
 800bd56:	b510      	push	{r4, lr}
 800bd58:	460c      	mov	r4, r1
 800bd5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd5e:	f000 f855 	bl	800be0c <_lseek_r>
 800bd62:	1c43      	adds	r3, r0, #1
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	bf15      	itete	ne
 800bd68:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd72:	81a3      	strheq	r3, [r4, #12]
 800bd74:	bf18      	it	ne
 800bd76:	81a3      	strhne	r3, [r4, #12]
 800bd78:	bd10      	pop	{r4, pc}

0800bd7a <__sclose>:
 800bd7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd7e:	f000 b813 	b.w	800bda8 <_close_r>
	...

0800bd84 <_write_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4d07      	ldr	r5, [pc, #28]	; (800bda4 <_write_r+0x20>)
 800bd88:	4604      	mov	r4, r0
 800bd8a:	4608      	mov	r0, r1
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	2200      	movs	r2, #0
 800bd90:	602a      	str	r2, [r5, #0]
 800bd92:	461a      	mov	r2, r3
 800bd94:	f7f6 fb77 	bl	8002486 <_write>
 800bd98:	1c43      	adds	r3, r0, #1
 800bd9a:	d102      	bne.n	800bda2 <_write_r+0x1e>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	b103      	cbz	r3, 800bda2 <_write_r+0x1e>
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
 800bda4:	20000520 	.word	0x20000520

0800bda8 <_close_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d06      	ldr	r5, [pc, #24]	; (800bdc4 <_close_r+0x1c>)
 800bdac:	2300      	movs	r3, #0
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	f7f6 fb83 	bl	80024be <_close>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_close_r+0x1a>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_close_r+0x1a>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20000520 	.word	0x20000520

0800bdc8 <_fstat_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d07      	ldr	r5, [pc, #28]	; (800bde8 <_fstat_r+0x20>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	602b      	str	r3, [r5, #0]
 800bdd6:	f7f6 fb7e 	bl	80024d6 <_fstat>
 800bdda:	1c43      	adds	r3, r0, #1
 800bddc:	d102      	bne.n	800bde4 <_fstat_r+0x1c>
 800bdde:	682b      	ldr	r3, [r5, #0]
 800bde0:	b103      	cbz	r3, 800bde4 <_fstat_r+0x1c>
 800bde2:	6023      	str	r3, [r4, #0]
 800bde4:	bd38      	pop	{r3, r4, r5, pc}
 800bde6:	bf00      	nop
 800bde8:	20000520 	.word	0x20000520

0800bdec <_isatty_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	4d06      	ldr	r5, [pc, #24]	; (800be08 <_isatty_r+0x1c>)
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	4608      	mov	r0, r1
 800bdf6:	602b      	str	r3, [r5, #0]
 800bdf8:	f7f6 fb7d 	bl	80024f6 <_isatty>
 800bdfc:	1c43      	adds	r3, r0, #1
 800bdfe:	d102      	bne.n	800be06 <_isatty_r+0x1a>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	b103      	cbz	r3, 800be06 <_isatty_r+0x1a>
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	bd38      	pop	{r3, r4, r5, pc}
 800be08:	20000520 	.word	0x20000520

0800be0c <_lseek_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4d07      	ldr	r5, [pc, #28]	; (800be2c <_lseek_r+0x20>)
 800be10:	4604      	mov	r4, r0
 800be12:	4608      	mov	r0, r1
 800be14:	4611      	mov	r1, r2
 800be16:	2200      	movs	r2, #0
 800be18:	602a      	str	r2, [r5, #0]
 800be1a:	461a      	mov	r2, r3
 800be1c:	f7f6 fb76 	bl	800250c <_lseek>
 800be20:	1c43      	adds	r3, r0, #1
 800be22:	d102      	bne.n	800be2a <_lseek_r+0x1e>
 800be24:	682b      	ldr	r3, [r5, #0]
 800be26:	b103      	cbz	r3, 800be2a <_lseek_r+0x1e>
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	bd38      	pop	{r3, r4, r5, pc}
 800be2c:	20000520 	.word	0x20000520

0800be30 <_read_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d07      	ldr	r5, [pc, #28]	; (800be50 <_read_r+0x20>)
 800be34:	4604      	mov	r4, r0
 800be36:	4608      	mov	r0, r1
 800be38:	4611      	mov	r1, r2
 800be3a:	2200      	movs	r2, #0
 800be3c:	602a      	str	r2, [r5, #0]
 800be3e:	461a      	mov	r2, r3
 800be40:	f7f6 fb04 	bl	800244c <_read>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_read_r+0x1e>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_read_r+0x1e>
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	20000520 	.word	0x20000520

0800be54 <_init>:
 800be54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be56:	bf00      	nop
 800be58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5a:	bc08      	pop	{r3}
 800be5c:	469e      	mov	lr, r3
 800be5e:	4770      	bx	lr

0800be60 <_fini>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	bf00      	nop
 800be64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be66:	bc08      	pop	{r3}
 800be68:	469e      	mov	lr, r3
 800be6a:	4770      	bx	lr
