
NSGV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d8  080077d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e0  080077e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080077e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000002b0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000320  20000320  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165c3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002894  00000000  00000000  00036663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  00038ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001330  00000000  00000000  0003a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ea0  00000000  00000000  0003b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174dd  00000000  00000000  0005d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d407a  00000000  00000000  000749b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148a2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005afc  00000000  00000000  00148a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800774c 	.word	0x0800774c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800774c 	.word	0x0800774c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
static void MX_TIM2_Init(void);
static void MX_TIM5_Init(void);
void dmsg(char *msg);

int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b09a      	sub	sp, #104	; 0x68
 8000588:	af00      	add	r7, sp, #0
	char msg[100];
   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800058a:	f000 ff71 	bl	8001470 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 800058e:	f000 f8c5 	bl	800071c <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000592:	f000 fb23 	bl	8000bdc <MX_GPIO_Init>
	MX_CAN1_Init();
 8000596:	f000 fa35 	bl	8000a04 <MX_CAN1_Init>
	MX_SPI1_Init();
 800059a:	f000 fa95 	bl	8000ac8 <MX_SPI1_Init>
	MX_ADC1_Init();
 800059e:	f000 f9df 	bl	8000960 <MX_ADC1_Init>
	MX_I2C2_Init();
 80005a2:	f000 fa63 	bl	8000a6c <MX_I2C2_Init>
	MX_USART1_UART_Init();
 80005a6:	f000 fac5 	bl	8000b34 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80005aa:	f000 faed 	bl	8000b88 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 80005ae:	f000 f925 	bl	80007fc <MX_TIM2_Init>
	MX_TIM5_Init();
 80005b2:	f000 f987 	bl	80008c4 <MX_TIM5_Init>

	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 80005b6:	2100      	movs	r1, #0
 80005b8:	4820      	ldr	r0, [pc, #128]	; (800063c <main+0xb8>)
 80005ba:	f004 ff0d 	bl	80053d8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 80005be:	2104      	movs	r1, #4
 80005c0:	481e      	ldr	r0, [pc, #120]	; (800063c <main+0xb8>)
 80005c2:	f004 ff09 	bl	80053d8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_3);
 80005c6:	2108      	movs	r1, #8
 80005c8:	481c      	ldr	r0, [pc, #112]	; (800063c <main+0xb8>)
 80005ca:	f004 ff05 	bl	80053d8 <HAL_TIM_IC_Start_IT>

	uart= huart1;
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <main+0xbc>)
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <main+0xc0>)
 80005d2:	4610      	mov	r0, r2
 80005d4:	4619      	mov	r1, r3
 80005d6:	2344      	movs	r3, #68	; 0x44
 80005d8:	461a      	mov	r2, r3
 80005da:	f006 fc39 	bl	8006e50 <memcpy>

	while (1)
	{
		memset(msg,0,sizeof(msg));
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f006 fc41 	bl	8006e6c <memset>
		sprintf(msg,"Switch Input: %d",HAL_GPIO_ReadPin(GPIOC, PINC_SWITCH));
 80005ea:	2101      	movs	r1, #1
 80005ec:	4816      	ldr	r0, [pc, #88]	; (8000648 <main+0xc4>)
 80005ee:	f002 f9f7 	bl	80029e0 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4914      	ldr	r1, [pc, #80]	; (800064c <main+0xc8>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f006 fd2e 	bl	800705c <siprintf>
		dmsg(msg);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f858 	bl	80006b8 <dmsg>
		memset(msg,0,sizeof(msg));
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2264      	movs	r2, #100	; 0x64
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f006 fc2c 	bl	8006e6c <memset>
		sprintf(msg,"State Input: %d",HAL_GPIO_ReadPin(GPIOB, PINB_STATE));
 8000614:	2102      	movs	r1, #2
 8000616:	480e      	ldr	r0, [pc, #56]	; (8000650 <main+0xcc>)
 8000618:	f002 f9e2 	bl	80029e0 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	490c      	ldr	r1, [pc, #48]	; (8000654 <main+0xd0>)
 8000624:	4618      	mov	r0, r3
 8000626:	f006 fd19 	bl	800705c <siprintf>
		dmsg(msg);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f843 	bl	80006b8 <dmsg>
		HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f000 ff8d 	bl	8001554 <HAL_Delay>
		memset(msg,0,sizeof(msg));
 800063a:	e7d0      	b.n	80005de <main+0x5a>
 800063c:	20000230 	.word	0x20000230
 8000640:	200002c4 	.word	0x200002c4
 8000644:	200001a8 	.word	0x200001a8
 8000648:	40020800 	.word	0x40020800
 800064c:	08007764 	.word	0x08007764
 8000650:	40020400 	.word	0x40020400
 8000654:	08007778 	.word	0x08007778

08000658 <HAL_TIM_IC_CaptureCallback>:
	}
	return 0;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	uint16_t PIN_LED = PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED;
 8000672:	231e      	movs	r3, #30
 8000674:	80fb      	strh	r3, [r7, #6]
	if (HAL_GetTick()- tick >=1000)
 8000676:	f000 ff61 	bl	800153c <HAL_GetTick>
 800067a:	4602      	mov	r2, r0
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_SYSTICK_Callback+0x44>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000686:	d30e      	bcc.n	80006a6 <HAL_SYSTICK_Callback+0x3a>
	{
		tick = HAL_GetTick();
 8000688:	f000 ff58 	bl	800153c <HAL_GetTick>
 800068c:	4603      	mov	r3, r0
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <HAL_SYSTICK_Callback+0x44>)
 8000690:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC,PINC_HEART);
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <HAL_SYSTICK_Callback+0x48>)
 8000698:	f002 f9d3 	bl	8002a42 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, PIN_LED);
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	4619      	mov	r1, r3
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <HAL_SYSTICK_Callback+0x48>)
 80006a2:	f002 f9ce 	bl	8002a42 <HAL_GPIO_TogglePin>
	}
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200002c0 	.word	0x200002c0
 80006b4:	40020800 	.word	0x40020800

080006b8 <dmsg>:

void dmsg(char *msg)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	char *str = malloc(strlen(msg) + 3);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fd85 	bl	80001d0 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	3303      	adds	r3, #3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 fbb8 	bl	8006e40 <malloc>
 80006d0:	4603      	mov	r3, r0
 80006d2:	60fb      	str	r3, [r7, #12]
	strcpy(str, msg);
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f006 fce0 	bl	800709c <strcpy>
	strcat(str, "\r\n");
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f7ff fd77 	bl	80001d0 <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <dmsg+0x5c>)
 80006ec:	8811      	ldrh	r1, [r2, #0]
 80006ee:	7892      	ldrb	r2, [r2, #2]
 80006f0:	8019      	strh	r1, [r3, #0]
 80006f2:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f7ff fd6b 	bl	80001d0 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	68f9      	ldr	r1, [r7, #12]
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <dmsg+0x60>)
 8000706:	f005 fbab 	bl	8005e60 <HAL_UART_Transmit>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08007788 	.word	0x08007788
 8000718:	200002c4 	.word	0x200002c4

0800071c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f006 fb9e 	bl	8006e6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <SystemClock_Config+0xd4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a29      	ldr	r2, [pc, #164]	; (80007f0 <SystemClock_Config+0xd4>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <SystemClock_Config+0xd4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <SystemClock_Config+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a23      	ldr	r2, [pc, #140]	; (80007f4 <SystemClock_Config+0xd8>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <SystemClock_Config+0xd8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 320;
 8000790:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000794:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800079a:	2304      	movs	r3, #4
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 ff88 	bl	80046b8 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80007ae:	f000 faa7 	bl	8000d00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2105      	movs	r1, #5
 80007d0:	4618      	mov	r0, r3
 80007d2:	f004 f9e9 	bl	8004ba8 <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80007dc:	f000 fa90 	bl	8000d00 <Error_Handler>
	}
	__HAL_RCC_HSI_DISABLE();
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SystemClock_Config+0xdc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	; 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000
 80007f8:	42470000 	.word	0x42470000

080007fc <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800080e:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MX_TIM2_Init+0xc4>)
 8000810:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000814:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_TIM2_Init+0xc4>)
 8000818:	2250      	movs	r2, #80	; 0x50
 800081a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <MX_TIM2_Init+0xc4>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <MX_TIM2_Init+0xc4>)
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <MX_TIM2_Init+0xc4>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_TIM2_Init+0xc4>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000836:	4822      	ldr	r0, [pc, #136]	; (80008c0 <MX_TIM2_Init+0xc4>)
 8000838:	f004 fd7e 	bl	8005338 <HAL_TIM_IC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x4a>
  {
    Error_Handler();
 8000842:	f000 fa5d 	bl	8000d00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_ICPOLARITY_RISING;
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800084a:	2301      	movs	r3, #1
 800084c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_TIM2_Init+0xc4>)
 800085e:	f004 ffeb 	bl	8005838 <HAL_TIM_IC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 fa4a 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	2208      	movs	r2, #8
 8000870:	4619      	mov	r1, r3
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <MX_TIM2_Init+0xc4>)
 8000874:	f004 ffe0 	bl	8005838 <HAL_TIM_IC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800087e:	f000 fa3f 	bl	8000d00 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000882:	2302      	movs	r3, #2
 8000884:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPolarity = TIM_ICPOLARITY_FALLING;
 8000886:	2302      	movs	r3, #2
 8000888:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	2204      	movs	r2, #4
 800088e:	4619      	mov	r1, r3
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_TIM2_Init+0xc4>)
 8000892:	f004 ffd1 	bl	8005838 <HAL_TIM_IC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800089c:	f000 fa30 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	220c      	movs	r2, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_TIM2_Init+0xc4>)
 80008a8:	f004 ffc6 	bl	8005838 <HAL_TIM_IC_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80008b2:	f000 fa25 	bl	8000d00 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000230 	.word	0x20000230

080008c4 <MX_TIM5_Init>:

static void MX_TIM5_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
  htim5.Instance = TIM5;
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_TIM5_Init+0x94>)
 80008d8:	4a20      	ldr	r2, [pc, #128]	; (800095c <MX_TIM5_Init+0x98>)
 80008da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_TIM5_Init+0x94>)
 80008de:	2250      	movs	r2, #80	; 0x50
 80008e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_TIM5_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_TIM5_Init+0x94>)
 80008ea:	f04f 32ff 	mov.w	r2, #4294967295
 80008ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM5_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_TIM5_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80008fc:	4816      	ldr	r0, [pc, #88]	; (8000958 <MX_TIM5_Init+0x94>)
 80008fe:	f004 fd1b 	bl	8005338 <HAL_TIM_IC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM5_Init+0x48>
  {
    Error_Handler();
 8000908:	f000 f9fa 	bl	8000d00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_ICPOLARITY_RISING;
 800090c:	2300      	movs	r3, #0
 800090e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000910:	2302      	movs	r3, #2
 8000912:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_TIM5_Init+0x94>)
 8000924:	f004 ff88 	bl	8005838 <HAL_TIM_IC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 f9e7 	bl	8000d00 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000932:	2301      	movs	r3, #1
 8000934:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPolarity = TIM_ICPOLARITY_FALLING;
 8000936:	2302      	movs	r3, #2
 8000938:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	2204      	movs	r2, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_TIM5_Init+0x94>)
 8000942:	f004 ff79 	bl	8005838 <HAL_TIM_IC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800094c:	f000 f9d8 	bl	8000d00 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000278 	.word	0x20000278
 800095c:	40000c00 	.word	0x40000c00

08000960 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
	hadc1.Instance = ADC1;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_ADC1_Init+0x98>)
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <MX_ADC1_Init+0x9c>)
 8000976:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_ADC1_Init+0x98>)
 800097a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800097e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_ADC1_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_ADC1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_ADC1_Init+0x98>)
 800098e:	2200      	movs	r2, #0
 8000990:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_ADC1_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_ADC1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_ADC1_Init+0x98>)
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <MX_ADC1_Init+0xa0>)
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_ADC1_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_ADC1_Init+0x98>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_ADC1_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_ADC1_Init+0x98>)
 80009bc:	2201      	movs	r2, #1
 80009be:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_ADC1_Init+0x98>)
 80009c2:	f000 fdeb 	bl	800159c <HAL_ADC_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80009cc:	f000 f998 	bl	8000d00 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_3;
 80009d0:	2303      	movs	r3, #3
 80009d2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_ADC1_Init+0x98>)
 80009e2:	f000 ff4d 	bl	8001880 <HAL_ADC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 80009ec:	f000 f988 	bl	8000d00 <Error_Handler>
	}
}
 80009f0:	bf00      	nop
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000008c 	.word	0x2000008c
 80009fc:	40012000 	.word	0x40012000
 8000a00:	0f000001 	.word	0x0f000001

08000a04 <MX_CAN1_Init>:

static void MX_CAN1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <MX_CAN1_Init+0x64>)
 8000a0c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a10:	2210      	movs	r2, #16
 8000a12:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_CAN1_Init+0x60>)
 8000a52:	f001 f93d 	bl	8001cd0 <HAL_CAN_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_CAN1_Init+0x5c>
	{
		Error_Handler();
 8000a5c:	f000 f950 	bl	8000d00 <Error_Handler>
	}
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000d4 	.word	0x200000d4
 8000a68:	40006400 	.word	0x40006400

08000a6c <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_I2C2_Init+0x50>)
 8000a72:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <MX_I2C2_Init+0x54>)
 8000a74:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_I2C2_Init+0x50>)
 8000a78:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <MX_I2C2_Init+0x58>)
 8000a7a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_I2C2_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_I2C2_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_I2C2_Init+0x50>)
 8000a8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a8e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <MX_I2C2_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_I2C2_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_I2C2_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_I2C2_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_I2C2_Init+0x50>)
 8000aaa:	f001 ffe5 	bl	8002a78 <HAL_I2C_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8000ab4:	f000 f924 	bl	8000d00 <Error_Handler>
	}

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000fc 	.word	0x200000fc
 8000ac0:	40005800 	.word	0x40005800
 8000ac4:	000186a0 	.word	0x000186a0

08000ac8 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <MX_SPI1_Init+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b14:	220a      	movs	r2, #10
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b1a:	f004 fa65 	bl	8004fe8 <HAL_SPI_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000b24:	f000 f8ec 	bl	8000d00 <Error_Handler>
	}

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000150 	.word	0x20000150
 8000b30:	40013000 	.word	0x40013000

08000b34 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART1_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART1_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART1_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART1_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART1_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART1_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART1_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART1_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART1_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART1_UART_Init+0x4c>)
 8000b6c:	f005 f92b 	bl	8005dc6 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000b76:	f000 f8c3 	bl	8000d00 <Error_Handler>
	}

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200001a8 	.word	0x200001a8
 8000b84:	40011000 	.word	0x40011000

08000b88 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART3_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <MX_USART3_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_USART3_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART3_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART3_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART3_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART3_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART3_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART3_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART3_UART_Init+0x4c>)
 8000bc0:	f005 f901 	bl	8005dc6 <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000bca:	f000 f899 	bl	8000d00 <Error_Handler>
	}

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200001ec 	.word	0x200001ec
 8000bd8:	40004800 	.word	0x40004800

08000bdc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a3d      	ldr	r2, [pc, #244]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b37      	ldr	r3, [pc, #220]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a36      	ldr	r2, [pc, #216]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b34      	ldr	r3, [pc, #208]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b30      	ldr	r3, [pc, #192]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a2f      	ldr	r2, [pc, #188]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <MX_GPIO_Init+0x114>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOC, PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED|PINC_CAN_STB|PINC_HEART, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f242 211e 	movw	r1, #8734	; 0x221e
 8000c4c:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c4e:	f001 fedf 	bl	8002a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, PINC_SPI_SSA|PINC_SPI_SSB|PINC_SPI_SSV|PINC_SPI_SST, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000c58:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c5a:	f001 fed9 	bl	8002a10 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED|PINC_CAN_STB|
 8000c5e:	f242 33fe 	movw	r3, #9214	; 0x23fe
 8000c62:	60fb      	str	r3, [r7, #12]
					  PINC_HEART|PINC_SPI_SSA|PINC_SPI_SSB|PINC_SPI_SSV|PINC_SPI_SST;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	481f      	ldr	r0, [pc, #124]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c78:	f001 fd16 	bl	80026a8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINC_SWITCH;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4819      	ldr	r0, [pc, #100]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c90:	f001 fd0a 	bl	80026a8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINA_IC_FREQ3|PINA_IC_FREQ2|PINA_IC_FREQ1;
 8000c94:	2307      	movs	r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <MX_GPIO_Init+0x11c>)
 8000cb0:	f001 fcfa 	bl	80026a8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINB_EN;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480c      	ldr	r0, [pc, #48]	; (8000cfc <MX_GPIO_Init+0x120>)
 8000ccc:	f001 fcec 	bl	80026a8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINB_STATE;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <MX_GPIO_Init+0x120>)
 8000ce4:	f001 fce0 	bl	80026a8 <HAL_GPIO_Init>

}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	40020400 	.word	0x40020400

08000d00 <Error_Handler>:

void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
	__disable_irq();
	while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000d4a:	2005      	movs	r0, #5
 8000d4c:	f001 fbc4 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d7c:	d134      	bne.n	8000de8 <HAL_TIM_IC_MspInit+0x8c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a37      	ldr	r2, [pc, #220]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a30      	ldr	r2, [pc, #192]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PINA_IC_FREQ3|PINA_IC_FREQ1;
 8000db6:	2305      	movs	r3, #5
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4825      	ldr	r0, [pc, #148]	; (8000e68 <HAL_TIM_IC_MspInit+0x10c>)
 8000dd2:	f001 fc69 	bl	80026a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2102      	movs	r1, #2
 8000dda:	201c      	movs	r0, #28
 8000ddc:	f001 fb87 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000de0:	201c      	movs	r0, #28
 8000de2:	f001 fba0 	bl	8002526 <HAL_NVIC_EnableIRQ>
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }

}
 8000de6:	e038      	b.n	8000e5a <HAL_TIM_IC_MspInit+0xfe>
  else if(htim_ic->Instance==TIM5)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <HAL_TIM_IC_MspInit+0x110>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d133      	bne.n	8000e5a <HAL_TIM_IC_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_TIM_IC_MspInit+0x108>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINA_IC_FREQ2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <HAL_TIM_IC_MspInit+0x10c>)
 8000e46:	f001 fc2f 	bl	80026a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	2032      	movs	r0, #50	; 0x32
 8000e50:	f001 fb4d 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000e54:	2032      	movs	r0, #50	; 0x32
 8000e56:	f001 fb66 	bl	8002526 <HAL_NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3730      	adds	r7, #48	; 0x30
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40000c00 	.word	0x40000c00

08000e70 <HAL_ADC_MspInit>:
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  }
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <HAL_ADC_MspInit+0x8c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12f      	bne.n	8000ef2 <HAL_ADC_MspInit+0x82>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <HAL_ADC_MspInit+0x90>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_ADC_MspInit+0x90>)
 8000e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_ADC_MspInit+0x90>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <HAL_ADC_MspInit+0x90>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <HAL_ADC_MspInit+0x90>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_ADC_MspInit+0x90>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = PINA_ADC_VMON;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <HAL_ADC_MspInit+0x94>)
 8000ede:	f001 fbe3 	bl	80026a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	2012      	movs	r0, #18
 8000ee8:	f001 fb01 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eec:	2012      	movs	r0, #18
 8000eee:	f001 fb1a 	bl	8002526 <HAL_NVIC_EnableIRQ>
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40012000 	.word	0x40012000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a29      	ldr	r2, [pc, #164]	; (8000fcc <HAL_CAN_MspInit+0xc4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d14c      	bne.n	8000fc4 <HAL_CAN_MspInit+0xbc>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <HAL_CAN_MspInit+0xc8>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <HAL_CAN_MspInit+0xc8>)
 8000f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <HAL_CAN_MspInit+0xc8>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_CAN_MspInit+0xc8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <HAL_CAN_MspInit+0xc8>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <HAL_CAN_MspInit+0xc8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PINB_CAN_RX|PINB_CAN_TX;
 8000f62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f74:	2309      	movs	r3, #9
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4815      	ldr	r0, [pc, #84]	; (8000fd4 <HAL_CAN_MspInit+0xcc>)
 8000f80:	f001 fb92 	bl	80026a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2102      	movs	r1, #2
 8000f88:	2013      	movs	r0, #19
 8000f8a:	f001 fab0 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f8e:	2013      	movs	r0, #19
 8000f90:	f001 fac9 	bl	8002526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2102      	movs	r1, #2
 8000f98:	2014      	movs	r0, #20
 8000f9a:	f001 faa8 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f001 fac1 	bl	8002526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	2015      	movs	r0, #21
 8000faa:	f001 faa0 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fae:	2015      	movs	r0, #21
 8000fb0:	f001 fab9 	bl	8002526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	2016      	movs	r0, #22
 8000fba:	f001 fa98 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000fbe:	2016      	movs	r0, #22
 8000fc0:	f001 fab1 	bl	8002526 <HAL_NVIC_EnableIRQ>
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40006400 	.word	0x40006400
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a21      	ldr	r2, [pc, #132]	; (800107c <HAL_I2C_MspInit+0xa4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d13c      	bne.n	8001074 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_I2C_MspInit+0xa8>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_I2C_MspInit+0xa8>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_I2C_MspInit+0xa8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = PINB_I2C_SCL|PINB_12C_SDA;
 8001016:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101c:	2312      	movs	r3, #18
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001028:	2304      	movs	r3, #4
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4814      	ldr	r0, [pc, #80]	; (8001084 <HAL_I2C_MspInit+0xac>)
 8001034:	f001 fb38 	bl	80026a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_I2C_MspInit+0xa8>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <HAL_I2C_MspInit+0xa8>)
 8001042:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_I2C_MspInit+0xa8>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 2, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	2021      	movs	r0, #33	; 0x21
 800105a:	f001 fa48 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800105e:	2021      	movs	r0, #33	; 0x21
 8001060:	f001 fa61 	bl	8002526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 2, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2102      	movs	r1, #2
 8001068:	2022      	movs	r0, #34	; 0x22
 800106a:	f001 fa40 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800106e:	2022      	movs	r0, #34	; 0x22
 8001070:	f001 fa59 	bl	8002526 <HAL_NVIC_EnableIRQ>
  }

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40005800 	.word	0x40005800
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400

08001088 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1d      	ldr	r2, [pc, #116]	; (800111c <HAL_SPI_MspInit+0x94>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d133      	bne.n	8001112 <HAL_SPI_MspInit+0x8a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_SPI_MspInit+0x98>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_SPI_MspInit+0x98>)
 80010b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_SPI_MspInit+0x98>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_SPI_MspInit+0x98>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <HAL_SPI_MspInit+0x98>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_SPI_MspInit+0x98>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PINA_SPI_SCK|PINA_SPI_MISO|PINA_SPI_MOSI;
 80010e2:	23e0      	movs	r3, #224	; 0xe0
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ee:	2302      	movs	r3, #2
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f2:	2305      	movs	r3, #5
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <HAL_SPI_MspInit+0x9c>)
 80010fe:	f001 fad3 	bl	80026a8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2102      	movs	r1, #2
 8001106:	2023      	movs	r0, #35	; 0x23
 8001108:	f001 f9f1 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800110c:	2023      	movs	r0, #35	; 0x23
 800110e:	f001 fa0a 	bl	8002526 <HAL_NVIC_EnableIRQ>
  }

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40013000 	.word	0x40013000
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000

08001128 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <HAL_UART_MspInit+0x108>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d134      	bne.n	80011b4 <HAL_UART_MspInit+0x8c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	4b39      	ldr	r3, [pc, #228]	; (8001234 <HAL_UART_MspInit+0x10c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a38      	ldr	r2, [pc, #224]	; (8001234 <HAL_UART_MspInit+0x10c>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b36      	ldr	r3, [pc, #216]	; (8001234 <HAL_UART_MspInit+0x10c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <HAL_UART_MspInit+0x10c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a31      	ldr	r2, [pc, #196]	; (8001234 <HAL_UART_MspInit+0x10c>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <HAL_UART_MspInit+0x10c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PINB_UART1_TX|PINB_UART1_RX;
 8001182:	23c0      	movs	r3, #192	; 0xc0
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001192:	2307      	movs	r3, #7
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	4826      	ldr	r0, [pc, #152]	; (8001238 <HAL_UART_MspInit+0x110>)
 800119e:	f001 fa83 	bl	80026a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2103      	movs	r1, #3
 80011a6:	2025      	movs	r0, #37	; 0x25
 80011a8:	f001 f9a1 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ac:	2025      	movs	r0, #37	; 0x25
 80011ae:	f001 f9ba 	bl	8002526 <HAL_NVIC_EnableIRQ>
    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  }

}
 80011b2:	e039      	b.n	8001228 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a20      	ldr	r2, [pc, #128]	; (800123c <HAL_UART_MspInit+0x114>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d134      	bne.n	8001228 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_UART_MspInit+0x10c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_UART_MspInit+0x10c>)
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_UART_MspInit+0x10c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_UART_MspInit+0x10c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_UART_MspInit+0x10c>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_UART_MspInit+0x10c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINC_UART2_RX|PINC_UART2_TX;
 80011f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001208:	2307      	movs	r3, #7
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <HAL_UART_MspInit+0x118>)
 8001214:	f001 fa48 	bl	80026a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2103      	movs	r1, #3
 800121c:	2027      	movs	r0, #39	; 0x27
 800121e:	f001 f966 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001222:	2027      	movs	r0, #39	; 0x27
 8001224:	f001 f97f 	bl	8002526 <HAL_NVIC_EnableIRQ>
}
 8001228:	bf00      	nop
 800122a:	3730      	adds	r7, #48	; 0x30
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40011000 	.word	0x40011000
 8001234:	40023800 	.word	0x40023800
 8001238:	40020400 	.word	0x40020400
 800123c:	40004800 	.word	0x40004800
 8001240:	40020800 	.word	0x40020800

08001244 <NMI_Handler>:
extern TIM_HandleTypeDef htim5;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;

void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001290:	f000 f940 	bl	8001514 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001294:	f001 f961 	bl	800255a <HAL_SYSTICK_IRQHandler>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM2_IRQHandler+0x10>)
 80012a2:	f004 f9c1 	bl	8005628 <HAL_TIM_IRQHandler>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000230 	.word	0x20000230

080012b0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim5);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <TIM5_IRQHandler+0x10>)
 80012b6:	f004 f9b7 	bl	8005628 <HAL_TIM_IRQHandler>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000278 	.word	0x20000278

080012c4 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc1);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <ADC_IRQHandler+0x10>)
 80012ca:	f000 f9aa 	bl	8001622 <HAL_ADC_IRQHandler>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000008c 	.word	0x2000008c

080012d8 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <CAN1_TX_IRQHandler+0x10>)
 80012de:	f000 fdf2 	bl	8001ec6 <HAL_CAN_IRQHandler>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200000d4 	.word	0x200000d4

080012ec <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <CAN1_RX0_IRQHandler+0x10>)
 80012f2:	f000 fde8 	bl	8001ec6 <HAL_CAN_IRQHandler>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000d4 	.word	0x200000d4

08001300 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <CAN1_RX1_IRQHandler+0x10>)
 8001306:	f000 fdde 	bl	8001ec6 <HAL_CAN_IRQHandler>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000d4 	.word	0x200000d4

08001314 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <CAN1_SCE_IRQHandler+0x10>)
 800131a:	f000 fdd4 	bl	8001ec6 <HAL_CAN_IRQHandler>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000d4 	.word	0x200000d4

08001328 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <I2C2_EV_IRQHandler+0x10>)
 800132e:	f001 fce7 	bl	8002d00 <HAL_I2C_EV_IRQHandler>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200000fc 	.word	0x200000fc

0800133c <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <I2C2_ER_IRQHandler+0x10>)
 8001342:	f001 fe4e 	bl	8002fe2 <HAL_I2C_ER_IRQHandler>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000fc 	.word	0x200000fc

08001350 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <SPI1_IRQHandler+0x10>)
 8001356:	f003 fed1 	bl	80050fc <HAL_SPI_IRQHandler>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000150 	.word	0x20000150

08001364 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <USART1_IRQHandler+0x10>)
 800136a:	f004 fe0b 	bl	8005f84 <HAL_UART_IRQHandler>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200001a8 	.word	0x200001a8

08001378 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <USART3_IRQHandler+0x10>)
 800137e:	f004 fe01 	bl	8005f84 <HAL_UART_IRQHandler>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001ec 	.word	0x200001ec

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f005 fd16 	bl	8006dec <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20020000 	.word	0x20020000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	20000308 	.word	0x20000308
 80013f4:	20000320 	.word	0x20000320

080013f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <SystemInit+0x20>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <SystemInit+0x20>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800141c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001422:	490e      	ldr	r1, [pc, #56]	; (800145c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001428:	e002      	b.n	8001430 <LoopCopyDataInit>

0800142a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800142c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142e:	3304      	adds	r3, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001434:	d3f9      	bcc.n	800142a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001438:	4c0b      	ldr	r4, [pc, #44]	; (8001468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800143c:	e001      	b.n	8001442 <LoopFillZerobss>

0800143e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001440:	3204      	adds	r2, #4

08001442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001444:	d3fb      	bcc.n	800143e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001446:	f7ff ffd7 	bl	80013f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144a:	f005 fcd5 	bl	8006df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144e:	f7ff f899 	bl	8000584 <main>
  bx  lr    
 8001452:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001460:	080077e8 	.word	0x080077e8
  ldr r2, =_sbss
 8001464:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001468:	20000320 	.word	0x20000320

0800146c <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800146c:	e7fe      	b.n	800146c <CAN2_RX0_IRQHandler>
	...

08001470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <HAL_Init+0x40>)
 800147a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_Init+0x40>)
 8001486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_Init+0x40>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f001 f81d 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149e:	2001      	movs	r0, #1
 80014a0:	f000 f808 	bl	80014b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a4:	f7ff fc32 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023c00 	.word	0x40023c00

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_InitTick+0x54>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x58>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 f835 	bl	8002542 <HAL_SYSTICK_Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00e      	b.n	8001500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d80a      	bhi.n	80014fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e8:	2200      	movs	r2, #0
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f000 fffd 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <HAL_InitTick+0x5c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000000 	.word	0x20000000
 800150c:	20000008 	.word	0x20000008
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_IncTick+0x20>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x24>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_IncTick+0x24>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008
 8001538:	2000030c 	.word	0x2000030c

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_GetTick+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2000030c 	.word	0x2000030c

08001554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff ffee 	bl	800153c <HAL_GetTick>
 8001560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156c:	d005      	beq.n	800157a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_Delay+0x44>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800157a:	bf00      	nop
 800157c:	f7ff ffde 	bl	800153c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	429a      	cmp	r2, r3
 800158a:	d8f7      	bhi.n	800157c <HAL_Delay+0x28>
  {
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008

0800159c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e033      	b.n	800161a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fc58 	bl	8000e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d118      	bne.n	800160c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015e2:	f023 0302 	bic.w	r3, r3, #2
 80015e6:	f043 0202 	orr.w	r2, r3, #2
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fa68 	bl	8001ac4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f023 0303 	bic.w	r3, r3, #3
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
 800160a:	e001      	b.n	8001610 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d049      	beq.n	80016ec <HAL_ADC_IRQHandler+0xca>
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d046      	beq.n	80016ec <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d12b      	bne.n	80016dc <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001688:	2b00      	cmp	r3, #0
 800168a:	d127      	bne.n	80016dc <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d119      	bne.n	80016dc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0220 	bic.w	r2, r2, #32
 80016b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d105      	bne.n	80016dc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f8b0 	bl	8001842 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f06f 0212 	mvn.w	r2, #18
 80016ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d057      	beq.n	80017b2 <HAL_ADC_IRQHandler+0x190>
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d054      	beq.n	80017b2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d139      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001734:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001746:	2b00      	cmp	r3, #0
 8001748:	d12b      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001754:	2b00      	cmp	r3, #0
 8001756:	d124      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d11d      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800176a:	2b00      	cmp	r3, #0
 800176c:	d119      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800177c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d105      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fa8a 	bl	8001cbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f06f 020c 	mvn.w	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d017      	beq.n	80017f8 <HAL_ADC_IRQHandler+0x1d6>
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d014      	beq.n	80017f8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10d      	bne.n	80017f8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f834 	bl	8001856 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f06f 0201 	mvn.w	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001806:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d015      	beq.n	800183a <HAL_ADC_IRQHandler+0x218>
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d012      	beq.n	800183a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f043 0202 	orr.w	r2, r3, #2
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f06f 0220 	mvn.w	r2, #32
 8001828:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f81d 	bl	800186a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f06f 0220 	mvn.w	r2, #32
 8001838:	601a      	str	r2, [r3, #0]
  }
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1c>
 8001898:	2302      	movs	r3, #2
 800189a:	e105      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x228>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b09      	cmp	r3, #9
 80018aa:	d925      	bls.n	80018f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68d9      	ldr	r1, [r3, #12]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	3b1e      	subs	r3, #30
 80018c2:	2207      	movs	r2, #7
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43da      	mvns	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	400a      	ands	r2, r1
 80018d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68d9      	ldr	r1, [r3, #12]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	4603      	mov	r3, r0
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4403      	add	r3, r0
 80018ea:	3b1e      	subs	r3, #30
 80018ec:	409a      	lsls	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	e022      	b.n	800193e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6919      	ldr	r1, [r3, #16]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	2207      	movs	r2, #7
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	400a      	ands	r2, r1
 800191a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6919      	ldr	r1, [r3, #16]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	4603      	mov	r3, r0
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4403      	add	r3, r0
 8001934:	409a      	lsls	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b06      	cmp	r3, #6
 8001944:	d824      	bhi.n	8001990 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	3b05      	subs	r3, #5
 8001958:	221f      	movs	r2, #31
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	400a      	ands	r2, r1
 8001966:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	3b05      	subs	r3, #5
 8001982:	fa00 f203 	lsl.w	r2, r0, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	635a      	str	r2, [r3, #52]	; 0x34
 800198e:	e04c      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	d824      	bhi.n	80019e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	3b23      	subs	r3, #35	; 0x23
 80019aa:	221f      	movs	r2, #31
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43da      	mvns	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	400a      	ands	r2, r1
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	3b23      	subs	r3, #35	; 0x23
 80019d4:	fa00 f203 	lsl.w	r2, r0, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
 80019e0:	e023      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	3b41      	subs	r3, #65	; 0x41
 80019f4:	221f      	movs	r2, #31
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	400a      	ands	r2, r1
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4618      	mov	r0, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b41      	subs	r3, #65	; 0x41
 8001a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_ADC_ConfigChannel+0x234>)
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <HAL_ADC_ConfigChannel+0x238>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d109      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x1cc>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	d105      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <HAL_ADC_ConfigChannel+0x238>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d123      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x21e>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d003      	beq.n	8001a66 <HAL_ADC_ConfigChannel+0x1e6>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b11      	cmp	r3, #17
 8001a64:	d11b      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d111      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_ADC_ConfigChannel+0x23c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <HAL_ADC_ConfigChannel+0x240>)
 8001a80:	fba2 2303 	umull	r2, r3, r2, r3
 8001a84:	0c9a      	lsrs	r2, r3, #18
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a90:	e002      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f9      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40012300 	.word	0x40012300
 8001ab8:	40012000 	.word	0x40012000
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	431bde83 	.word	0x431bde83

08001ac4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001acc:	4b79      	ldr	r3, [pc, #484]	; (8001cb4 <ADC_Init+0x1f0>)
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	021a      	lsls	r2, r3, #8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6899      	ldr	r1, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <ADC_Init+0x1f4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d022      	beq.n	8001ba2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6899      	ldr	r1, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	e00f      	b.n	8001bc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0202 	bic.w	r2, r2, #2
 8001bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6899      	ldr	r1, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7e1b      	ldrb	r3, [r3, #24]
 8001bdc:	005a      	lsls	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01b      	beq.n	8001c28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	035a      	lsls	r2, r3, #13
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	e007      	b.n	8001c38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	051a      	lsls	r2, r3, #20
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6899      	ldr	r1, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c7a:	025a      	lsls	r2, r3, #9
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6899      	ldr	r1, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	029a      	lsls	r2, r3, #10
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40012300 	.word	0x40012300
 8001cb8:	0f000001 	.word	0x0f000001

08001cbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0ed      	b.n	8001ebe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff f90a 	bl	8000f08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d04:	f7ff fc1a 	bl	800153c <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d0a:	e012      	b.n	8001d32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d0c:	f7ff fc16 	bl	800153c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b0a      	cmp	r3, #10
 8001d18:	d90b      	bls.n	8001d32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2205      	movs	r2, #5
 8001d2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0c5      	b.n	8001ebe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0e5      	beq.n	8001d0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0202 	bic.w	r2, r2, #2
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d50:	f7ff fbf4 	bl	800153c <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d56:	e012      	b.n	8001d7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d58:	f7ff fbf0 	bl	800153c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b0a      	cmp	r3, #10
 8001d64:	d90b      	bls.n	8001d7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e09f      	b.n	8001ebe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e5      	bne.n	8001d58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7e1b      	ldrb	r3, [r3, #24]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d108      	bne.n	8001da6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e007      	b.n	8001db6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7e5b      	ldrb	r3, [r3, #25]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d108      	bne.n	8001dd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e007      	b.n	8001de0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7e9b      	ldrb	r3, [r3, #26]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d108      	bne.n	8001dfa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e007      	b.n	8001e0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0220 	bic.w	r2, r2, #32
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7edb      	ldrb	r3, [r3, #27]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d108      	bne.n	8001e24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0210 	bic.w	r2, r2, #16
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e007      	b.n	8001e34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0210 	orr.w	r2, r2, #16
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7f1b      	ldrb	r3, [r3, #28]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d108      	bne.n	8001e4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0208 	orr.w	r2, r2, #8
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e007      	b.n	8001e5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0208 	bic.w	r2, r2, #8
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7f5b      	ldrb	r3, [r3, #29]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d108      	bne.n	8001e78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0204 	orr.w	r2, r2, #4
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	e007      	b.n	8001e88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0204 	bic.w	r2, r2, #4
 8001e86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	1e5a      	subs	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b08a      	sub	sp, #40	; 0x28
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d07c      	beq.n	8002006 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d023      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f983 	bl	8002234 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f2e:	e016      	b.n	8001f5e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
 8001f42:	e00c      	b.n	8001f5e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d004      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	e002      	b.n	8001f5e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f989 	bl	8002270 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d024      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f963 	bl	8002248 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f82:	e016      	b.n	8001fb2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
 8001f96:	e00c      	b.n	8001fb2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d004      	beq.n	8001fac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001faa:	e002      	b.n	8001fb2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f969 	bl	8002284 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d024      	beq.n	8002006 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f943 	bl	800225c <HAL_CAN_TxMailbox2CompleteCallback>
 8001fd6:	e016      	b.n	8002006 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fea:	e00c      	b.n	8002006 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffe:	e002      	b.n	8002006 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f949 	bl	8002298 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00c      	beq.n	800202a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002020:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2210      	movs	r2, #16
 8002028:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2208      	movs	r2, #8
 8002044:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f93a 	bl	80022c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f921 	bl	80022ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00c      	beq.n	800208e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002084:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2210      	movs	r2, #16
 800208c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2208      	movs	r2, #8
 80020a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f91c 	bl	80022e8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f903 	bl	80022d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2210      	movs	r2, #16
 80020e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f906 	bl	80022fc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2208      	movs	r2, #8
 800210a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f8ff 	bl	8002310 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d07b      	beq.n	8002214 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d072      	beq.n	800220c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002180:	2b00      	cmp	r3, #0
 8002182:	d043      	beq.n	800220c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d03e      	beq.n	800220c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002194:	2b60      	cmp	r3, #96	; 0x60
 8002196:	d02b      	beq.n	80021f0 <HAL_CAN_IRQHandler+0x32a>
 8002198:	2b60      	cmp	r3, #96	; 0x60
 800219a:	d82e      	bhi.n	80021fa <HAL_CAN_IRQHandler+0x334>
 800219c:	2b50      	cmp	r3, #80	; 0x50
 800219e:	d022      	beq.n	80021e6 <HAL_CAN_IRQHandler+0x320>
 80021a0:	2b50      	cmp	r3, #80	; 0x50
 80021a2:	d82a      	bhi.n	80021fa <HAL_CAN_IRQHandler+0x334>
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d019      	beq.n	80021dc <HAL_CAN_IRQHandler+0x316>
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d826      	bhi.n	80021fa <HAL_CAN_IRQHandler+0x334>
 80021ac:	2b30      	cmp	r3, #48	; 0x30
 80021ae:	d010      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x30c>
 80021b0:	2b30      	cmp	r3, #48	; 0x30
 80021b2:	d822      	bhi.n	80021fa <HAL_CAN_IRQHandler+0x334>
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d002      	beq.n	80021be <HAL_CAN_IRQHandler+0x2f8>
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d005      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021bc:	e01d      	b.n	80021fa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021c6:	e019      	b.n	80021fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	f043 0310 	orr.w	r3, r3, #16
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021d0:	e014      	b.n	80021fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	f043 0320 	orr.w	r3, r3, #32
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021da:	e00f      	b.n	80021fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021e4:	e00a      	b.n	80021fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021ee:	e005      	b.n	80021fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021f8:	e000      	b.n	80021fc <HAL_CAN_IRQHandler+0x336>
            break;
 80021fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800220a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2204      	movs	r2, #4
 8002212:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f87c 	bl	8002324 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800222c:	bf00      	nop
 800222e:	3728      	adds	r7, #40	; 0x28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff29 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff3e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff31 	bl	800239c <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800255e:	f7fe f885 	bl	800066c <HAL_SYSTICK_Callback>
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7fe ffe2 	bl	800153c <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d008      	beq.n	8002598 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e052      	b.n	800263e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0216 	bic.w	r2, r2, #22
 80025a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <HAL_DMA_Abort+0x62>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0208 	bic.w	r2, r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e8:	e013      	b.n	8002612 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ea:	f7fe ffa7 	bl	800153c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d90c      	bls.n	8002612 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2203      	movs	r2, #3
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e015      	b.n	800263e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e4      	bne.n	80025ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	223f      	movs	r2, #63	; 0x3f
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d004      	beq.n	8002664 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2280      	movs	r2, #128	; 0x80
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e00c      	b.n	800267e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2205      	movs	r2, #5
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002698:	b2db      	uxtb	r3, r3
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e16b      	b.n	800299c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	429a      	cmp	r2, r3
 80026de:	f040 815a 	bne.w	8002996 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d005      	beq.n	80026fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d130      	bne.n	800275c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	2203      	movs	r2, #3
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 0201 	and.w	r2, r3, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b03      	cmp	r3, #3
 8002766:	d017      	beq.n	8002798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d123      	bne.n	80027ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	08da      	lsrs	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3208      	adds	r2, #8
 80027ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0203 	and.w	r2, r3, #3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80b4 	beq.w	8002996 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a5f      	ldr	r2, [pc, #380]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284a:	4a5b      	ldr	r2, [pc, #364]	; (80029b8 <HAL_GPIO_Init+0x310>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_GPIO_Init+0x314>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02b      	beq.n	80028ce <HAL_GPIO_Init+0x226>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a51      	ldr	r2, [pc, #324]	; (80029c0 <HAL_GPIO_Init+0x318>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d025      	beq.n	80028ca <HAL_GPIO_Init+0x222>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <HAL_GPIO_Init+0x31c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01f      	beq.n	80028c6 <HAL_GPIO_Init+0x21e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4f      	ldr	r2, [pc, #316]	; (80029c8 <HAL_GPIO_Init+0x320>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d019      	beq.n	80028c2 <HAL_GPIO_Init+0x21a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4e      	ldr	r2, [pc, #312]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_GPIO_Init+0x216>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4d      	ldr	r2, [pc, #308]	; (80029d0 <HAL_GPIO_Init+0x328>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00d      	beq.n	80028ba <HAL_GPIO_Init+0x212>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4c      	ldr	r2, [pc, #304]	; (80029d4 <HAL_GPIO_Init+0x32c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0x20e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4b      	ldr	r2, [pc, #300]	; (80029d8 <HAL_GPIO_Init+0x330>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_GPIO_Init+0x20a>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e00e      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028b2:	2308      	movs	r3, #8
 80028b4:	e00c      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028b6:	2306      	movs	r3, #6
 80028b8:	e00a      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028ba:	2305      	movs	r3, #5
 80028bc:	e008      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028be:	2304      	movs	r3, #4
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e004      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e002      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028ce:	2300      	movs	r3, #0
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f002 0203 	and.w	r2, r2, #3
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	4093      	lsls	r3, r2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e0:	4935      	ldr	r1, [pc, #212]	; (80029b8 <HAL_GPIO_Init+0x310>)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_GPIO_Init+0x334>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002912:	4a32      	ldr	r2, [pc, #200]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_GPIO_Init+0x334>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <HAL_GPIO_Init+0x334>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002966:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_GPIO_Init+0x334>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002990:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	f67f ae90 	bls.w	80026c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020c00 	.word	0x40020c00
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40021400 	.word	0x40021400
 80029d4:	40021800 	.word	0x40021800
 80029d8:	40021c00 	.word	0x40021c00
 80029dc:	40013c00 	.word	0x40013c00

080029e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	887b      	ldrh	r3, [r7, #2]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e001      	b.n	8002a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a20:	787b      	ldrb	r3, [r7, #1]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a2c:	e003      	b.n	8002a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a2e:	887b      	ldrh	r3, [r7, #2]
 8002a30:	041a      	lsls	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	619a      	str	r2, [r3, #24]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a54:	887a      	ldrh	r2, [r7, #2]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	041a      	lsls	r2, r3, #16
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	400b      	ands	r3, r1
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	619a      	str	r2, [r3, #24]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e12b      	b.n	8002ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fa9a 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2224      	movs	r2, #36	; 0x24
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002adc:	f002 fa5c 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 8002ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a81      	ldr	r2, [pc, #516]	; (8002cec <HAL_I2C_Init+0x274>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d807      	bhi.n	8002afc <HAL_I2C_Init+0x84>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a80      	ldr	r2, [pc, #512]	; (8002cf0 <HAL_I2C_Init+0x278>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e006      	b.n	8002b0a <HAL_I2C_Init+0x92>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a7d      	ldr	r2, [pc, #500]	; (8002cf4 <HAL_I2C_Init+0x27c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	bf94      	ite	ls
 8002b04:	2301      	movls	r3, #1
 8002b06:	2300      	movhi	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0e7      	b.n	8002ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a78      	ldr	r2, [pc, #480]	; (8002cf8 <HAL_I2C_Init+0x280>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0c9b      	lsrs	r3, r3, #18
 8002b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a6a      	ldr	r2, [pc, #424]	; (8002cec <HAL_I2C_Init+0x274>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d802      	bhi.n	8002b4c <HAL_I2C_Init+0xd4>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	e009      	b.n	8002b60 <HAL_I2C_Init+0xe8>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	4a69      	ldr	r2, [pc, #420]	; (8002cfc <HAL_I2C_Init+0x284>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	3301      	adds	r3, #1
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	495c      	ldr	r1, [pc, #368]	; (8002cec <HAL_I2C_Init+0x274>)
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	d819      	bhi.n	8002bb4 <HAL_I2C_Init+0x13c>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e59      	subs	r1, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8e:	1c59      	adds	r1, r3, #1
 8002b90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b94:	400b      	ands	r3, r1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_I2C_Init+0x138>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1e59      	subs	r1, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bae:	e051      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	e04f      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d111      	bne.n	8002be0 <HAL_I2C_Init+0x168>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e58      	subs	r0, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	440b      	add	r3, r1
 8002bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e012      	b.n	8002c06 <HAL_I2C_Init+0x18e>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	0099      	lsls	r1, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Init+0x196>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e022      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10e      	bne.n	8002c34 <HAL_I2C_Init+0x1bc>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1e58      	subs	r0, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	440b      	add	r3, r1
 8002c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c32:	e00f      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e58      	subs	r0, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	0099      	lsls	r1, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	6809      	ldr	r1, [r1, #0]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6911      	ldr	r1, [r2, #16]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68d2      	ldr	r2, [r2, #12]
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	000186a0 	.word	0x000186a0
 8002cf0:	001e847f 	.word	0x001e847f
 8002cf4:	003d08ff 	.word	0x003d08ff
 8002cf8:	431bde83 	.word	0x431bde83
 8002cfc:	10624dd3 	.word	0x10624dd3

08002d00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d003      	beq.n	8002d38 <HAL_I2C_EV_IRQHandler+0x38>
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	f040 80c1 	bne.w	8002eba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10d      	bne.n	8002d6e <HAL_I2C_EV_IRQHandler+0x6e>
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d58:	d003      	beq.n	8002d62 <HAL_I2C_EV_IRQHandler+0x62>
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d60:	d101      	bne.n	8002d66 <HAL_I2C_EV_IRQHandler+0x66>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_I2C_EV_IRQHandler+0x68>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	f000 8132 	beq.w	8002fd2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00c      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0x92>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	0a5b      	lsrs	r3, r3, #9
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f001 fc7b 	bl	8004680 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fd83 	bl	8003896 <I2C_Master_SB>
 8002d90:	e092      	b.n	8002eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	08db      	lsrs	r3, r3, #3
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_I2C_EV_IRQHandler+0xb2>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	0a5b      	lsrs	r3, r3, #9
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fdf9 	bl	80039a2 <I2C_Master_ADD10>
 8002db0:	e082      	b.n	8002eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	0a5b      	lsrs	r3, r3, #9
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fe13 	bl	80039f6 <I2C_Master_ADDR>
 8002dd0:	e072      	b.n	8002eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d03b      	beq.n	8002e56 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dec:	f000 80f3 	beq.w	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	09db      	lsrs	r3, r3, #7
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00f      	beq.n	8002e1c <HAL_I2C_EV_IRQHandler+0x11c>
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	0a9b      	lsrs	r3, r3, #10
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_I2C_EV_IRQHandler+0x11c>
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f9f3 	bl	8003200 <I2C_MasterTransmit_TXE>
 8002e1a:	e04d      	b.n	8002eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80d6 	beq.w	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	0a5b      	lsrs	r3, r3, #9
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80cf 	beq.w	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e38:	7bbb      	ldrb	r3, [r7, #14]
 8002e3a:	2b21      	cmp	r3, #33	; 0x21
 8002e3c:	d103      	bne.n	8002e46 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa7a 	bl	8003338 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e44:	e0c7      	b.n	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	f040 80c4 	bne.w	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fae8 	bl	8003424 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e54:	e0bf      	b.n	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e64:	f000 80b7 	beq.w	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00f      	beq.n	8002e94 <HAL_I2C_EV_IRQHandler+0x194>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	0a9b      	lsrs	r3, r3, #10
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d009      	beq.n	8002e94 <HAL_I2C_EV_IRQHandler+0x194>
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fb5d 	bl	800354c <I2C_MasterReceive_RXNE>
 8002e92:	e011      	b.n	8002eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 809a 	beq.w	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	0a5b      	lsrs	r3, r3, #9
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8093 	beq.w	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fc06 	bl	80036c2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb6:	e08e      	b.n	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002eb8:	e08d      	b.n	8002fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d004      	beq.n	8002ecc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	e007      	b.n	8002edc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <HAL_I2C_EV_IRQHandler+0x20e>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	0a5b      	lsrs	r3, r3, #9
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f04:	69b9      	ldr	r1, [r7, #24]
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 ffc4 	bl	8003e94 <I2C_Slave_ADDR>
 8002f0c:	e066      	b.n	8002fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_I2C_EV_IRQHandler+0x22e>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	0a5b      	lsrs	r3, r3, #9
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fffe 	bl	8003f28 <I2C_Slave_STOPF>
 8002f2c:	e056      	b.n	8002fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f2e:	7bbb      	ldrb	r3, [r7, #14]
 8002f30:	2b21      	cmp	r3, #33	; 0x21
 8002f32:	d002      	beq.n	8002f3a <HAL_I2C_EV_IRQHandler+0x23a>
 8002f34:	7bbb      	ldrb	r3, [r7, #14]
 8002f36:	2b29      	cmp	r3, #41	; 0x29
 8002f38:	d125      	bne.n	8002f86 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	09db      	lsrs	r3, r3, #7
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00f      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x266>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	0a9b      	lsrs	r3, r3, #10
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x266>
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 feda 	bl	8003d18 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f64:	e039      	b.n	8002fda <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d033      	beq.n	8002fda <HAL_I2C_EV_IRQHandler+0x2da>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	0a5b      	lsrs	r3, r3, #9
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d02d      	beq.n	8002fda <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 ff07 	bl	8003d92 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f84:	e029      	b.n	8002fda <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00f      	beq.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	0a9b      	lsrs	r3, r3, #10
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 ff12 	bl	8003dd4 <I2C_SlaveReceive_RXNE>
 8002fb0:	e014      	b.n	8002fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00e      	beq.n	8002fdc <HAL_I2C_EV_IRQHandler+0x2dc>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	0a5b      	lsrs	r3, r3, #9
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 ff40 	bl	8003e50 <I2C_SlaveReceive_BTF>
 8002fd0:	e004      	b.n	8002fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002fd2:	bf00      	nop
 8002fd4:	e002      	b.n	8002fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fd6:	bf00      	nop
 8002fd8:	e000      	b.n	8002fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b08a      	sub	sp, #40	; 0x28
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003004:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00e      	beq.n	8003030 <HAL_I2C_ER_IRQHandler+0x4e>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800302e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	0a5b      	lsrs	r3, r3, #9
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00e      	beq.n	800305a <HAL_I2C_ER_IRQHandler+0x78>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003058:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	0a9b      	lsrs	r3, r3, #10
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d03f      	beq.n	80030e6 <HAL_I2C_ER_IRQHandler+0x104>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d039      	beq.n	80030e6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003072:	7efb      	ldrb	r3, [r7, #27]
 8003074:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800308c:	7ebb      	ldrb	r3, [r7, #26]
 800308e:	2b20      	cmp	r3, #32
 8003090:	d112      	bne.n	80030b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10f      	bne.n	80030b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	2b21      	cmp	r3, #33	; 0x21
 800309c:	d008      	beq.n	80030b0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	2b29      	cmp	r3, #41	; 0x29
 80030a2:	d005      	beq.n	80030b0 <HAL_I2C_ER_IRQHandler+0xce>
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	2b28      	cmp	r3, #40	; 0x28
 80030a8:	d106      	bne.n	80030b8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b21      	cmp	r3, #33	; 0x21
 80030ae:	d103      	bne.n	80030b8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f001 f869 	bl	8004188 <I2C_Slave_AF>
 80030b6:	e016      	b.n	80030e6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030ca:	7efb      	ldrb	r3, [r7, #27]
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d002      	beq.n	80030d6 <HAL_I2C_ER_IRQHandler+0xf4>
 80030d0:	7efb      	ldrb	r3, [r7, #27]
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d107      	bne.n	80030e6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	0adb      	lsrs	r3, r3, #11
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00e      	beq.n	8003110 <HAL_I2C_ER_IRQHandler+0x12e>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800310e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f001 f8a0 	bl	8004268 <I2C_ITError>
  }
}
 8003128:	bf00      	nop
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	70fb      	strb	r3, [r7, #3]
 800318c:	4613      	mov	r3, r2
 800318e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003216:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	d150      	bne.n	80032c8 <I2C_MasterTransmit_TXE+0xc8>
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b21      	cmp	r3, #33	; 0x21
 800322a:	d14d      	bne.n	80032c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b08      	cmp	r3, #8
 8003230:	d01d      	beq.n	800326e <I2C_MasterTransmit_TXE+0x6e>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b20      	cmp	r3, #32
 8003236:	d01a      	beq.n	800326e <I2C_MasterTransmit_TXE+0x6e>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800323e:	d016      	beq.n	800326e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800324e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2211      	movs	r2, #17
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ff62 	bl	8003130 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800326c:	e060      	b.n	8003330 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800327c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d107      	bne.n	80032b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff7d 	bl	80031b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032b6:	e03b      	b.n	8003330 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ff35 	bl	8003130 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032c6:	e033      	b.n	8003330 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b21      	cmp	r3, #33	; 0x21
 80032cc:	d005      	beq.n	80032da <I2C_MasterTransmit_TXE+0xda>
 80032ce:	7bbb      	ldrb	r3, [r7, #14]
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d12d      	bne.n	8003330 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b22      	cmp	r3, #34	; 0x22
 80032d8:	d12a      	bne.n	8003330 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d108      	bne.n	80032f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80032f4:	e01c      	b.n	8003330 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b40      	cmp	r3, #64	; 0x40
 8003300:	d103      	bne.n	800330a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f88e 	bl	8003424 <I2C_MemoryTransmit_TXE_BTF>
}
 8003308:	e012      	b.n	8003330 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800332e:	e7ff      	b.n	8003330 <I2C_MasterTransmit_TXE+0x130>
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b21      	cmp	r3, #33	; 0x21
 8003350:	d164      	bne.n	800341c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d012      	beq.n	8003382 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003380:	e04c      	b.n	800341c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d01d      	beq.n	80033c4 <I2C_MasterTransmit_BTF+0x8c>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b20      	cmp	r3, #32
 800338c:	d01a      	beq.n	80033c4 <I2C_MasterTransmit_BTF+0x8c>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003394:	d016      	beq.n	80033c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2211      	movs	r2, #17
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff feb7 	bl	8003130 <HAL_I2C_MasterTxCpltCallback>
}
 80033c2:	e02b      	b.n	800341c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d107      	bne.n	800340e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fed2 	bl	80031b0 <HAL_I2C_MemTxCpltCallback>
}
 800340c:	e006      	b.n	800341c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff fe8a 	bl	8003130 <HAL_I2C_MasterTxCpltCallback>
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003432:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003438:	2b00      	cmp	r3, #0
 800343a:	d11d      	bne.n	8003478 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d10b      	bne.n	800345c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	b2da      	uxtb	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003454:	1c9a      	adds	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800345a:	e073      	b.n	8003544 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003460:	b29b      	uxth	r3, r3
 8003462:	121b      	asrs	r3, r3, #8
 8003464:	b2da      	uxtb	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003476:	e065      	b.n	8003544 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10b      	bne.n	8003498 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003484:	b2da      	uxtb	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003496:	e055      	b.n	8003544 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349c:	2b02      	cmp	r3, #2
 800349e:	d151      	bne.n	8003544 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b22      	cmp	r3, #34	; 0x22
 80034a4:	d10d      	bne.n	80034c2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034c0:	e040      	b.n	8003544 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d015      	beq.n	80034f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b21      	cmp	r3, #33	; 0x21
 80034d0:	d112      	bne.n	80034f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034f6:	e025      	b.n	8003544 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d120      	bne.n	8003544 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2b21      	cmp	r3, #33	; 0x21
 8003506:	d11d      	bne.n	8003544 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003516:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003526:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fe36 	bl	80031b0 <HAL_I2C_MemTxCpltCallback>
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b22      	cmp	r3, #34	; 0x22
 800355e:	f040 80ac 	bne.w	80036ba <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d921      	bls.n	80035b4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b03      	cmp	r3, #3
 800359e:	f040 808c 	bne.w	80036ba <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80035b2:	e082      	b.n	80036ba <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d075      	beq.n	80036a8 <I2C_MasterReceive_RXNE+0x15c>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d002      	beq.n	80035c8 <I2C_MasterReceive_RXNE+0x7c>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d16f      	bne.n	80036a8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f001 f827 	bl	800461c <I2C_WaitOnSTOPRequestThroughIT>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d142      	bne.n	800365a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d10a      	bne.n	8003644 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff fdc1 	bl	80031c4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003642:	e03a      	b.n	80036ba <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2212      	movs	r2, #18
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fd76 	bl	8003144 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003658:	e02f      	b.n	80036ba <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003668:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fd99 	bl	80031d8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036a6:	e008      	b.n	80036ba <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	605a      	str	r2, [r3, #4]
}
 80036b8:	e7ff      	b.n	80036ba <I2C_MasterReceive_RXNE+0x16e>
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d11b      	bne.n	8003712 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003710:	e0bd      	b.n	800388e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b03      	cmp	r3, #3
 800371a:	d129      	bne.n	8003770 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800372a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b04      	cmp	r3, #4
 8003730:	d00a      	beq.n	8003748 <I2C_MasterReceive_BTF+0x86>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d007      	beq.n	8003748 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800376e:	e08e      	b.n	800388e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d176      	bne.n	8003868 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d002      	beq.n	8003786 <I2C_MasterReceive_BTF+0xc4>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b10      	cmp	r3, #16
 8003784:	d108      	bne.n	8003798 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e019      	b.n	80037cc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b04      	cmp	r3, #4
 800379c:	d002      	beq.n	80037a4 <I2C_MasterReceive_BTF+0xe2>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d108      	bne.n	80037b6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e00a      	b.n	80037cc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d007      	beq.n	80037cc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003826:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d10a      	bne.n	8003852 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fcba 	bl	80031c4 <HAL_I2C_MemRxCpltCallback>
}
 8003850:	e01d      	b.n	800388e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2212      	movs	r2, #18
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fc6f 	bl	8003144 <HAL_I2C_MasterRxCpltCallback>
}
 8003866:	e012      	b.n	800388e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d117      	bne.n	80038da <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038c2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80038c4:	e067      	b.n	8003996 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	611a      	str	r2, [r3, #16]
}
 80038d8:	e05d      	b.n	8003996 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e2:	d133      	bne.n	800394c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b21      	cmp	r3, #33	; 0x21
 80038ee:	d109      	bne.n	8003904 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003900:	611a      	str	r2, [r3, #16]
 8003902:	e008      	b.n	8003916 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <I2C_Master_SB+0x92>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d108      	bne.n	800393a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	2b00      	cmp	r3, #0
 800392e:	d032      	beq.n	8003996 <I2C_Master_SB+0x100>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d02d      	beq.n	8003996 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003948:	605a      	str	r2, [r3, #4]
}
 800394a:	e024      	b.n	8003996 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10e      	bne.n	8003972 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	b29b      	uxth	r3, r3
 800395a:	11db      	asrs	r3, r3, #7
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f003 0306 	and.w	r3, r3, #6
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f063 030f 	orn	r3, r3, #15
 8003968:	b2da      	uxtb	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]
}
 8003970:	e011      	b.n	8003996 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10d      	bne.n	8003996 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	b29b      	uxth	r3, r3
 8003980:	11db      	asrs	r3, r3, #7
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f003 0306 	and.w	r3, r3, #6
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f063 030e 	orn	r3, r3, #14
 800398e:	b2da      	uxtb	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	611a      	str	r2, [r3, #16]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <I2C_Master_ADD10+0x26>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d108      	bne.n	80039da <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00c      	beq.n	80039ea <I2C_Master_ADD10+0x48>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e8:	605a      	str	r2, [r3, #4]
  }
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b091      	sub	sp, #68	; 0x44
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b22      	cmp	r3, #34	; 0x22
 8003a1e:	f040 8169 	bne.w	8003cf4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <I2C_Master_ADDR+0x54>
 8003a2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d10b      	bne.n	8003a4a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	633b      	str	r3, [r7, #48]	; 0x30
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	e160      	b.n	8003d0c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11d      	bne.n	8003a8e <I2C_Master_ADDR+0x98>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a5a:	d118      	bne.n	8003a8e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a80:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	651a      	str	r2, [r3, #80]	; 0x50
 8003a8c:	e13e      	b.n	8003d0c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d113      	bne.n	8003ac0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e115      	b.n	8003cec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	f040 808a 	bne.w	8003be0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ace:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ad2:	d137      	bne.n	8003b44 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af2:	d113      	bne.n	8003b1c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b02:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b04:	2300      	movs	r3, #0
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	e0e7      	b.n	8003cec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	623b      	str	r3, [r7, #32]
 8003b30:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e0d3      	b.n	8003cec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d02e      	beq.n	8003ba8 <I2C_Master_ADDR+0x1b2>
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d02b      	beq.n	8003ba8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b52:	2b12      	cmp	r3, #18
 8003b54:	d102      	bne.n	8003b5c <I2C_Master_ADDR+0x166>
 8003b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d125      	bne.n	8003ba8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d00e      	beq.n	8003b80 <I2C_Master_ADDR+0x18a>
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d00b      	beq.n	8003b80 <I2C_Master_ADDR+0x18a>
 8003b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d008      	beq.n	8003b80 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e007      	b.n	8003b90 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b8e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	e0a1      	b.n	8003cec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e085      	b.n	8003cec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d14d      	bne.n	8003c86 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d016      	beq.n	8003c1e <I2C_Master_ADDR+0x228>
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d013      	beq.n	8003c1e <I2C_Master_ADDR+0x228>
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d010      	beq.n	8003c1e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e007      	b.n	8003c2e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c2c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3c:	d117      	bne.n	8003c6e <I2C_Master_ADDR+0x278>
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c44:	d00b      	beq.n	8003c5e <I2C_Master_ADDR+0x268>
 8003c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d008      	beq.n	8003c5e <I2C_Master_ADDR+0x268>
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d005      	beq.n	8003c5e <I2C_Master_ADDR+0x268>
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d002      	beq.n	8003c5e <I2C_Master_ADDR+0x268>
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d107      	bne.n	8003c6e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c6c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	e032      	b.n	8003cec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c94:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca4:	d117      	bne.n	8003cd6 <I2C_Master_ADDR+0x2e0>
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cac:	d00b      	beq.n	8003cc6 <I2C_Master_ADDR+0x2d0>
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d008      	beq.n	8003cc6 <I2C_Master_ADDR+0x2d0>
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d005      	beq.n	8003cc6 <I2C_Master_ADDR+0x2d0>
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d002      	beq.n	8003cc6 <I2C_Master_ADDR+0x2d0>
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d107      	bne.n	8003cd6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cd4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003cf2:	e00b      	b.n	8003d0c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
}
 8003d0a:	e7ff      	b.n	8003d0c <I2C_Master_ADDR+0x316>
 8003d0c:	bf00      	nop
 8003d0e:	3744      	adds	r7, #68	; 0x44
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d02b      	beq.n	8003d8a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d114      	bne.n	8003d8a <I2C_SlaveTransmit_TXE+0x72>
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b29      	cmp	r3, #41	; 0x29
 8003d64:	d111      	bne.n	8003d8a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2221      	movs	r2, #33	; 0x21
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2228      	movs	r2, #40	; 0x28
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff f9e7 	bl	8003158 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d011      	beq.n	8003dc8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02c      	beq.n	8003e48 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d114      	bne.n	8003e48 <I2C_SlaveReceive_RXNE+0x74>
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b2a      	cmp	r3, #42	; 0x2a
 8003e22:	d111      	bne.n	8003e48 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e32:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2222      	movs	r2, #34	; 0x22
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2228      	movs	r2, #40	; 0x28
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff f992 	bl	800316c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d012      	beq.n	8003e88 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003eae:	2b28      	cmp	r3, #40	; 0x28
 8003eb0:	d127      	bne.n	8003f02 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	09db      	lsrs	r3, r3, #7
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	81bb      	strh	r3, [r7, #12]
 8003ee4:	e002      	b.n	8003eec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ef4:	89ba      	ldrh	r2, [r7, #12]
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff f940 	bl	8003180 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f00:	e00e      	b.n	8003f20 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f36:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f46:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f74:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f84:	d172      	bne.n	800406c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b22      	cmp	r3, #34	; 0x22
 8003f8a:	d002      	beq.n	8003f92 <I2C_Slave_STOPF+0x6a>
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f90:	d135      	bne.n	8003ffe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f043 0204 	orr.w	r2, r3, #4
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fb5d 	bl	800268a <HAL_DMA_GetState>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d049      	beq.n	800406a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	4a69      	ldr	r2, [pc, #420]	; (8004180 <I2C_Slave_STOPF+0x258>)
 8003fdc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fb2f 	bl	8002646 <HAL_DMA_Abort_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d03d      	beq.n	800406a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ffc:	e035      	b.n	800406a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	b29a      	uxth	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f043 0204 	orr.w	r2, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004030:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fb27 	bl	800268a <HAL_DMA_GetState>
 800403c:	4603      	mov	r3, r0
 800403e:	2b01      	cmp	r3, #1
 8004040:	d014      	beq.n	800406c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	4a4e      	ldr	r2, [pc, #312]	; (8004180 <I2C_Slave_STOPF+0x258>)
 8004048:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe faf9 	bl	8002646 <HAL_DMA_Abort_IT>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004064:	4610      	mov	r0, r2
 8004066:	4798      	blx	r3
 8004068:	e000      	b.n	800406c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800406a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d03e      	beq.n	80040f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b04      	cmp	r3, #4
 8004082:	d112      	bne.n	80040aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	d112      	bne.n	80040de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f8b3 	bl	8004268 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004102:	e039      	b.n	8004178 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b2a      	cmp	r3, #42	; 0x2a
 8004108:	d109      	bne.n	800411e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2228      	movs	r2, #40	; 0x28
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff f827 	bl	800316c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b28      	cmp	r3, #40	; 0x28
 8004128:	d111      	bne.n	800414e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <I2C_Slave_STOPF+0x25c>)
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff f828 	bl	800319c <HAL_I2C_ListenCpltCallback>
}
 800414c:	e014      	b.n	8004178 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	2b22      	cmp	r3, #34	; 0x22
 8004154:	d002      	beq.n	800415c <I2C_Slave_STOPF+0x234>
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	2b22      	cmp	r3, #34	; 0x22
 800415a:	d10d      	bne.n	8004178 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fe fffa 	bl	800316c <HAL_I2C_SlaveRxCpltCallback>
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	080044cd 	.word	0x080044cd
 8004184:	ffff0000 	.word	0xffff0000

08004188 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004196:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d002      	beq.n	80041aa <I2C_Slave_AF+0x22>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d129      	bne.n	80041fe <I2C_Slave_AF+0x76>
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b28      	cmp	r3, #40	; 0x28
 80041ae:	d126      	bne.n	80041fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <I2C_Slave_AF+0xdc>)
 80041b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fe ffd0 	bl	800319c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80041fc:	e02e      	b.n	800425c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b21      	cmp	r3, #33	; 0x21
 8004202:	d126      	bne.n	8004252 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a17      	ldr	r2, [pc, #92]	; (8004264 <I2C_Slave_AF+0xdc>)
 8004208:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2221      	movs	r2, #33	; 0x21
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800422e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004238:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004248:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fe ff84 	bl	8003158 <HAL_I2C_SlaveTxCpltCallback>
}
 8004250:	e004      	b.n	800425c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800425a:	615a      	str	r2, [r3, #20]
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	ffff0000 	.word	0xffff0000

08004268 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004276:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800427e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004280:	7bbb      	ldrb	r3, [r7, #14]
 8004282:	2b10      	cmp	r3, #16
 8004284:	d002      	beq.n	800428c <I2C_ITError+0x24>
 8004286:	7bbb      	ldrb	r3, [r7, #14]
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d10a      	bne.n	80042a2 <I2C_ITError+0x3a>
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b22      	cmp	r3, #34	; 0x22
 8004290:	d107      	bne.n	80042a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042a8:	2b28      	cmp	r3, #40	; 0x28
 80042aa:	d107      	bne.n	80042bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2228      	movs	r2, #40	; 0x28
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042ba:	e015      	b.n	80042e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ca:	d00a      	beq.n	80042e2 <I2C_ITError+0x7a>
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b60      	cmp	r3, #96	; 0x60
 80042d0:	d007      	beq.n	80042e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f6:	d162      	bne.n	80043be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004306:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b01      	cmp	r3, #1
 8004314:	d020      	beq.n	8004358 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	4a6a      	ldr	r2, [pc, #424]	; (80044c4 <I2C_ITError+0x25c>)
 800431c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe f98f 	bl	8002646 <HAL_DMA_Abort_IT>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8089 	beq.w	8004442 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004352:	4610      	mov	r0, r2
 8004354:	4798      	blx	r3
 8004356:	e074      	b.n	8004442 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	4a59      	ldr	r2, [pc, #356]	; (80044c4 <I2C_ITError+0x25c>)
 800435e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe f96e 	bl	8002646 <HAL_DMA_Abort_IT>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d068      	beq.n	8004442 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d10b      	bne.n	8004396 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043b8:	4610      	mov	r0, r2
 80043ba:	4798      	blx	r3
 80043bc:	e041      	b.n	8004442 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b60      	cmp	r3, #96	; 0x60
 80043c8:	d125      	bne.n	8004416 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d10b      	bne.n	80043fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fe feec 	bl	80031ec <HAL_I2C_AbortCpltCallback>
 8004414:	e015      	b.n	8004442 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b40      	cmp	r3, #64	; 0x40
 8004422:	d10b      	bne.n	800443c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fe fecb 	bl	80031d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10e      	bne.n	8004470 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800447e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004486:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b04      	cmp	r3, #4
 8004492:	d113      	bne.n	80044bc <I2C_ITError+0x254>
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b28      	cmp	r3, #40	; 0x28
 8004498:	d110      	bne.n	80044bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <I2C_ITError+0x260>)
 800449e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fe fe70 	bl	800319c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044bc:	bf00      	nop
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	080044cd 	.word	0x080044cd
 80044c8:	ffff0000 	.word	0xffff0000

080044cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044e6:	4b4b      	ldr	r3, [pc, #300]	; (8004614 <I2C_DMAAbort+0x148>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	08db      	lsrs	r3, r3, #3
 80044ec:	4a4a      	ldr	r2, [pc, #296]	; (8004618 <I2C_DMAAbort+0x14c>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	0a1a      	lsrs	r2, r3, #8
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	00da      	lsls	r2, r3, #3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004512:	e00a      	b.n	800452a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3b01      	subs	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004528:	d0ea      	beq.n	8004500 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	2200      	movs	r2, #0
 8004538:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	2200      	movs	r2, #0
 8004548:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004558:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456c:	2200      	movs	r2, #0
 800456e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	2200      	movs	r2, #0
 800457e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b60      	cmp	r3, #96	; 0x60
 800459a:	d10e      	bne.n	80045ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2200      	movs	r2, #0
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045b2:	6978      	ldr	r0, [r7, #20]
 80045b4:	f7fe fe1a 	bl	80031ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045b8:	e027      	b.n	800460a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045c0:	2b28      	cmp	r3, #40	; 0x28
 80045c2:	d117      	bne.n	80045f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2228      	movs	r2, #40	; 0x28
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045f2:	e007      	b.n	8004604 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004604:	6978      	ldr	r0, [r7, #20]
 8004606:	f7fe fde7 	bl	80031d8 <HAL_I2C_ErrorCallback>
}
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000000 	.word	0x20000000
 8004618:	14f8b589 	.word	0x14f8b589

0800461c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	08db      	lsrs	r3, r3, #3
 800462e:	4a13      	ldr	r2, [pc, #76]	; (800467c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	0a1a      	lsrs	r2, r3, #8
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3b01      	subs	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f043 0220 	orr.w	r2, r3, #32
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e008      	b.n	800466c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004668:	d0e9      	beq.n	800463e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	20000000 	.word	0x20000000
 800467c:	14f8b589 	.word	0x14f8b589

08004680 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004690:	d103      	bne.n	800469a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004698:	e007      	b.n	80046aa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80046a2:	d102      	bne.n	80046aa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2208      	movs	r2, #8
 80046a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e267      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d075      	beq.n	80047c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d6:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d00c      	beq.n	80046fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e2:	4b85      	ldr	r3, [pc, #532]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d112      	bne.n	8004714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ee:	4b82      	ldr	r3, [pc, #520]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046fa:	d10b      	bne.n	8004714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fc:	4b7e      	ldr	r3, [pc, #504]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05b      	beq.n	80047c0 <HAL_RCC_OscConfig+0x108>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d157      	bne.n	80047c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e242      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471c:	d106      	bne.n	800472c <HAL_RCC_OscConfig+0x74>
 800471e:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a75      	ldr	r2, [pc, #468]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e01d      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x98>
 8004736:	4b70      	ldr	r3, [pc, #448]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6f      	ldr	r2, [pc, #444]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800473c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b6d      	ldr	r3, [pc, #436]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a6c      	ldr	r2, [pc, #432]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e00b      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
 8004750:	4b69      	ldr	r3, [pc, #420]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a68      	ldr	r2, [pc, #416]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4b66      	ldr	r3, [pc, #408]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a65      	ldr	r2, [pc, #404]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d013      	beq.n	8004798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fc fee4 	bl	800153c <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004778:	f7fc fee0 	bl	800153c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	; 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e207      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b5b      	ldr	r3, [pc, #364]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0xc0>
 8004796:	e014      	b.n	80047c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fc fed0 	bl	800153c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a0:	f7fc fecc 	bl	800153c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	; 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e1f3      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	4b51      	ldr	r3, [pc, #324]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0xe8>
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d063      	beq.n	8004896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ce:	4b4a      	ldr	r3, [pc, #296]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d11c      	bne.n	8004820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e6:	4b44      	ldr	r3, [pc, #272]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d116      	bne.n	8004820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_RCC_OscConfig+0x152>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d001      	beq.n	800480a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e1c7      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4937      	ldr	r1, [pc, #220]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481e:	e03a      	b.n	8004896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d020      	beq.n	800486a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004828:	4b34      	ldr	r3, [pc, #208]	; (80048fc <HAL_RCC_OscConfig+0x244>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fc fe85 	bl	800153c <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004836:	f7fc fe81 	bl	800153c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e1a8      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004854:	4b28      	ldr	r3, [pc, #160]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4925      	ldr	r1, [pc, #148]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
 8004868:	e015      	b.n	8004896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486a:	4b24      	ldr	r3, [pc, #144]	; (80048fc <HAL_RCC_OscConfig+0x244>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fc fe64 	bl	800153c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004878:	f7fc fe60 	bl	800153c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e187      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d036      	beq.n	8004910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d016      	beq.n	80048d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_RCC_OscConfig+0x248>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fc fe44 	bl	800153c <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048b8:	f7fc fe40 	bl	800153c <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e167      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x200>
 80048d6:	e01b      	b.n	8004910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_RCC_OscConfig+0x248>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048de:	f7fc fe2d 	bl	800153c <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e4:	e00e      	b.n	8004904 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e6:	f7fc fe29 	bl	800153c <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d907      	bls.n	8004904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e150      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470000 	.word	0x42470000
 8004900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004904:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1ea      	bne.n	80048e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8097 	beq.w	8004a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004922:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	4b7d      	ldr	r3, [pc, #500]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	4a7c      	ldr	r2, [pc, #496]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493c:	6413      	str	r3, [r2, #64]	; 0x40
 800493e:	4b7a      	ldr	r3, [pc, #488]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b77      	ldr	r3, [pc, #476]	; (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d118      	bne.n	800498c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495a:	4b74      	ldr	r3, [pc, #464]	; (8004b2c <HAL_RCC_OscConfig+0x474>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a73      	ldr	r2, [pc, #460]	; (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004966:	f7fc fde9 	bl	800153c <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fc fde5 	bl	800153c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e10c      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2ea>
 8004994:	4b64      	ldr	r3, [pc, #400]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	4a63      	ldr	r2, [pc, #396]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6713      	str	r3, [r2, #112]	; 0x70
 80049a0:	e01c      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x30c>
 80049aa:	4b5f      	ldr	r3, [pc, #380]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	4a5e      	ldr	r2, [pc, #376]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	6713      	str	r3, [r2, #112]	; 0x70
 80049b6:	4b5c      	ldr	r3, [pc, #368]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a5b      	ldr	r2, [pc, #364]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
 80049c4:	4b58      	ldr	r3, [pc, #352]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	4a57      	ldr	r2, [pc, #348]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70
 80049d0:	4b55      	ldr	r3, [pc, #340]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a54      	ldr	r2, [pc, #336]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049d6:	f023 0304 	bic.w	r3, r3, #4
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fc fdaa 	bl	800153c <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fc fda6 	bl	800153c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0cb      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a02:	4b49      	ldr	r3, [pc, #292]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0ee      	beq.n	80049ec <HAL_RCC_OscConfig+0x334>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a10:	f7fc fd94 	bl	800153c <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7fc fd90 	bl	800153c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e0b5      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2e:	4b3e      	ldr	r3, [pc, #248]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1ee      	bne.n	8004a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d105      	bne.n	8004a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a40:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	4a38      	ldr	r2, [pc, #224]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a1 	beq.w	8004b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a56:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d05c      	beq.n	8004b1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d141      	bne.n	8004aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	4b31      	ldr	r3, [pc, #196]	; (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fc fd64 	bl	800153c <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fc fd60 	bl	800153c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e087      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	4b27      	ldr	r3, [pc, #156]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69da      	ldr	r2, [r3, #28]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	061b      	lsls	r3, r3, #24
 8004aba:	491b      	ldr	r1, [pc, #108]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac6:	f7fc fd39 	bl	800153c <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ace:	f7fc fd35 	bl	800153c <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e05c      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae0:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x416>
 8004aec:	e054      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fc fd22 	bl	800153c <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fc fd1e 	bl	800153c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e045      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x444>
 8004b1a:	e03d      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e038      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <HAL_RCC_OscConfig+0x4ec>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d028      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d121      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d11a      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d111      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800

08004ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0cc      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b68      	ldr	r3, [pc, #416]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d90c      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b65      	ldr	r3, [pc, #404]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b63      	ldr	r3, [pc, #396]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0b8      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bfc:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c14:	4b53      	ldr	r3, [pc, #332]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a52      	ldr	r2, [pc, #328]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c20:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	494d      	ldr	r1, [pc, #308]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d044      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	4b47      	ldr	r3, [pc, #284]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d119      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b3b      	ldr	r3, [pc, #236]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e067      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4934      	ldr	r1, [pc, #208]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fc fc50 	bl	800153c <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fc fc4c 	bl	800153c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e04f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d20c      	bcs.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e032      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4916      	ldr	r1, [pc, #88]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	490e      	ldr	r1, [pc, #56]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d2e:	f000 f821 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d32:	4602      	mov	r2, r0
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	490a      	ldr	r1, [pc, #40]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	5ccb      	ldrb	r3, [r1, r3]
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_ClockConfig+0x1c8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fc fbb0 	bl	80014b4 <HAL_InitTick>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023c00 	.word	0x40023c00
 8004d64:	40023800 	.word	0x40023800
 8004d68:	0800778c 	.word	0x0800778c
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	20000004 	.word	0x20000004

08004d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d78:	b094      	sub	sp, #80	; 0x50
 8004d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d80:	2300      	movs	r3, #0
 8004d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d84:	2300      	movs	r3, #0
 8004d86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d8c:	4b79      	ldr	r3, [pc, #484]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d00d      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x40>
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	f200 80e1 	bhi.w	8004f60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x34>
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d003      	beq.n	8004dae <HAL_RCC_GetSysClockFreq+0x3a>
 8004da6:	e0db      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da8:	4b73      	ldr	r3, [pc, #460]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004daa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004dac:	e0db      	b.n	8004f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dae:	4b73      	ldr	r3, [pc, #460]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x208>)
 8004db0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004db2:	e0d8      	b.n	8004f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004db4:	4b6f      	ldr	r3, [pc, #444]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dbe:	4b6d      	ldr	r3, [pc, #436]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d063      	beq.n	8004e92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dca:	4b6a      	ldr	r3, [pc, #424]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	099b      	lsrs	r3, r3, #6
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8004dde:	2300      	movs	r3, #0
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
 8004de2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004de6:	4622      	mov	r2, r4
 8004de8:	462b      	mov	r3, r5
 8004dea:	f04f 0000 	mov.w	r0, #0
 8004dee:	f04f 0100 	mov.w	r1, #0
 8004df2:	0159      	lsls	r1, r3, #5
 8004df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df8:	0150      	lsls	r0, r2, #5
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4621      	mov	r1, r4
 8004e00:	1a51      	subs	r1, r2, r1
 8004e02:	6139      	str	r1, [r7, #16]
 8004e04:	4629      	mov	r1, r5
 8004e06:	eb63 0301 	sbc.w	r3, r3, r1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e18:	4659      	mov	r1, fp
 8004e1a:	018b      	lsls	r3, r1, #6
 8004e1c:	4651      	mov	r1, sl
 8004e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e22:	4651      	mov	r1, sl
 8004e24:	018a      	lsls	r2, r1, #6
 8004e26:	4651      	mov	r1, sl
 8004e28:	ebb2 0801 	subs.w	r8, r2, r1
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e46:	4690      	mov	r8, r2
 8004e48:	4699      	mov	r9, r3
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	eb18 0303 	adds.w	r3, r8, r3
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	462b      	mov	r3, r5
 8004e54:	eb49 0303 	adc.w	r3, r9, r3
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e66:	4629      	mov	r1, r5
 8004e68:	024b      	lsls	r3, r1, #9
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e70:	4621      	mov	r1, r4
 8004e72:	024a      	lsls	r2, r1, #9
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e84:	f7fb f9fc 	bl	8000280 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e90:	e058      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e92:	4b38      	ldr	r3, [pc, #224]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ea2:	623b      	str	r3, [r7, #32]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004eac:	4642      	mov	r2, r8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	f04f 0000 	mov.w	r0, #0
 8004eb4:	f04f 0100 	mov.w	r1, #0
 8004eb8:	0159      	lsls	r1, r3, #5
 8004eba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ebe:	0150      	lsls	r0, r2, #5
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eca:	4649      	mov	r1, r9
 8004ecc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004edc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ee0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ee4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ee8:	eb63 050b 	sbc.w	r5, r3, fp
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	00eb      	lsls	r3, r5, #3
 8004ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004efa:	00e2      	lsls	r2, r4, #3
 8004efc:	4614      	mov	r4, r2
 8004efe:	461d      	mov	r5, r3
 8004f00:	4643      	mov	r3, r8
 8004f02:	18e3      	adds	r3, r4, r3
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	464b      	mov	r3, r9
 8004f08:	eb45 0303 	adc.w	r3, r5, r3
 8004f0c:	607b      	str	r3, [r7, #4]
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	028b      	lsls	r3, r1, #10
 8004f1e:	4621      	mov	r1, r4
 8004f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f24:	4621      	mov	r1, r4
 8004f26:	028a      	lsls	r2, r1, #10
 8004f28:	4610      	mov	r0, r2
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f2e:	2200      	movs	r2, #0
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	61fa      	str	r2, [r7, #28]
 8004f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f38:	f7fb f9a2 	bl	8000280 <__aeabi_uldivmod>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4613      	mov	r3, r2
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	3301      	adds	r3, #1
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f5e:	e002      	b.n	8004f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3750      	adds	r7, #80	; 0x50
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f72:	bf00      	nop
 8004f74:	40023800 	.word	0x40023800
 8004f78:	00f42400 	.word	0x00f42400
 8004f7c:	007a1200 	.word	0x007a1200

08004f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f84:	4b03      	ldr	r3, [pc, #12]	; (8004f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f86:	681b      	ldr	r3, [r3, #0]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000000 	.word	0x20000000

08004f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f9c:	f7ff fff0 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	0a9b      	lsrs	r3, r3, #10
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	4903      	ldr	r1, [pc, #12]	; (8004fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fae:	5ccb      	ldrb	r3, [r1, r3]
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	0800779c 	.word	0x0800779c

08004fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fc4:	f7ff ffdc 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	0b5b      	lsrs	r3, r3, #13
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4903      	ldr	r1, [pc, #12]	; (8004fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	0800779c 	.word	0x0800779c

08004fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e07b      	b.n	80050f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d108      	bne.n	8005014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500a:	d009      	beq.n	8005020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	61da      	str	r2, [r3, #28]
 8005012:	e005      	b.n	8005020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fc f824 	bl	8001088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005056:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a4:	ea42 0103 	orr.w	r1, r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	f003 0104 	and.w	r1, r3, #4
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f003 0210 	and.w	r2, r3, #16
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	099b      	lsrs	r3, r3, #6
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10f      	bne.n	8005140 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
    return;
 800513e:	e0d7      	b.n	80052f0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <HAL_SPI_IRQHandler+0x66>
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	09db      	lsrs	r3, r3, #7
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d004      	beq.n	8005162 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
    return;
 8005160:	e0c6      	b.n	80052f0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10c      	bne.n	8005188 <HAL_SPI_IRQHandler+0x8c>
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	099b      	lsrs	r3, r3, #6
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	0a1b      	lsrs	r3, r3, #8
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80b4 	beq.w	80052f0 <HAL_SPI_IRQHandler+0x1f4>
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80ad 	beq.w	80052f0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	099b      	lsrs	r3, r3, #6
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d023      	beq.n	80051ea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d011      	beq.n	80051d2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	f043 0204 	orr.w	r2, r3, #4
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	e00b      	b.n	80051ea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	693b      	ldr	r3, [r7, #16]
        return;
 80051e8:	e082      	b.n	80052f0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d014      	beq.n	8005220 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	f043 0201 	orr.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00c      	beq.n	8005246 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005230:	f043 0208 	orr.w	r2, r3, #8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005238:	2300      	movs	r3, #0
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	2b00      	cmp	r3, #0
 800524c:	d04f      	beq.n	80052ee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800525c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <HAL_SPI_IRQHandler+0x17e>
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d034      	beq.n	80052e4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0203 	bic.w	r2, r2, #3
 8005288:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d011      	beq.n	80052b6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <HAL_SPI_IRQHandler+0x1fc>)
 8005298:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fd f9d1 	bl	8002646 <HAL_DMA_Abort_IT>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c2:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <HAL_SPI_IRQHandler+0x1fc>)
 80052c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fd f9bb 	bl	8002646 <HAL_DMA_Abort_IT>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80052e2:	e003      	b.n	80052ec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f809 	bl	80052fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052ea:	e000      	b.n	80052ee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80052ec:	bf00      	nop
    return;
 80052ee:	bf00      	nop
  }
}
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	08005311 	.word	0x08005311

080052fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f7ff ffe6 	bl	80052fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e041      	b.n	80053ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fb fcfc 	bl	8000d5c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3304      	adds	r3, #4
 8005374:	4619      	mov	r1, r3
 8005376:	4610      	mov	r0, r2
 8005378:	f000 fb22 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_IC_Start_IT+0x1e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e013      	b.n	800541e <HAL_TIM_IC_Start_IT+0x46>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_IC_Start_IT+0x2e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005402:	b2db      	uxtb	r3, r3
 8005404:	e00b      	b.n	800541e <HAL_TIM_IC_Start_IT+0x46>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d104      	bne.n	8005416 <HAL_TIM_IC_Start_IT+0x3e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e003      	b.n	800541e <HAL_TIM_IC_Start_IT+0x46>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <HAL_TIM_IC_Start_IT+0x58>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e013      	b.n	8005458 <HAL_TIM_IC_Start_IT+0x80>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d104      	bne.n	8005440 <HAL_TIM_IC_Start_IT+0x68>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e00b      	b.n	8005458 <HAL_TIM_IC_Start_IT+0x80>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b08      	cmp	r3, #8
 8005444:	d104      	bne.n	8005450 <HAL_TIM_IC_Start_IT+0x78>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e003      	b.n	8005458 <HAL_TIM_IC_Start_IT+0x80>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005456:	b2db      	uxtb	r3, r3
 8005458:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800545a:	7bbb      	ldrb	r3, [r7, #14]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d102      	bne.n	8005466 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005460:	7b7b      	ldrb	r3, [r7, #13]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d001      	beq.n	800546a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e0cc      	b.n	8005604 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d104      	bne.n	800547a <HAL_TIM_IC_Start_IT+0xa2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005478:	e013      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0xca>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b04      	cmp	r3, #4
 800547e:	d104      	bne.n	800548a <HAL_TIM_IC_Start_IT+0xb2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005488:	e00b      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0xca>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b08      	cmp	r3, #8
 800548e:	d104      	bne.n	800549a <HAL_TIM_IC_Start_IT+0xc2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005498:	e003      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0xca>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_IC_Start_IT+0xda>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b0:	e013      	b.n	80054da <HAL_TIM_IC_Start_IT+0x102>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_IC_Start_IT+0xea>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054c0:	e00b      	b.n	80054da <HAL_TIM_IC_Start_IT+0x102>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_IC_Start_IT+0xfa>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d0:	e003      	b.n	80054da <HAL_TIM_IC_Start_IT+0x102>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b0c      	cmp	r3, #12
 80054de:	d841      	bhi.n	8005564 <HAL_TIM_IC_Start_IT+0x18c>
 80054e0:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <HAL_TIM_IC_Start_IT+0x110>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	0800551d 	.word	0x0800551d
 80054ec:	08005565 	.word	0x08005565
 80054f0:	08005565 	.word	0x08005565
 80054f4:	08005565 	.word	0x08005565
 80054f8:	0800552f 	.word	0x0800552f
 80054fc:	08005565 	.word	0x08005565
 8005500:	08005565 	.word	0x08005565
 8005504:	08005565 	.word	0x08005565
 8005508:	08005541 	.word	0x08005541
 800550c:	08005565 	.word	0x08005565
 8005510:	08005565 	.word	0x08005565
 8005514:	08005565 	.word	0x08005565
 8005518:	08005553 	.word	0x08005553
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0202 	orr.w	r2, r2, #2
 800552a:	60da      	str	r2, [r3, #12]
      break;
 800552c:	e01d      	b.n	800556a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0204 	orr.w	r2, r2, #4
 800553c:	60da      	str	r2, [r3, #12]
      break;
 800553e:	e014      	b.n	800556a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0208 	orr.w	r2, r2, #8
 800554e:	60da      	str	r2, [r3, #12]
      break;
 8005550:	e00b      	b.n	800556a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0210 	orr.w	r2, r2, #16
 8005560:	60da      	str	r2, [r3, #12]
      break;
 8005562:	e002      	b.n	800556a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
      break;
 8005568:	bf00      	nop
  }

  if (status == HAL_OK)
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d148      	bne.n	8005602 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2201      	movs	r2, #1
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fbeb 	bl	8005d54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a22      	ldr	r2, [pc, #136]	; (800560c <HAL_TIM_IC_Start_IT+0x234>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <HAL_TIM_IC_Start_IT+0x1f6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d01d      	beq.n	80055ce <HAL_TIM_IC_Start_IT+0x1f6>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <HAL_TIM_IC_Start_IT+0x238>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_TIM_IC_Start_IT+0x1f6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1c      	ldr	r2, [pc, #112]	; (8005614 <HAL_TIM_IC_Start_IT+0x23c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_TIM_IC_Start_IT+0x1f6>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1b      	ldr	r2, [pc, #108]	; (8005618 <HAL_TIM_IC_Start_IT+0x240>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_TIM_IC_Start_IT+0x1f6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <HAL_TIM_IC_Start_IT+0x244>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_TIM_IC_Start_IT+0x1f6>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a18      	ldr	r2, [pc, #96]	; (8005620 <HAL_TIM_IC_Start_IT+0x248>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIM_IC_Start_IT+0x1f6>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a16      	ldr	r2, [pc, #88]	; (8005624 <HAL_TIM_IC_Start_IT+0x24c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d111      	bne.n	80055f2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b06      	cmp	r3, #6
 80055de:	d010      	beq.n	8005602 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f0:	e007      	b.n	8005602 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40010400 	.word	0x40010400
 8005620:	40014000 	.word	0x40014000
 8005624:	40001800 	.word	0x40001800

08005628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d122      	bne.n	8005684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b02      	cmp	r3, #2
 800564a:	d11b      	bne.n	8005684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0202 	mvn.w	r2, #2
 8005654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fa fff4 	bl	8000658 <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f986 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f98d 	bl	8005998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b04      	cmp	r3, #4
 8005690:	d122      	bne.n	80056d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b04      	cmp	r3, #4
 800569e:	d11b      	bne.n	80056d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0204 	mvn.w	r2, #4
 80056a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fa ffca 	bl	8000658 <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f95c 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f963 	bl	8005998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d122      	bne.n	800572c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d11b      	bne.n	800572c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0208 	mvn.w	r2, #8
 80056fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2204      	movs	r2, #4
 8005702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fa ffa0 	bl	8000658 <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f932 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f939 	bl	8005998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b10      	cmp	r3, #16
 8005738:	d122      	bne.n	8005780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b10      	cmp	r3, #16
 8005746:	d11b      	bne.n	8005780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0210 	mvn.w	r2, #16
 8005750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2208      	movs	r2, #8
 8005756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fa ff76 	bl	8000658 <HAL_TIM_IC_CaptureCallback>
 800576c:	e005      	b.n	800577a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f908 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f90f 	bl	8005998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b01      	cmp	r3, #1
 800578c:	d10e      	bne.n	80057ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d107      	bne.n	80057ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0201 	mvn.w	r2, #1
 80057a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f8e2 	bl	8005970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b6:	2b80      	cmp	r3, #128	; 0x80
 80057b8:	d10e      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c4:	2b80      	cmp	r3, #128	; 0x80
 80057c6:	d107      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 faed 	bl	8005db2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d10e      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f0:	2b40      	cmp	r3, #64	; 0x40
 80057f2:	d107      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f8d4 	bl	80059ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b20      	cmp	r3, #32
 8005810:	d10e      	bne.n	8005830 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b20      	cmp	r3, #32
 800581e:	d107      	bne.n	8005830 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0220 	mvn.w	r2, #32
 8005828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fab7 	bl	8005d9e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005852:	2302      	movs	r3, #2
 8005854:	e088      	b.n	8005968 <HAL_TIM_IC_ConfigChannel+0x130>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d11b      	bne.n	800589c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	6819      	ldr	r1, [r3, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f000 f944 	bl	8005b00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 020c 	bic.w	r2, r2, #12
 8005886:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6999      	ldr	r1, [r3, #24]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	619a      	str	r2, [r3, #24]
 800589a:	e060      	b.n	800595e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d11c      	bne.n	80058dc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6819      	ldr	r1, [r3, #0]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f000 f999 	bl	8005be8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6999      	ldr	r1, [r3, #24]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	021a      	lsls	r2, r3, #8
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	619a      	str	r2, [r3, #24]
 80058da:	e040      	b.n	800595e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d11b      	bne.n	800591a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6819      	ldr	r1, [r3, #0]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f000 f9b6 	bl	8005c62 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 020c 	bic.w	r2, r2, #12
 8005904:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69d9      	ldr	r1, [r3, #28]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	61da      	str	r2, [r3, #28]
 8005918:	e021      	b.n	800595e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b0c      	cmp	r3, #12
 800591e:	d11c      	bne.n	800595a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6819      	ldr	r1, [r3, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f000 f9d3 	bl	8005cda <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005942:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69d9      	ldr	r1, [r3, #28]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	021a      	lsls	r2, r3, #8
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	61da      	str	r2, [r3, #28]
 8005958:	e001      	b.n	800595e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005966:	7dfb      	ldrb	r3, [r7, #23]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a40      	ldr	r2, [pc, #256]	; (8005ad4 <TIM_Base_SetConfig+0x114>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d00f      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a3d      	ldr	r2, [pc, #244]	; (8005ad8 <TIM_Base_SetConfig+0x118>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a3c      	ldr	r2, [pc, #240]	; (8005adc <TIM_Base_SetConfig+0x11c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a3b      	ldr	r2, [pc, #236]	; (8005ae0 <TIM_Base_SetConfig+0x120>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3a      	ldr	r2, [pc, #232]	; (8005ae4 <TIM_Base_SetConfig+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d108      	bne.n	8005a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a2f      	ldr	r2, [pc, #188]	; (8005ad4 <TIM_Base_SetConfig+0x114>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a20:	d027      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2c      	ldr	r2, [pc, #176]	; (8005ad8 <TIM_Base_SetConfig+0x118>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d023      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2b      	ldr	r2, [pc, #172]	; (8005adc <TIM_Base_SetConfig+0x11c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01f      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2a      	ldr	r2, [pc, #168]	; (8005ae0 <TIM_Base_SetConfig+0x120>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a29      	ldr	r2, [pc, #164]	; (8005ae4 <TIM_Base_SetConfig+0x124>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d017      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a28      	ldr	r2, [pc, #160]	; (8005ae8 <TIM_Base_SetConfig+0x128>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a27      	ldr	r2, [pc, #156]	; (8005aec <TIM_Base_SetConfig+0x12c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00f      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <TIM_Base_SetConfig+0x130>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <TIM_Base_SetConfig+0x134>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a24      	ldr	r2, [pc, #144]	; (8005af8 <TIM_Base_SetConfig+0x138>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a23      	ldr	r2, [pc, #140]	; (8005afc <TIM_Base_SetConfig+0x13c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <TIM_Base_SetConfig+0x114>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0xf8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <TIM_Base_SetConfig+0x124>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d103      	bne.n	8005ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	615a      	str	r2, [r3, #20]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40010400 	.word	0x40010400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800
 8005af4:	40001800 	.word	0x40001800
 8005af8:	40001c00 	.word	0x40001c00
 8005afc:	40002000 	.word	0x40002000

08005b00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	f023 0201 	bic.w	r2, r3, #1
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a28      	ldr	r2, [pc, #160]	; (8005bcc <TIM_TI1_SetConfig+0xcc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01b      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b34:	d017      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a25      	ldr	r2, [pc, #148]	; (8005bd0 <TIM_TI1_SetConfig+0xd0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d013      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a24      	ldr	r2, [pc, #144]	; (8005bd4 <TIM_TI1_SetConfig+0xd4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00f      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a23      	ldr	r2, [pc, #140]	; (8005bd8 <TIM_TI1_SetConfig+0xd8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00b      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a22      	ldr	r2, [pc, #136]	; (8005bdc <TIM_TI1_SetConfig+0xdc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d007      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <TIM_TI1_SetConfig+0xe0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4a20      	ldr	r2, [pc, #128]	; (8005be4 <TIM_TI1_SetConfig+0xe4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d101      	bne.n	8005b6a <TIM_TI1_SetConfig+0x6a>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <TIM_TI1_SetConfig+0x6c>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e003      	b.n	8005b8a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f023 030a 	bic.w	r3, r3, #10
 8005ba4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f003 030a 	and.w	r3, r3, #10
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40010400 	.word	0x40010400
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40001800 	.word	0x40001800

08005be8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	f023 0210 	bic.w	r2, r3, #16
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	031b      	lsls	r3, r3, #12
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b087      	sub	sp, #28
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b087      	sub	sp, #28
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	031b      	lsls	r3, r3, #12
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	031b      	lsls	r3, r3, #12
 8005d32:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	621a      	str	r2, [r3, #32]
}
 8005d48:	bf00      	nop
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2201      	movs	r2, #1
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1a      	ldr	r2, [r3, #32]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	401a      	ands	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1a      	ldr	r2, [r3, #32]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e03f      	b.n	8005e58 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d106      	bne.n	8005df2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7fb f99b 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2224      	movs	r2, #36	; 0x24
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e08:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fd7a 	bl	8006904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e1e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695a      	ldr	r2, [r3, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e2e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e3e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	; 0x28
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d17c      	bne.n	8005f7a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_UART_Transmit+0x2c>
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e075      	b.n	8005f7c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Transmit+0x3e>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e06e      	b.n	8005f7c <HAL_UART_Transmit+0x11c>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2221      	movs	r2, #33	; 0x21
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eb4:	f7fb fb42 	bl	800153c <HAL_GetTick>
 8005eb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	88fa      	ldrh	r2, [r7, #6]
 8005ebe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	88fa      	ldrh	r2, [r7, #6]
 8005ec4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ece:	d108      	bne.n	8005ee2 <HAL_UART_Transmit+0x82>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	e003      	b.n	8005eea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ef2:	e02a      	b.n	8005f4a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2200      	movs	r2, #0
 8005efc:	2180      	movs	r1, #128	; 0x80
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 faf8 	bl	80064f4 <UART_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e036      	b.n	8005f7c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f22:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	3302      	adds	r3, #2
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	e007      	b.n	8005f3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	781a      	ldrb	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1cf      	bne.n	8005ef4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2140      	movs	r1, #64	; 0x40
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 fac8 	bl	80064f4 <UART_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e006      	b.n	8005f7c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e000      	b.n	8005f7c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f7a:	2302      	movs	r3, #2
  }
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b0ba      	sub	sp, #232	; 0xe8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_UART_IRQHandler+0x66>
 8005fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fbd3 	bl	800678e <UART_Receive_IT>
      return;
 8005fe8:	e256      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80de 	beq.w	80061b0 <HAL_UART_IRQHandler+0x22c>
 8005ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80d1 	beq.w	80061b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <HAL_UART_IRQHandler+0xae>
 800601a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f043 0201 	orr.w	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00b      	beq.n	8006056 <HAL_UART_IRQHandler+0xd2>
 800603e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f043 0202 	orr.w	r2, r3, #2
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <HAL_UART_IRQHandler+0xf6>
 8006062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f043 0204 	orr.w	r2, r3, #4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d011      	beq.n	80060aa <HAL_UART_IRQHandler+0x126>
 8006086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	f043 0208 	orr.w	r2, r3, #8
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 81ed 	beq.w	800648e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_UART_IRQHandler+0x14e>
 80060c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fb5e 	bl	800678e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2300      	movne	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <HAL_UART_IRQHandler+0x17a>
 80060f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d04f      	beq.n	800619e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa66 	bl	80065d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d141      	bne.n	8006196 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3314      	adds	r3, #20
 8006118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800612c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3314      	adds	r3, #20
 800613a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800613e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800614a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1d9      	bne.n	8006112 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	2b00      	cmp	r3, #0
 8006164:	d013      	beq.n	800618e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	4a7d      	ldr	r2, [pc, #500]	; (8006360 <HAL_UART_IRQHandler+0x3dc>)
 800616c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	4618      	mov	r0, r3
 8006174:	f7fc fa67 	bl	8002646 <HAL_DMA_Abort_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d016      	beq.n	80061ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618c:	e00e      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f99a 	bl	80064c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006194:	e00a      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f996 	bl	80064c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619c:	e006      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f992 	bl	80064c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80061aa:	e170      	b.n	800648e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ac:	bf00      	nop
    return;
 80061ae:	e16e      	b.n	800648e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	f040 814a 	bne.w	800644e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8143 	beq.w	800644e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 813c 	beq.w	800644e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	f040 80b4 	bne.w	8006364 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8140 	beq.w	8006492 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800621a:	429a      	cmp	r2, r3
 800621c:	f080 8139 	bcs.w	8006492 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006226:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006232:	f000 8088 	beq.w	8006346 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800624c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	330c      	adds	r3, #12
 800625e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006262:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800626e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800627a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1d9      	bne.n	8006236 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3314      	adds	r3, #20
 8006288:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006294:	f023 0301 	bic.w	r3, r3, #1
 8006298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3314      	adds	r3, #20
 80062a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e1      	bne.n	8006282 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3314      	adds	r3, #20
 80062c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3314      	adds	r3, #20
 80062de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e3      	bne.n	80062be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006316:	f023 0310 	bic.w	r3, r3, #16
 800631a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	330c      	adds	r3, #12
 8006324:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006328:	65ba      	str	r2, [r7, #88]	; 0x58
 800632a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800632e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e3      	bne.n	8006304 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	4618      	mov	r0, r3
 8006342:	f7fc f910 	bl	8002566 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800634e:	b29b      	uxth	r3, r3
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	b29b      	uxth	r3, r3
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f8c0 	bl	80064dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800635c:	e099      	b.n	8006492 <HAL_UART_IRQHandler+0x50e>
 800635e:	bf00      	nop
 8006360:	08006697 	.word	0x08006697
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800636c:	b29b      	uxth	r3, r3
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 808b 	beq.w	8006496 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8086 	beq.w	8006496 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800639a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063ae:	647a      	str	r2, [r7, #68]	; 0x44
 80063b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e3      	bne.n	800638a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3314      	adds	r3, #20
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	623b      	str	r3, [r7, #32]
   return(result);
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	f023 0301 	bic.w	r3, r3, #1
 80063d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3314      	adds	r3, #20
 80063e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063e6:	633a      	str	r2, [r7, #48]	; 0x30
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e3      	bne.n	80063c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	330c      	adds	r3, #12
 800640e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	60fb      	str	r3, [r7, #12]
   return(result);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0310 	bic.w	r3, r3, #16
 800641e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	330c      	adds	r3, #12
 8006428:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800642c:	61fa      	str	r2, [r7, #28]
 800642e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	69b9      	ldr	r1, [r7, #24]
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	617b      	str	r3, [r7, #20]
   return(result);
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e3      	bne.n	8006408 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f848 	bl	80064dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800644c:	e023      	b.n	8006496 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006456:	2b00      	cmp	r3, #0
 8006458:	d009      	beq.n	800646e <HAL_UART_IRQHandler+0x4ea>
 800645a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f929 	bl	80066be <UART_Transmit_IT>
    return;
 800646c:	e014      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800646e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <HAL_UART_IRQHandler+0x514>
 800647a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d008      	beq.n	8006498 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f969 	bl	800675e <UART_EndTransmit_IT>
    return;
 800648c:	e004      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
    return;
 800648e:	bf00      	nop
 8006490:	e002      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
      return;
 8006492:	bf00      	nop
 8006494:	e000      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
      return;
 8006496:	bf00      	nop
  }
}
 8006498:	37e8      	adds	r7, #232	; 0xe8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop

080064a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b090      	sub	sp, #64	; 0x40
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006504:	e050      	b.n	80065a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d04c      	beq.n	80065a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800650e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <UART_WaitOnFlagUntilTimeout+0x30>
 8006514:	f7fb f812 	bl	800153c <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006520:	429a      	cmp	r2, r3
 8006522:	d241      	bcs.n	80065a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006544:	637a      	str	r2, [r7, #52]	; 0x34
 8006546:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800654a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e5      	bne.n	8006524 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3314      	adds	r3, #20
 800655e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	613b      	str	r3, [r7, #16]
   return(result);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f023 0301 	bic.w	r3, r3, #1
 800656e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3314      	adds	r3, #20
 8006576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006578:	623a      	str	r2, [r7, #32]
 800657a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	69f9      	ldr	r1, [r7, #28]
 800657e:	6a3a      	ldr	r2, [r7, #32]
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	61bb      	str	r3, [r7, #24]
   return(result);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e5      	bne.n	8006558 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e00f      	b.n	80065c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4013      	ands	r3, r2
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	bf0c      	ite	eq
 80065b8:	2301      	moveq	r3, #1
 80065ba:	2300      	movne	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d09f      	beq.n	8006506 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3740      	adds	r7, #64	; 0x40
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b095      	sub	sp, #84	; 0x54
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	330c      	adds	r3, #12
 80065f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065f8:	643a      	str	r2, [r7, #64]	; 0x40
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e5      	bne.n	80065d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3314      	adds	r3, #20
 8006612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	61fb      	str	r3, [r7, #28]
   return(result);
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	64bb      	str	r3, [r7, #72]	; 0x48
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3314      	adds	r3, #20
 800662a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800662c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e5      	bne.n	800660c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	2b01      	cmp	r3, #1
 8006646:	d119      	bne.n	800667c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	60bb      	str	r3, [r7, #8]
   return(result);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f023 0310 	bic.w	r3, r3, #16
 800665e:	647b      	str	r3, [r7, #68]	; 0x44
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	330c      	adds	r3, #12
 8006666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006668:	61ba      	str	r2, [r7, #24]
 800666a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6979      	ldr	r1, [r7, #20]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	613b      	str	r3, [r7, #16]
   return(result);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
}
 800668a:	bf00      	nop
 800668c:	3754      	adds	r7, #84	; 0x54
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7ff ff09 	bl	80064c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b21      	cmp	r3, #33	; 0x21
 80066d0:	d13e      	bne.n	8006750 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066da:	d114      	bne.n	8006706 <UART_Transmit_IT+0x48>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d110      	bne.n	8006706 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	1c9a      	adds	r2, r3, #2
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	621a      	str	r2, [r3, #32]
 8006704:	e008      	b.n	8006718 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	1c59      	adds	r1, r3, #1
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6211      	str	r1, [r2, #32]
 8006710:	781a      	ldrb	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29b      	uxth	r3, r3
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4619      	mov	r1, r3
 8006726:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10f      	bne.n	800674c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800673a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800674a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	e000      	b.n	8006752 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006750:	2302      	movs	r3, #2
  }
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006774:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fe8e 	bl	80064a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b08c      	sub	sp, #48	; 0x30
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b22      	cmp	r3, #34	; 0x22
 80067a0:	f040 80ab 	bne.w	80068fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ac:	d117      	bne.n	80067de <UART_Receive_IT+0x50>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d113      	bne.n	80067de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	1c9a      	adds	r2, r3, #2
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	629a      	str	r2, [r3, #40]	; 0x28
 80067dc:	e026      	b.n	800682c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f0:	d007      	beq.n	8006802 <UART_Receive_IT+0x74>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <UART_Receive_IT+0x82>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	e008      	b.n	8006822 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681c:	b2da      	uxtb	r2, r3
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29b      	uxth	r3, r3
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4619      	mov	r1, r3
 800683a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800683c:	2b00      	cmp	r3, #0
 800683e:	d15a      	bne.n	80068f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0220 	bic.w	r2, r2, #32
 800684e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800685e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	2b01      	cmp	r3, #1
 800687e:	d135      	bne.n	80068ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	330c      	adds	r3, #12
 800688c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	613b      	str	r3, [r7, #16]
   return(result);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f023 0310 	bic.w	r3, r3, #16
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	330c      	adds	r3, #12
 80068a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a6:	623a      	str	r2, [r7, #32]
 80068a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	69f9      	ldr	r1, [r7, #28]
 80068ac:	6a3a      	ldr	r2, [r7, #32]
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e5      	bne.n	8006886 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d10a      	bne.n	80068de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fdf9 	bl	80064dc <HAL_UARTEx_RxEventCallback>
 80068ea:	e002      	b.n	80068f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff fde1 	bl	80064b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e002      	b.n	80068fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e000      	b.n	80068fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068fa:	2302      	movs	r3, #2
  }
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3730      	adds	r7, #48	; 0x30
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006908:	b0c0      	sub	sp, #256	; 0x100
 800690a:	af00      	add	r7, sp, #0
 800690c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800691c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006920:	68d9      	ldr	r1, [r3, #12]
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	ea40 0301 	orr.w	r3, r0, r1
 800692c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800692e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	431a      	orrs	r2, r3
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	431a      	orrs	r2, r3
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800695c:	f021 010c 	bic.w	r1, r1, #12
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800696a:	430b      	orrs	r3, r1
 800696c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800696e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800697a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697e:	6999      	ldr	r1, [r3, #24]
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	ea40 0301 	orr.w	r3, r0, r1
 800698a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b8f      	ldr	r3, [pc, #572]	; (8006bd0 <UART_SetConfig+0x2cc>)
 8006994:	429a      	cmp	r2, r3
 8006996:	d005      	beq.n	80069a4 <UART_SetConfig+0xa0>
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	4b8d      	ldr	r3, [pc, #564]	; (8006bd4 <UART_SetConfig+0x2d0>)
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d104      	bne.n	80069ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069a4:	f7fe fb0c 	bl	8004fc0 <HAL_RCC_GetPCLK2Freq>
 80069a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069ac:	e003      	b.n	80069b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069ae:	f7fe faf3 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 80069b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c0:	f040 810c 	bne.w	8006bdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069d6:	4622      	mov	r2, r4
 80069d8:	462b      	mov	r3, r5
 80069da:	1891      	adds	r1, r2, r2
 80069dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80069de:	415b      	adcs	r3, r3
 80069e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069e6:	4621      	mov	r1, r4
 80069e8:	eb12 0801 	adds.w	r8, r2, r1
 80069ec:	4629      	mov	r1, r5
 80069ee:	eb43 0901 	adc.w	r9, r3, r1
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a06:	4690      	mov	r8, r2
 8006a08:	4699      	mov	r9, r3
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	eb18 0303 	adds.w	r3, r8, r3
 8006a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a14:	462b      	mov	r3, r5
 8006a16:	eb49 0303 	adc.w	r3, r9, r3
 8006a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a32:	460b      	mov	r3, r1
 8006a34:	18db      	adds	r3, r3, r3
 8006a36:	653b      	str	r3, [r7, #80]	; 0x50
 8006a38:	4613      	mov	r3, r2
 8006a3a:	eb42 0303 	adc.w	r3, r2, r3
 8006a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a48:	f7f9 fc1a 	bl	8000280 <__aeabi_uldivmod>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4b61      	ldr	r3, [pc, #388]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006a52:	fba3 2302 	umull	r2, r3, r3, r2
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	011c      	lsls	r4, r3, #4
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	1891      	adds	r1, r2, r2
 8006a72:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a74:	415b      	adcs	r3, r3
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a82:	4649      	mov	r1, r9
 8006a84:	eb43 0b01 	adc.w	fp, r3, r1
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a9c:	4692      	mov	sl, r2
 8006a9e:	469b      	mov	fp, r3
 8006aa0:	4643      	mov	r3, r8
 8006aa2:	eb1a 0303 	adds.w	r3, sl, r3
 8006aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	eb4b 0303 	adc.w	r3, fp, r3
 8006ab0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ac4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	18db      	adds	r3, r3, r3
 8006acc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ace:	4613      	mov	r3, r2
 8006ad0:	eb42 0303 	adc.w	r3, r2, r3
 8006ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ada:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ade:	f7f9 fbcf 	bl	8000280 <__aeabi_uldivmod>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4b3b      	ldr	r3, [pc, #236]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006aea:	fba3 2301 	umull	r2, r3, r3, r1
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	2264      	movs	r2, #100	; 0x64
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
 8006af6:	1acb      	subs	r3, r1, r3
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006afe:	4b36      	ldr	r3, [pc, #216]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006b00:	fba3 2302 	umull	r2, r3, r3, r2
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b0c:	441c      	add	r4, r3
 8006b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	1891      	adds	r1, r2, r2
 8006b26:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b28:	415b      	adcs	r3, r3
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b30:	4641      	mov	r1, r8
 8006b32:	1851      	adds	r1, r2, r1
 8006b34:	6339      	str	r1, [r7, #48]	; 0x30
 8006b36:	4649      	mov	r1, r9
 8006b38:	414b      	adcs	r3, r1
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b48:	4659      	mov	r1, fp
 8006b4a:	00cb      	lsls	r3, r1, #3
 8006b4c:	4651      	mov	r1, sl
 8006b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b52:	4651      	mov	r1, sl
 8006b54:	00ca      	lsls	r2, r1, #3
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	189b      	adds	r3, r3, r2
 8006b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b64:	464b      	mov	r3, r9
 8006b66:	460a      	mov	r2, r1
 8006b68:	eb42 0303 	adc.w	r3, r2, r3
 8006b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b84:	460b      	mov	r3, r1
 8006b86:	18db      	adds	r3, r3, r3
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	eb42 0303 	adc.w	r3, r2, r3
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b9a:	f7f9 fb71 	bl	8000280 <__aeabi_uldivmod>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	2164      	movs	r1, #100	; 0x64
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	3332      	adds	r3, #50	; 0x32
 8006bb6:	4a08      	ldr	r2, [pc, #32]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbc:	095b      	lsrs	r3, r3, #5
 8006bbe:	f003 0207 	and.w	r2, r3, #7
 8006bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4422      	add	r2, r4
 8006bca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bcc:	e105      	b.n	8006dda <UART_SetConfig+0x4d6>
 8006bce:	bf00      	nop
 8006bd0:	40011000 	.word	0x40011000
 8006bd4:	40011400 	.word	0x40011400
 8006bd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006be6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bee:	4642      	mov	r2, r8
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	1891      	adds	r1, r2, r2
 8006bf4:	6239      	str	r1, [r7, #32]
 8006bf6:	415b      	adcs	r3, r3
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bfe:	4641      	mov	r1, r8
 8006c00:	1854      	adds	r4, r2, r1
 8006c02:	4649      	mov	r1, r9
 8006c04:	eb43 0501 	adc.w	r5, r3, r1
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	00eb      	lsls	r3, r5, #3
 8006c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c16:	00e2      	lsls	r2, r4, #3
 8006c18:	4614      	mov	r4, r2
 8006c1a:	461d      	mov	r5, r3
 8006c1c:	4643      	mov	r3, r8
 8006c1e:	18e3      	adds	r3, r4, r3
 8006c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c24:	464b      	mov	r3, r9
 8006c26:	eb45 0303 	adc.w	r3, r5, r3
 8006c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	008b      	lsls	r3, r1, #2
 8006c4e:	4621      	mov	r1, r4
 8006c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c54:	4621      	mov	r1, r4
 8006c56:	008a      	lsls	r2, r1, #2
 8006c58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c5c:	f7f9 fb10 	bl	8000280 <__aeabi_uldivmod>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4b60      	ldr	r3, [pc, #384]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006c66:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	011c      	lsls	r4, r3, #4
 8006c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c80:	4642      	mov	r2, r8
 8006c82:	464b      	mov	r3, r9
 8006c84:	1891      	adds	r1, r2, r2
 8006c86:	61b9      	str	r1, [r7, #24]
 8006c88:	415b      	adcs	r3, r3
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c90:	4641      	mov	r1, r8
 8006c92:	1851      	adds	r1, r2, r1
 8006c94:	6139      	str	r1, [r7, #16]
 8006c96:	4649      	mov	r1, r9
 8006c98:	414b      	adcs	r3, r1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ca8:	4659      	mov	r1, fp
 8006caa:	00cb      	lsls	r3, r1, #3
 8006cac:	4651      	mov	r1, sl
 8006cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb2:	4651      	mov	r1, sl
 8006cb4:	00ca      	lsls	r2, r1, #3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	189b      	adds	r3, r3, r2
 8006cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	460a      	mov	r2, r1
 8006cc8:	eb42 0303 	adc.w	r3, r2, r3
 8006ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ce8:	4649      	mov	r1, r9
 8006cea:	008b      	lsls	r3, r1, #2
 8006cec:	4641      	mov	r1, r8
 8006cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	008a      	lsls	r2, r1, #2
 8006cf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cfa:	f7f9 fac1 	bl	8000280 <__aeabi_uldivmod>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4b39      	ldr	r3, [pc, #228]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006d04:	fba3 1302 	umull	r1, r3, r3, r2
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	2164      	movs	r1, #100	; 0x64
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	3332      	adds	r3, #50	; 0x32
 8006d16:	4a34      	ldr	r2, [pc, #208]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006d18:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d22:	441c      	add	r4, r3
 8006d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d28:	2200      	movs	r2, #0
 8006d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8006d2c:	677a      	str	r2, [r7, #116]	; 0x74
 8006d2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d32:	4642      	mov	r2, r8
 8006d34:	464b      	mov	r3, r9
 8006d36:	1891      	adds	r1, r2, r2
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	415b      	adcs	r3, r3
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d42:	4641      	mov	r1, r8
 8006d44:	1851      	adds	r1, r2, r1
 8006d46:	6039      	str	r1, [r7, #0]
 8006d48:	4649      	mov	r1, r9
 8006d4a:	414b      	adcs	r3, r1
 8006d4c:	607b      	str	r3, [r7, #4]
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d5a:	4659      	mov	r1, fp
 8006d5c:	00cb      	lsls	r3, r1, #3
 8006d5e:	4651      	mov	r1, sl
 8006d60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d64:	4651      	mov	r1, sl
 8006d66:	00ca      	lsls	r2, r1, #3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4642      	mov	r2, r8
 8006d70:	189b      	adds	r3, r3, r2
 8006d72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d74:	464b      	mov	r3, r9
 8006d76:	460a      	mov	r2, r1
 8006d78:	eb42 0303 	adc.w	r3, r2, r3
 8006d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	663b      	str	r3, [r7, #96]	; 0x60
 8006d88:	667a      	str	r2, [r7, #100]	; 0x64
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d96:	4649      	mov	r1, r9
 8006d98:	008b      	lsls	r3, r1, #2
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006da0:	4641      	mov	r1, r8
 8006da2:	008a      	lsls	r2, r1, #2
 8006da4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006da8:	f7f9 fa6a 	bl	8000280 <__aeabi_uldivmod>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006db2:	fba3 1302 	umull	r1, r3, r3, r2
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	2164      	movs	r1, #100	; 0x64
 8006dba:	fb01 f303 	mul.w	r3, r1, r3
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	3332      	adds	r3, #50	; 0x32
 8006dc4:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	f003 020f 	and.w	r2, r3, #15
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4422      	add	r2, r4
 8006dd8:	609a      	str	r2, [r3, #8]
}
 8006dda:	bf00      	nop
 8006ddc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006de0:	46bd      	mov	sp, r7
 8006de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006de6:	bf00      	nop
 8006de8:	51eb851f 	.word	0x51eb851f

08006dec <__errno>:
 8006dec:	4b01      	ldr	r3, [pc, #4]	; (8006df4 <__errno+0x8>)
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	2000000c 	.word	0x2000000c

08006df8 <__libc_init_array>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4d0d      	ldr	r5, [pc, #52]	; (8006e30 <__libc_init_array+0x38>)
 8006dfc:	4c0d      	ldr	r4, [pc, #52]	; (8006e34 <__libc_init_array+0x3c>)
 8006dfe:	1b64      	subs	r4, r4, r5
 8006e00:	10a4      	asrs	r4, r4, #2
 8006e02:	2600      	movs	r6, #0
 8006e04:	42a6      	cmp	r6, r4
 8006e06:	d109      	bne.n	8006e1c <__libc_init_array+0x24>
 8006e08:	4d0b      	ldr	r5, [pc, #44]	; (8006e38 <__libc_init_array+0x40>)
 8006e0a:	4c0c      	ldr	r4, [pc, #48]	; (8006e3c <__libc_init_array+0x44>)
 8006e0c:	f000 fc9e 	bl	800774c <_init>
 8006e10:	1b64      	subs	r4, r4, r5
 8006e12:	10a4      	asrs	r4, r4, #2
 8006e14:	2600      	movs	r6, #0
 8006e16:	42a6      	cmp	r6, r4
 8006e18:	d105      	bne.n	8006e26 <__libc_init_array+0x2e>
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e20:	4798      	blx	r3
 8006e22:	3601      	adds	r6, #1
 8006e24:	e7ee      	b.n	8006e04 <__libc_init_array+0xc>
 8006e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e2a:	4798      	blx	r3
 8006e2c:	3601      	adds	r6, #1
 8006e2e:	e7f2      	b.n	8006e16 <__libc_init_array+0x1e>
 8006e30:	080077e0 	.word	0x080077e0
 8006e34:	080077e0 	.word	0x080077e0
 8006e38:	080077e0 	.word	0x080077e0
 8006e3c:	080077e4 	.word	0x080077e4

08006e40 <malloc>:
 8006e40:	4b02      	ldr	r3, [pc, #8]	; (8006e4c <malloc+0xc>)
 8006e42:	4601      	mov	r1, r0
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	f000 b885 	b.w	8006f54 <_malloc_r>
 8006e4a:	bf00      	nop
 8006e4c:	2000000c 	.word	0x2000000c

08006e50 <memcpy>:
 8006e50:	440a      	add	r2, r1
 8006e52:	4291      	cmp	r1, r2
 8006e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e58:	d100      	bne.n	8006e5c <memcpy+0xc>
 8006e5a:	4770      	bx	lr
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e66:	4291      	cmp	r1, r2
 8006e68:	d1f9      	bne.n	8006e5e <memcpy+0xe>
 8006e6a:	bd10      	pop	{r4, pc}

08006e6c <memset>:
 8006e6c:	4402      	add	r2, r0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d100      	bne.n	8006e76 <memset+0xa>
 8006e74:	4770      	bx	lr
 8006e76:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7a:	e7f9      	b.n	8006e70 <memset+0x4>

08006e7c <_free_r>:
 8006e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e7e:	2900      	cmp	r1, #0
 8006e80:	d044      	beq.n	8006f0c <_free_r+0x90>
 8006e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e86:	9001      	str	r0, [sp, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e8e:	bfb8      	it	lt
 8006e90:	18e4      	addlt	r4, r4, r3
 8006e92:	f000 f90b 	bl	80070ac <__malloc_lock>
 8006e96:	4a1e      	ldr	r2, [pc, #120]	; (8006f10 <_free_r+0x94>)
 8006e98:	9801      	ldr	r0, [sp, #4]
 8006e9a:	6813      	ldr	r3, [r2, #0]
 8006e9c:	b933      	cbnz	r3, 8006eac <_free_r+0x30>
 8006e9e:	6063      	str	r3, [r4, #4]
 8006ea0:	6014      	str	r4, [r2, #0]
 8006ea2:	b003      	add	sp, #12
 8006ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ea8:	f000 b906 	b.w	80070b8 <__malloc_unlock>
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	d908      	bls.n	8006ec2 <_free_r+0x46>
 8006eb0:	6825      	ldr	r5, [r4, #0]
 8006eb2:	1961      	adds	r1, r4, r5
 8006eb4:	428b      	cmp	r3, r1
 8006eb6:	bf01      	itttt	eq
 8006eb8:	6819      	ldreq	r1, [r3, #0]
 8006eba:	685b      	ldreq	r3, [r3, #4]
 8006ebc:	1949      	addeq	r1, r1, r5
 8006ebe:	6021      	streq	r1, [r4, #0]
 8006ec0:	e7ed      	b.n	8006e9e <_free_r+0x22>
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	b10b      	cbz	r3, 8006ecc <_free_r+0x50>
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	d9fa      	bls.n	8006ec2 <_free_r+0x46>
 8006ecc:	6811      	ldr	r1, [r2, #0]
 8006ece:	1855      	adds	r5, r2, r1
 8006ed0:	42a5      	cmp	r5, r4
 8006ed2:	d10b      	bne.n	8006eec <_free_r+0x70>
 8006ed4:	6824      	ldr	r4, [r4, #0]
 8006ed6:	4421      	add	r1, r4
 8006ed8:	1854      	adds	r4, r2, r1
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	6011      	str	r1, [r2, #0]
 8006ede:	d1e0      	bne.n	8006ea2 <_free_r+0x26>
 8006ee0:	681c      	ldr	r4, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	6053      	str	r3, [r2, #4]
 8006ee6:	4421      	add	r1, r4
 8006ee8:	6011      	str	r1, [r2, #0]
 8006eea:	e7da      	b.n	8006ea2 <_free_r+0x26>
 8006eec:	d902      	bls.n	8006ef4 <_free_r+0x78>
 8006eee:	230c      	movs	r3, #12
 8006ef0:	6003      	str	r3, [r0, #0]
 8006ef2:	e7d6      	b.n	8006ea2 <_free_r+0x26>
 8006ef4:	6825      	ldr	r5, [r4, #0]
 8006ef6:	1961      	adds	r1, r4, r5
 8006ef8:	428b      	cmp	r3, r1
 8006efa:	bf04      	itt	eq
 8006efc:	6819      	ldreq	r1, [r3, #0]
 8006efe:	685b      	ldreq	r3, [r3, #4]
 8006f00:	6063      	str	r3, [r4, #4]
 8006f02:	bf04      	itt	eq
 8006f04:	1949      	addeq	r1, r1, r5
 8006f06:	6021      	streq	r1, [r4, #0]
 8006f08:	6054      	str	r4, [r2, #4]
 8006f0a:	e7ca      	b.n	8006ea2 <_free_r+0x26>
 8006f0c:	b003      	add	sp, #12
 8006f0e:	bd30      	pop	{r4, r5, pc}
 8006f10:	20000310 	.word	0x20000310

08006f14 <sbrk_aligned>:
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	4e0e      	ldr	r6, [pc, #56]	; (8006f50 <sbrk_aligned+0x3c>)
 8006f18:	460c      	mov	r4, r1
 8006f1a:	6831      	ldr	r1, [r6, #0]
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	b911      	cbnz	r1, 8006f26 <sbrk_aligned+0x12>
 8006f20:	f000 f88c 	bl	800703c <_sbrk_r>
 8006f24:	6030      	str	r0, [r6, #0]
 8006f26:	4621      	mov	r1, r4
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f000 f887 	bl	800703c <_sbrk_r>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d00a      	beq.n	8006f48 <sbrk_aligned+0x34>
 8006f32:	1cc4      	adds	r4, r0, #3
 8006f34:	f024 0403 	bic.w	r4, r4, #3
 8006f38:	42a0      	cmp	r0, r4
 8006f3a:	d007      	beq.n	8006f4c <sbrk_aligned+0x38>
 8006f3c:	1a21      	subs	r1, r4, r0
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 f87c 	bl	800703c <_sbrk_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d101      	bne.n	8006f4c <sbrk_aligned+0x38>
 8006f48:	f04f 34ff 	mov.w	r4, #4294967295
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	bd70      	pop	{r4, r5, r6, pc}
 8006f50:	20000314 	.word	0x20000314

08006f54 <_malloc_r>:
 8006f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f58:	1ccd      	adds	r5, r1, #3
 8006f5a:	f025 0503 	bic.w	r5, r5, #3
 8006f5e:	3508      	adds	r5, #8
 8006f60:	2d0c      	cmp	r5, #12
 8006f62:	bf38      	it	cc
 8006f64:	250c      	movcc	r5, #12
 8006f66:	2d00      	cmp	r5, #0
 8006f68:	4607      	mov	r7, r0
 8006f6a:	db01      	blt.n	8006f70 <_malloc_r+0x1c>
 8006f6c:	42a9      	cmp	r1, r5
 8006f6e:	d905      	bls.n	8006f7c <_malloc_r+0x28>
 8006f70:	230c      	movs	r3, #12
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	2600      	movs	r6, #0
 8006f76:	4630      	mov	r0, r6
 8006f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7c:	4e2e      	ldr	r6, [pc, #184]	; (8007038 <_malloc_r+0xe4>)
 8006f7e:	f000 f895 	bl	80070ac <__malloc_lock>
 8006f82:	6833      	ldr	r3, [r6, #0]
 8006f84:	461c      	mov	r4, r3
 8006f86:	bb34      	cbnz	r4, 8006fd6 <_malloc_r+0x82>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	f7ff ffc2 	bl	8006f14 <sbrk_aligned>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	4604      	mov	r4, r0
 8006f94:	d14d      	bne.n	8007032 <_malloc_r+0xde>
 8006f96:	6834      	ldr	r4, [r6, #0]
 8006f98:	4626      	mov	r6, r4
 8006f9a:	2e00      	cmp	r6, #0
 8006f9c:	d140      	bne.n	8007020 <_malloc_r+0xcc>
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	eb04 0803 	add.w	r8, r4, r3
 8006fa8:	f000 f848 	bl	800703c <_sbrk_r>
 8006fac:	4580      	cmp	r8, r0
 8006fae:	d13a      	bne.n	8007026 <_malloc_r+0xd2>
 8006fb0:	6821      	ldr	r1, [r4, #0]
 8006fb2:	3503      	adds	r5, #3
 8006fb4:	1a6d      	subs	r5, r5, r1
 8006fb6:	f025 0503 	bic.w	r5, r5, #3
 8006fba:	3508      	adds	r5, #8
 8006fbc:	2d0c      	cmp	r5, #12
 8006fbe:	bf38      	it	cc
 8006fc0:	250c      	movcc	r5, #12
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	f7ff ffa5 	bl	8006f14 <sbrk_aligned>
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d02b      	beq.n	8007026 <_malloc_r+0xd2>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	442b      	add	r3, r5
 8006fd2:	6023      	str	r3, [r4, #0]
 8006fd4:	e00e      	b.n	8006ff4 <_malloc_r+0xa0>
 8006fd6:	6822      	ldr	r2, [r4, #0]
 8006fd8:	1b52      	subs	r2, r2, r5
 8006fda:	d41e      	bmi.n	800701a <_malloc_r+0xc6>
 8006fdc:	2a0b      	cmp	r2, #11
 8006fde:	d916      	bls.n	800700e <_malloc_r+0xba>
 8006fe0:	1961      	adds	r1, r4, r5
 8006fe2:	42a3      	cmp	r3, r4
 8006fe4:	6025      	str	r5, [r4, #0]
 8006fe6:	bf18      	it	ne
 8006fe8:	6059      	strne	r1, [r3, #4]
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	bf08      	it	eq
 8006fee:	6031      	streq	r1, [r6, #0]
 8006ff0:	5162      	str	r2, [r4, r5]
 8006ff2:	604b      	str	r3, [r1, #4]
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f104 060b 	add.w	r6, r4, #11
 8006ffa:	f000 f85d 	bl	80070b8 <__malloc_unlock>
 8006ffe:	f026 0607 	bic.w	r6, r6, #7
 8007002:	1d23      	adds	r3, r4, #4
 8007004:	1af2      	subs	r2, r6, r3
 8007006:	d0b6      	beq.n	8006f76 <_malloc_r+0x22>
 8007008:	1b9b      	subs	r3, r3, r6
 800700a:	50a3      	str	r3, [r4, r2]
 800700c:	e7b3      	b.n	8006f76 <_malloc_r+0x22>
 800700e:	6862      	ldr	r2, [r4, #4]
 8007010:	42a3      	cmp	r3, r4
 8007012:	bf0c      	ite	eq
 8007014:	6032      	streq	r2, [r6, #0]
 8007016:	605a      	strne	r2, [r3, #4]
 8007018:	e7ec      	b.n	8006ff4 <_malloc_r+0xa0>
 800701a:	4623      	mov	r3, r4
 800701c:	6864      	ldr	r4, [r4, #4]
 800701e:	e7b2      	b.n	8006f86 <_malloc_r+0x32>
 8007020:	4634      	mov	r4, r6
 8007022:	6876      	ldr	r6, [r6, #4]
 8007024:	e7b9      	b.n	8006f9a <_malloc_r+0x46>
 8007026:	230c      	movs	r3, #12
 8007028:	603b      	str	r3, [r7, #0]
 800702a:	4638      	mov	r0, r7
 800702c:	f000 f844 	bl	80070b8 <__malloc_unlock>
 8007030:	e7a1      	b.n	8006f76 <_malloc_r+0x22>
 8007032:	6025      	str	r5, [r4, #0]
 8007034:	e7de      	b.n	8006ff4 <_malloc_r+0xa0>
 8007036:	bf00      	nop
 8007038:	20000310 	.word	0x20000310

0800703c <_sbrk_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d06      	ldr	r5, [pc, #24]	; (8007058 <_sbrk_r+0x1c>)
 8007040:	2300      	movs	r3, #0
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	f7fa f9a0 	bl	800138c <_sbrk>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_sbrk_r+0x1a>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_sbrk_r+0x1a>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20000318 	.word	0x20000318

0800705c <siprintf>:
 800705c:	b40e      	push	{r1, r2, r3}
 800705e:	b500      	push	{lr}
 8007060:	b09c      	sub	sp, #112	; 0x70
 8007062:	ab1d      	add	r3, sp, #116	; 0x74
 8007064:	9002      	str	r0, [sp, #8]
 8007066:	9006      	str	r0, [sp, #24]
 8007068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800706c:	4809      	ldr	r0, [pc, #36]	; (8007094 <siprintf+0x38>)
 800706e:	9107      	str	r1, [sp, #28]
 8007070:	9104      	str	r1, [sp, #16]
 8007072:	4909      	ldr	r1, [pc, #36]	; (8007098 <siprintf+0x3c>)
 8007074:	f853 2b04 	ldr.w	r2, [r3], #4
 8007078:	9105      	str	r1, [sp, #20]
 800707a:	6800      	ldr	r0, [r0, #0]
 800707c:	9301      	str	r3, [sp, #4]
 800707e:	a902      	add	r1, sp, #8
 8007080:	f000 f87c 	bl	800717c <_svfiprintf_r>
 8007084:	9b02      	ldr	r3, [sp, #8]
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	b01c      	add	sp, #112	; 0x70
 800708c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007090:	b003      	add	sp, #12
 8007092:	4770      	bx	lr
 8007094:	2000000c 	.word	0x2000000c
 8007098:	ffff0208 	.word	0xffff0208

0800709c <strcpy>:
 800709c:	4603      	mov	r3, r0
 800709e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070a2:	f803 2b01 	strb.w	r2, [r3], #1
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	d1f9      	bne.n	800709e <strcpy+0x2>
 80070aa:	4770      	bx	lr

080070ac <__malloc_lock>:
 80070ac:	4801      	ldr	r0, [pc, #4]	; (80070b4 <__malloc_lock+0x8>)
 80070ae:	f000 baf9 	b.w	80076a4 <__retarget_lock_acquire_recursive>
 80070b2:	bf00      	nop
 80070b4:	2000031c 	.word	0x2000031c

080070b8 <__malloc_unlock>:
 80070b8:	4801      	ldr	r0, [pc, #4]	; (80070c0 <__malloc_unlock+0x8>)
 80070ba:	f000 baf4 	b.w	80076a6 <__retarget_lock_release_recursive>
 80070be:	bf00      	nop
 80070c0:	2000031c 	.word	0x2000031c

080070c4 <__ssputs_r>:
 80070c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c8:	688e      	ldr	r6, [r1, #8]
 80070ca:	429e      	cmp	r6, r3
 80070cc:	4682      	mov	sl, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	4690      	mov	r8, r2
 80070d2:	461f      	mov	r7, r3
 80070d4:	d838      	bhi.n	8007148 <__ssputs_r+0x84>
 80070d6:	898a      	ldrh	r2, [r1, #12]
 80070d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070dc:	d032      	beq.n	8007144 <__ssputs_r+0x80>
 80070de:	6825      	ldr	r5, [r4, #0]
 80070e0:	6909      	ldr	r1, [r1, #16]
 80070e2:	eba5 0901 	sub.w	r9, r5, r1
 80070e6:	6965      	ldr	r5, [r4, #20]
 80070e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070f0:	3301      	adds	r3, #1
 80070f2:	444b      	add	r3, r9
 80070f4:	106d      	asrs	r5, r5, #1
 80070f6:	429d      	cmp	r5, r3
 80070f8:	bf38      	it	cc
 80070fa:	461d      	movcc	r5, r3
 80070fc:	0553      	lsls	r3, r2, #21
 80070fe:	d531      	bpl.n	8007164 <__ssputs_r+0xa0>
 8007100:	4629      	mov	r1, r5
 8007102:	f7ff ff27 	bl	8006f54 <_malloc_r>
 8007106:	4606      	mov	r6, r0
 8007108:	b950      	cbnz	r0, 8007120 <__ssputs_r+0x5c>
 800710a:	230c      	movs	r3, #12
 800710c:	f8ca 3000 	str.w	r3, [sl]
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007116:	81a3      	strh	r3, [r4, #12]
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007120:	6921      	ldr	r1, [r4, #16]
 8007122:	464a      	mov	r2, r9
 8007124:	f7ff fe94 	bl	8006e50 <memcpy>
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800712e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	6126      	str	r6, [r4, #16]
 8007136:	6165      	str	r5, [r4, #20]
 8007138:	444e      	add	r6, r9
 800713a:	eba5 0509 	sub.w	r5, r5, r9
 800713e:	6026      	str	r6, [r4, #0]
 8007140:	60a5      	str	r5, [r4, #8]
 8007142:	463e      	mov	r6, r7
 8007144:	42be      	cmp	r6, r7
 8007146:	d900      	bls.n	800714a <__ssputs_r+0x86>
 8007148:	463e      	mov	r6, r7
 800714a:	6820      	ldr	r0, [r4, #0]
 800714c:	4632      	mov	r2, r6
 800714e:	4641      	mov	r1, r8
 8007150:	f000 faaa 	bl	80076a8 <memmove>
 8007154:	68a3      	ldr	r3, [r4, #8]
 8007156:	1b9b      	subs	r3, r3, r6
 8007158:	60a3      	str	r3, [r4, #8]
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	4433      	add	r3, r6
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	2000      	movs	r0, #0
 8007162:	e7db      	b.n	800711c <__ssputs_r+0x58>
 8007164:	462a      	mov	r2, r5
 8007166:	f000 fab9 	bl	80076dc <_realloc_r>
 800716a:	4606      	mov	r6, r0
 800716c:	2800      	cmp	r0, #0
 800716e:	d1e1      	bne.n	8007134 <__ssputs_r+0x70>
 8007170:	6921      	ldr	r1, [r4, #16]
 8007172:	4650      	mov	r0, sl
 8007174:	f7ff fe82 	bl	8006e7c <_free_r>
 8007178:	e7c7      	b.n	800710a <__ssputs_r+0x46>
	...

0800717c <_svfiprintf_r>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	4698      	mov	r8, r3
 8007182:	898b      	ldrh	r3, [r1, #12]
 8007184:	061b      	lsls	r3, r3, #24
 8007186:	b09d      	sub	sp, #116	; 0x74
 8007188:	4607      	mov	r7, r0
 800718a:	460d      	mov	r5, r1
 800718c:	4614      	mov	r4, r2
 800718e:	d50e      	bpl.n	80071ae <_svfiprintf_r+0x32>
 8007190:	690b      	ldr	r3, [r1, #16]
 8007192:	b963      	cbnz	r3, 80071ae <_svfiprintf_r+0x32>
 8007194:	2140      	movs	r1, #64	; 0x40
 8007196:	f7ff fedd 	bl	8006f54 <_malloc_r>
 800719a:	6028      	str	r0, [r5, #0]
 800719c:	6128      	str	r0, [r5, #16]
 800719e:	b920      	cbnz	r0, 80071aa <_svfiprintf_r+0x2e>
 80071a0:	230c      	movs	r3, #12
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	f04f 30ff 	mov.w	r0, #4294967295
 80071a8:	e0d1      	b.n	800734e <_svfiprintf_r+0x1d2>
 80071aa:	2340      	movs	r3, #64	; 0x40
 80071ac:	616b      	str	r3, [r5, #20]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9309      	str	r3, [sp, #36]	; 0x24
 80071b2:	2320      	movs	r3, #32
 80071b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80071bc:	2330      	movs	r3, #48	; 0x30
 80071be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007368 <_svfiprintf_r+0x1ec>
 80071c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071c6:	f04f 0901 	mov.w	r9, #1
 80071ca:	4623      	mov	r3, r4
 80071cc:	469a      	mov	sl, r3
 80071ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071d2:	b10a      	cbz	r2, 80071d8 <_svfiprintf_r+0x5c>
 80071d4:	2a25      	cmp	r2, #37	; 0x25
 80071d6:	d1f9      	bne.n	80071cc <_svfiprintf_r+0x50>
 80071d8:	ebba 0b04 	subs.w	fp, sl, r4
 80071dc:	d00b      	beq.n	80071f6 <_svfiprintf_r+0x7a>
 80071de:	465b      	mov	r3, fp
 80071e0:	4622      	mov	r2, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	4638      	mov	r0, r7
 80071e6:	f7ff ff6d 	bl	80070c4 <__ssputs_r>
 80071ea:	3001      	adds	r0, #1
 80071ec:	f000 80aa 	beq.w	8007344 <_svfiprintf_r+0x1c8>
 80071f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071f2:	445a      	add	r2, fp
 80071f4:	9209      	str	r2, [sp, #36]	; 0x24
 80071f6:	f89a 3000 	ldrb.w	r3, [sl]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80a2 	beq.w	8007344 <_svfiprintf_r+0x1c8>
 8007200:	2300      	movs	r3, #0
 8007202:	f04f 32ff 	mov.w	r2, #4294967295
 8007206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800720a:	f10a 0a01 	add.w	sl, sl, #1
 800720e:	9304      	str	r3, [sp, #16]
 8007210:	9307      	str	r3, [sp, #28]
 8007212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007216:	931a      	str	r3, [sp, #104]	; 0x68
 8007218:	4654      	mov	r4, sl
 800721a:	2205      	movs	r2, #5
 800721c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007220:	4851      	ldr	r0, [pc, #324]	; (8007368 <_svfiprintf_r+0x1ec>)
 8007222:	f7f8 ffdd 	bl	80001e0 <memchr>
 8007226:	9a04      	ldr	r2, [sp, #16]
 8007228:	b9d8      	cbnz	r0, 8007262 <_svfiprintf_r+0xe6>
 800722a:	06d0      	lsls	r0, r2, #27
 800722c:	bf44      	itt	mi
 800722e:	2320      	movmi	r3, #32
 8007230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007234:	0711      	lsls	r1, r2, #28
 8007236:	bf44      	itt	mi
 8007238:	232b      	movmi	r3, #43	; 0x2b
 800723a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800723e:	f89a 3000 	ldrb.w	r3, [sl]
 8007242:	2b2a      	cmp	r3, #42	; 0x2a
 8007244:	d015      	beq.n	8007272 <_svfiprintf_r+0xf6>
 8007246:	9a07      	ldr	r2, [sp, #28]
 8007248:	4654      	mov	r4, sl
 800724a:	2000      	movs	r0, #0
 800724c:	f04f 0c0a 	mov.w	ip, #10
 8007250:	4621      	mov	r1, r4
 8007252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007256:	3b30      	subs	r3, #48	; 0x30
 8007258:	2b09      	cmp	r3, #9
 800725a:	d94e      	bls.n	80072fa <_svfiprintf_r+0x17e>
 800725c:	b1b0      	cbz	r0, 800728c <_svfiprintf_r+0x110>
 800725e:	9207      	str	r2, [sp, #28]
 8007260:	e014      	b.n	800728c <_svfiprintf_r+0x110>
 8007262:	eba0 0308 	sub.w	r3, r0, r8
 8007266:	fa09 f303 	lsl.w	r3, r9, r3
 800726a:	4313      	orrs	r3, r2
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	46a2      	mov	sl, r4
 8007270:	e7d2      	b.n	8007218 <_svfiprintf_r+0x9c>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	1d19      	adds	r1, r3, #4
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	9103      	str	r1, [sp, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	bfbb      	ittet	lt
 800727e:	425b      	neglt	r3, r3
 8007280:	f042 0202 	orrlt.w	r2, r2, #2
 8007284:	9307      	strge	r3, [sp, #28]
 8007286:	9307      	strlt	r3, [sp, #28]
 8007288:	bfb8      	it	lt
 800728a:	9204      	strlt	r2, [sp, #16]
 800728c:	7823      	ldrb	r3, [r4, #0]
 800728e:	2b2e      	cmp	r3, #46	; 0x2e
 8007290:	d10c      	bne.n	80072ac <_svfiprintf_r+0x130>
 8007292:	7863      	ldrb	r3, [r4, #1]
 8007294:	2b2a      	cmp	r3, #42	; 0x2a
 8007296:	d135      	bne.n	8007304 <_svfiprintf_r+0x188>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	1d1a      	adds	r2, r3, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	9203      	str	r2, [sp, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bfb8      	it	lt
 80072a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80072a8:	3402      	adds	r4, #2
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007378 <_svfiprintf_r+0x1fc>
 80072b0:	7821      	ldrb	r1, [r4, #0]
 80072b2:	2203      	movs	r2, #3
 80072b4:	4650      	mov	r0, sl
 80072b6:	f7f8 ff93 	bl	80001e0 <memchr>
 80072ba:	b140      	cbz	r0, 80072ce <_svfiprintf_r+0x152>
 80072bc:	2340      	movs	r3, #64	; 0x40
 80072be:	eba0 000a 	sub.w	r0, r0, sl
 80072c2:	fa03 f000 	lsl.w	r0, r3, r0
 80072c6:	9b04      	ldr	r3, [sp, #16]
 80072c8:	4303      	orrs	r3, r0
 80072ca:	3401      	adds	r4, #1
 80072cc:	9304      	str	r3, [sp, #16]
 80072ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d2:	4826      	ldr	r0, [pc, #152]	; (800736c <_svfiprintf_r+0x1f0>)
 80072d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072d8:	2206      	movs	r2, #6
 80072da:	f7f8 ff81 	bl	80001e0 <memchr>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d038      	beq.n	8007354 <_svfiprintf_r+0x1d8>
 80072e2:	4b23      	ldr	r3, [pc, #140]	; (8007370 <_svfiprintf_r+0x1f4>)
 80072e4:	bb1b      	cbnz	r3, 800732e <_svfiprintf_r+0x1b2>
 80072e6:	9b03      	ldr	r3, [sp, #12]
 80072e8:	3307      	adds	r3, #7
 80072ea:	f023 0307 	bic.w	r3, r3, #7
 80072ee:	3308      	adds	r3, #8
 80072f0:	9303      	str	r3, [sp, #12]
 80072f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f4:	4433      	add	r3, r6
 80072f6:	9309      	str	r3, [sp, #36]	; 0x24
 80072f8:	e767      	b.n	80071ca <_svfiprintf_r+0x4e>
 80072fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80072fe:	460c      	mov	r4, r1
 8007300:	2001      	movs	r0, #1
 8007302:	e7a5      	b.n	8007250 <_svfiprintf_r+0xd4>
 8007304:	2300      	movs	r3, #0
 8007306:	3401      	adds	r4, #1
 8007308:	9305      	str	r3, [sp, #20]
 800730a:	4619      	mov	r1, r3
 800730c:	f04f 0c0a 	mov.w	ip, #10
 8007310:	4620      	mov	r0, r4
 8007312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007316:	3a30      	subs	r2, #48	; 0x30
 8007318:	2a09      	cmp	r2, #9
 800731a:	d903      	bls.n	8007324 <_svfiprintf_r+0x1a8>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0c5      	beq.n	80072ac <_svfiprintf_r+0x130>
 8007320:	9105      	str	r1, [sp, #20]
 8007322:	e7c3      	b.n	80072ac <_svfiprintf_r+0x130>
 8007324:	fb0c 2101 	mla	r1, ip, r1, r2
 8007328:	4604      	mov	r4, r0
 800732a:	2301      	movs	r3, #1
 800732c:	e7f0      	b.n	8007310 <_svfiprintf_r+0x194>
 800732e:	ab03      	add	r3, sp, #12
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	462a      	mov	r2, r5
 8007334:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <_svfiprintf_r+0x1f8>)
 8007336:	a904      	add	r1, sp, #16
 8007338:	4638      	mov	r0, r7
 800733a:	f3af 8000 	nop.w
 800733e:	1c42      	adds	r2, r0, #1
 8007340:	4606      	mov	r6, r0
 8007342:	d1d6      	bne.n	80072f2 <_svfiprintf_r+0x176>
 8007344:	89ab      	ldrh	r3, [r5, #12]
 8007346:	065b      	lsls	r3, r3, #25
 8007348:	f53f af2c 	bmi.w	80071a4 <_svfiprintf_r+0x28>
 800734c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800734e:	b01d      	add	sp, #116	; 0x74
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	ab03      	add	r3, sp, #12
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	462a      	mov	r2, r5
 800735a:	4b06      	ldr	r3, [pc, #24]	; (8007374 <_svfiprintf_r+0x1f8>)
 800735c:	a904      	add	r1, sp, #16
 800735e:	4638      	mov	r0, r7
 8007360:	f000 f87a 	bl	8007458 <_printf_i>
 8007364:	e7eb      	b.n	800733e <_svfiprintf_r+0x1c2>
 8007366:	bf00      	nop
 8007368:	080077a4 	.word	0x080077a4
 800736c:	080077ae 	.word	0x080077ae
 8007370:	00000000 	.word	0x00000000
 8007374:	080070c5 	.word	0x080070c5
 8007378:	080077aa 	.word	0x080077aa

0800737c <_printf_common>:
 800737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007380:	4616      	mov	r6, r2
 8007382:	4699      	mov	r9, r3
 8007384:	688a      	ldr	r2, [r1, #8]
 8007386:	690b      	ldr	r3, [r1, #16]
 8007388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800738c:	4293      	cmp	r3, r2
 800738e:	bfb8      	it	lt
 8007390:	4613      	movlt	r3, r2
 8007392:	6033      	str	r3, [r6, #0]
 8007394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007398:	4607      	mov	r7, r0
 800739a:	460c      	mov	r4, r1
 800739c:	b10a      	cbz	r2, 80073a2 <_printf_common+0x26>
 800739e:	3301      	adds	r3, #1
 80073a0:	6033      	str	r3, [r6, #0]
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	0699      	lsls	r1, r3, #26
 80073a6:	bf42      	ittt	mi
 80073a8:	6833      	ldrmi	r3, [r6, #0]
 80073aa:	3302      	addmi	r3, #2
 80073ac:	6033      	strmi	r3, [r6, #0]
 80073ae:	6825      	ldr	r5, [r4, #0]
 80073b0:	f015 0506 	ands.w	r5, r5, #6
 80073b4:	d106      	bne.n	80073c4 <_printf_common+0x48>
 80073b6:	f104 0a19 	add.w	sl, r4, #25
 80073ba:	68e3      	ldr	r3, [r4, #12]
 80073bc:	6832      	ldr	r2, [r6, #0]
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	42ab      	cmp	r3, r5
 80073c2:	dc26      	bgt.n	8007412 <_printf_common+0x96>
 80073c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073c8:	1e13      	subs	r3, r2, #0
 80073ca:	6822      	ldr	r2, [r4, #0]
 80073cc:	bf18      	it	ne
 80073ce:	2301      	movne	r3, #1
 80073d0:	0692      	lsls	r2, r2, #26
 80073d2:	d42b      	bmi.n	800742c <_printf_common+0xb0>
 80073d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073d8:	4649      	mov	r1, r9
 80073da:	4638      	mov	r0, r7
 80073dc:	47c0      	blx	r8
 80073de:	3001      	adds	r0, #1
 80073e0:	d01e      	beq.n	8007420 <_printf_common+0xa4>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	68e5      	ldr	r5, [r4, #12]
 80073e6:	6832      	ldr	r2, [r6, #0]
 80073e8:	f003 0306 	and.w	r3, r3, #6
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	bf08      	it	eq
 80073f0:	1aad      	subeq	r5, r5, r2
 80073f2:	68a3      	ldr	r3, [r4, #8]
 80073f4:	6922      	ldr	r2, [r4, #16]
 80073f6:	bf0c      	ite	eq
 80073f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073fc:	2500      	movne	r5, #0
 80073fe:	4293      	cmp	r3, r2
 8007400:	bfc4      	itt	gt
 8007402:	1a9b      	subgt	r3, r3, r2
 8007404:	18ed      	addgt	r5, r5, r3
 8007406:	2600      	movs	r6, #0
 8007408:	341a      	adds	r4, #26
 800740a:	42b5      	cmp	r5, r6
 800740c:	d11a      	bne.n	8007444 <_printf_common+0xc8>
 800740e:	2000      	movs	r0, #0
 8007410:	e008      	b.n	8007424 <_printf_common+0xa8>
 8007412:	2301      	movs	r3, #1
 8007414:	4652      	mov	r2, sl
 8007416:	4649      	mov	r1, r9
 8007418:	4638      	mov	r0, r7
 800741a:	47c0      	blx	r8
 800741c:	3001      	adds	r0, #1
 800741e:	d103      	bne.n	8007428 <_printf_common+0xac>
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
 8007424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007428:	3501      	adds	r5, #1
 800742a:	e7c6      	b.n	80073ba <_printf_common+0x3e>
 800742c:	18e1      	adds	r1, r4, r3
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	2030      	movs	r0, #48	; 0x30
 8007432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007436:	4422      	add	r2, r4
 8007438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800743c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007440:	3302      	adds	r3, #2
 8007442:	e7c7      	b.n	80073d4 <_printf_common+0x58>
 8007444:	2301      	movs	r3, #1
 8007446:	4622      	mov	r2, r4
 8007448:	4649      	mov	r1, r9
 800744a:	4638      	mov	r0, r7
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d0e6      	beq.n	8007420 <_printf_common+0xa4>
 8007452:	3601      	adds	r6, #1
 8007454:	e7d9      	b.n	800740a <_printf_common+0x8e>
	...

08007458 <_printf_i>:
 8007458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800745c:	7e0f      	ldrb	r7, [r1, #24]
 800745e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007460:	2f78      	cmp	r7, #120	; 0x78
 8007462:	4691      	mov	r9, r2
 8007464:	4680      	mov	r8, r0
 8007466:	460c      	mov	r4, r1
 8007468:	469a      	mov	sl, r3
 800746a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800746e:	d807      	bhi.n	8007480 <_printf_i+0x28>
 8007470:	2f62      	cmp	r7, #98	; 0x62
 8007472:	d80a      	bhi.n	800748a <_printf_i+0x32>
 8007474:	2f00      	cmp	r7, #0
 8007476:	f000 80d8 	beq.w	800762a <_printf_i+0x1d2>
 800747a:	2f58      	cmp	r7, #88	; 0x58
 800747c:	f000 80a3 	beq.w	80075c6 <_printf_i+0x16e>
 8007480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007488:	e03a      	b.n	8007500 <_printf_i+0xa8>
 800748a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800748e:	2b15      	cmp	r3, #21
 8007490:	d8f6      	bhi.n	8007480 <_printf_i+0x28>
 8007492:	a101      	add	r1, pc, #4	; (adr r1, 8007498 <_printf_i+0x40>)
 8007494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007498:	080074f1 	.word	0x080074f1
 800749c:	08007505 	.word	0x08007505
 80074a0:	08007481 	.word	0x08007481
 80074a4:	08007481 	.word	0x08007481
 80074a8:	08007481 	.word	0x08007481
 80074ac:	08007481 	.word	0x08007481
 80074b0:	08007505 	.word	0x08007505
 80074b4:	08007481 	.word	0x08007481
 80074b8:	08007481 	.word	0x08007481
 80074bc:	08007481 	.word	0x08007481
 80074c0:	08007481 	.word	0x08007481
 80074c4:	08007611 	.word	0x08007611
 80074c8:	08007535 	.word	0x08007535
 80074cc:	080075f3 	.word	0x080075f3
 80074d0:	08007481 	.word	0x08007481
 80074d4:	08007481 	.word	0x08007481
 80074d8:	08007633 	.word	0x08007633
 80074dc:	08007481 	.word	0x08007481
 80074e0:	08007535 	.word	0x08007535
 80074e4:	08007481 	.word	0x08007481
 80074e8:	08007481 	.word	0x08007481
 80074ec:	080075fb 	.word	0x080075fb
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	1d1a      	adds	r2, r3, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	602a      	str	r2, [r5, #0]
 80074f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007500:	2301      	movs	r3, #1
 8007502:	e0a3      	b.n	800764c <_printf_i+0x1f4>
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	6829      	ldr	r1, [r5, #0]
 8007508:	0606      	lsls	r6, r0, #24
 800750a:	f101 0304 	add.w	r3, r1, #4
 800750e:	d50a      	bpl.n	8007526 <_printf_i+0xce>
 8007510:	680e      	ldr	r6, [r1, #0]
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	2e00      	cmp	r6, #0
 8007516:	da03      	bge.n	8007520 <_printf_i+0xc8>
 8007518:	232d      	movs	r3, #45	; 0x2d
 800751a:	4276      	negs	r6, r6
 800751c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007520:	485e      	ldr	r0, [pc, #376]	; (800769c <_printf_i+0x244>)
 8007522:	230a      	movs	r3, #10
 8007524:	e019      	b.n	800755a <_printf_i+0x102>
 8007526:	680e      	ldr	r6, [r1, #0]
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800752e:	bf18      	it	ne
 8007530:	b236      	sxthne	r6, r6
 8007532:	e7ef      	b.n	8007514 <_printf_i+0xbc>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	1d19      	adds	r1, r3, #4
 800753a:	6029      	str	r1, [r5, #0]
 800753c:	0601      	lsls	r1, r0, #24
 800753e:	d501      	bpl.n	8007544 <_printf_i+0xec>
 8007540:	681e      	ldr	r6, [r3, #0]
 8007542:	e002      	b.n	800754a <_printf_i+0xf2>
 8007544:	0646      	lsls	r6, r0, #25
 8007546:	d5fb      	bpl.n	8007540 <_printf_i+0xe8>
 8007548:	881e      	ldrh	r6, [r3, #0]
 800754a:	4854      	ldr	r0, [pc, #336]	; (800769c <_printf_i+0x244>)
 800754c:	2f6f      	cmp	r7, #111	; 0x6f
 800754e:	bf0c      	ite	eq
 8007550:	2308      	moveq	r3, #8
 8007552:	230a      	movne	r3, #10
 8007554:	2100      	movs	r1, #0
 8007556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800755a:	6865      	ldr	r5, [r4, #4]
 800755c:	60a5      	str	r5, [r4, #8]
 800755e:	2d00      	cmp	r5, #0
 8007560:	bfa2      	ittt	ge
 8007562:	6821      	ldrge	r1, [r4, #0]
 8007564:	f021 0104 	bicge.w	r1, r1, #4
 8007568:	6021      	strge	r1, [r4, #0]
 800756a:	b90e      	cbnz	r6, 8007570 <_printf_i+0x118>
 800756c:	2d00      	cmp	r5, #0
 800756e:	d04d      	beq.n	800760c <_printf_i+0x1b4>
 8007570:	4615      	mov	r5, r2
 8007572:	fbb6 f1f3 	udiv	r1, r6, r3
 8007576:	fb03 6711 	mls	r7, r3, r1, r6
 800757a:	5dc7      	ldrb	r7, [r0, r7]
 800757c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007580:	4637      	mov	r7, r6
 8007582:	42bb      	cmp	r3, r7
 8007584:	460e      	mov	r6, r1
 8007586:	d9f4      	bls.n	8007572 <_printf_i+0x11a>
 8007588:	2b08      	cmp	r3, #8
 800758a:	d10b      	bne.n	80075a4 <_printf_i+0x14c>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	07de      	lsls	r6, r3, #31
 8007590:	d508      	bpl.n	80075a4 <_printf_i+0x14c>
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	6861      	ldr	r1, [r4, #4]
 8007596:	4299      	cmp	r1, r3
 8007598:	bfde      	ittt	le
 800759a:	2330      	movle	r3, #48	; 0x30
 800759c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075a4:	1b52      	subs	r2, r2, r5
 80075a6:	6122      	str	r2, [r4, #16]
 80075a8:	f8cd a000 	str.w	sl, [sp]
 80075ac:	464b      	mov	r3, r9
 80075ae:	aa03      	add	r2, sp, #12
 80075b0:	4621      	mov	r1, r4
 80075b2:	4640      	mov	r0, r8
 80075b4:	f7ff fee2 	bl	800737c <_printf_common>
 80075b8:	3001      	adds	r0, #1
 80075ba:	d14c      	bne.n	8007656 <_printf_i+0x1fe>
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
 80075c0:	b004      	add	sp, #16
 80075c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c6:	4835      	ldr	r0, [pc, #212]	; (800769c <_printf_i+0x244>)
 80075c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075cc:	6829      	ldr	r1, [r5, #0]
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80075d4:	6029      	str	r1, [r5, #0]
 80075d6:	061d      	lsls	r5, r3, #24
 80075d8:	d514      	bpl.n	8007604 <_printf_i+0x1ac>
 80075da:	07df      	lsls	r7, r3, #31
 80075dc:	bf44      	itt	mi
 80075de:	f043 0320 	orrmi.w	r3, r3, #32
 80075e2:	6023      	strmi	r3, [r4, #0]
 80075e4:	b91e      	cbnz	r6, 80075ee <_printf_i+0x196>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	f023 0320 	bic.w	r3, r3, #32
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	2310      	movs	r3, #16
 80075f0:	e7b0      	b.n	8007554 <_printf_i+0xfc>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	f043 0320 	orr.w	r3, r3, #32
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	2378      	movs	r3, #120	; 0x78
 80075fc:	4828      	ldr	r0, [pc, #160]	; (80076a0 <_printf_i+0x248>)
 80075fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007602:	e7e3      	b.n	80075cc <_printf_i+0x174>
 8007604:	0659      	lsls	r1, r3, #25
 8007606:	bf48      	it	mi
 8007608:	b2b6      	uxthmi	r6, r6
 800760a:	e7e6      	b.n	80075da <_printf_i+0x182>
 800760c:	4615      	mov	r5, r2
 800760e:	e7bb      	b.n	8007588 <_printf_i+0x130>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	6826      	ldr	r6, [r4, #0]
 8007614:	6961      	ldr	r1, [r4, #20]
 8007616:	1d18      	adds	r0, r3, #4
 8007618:	6028      	str	r0, [r5, #0]
 800761a:	0635      	lsls	r5, r6, #24
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	d501      	bpl.n	8007624 <_printf_i+0x1cc>
 8007620:	6019      	str	r1, [r3, #0]
 8007622:	e002      	b.n	800762a <_printf_i+0x1d2>
 8007624:	0670      	lsls	r0, r6, #25
 8007626:	d5fb      	bpl.n	8007620 <_printf_i+0x1c8>
 8007628:	8019      	strh	r1, [r3, #0]
 800762a:	2300      	movs	r3, #0
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	4615      	mov	r5, r2
 8007630:	e7ba      	b.n	80075a8 <_printf_i+0x150>
 8007632:	682b      	ldr	r3, [r5, #0]
 8007634:	1d1a      	adds	r2, r3, #4
 8007636:	602a      	str	r2, [r5, #0]
 8007638:	681d      	ldr	r5, [r3, #0]
 800763a:	6862      	ldr	r2, [r4, #4]
 800763c:	2100      	movs	r1, #0
 800763e:	4628      	mov	r0, r5
 8007640:	f7f8 fdce 	bl	80001e0 <memchr>
 8007644:	b108      	cbz	r0, 800764a <_printf_i+0x1f2>
 8007646:	1b40      	subs	r0, r0, r5
 8007648:	6060      	str	r0, [r4, #4]
 800764a:	6863      	ldr	r3, [r4, #4]
 800764c:	6123      	str	r3, [r4, #16]
 800764e:	2300      	movs	r3, #0
 8007650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007654:	e7a8      	b.n	80075a8 <_printf_i+0x150>
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	462a      	mov	r2, r5
 800765a:	4649      	mov	r1, r9
 800765c:	4640      	mov	r0, r8
 800765e:	47d0      	blx	sl
 8007660:	3001      	adds	r0, #1
 8007662:	d0ab      	beq.n	80075bc <_printf_i+0x164>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	079b      	lsls	r3, r3, #30
 8007668:	d413      	bmi.n	8007692 <_printf_i+0x23a>
 800766a:	68e0      	ldr	r0, [r4, #12]
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	4298      	cmp	r0, r3
 8007670:	bfb8      	it	lt
 8007672:	4618      	movlt	r0, r3
 8007674:	e7a4      	b.n	80075c0 <_printf_i+0x168>
 8007676:	2301      	movs	r3, #1
 8007678:	4632      	mov	r2, r6
 800767a:	4649      	mov	r1, r9
 800767c:	4640      	mov	r0, r8
 800767e:	47d0      	blx	sl
 8007680:	3001      	adds	r0, #1
 8007682:	d09b      	beq.n	80075bc <_printf_i+0x164>
 8007684:	3501      	adds	r5, #1
 8007686:	68e3      	ldr	r3, [r4, #12]
 8007688:	9903      	ldr	r1, [sp, #12]
 800768a:	1a5b      	subs	r3, r3, r1
 800768c:	42ab      	cmp	r3, r5
 800768e:	dcf2      	bgt.n	8007676 <_printf_i+0x21e>
 8007690:	e7eb      	b.n	800766a <_printf_i+0x212>
 8007692:	2500      	movs	r5, #0
 8007694:	f104 0619 	add.w	r6, r4, #25
 8007698:	e7f5      	b.n	8007686 <_printf_i+0x22e>
 800769a:	bf00      	nop
 800769c:	080077b5 	.word	0x080077b5
 80076a0:	080077c6 	.word	0x080077c6

080076a4 <__retarget_lock_acquire_recursive>:
 80076a4:	4770      	bx	lr

080076a6 <__retarget_lock_release_recursive>:
 80076a6:	4770      	bx	lr

080076a8 <memmove>:
 80076a8:	4288      	cmp	r0, r1
 80076aa:	b510      	push	{r4, lr}
 80076ac:	eb01 0402 	add.w	r4, r1, r2
 80076b0:	d902      	bls.n	80076b8 <memmove+0x10>
 80076b2:	4284      	cmp	r4, r0
 80076b4:	4623      	mov	r3, r4
 80076b6:	d807      	bhi.n	80076c8 <memmove+0x20>
 80076b8:	1e43      	subs	r3, r0, #1
 80076ba:	42a1      	cmp	r1, r4
 80076bc:	d008      	beq.n	80076d0 <memmove+0x28>
 80076be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076c6:	e7f8      	b.n	80076ba <memmove+0x12>
 80076c8:	4402      	add	r2, r0
 80076ca:	4601      	mov	r1, r0
 80076cc:	428a      	cmp	r2, r1
 80076ce:	d100      	bne.n	80076d2 <memmove+0x2a>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076da:	e7f7      	b.n	80076cc <memmove+0x24>

080076dc <_realloc_r>:
 80076dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e0:	4680      	mov	r8, r0
 80076e2:	4614      	mov	r4, r2
 80076e4:	460e      	mov	r6, r1
 80076e6:	b921      	cbnz	r1, 80076f2 <_realloc_r+0x16>
 80076e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ec:	4611      	mov	r1, r2
 80076ee:	f7ff bc31 	b.w	8006f54 <_malloc_r>
 80076f2:	b92a      	cbnz	r2, 8007700 <_realloc_r+0x24>
 80076f4:	f7ff fbc2 	bl	8006e7c <_free_r>
 80076f8:	4625      	mov	r5, r4
 80076fa:	4628      	mov	r0, r5
 80076fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007700:	f000 f81b 	bl	800773a <_malloc_usable_size_r>
 8007704:	4284      	cmp	r4, r0
 8007706:	4607      	mov	r7, r0
 8007708:	d802      	bhi.n	8007710 <_realloc_r+0x34>
 800770a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800770e:	d812      	bhi.n	8007736 <_realloc_r+0x5a>
 8007710:	4621      	mov	r1, r4
 8007712:	4640      	mov	r0, r8
 8007714:	f7ff fc1e 	bl	8006f54 <_malloc_r>
 8007718:	4605      	mov	r5, r0
 800771a:	2800      	cmp	r0, #0
 800771c:	d0ed      	beq.n	80076fa <_realloc_r+0x1e>
 800771e:	42bc      	cmp	r4, r7
 8007720:	4622      	mov	r2, r4
 8007722:	4631      	mov	r1, r6
 8007724:	bf28      	it	cs
 8007726:	463a      	movcs	r2, r7
 8007728:	f7ff fb92 	bl	8006e50 <memcpy>
 800772c:	4631      	mov	r1, r6
 800772e:	4640      	mov	r0, r8
 8007730:	f7ff fba4 	bl	8006e7c <_free_r>
 8007734:	e7e1      	b.n	80076fa <_realloc_r+0x1e>
 8007736:	4635      	mov	r5, r6
 8007738:	e7df      	b.n	80076fa <_realloc_r+0x1e>

0800773a <_malloc_usable_size_r>:
 800773a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800773e:	1f18      	subs	r0, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	bfbc      	itt	lt
 8007744:	580b      	ldrlt	r3, [r1, r0]
 8007746:	18c0      	addlt	r0, r0, r3
 8007748:	4770      	bx	lr
	...

0800774c <_init>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	bf00      	nop
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr

08007758 <_fini>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	bf00      	nop
 800775c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775e:	bc08      	pop	{r3}
 8007760:	469e      	mov	lr, r3
 8007762:	4770      	bx	lr
