
NSGV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800ad78  0800ad78  0001ad78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1b4  0800b1b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1b4  0800b1b4  0001b1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1bc  0800b1bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1bc  0800b1bc  0001b1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1c0  0800b1c0  0001b1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000314  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f0  200004f0  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e99  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a13  00000000  00000000  000370a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  00039ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013d8  00000000  00000000  0003af80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022882  00000000  00000000  0003c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e41  00000000  00000000  0005ebda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d52c0  00000000  00000000  00076a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014bcdb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b7c  00000000  00000000  0014bd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad5c 	.word	0x0800ad5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800ad5c 	.word	0x0800ad5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
void dmsg(char *msg);

int main(void)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b0a9      	sub	sp, #164	; 0xa4
 8000eb0:	af02      	add	r7, sp, #8
	char msg[100];
	double freq[3]={0}, duty_cycle[3]={0};
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	615a      	str	r2, [r3, #20]
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	615a      	str	r2, [r3, #20]
   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ed4:	f001 f9d0 	bl	8002278 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000ed8:	f000 f9be 	bl	8001258 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000edc:	f000 fcac 	bl	8001838 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000ee0:	f000 fbbe 	bl	8001660 <MX_CAN1_Init>
	MX_SPI1_Init();
 8000ee4:	f000 fc1e 	bl	8001724 <MX_SPI1_Init>
	MX_ADC1_Init();
 8000ee8:	f000 fb68 	bl	80015bc <MX_ADC1_Init>
	MX_I2C2_Init();
 8000eec:	f000 fbec 	bl	80016c8 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000ef0:	f000 fc4e 	bl	8001790 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000ef4:	f000 fc76 	bl	80017e4 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000ef8:	f000 fa1e 	bl	8001338 <MX_TIM2_Init>
	MX_TIM5_Init();
 8000efc:	f000 fa86 	bl	800140c <MX_TIM5_Init>
	MX_TIM9_Init();
 8000f00:	f000 faf0 	bl	80014e4 <MX_TIM9_Init>

	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8000f04:	2100      	movs	r1, #0
 8000f06:	4863      	ldr	r0, [pc, #396]	; (8001094 <main+0x1e8>)
 8000f08:	f005 f96a 	bl	80061e0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4861      	ldr	r0, [pc, #388]	; (8001094 <main+0x1e8>)
 8000f10:	f005 f966 	bl	80061e0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_1);
 8000f14:	2100      	movs	r1, #0
 8000f16:	4860      	ldr	r0, [pc, #384]	; (8001098 <main+0x1ec>)
 8000f18:	f005 f962 	bl	80061e0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_2);
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	485e      	ldr	r0, [pc, #376]	; (8001098 <main+0x1ec>)
 8000f20:	f005 f95e 	bl	80061e0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim9,TIM_CHANNEL_1);
 8000f24:	2100      	movs	r1, #0
 8000f26:	485d      	ldr	r0, [pc, #372]	; (800109c <main+0x1f0>)
 8000f28:	f005 f95a 	bl	80061e0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim9,TIM_CHANNEL_2);
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	485b      	ldr	r0, [pc, #364]	; (800109c <main+0x1f0>)
 8000f30:	f005 f956 	bl	80061e0 <HAL_TIM_IC_Start_IT>

	uart= huart1;
 8000f34:	4a5a      	ldr	r2, [pc, #360]	; (80010a0 <main+0x1f4>)
 8000f36:	4b5b      	ldr	r3, [pc, #364]	; (80010a4 <main+0x1f8>)
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2344      	movs	r3, #68	; 0x44
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f007 f822 	bl	8007f88 <memcpy>

	while (1)
	{
		memset(msg,0,sizeof(msg));
 8000f44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f48:	2264      	movs	r2, #100	; 0x64
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f007 f829 	bl	8007fa4 <memset>
		sprintf(msg,"Switch Input: %d",HAL_GPIO_ReadPin(GPIOC, PINC_SWITCH));
 8000f52:	2101      	movs	r1, #1
 8000f54:	4854      	ldr	r0, [pc, #336]	; (80010a8 <main+0x1fc>)
 8000f56:	f002 fc47 	bl	80037e8 <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f62:	4952      	ldr	r1, [pc, #328]	; (80010ac <main+0x200>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f007 fd7f 	bl	8008a68 <siprintf>
		dmsg(msg);
 8000f6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f940 	bl	80011f4 <dmsg>
		memset(msg,0,sizeof(msg));
 8000f74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f78:	2264      	movs	r2, #100	; 0x64
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f007 f811 	bl	8007fa4 <memset>
		sprintf(msg,"State Input: %d",HAL_GPIO_ReadPin(GPIOB, PINB_STATE));
 8000f82:	2102      	movs	r1, #2
 8000f84:	484a      	ldr	r0, [pc, #296]	; (80010b0 <main+0x204>)
 8000f86:	f002 fc2f 	bl	80037e8 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f92:	4948      	ldr	r1, [pc, #288]	; (80010b4 <main+0x208>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f007 fd67 	bl	8008a68 <siprintf>
		dmsg(msg);
 8000f9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f928 	bl	80011f4 <dmsg>
		for (int i=0; i<3; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000faa:	e069      	b.n	8001080 <main+0x1d4>
		{
			if (freq_update[i]==1)
 8000fac:	4a42      	ldr	r2, [pc, #264]	; (80010b8 <main+0x20c>)
 8000fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fb2:	4413      	add	r3, r2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d137      	bne.n	800102a <main+0x17e>
			{
				freq[i]= 1000000/tim_capture[i][0];
 8000fba:	4a40      	ldr	r2, [pc, #256]	; (80010bc <main+0x210>)
 8000fbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fc4:	4a3e      	ldr	r2, [pc, #248]	; (80010c0 <main+0x214>)
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fa9a 	bl	8000504 <__aeabi_ui2d>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000fd8:	00c9      	lsls	r1, r1, #3
 8000fda:	3198      	adds	r1, #152	; 0x98
 8000fdc:	4439      	add	r1, r7
 8000fde:	3980      	subs	r1, #128	; 0x80
 8000fe0:	e9c1 2300 	strd	r2, r3, [r1]
				duty_cycle[i]= (tim_capture[i][1]/tim_capture[i][0])*100;
 8000fe4:	4a35      	ldr	r2, [pc, #212]	; (80010bc <main+0x210>)
 8000fe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4932      	ldr	r1, [pc, #200]	; (80010bc <main+0x210>)
 8000ff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ff6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	2264      	movs	r2, #100	; 0x64
 8001000:	fb02 f303 	mul.w	r3, r2, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fa7d 	bl	8000504 <__aeabi_ui2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001012:	00c9      	lsls	r1, r1, #3
 8001014:	3198      	adds	r1, #152	; 0x98
 8001016:	4439      	add	r1, r7
 8001018:	3998      	subs	r1, #152	; 0x98
 800101a:	e9c1 2300 	strd	r2, r3, [r1]
				freq_update[i]=0;
 800101e:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <main+0x20c>)
 8001020:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001024:	4413      	add	r3, r2
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
			}
			memset(msg,0,sizeof(msg));
 800102a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800102e:	2264      	movs	r2, #100	; 0x64
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f006 ffb6 	bl	8007fa4 <memset>
			sprintf(msg,"Frequency3: %.2f   Duty Cycle: %.2f", freq[i],duty_cycle[i]);
 8001038:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	3398      	adds	r3, #152	; 0x98
 8001040:	443b      	add	r3, r7
 8001042:	3b80      	subs	r3, #128	; 0x80
 8001044:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001048:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	3398      	adds	r3, #152	; 0x98
 8001050:	443b      	add	r3, r7
 8001052:	3b98      	subs	r3, #152	; 0x98
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800105c:	e9cd 2300 	strd	r2, r3, [sp]
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4917      	ldr	r1, [pc, #92]	; (80010c4 <main+0x218>)
 8001066:	4620      	mov	r0, r4
 8001068:	f007 fcfe 	bl	8008a68 <siprintf>
			dmsg(msg);
 800106c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f8bf 	bl	80011f4 <dmsg>
		for (int i=0; i<3; i++)
 8001076:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800107a:	3301      	adds	r3, #1
 800107c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001080:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001084:	2b02      	cmp	r3, #2
 8001086:	dd91      	ble.n	8000fac <main+0x100>
		}


		HAL_Delay(1000);
 8001088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108c:	f001 f966 	bl	800235c <HAL_Delay>
		memset(msg,0,sizeof(msg));
 8001090:	e758      	b.n	8000f44 <main+0x98>
 8001092:	bf00      	nop
 8001094:	2000039c 	.word	0x2000039c
 8001098:	200003e4 	.word	0x200003e4
 800109c:	2000042c 	.word	0x2000042c
 80010a0:	20000494 	.word	0x20000494
 80010a4:	20000314 	.word	0x20000314
 80010a8:	40020800 	.word	0x40020800
 80010ac:	0800ad78 	.word	0x0800ad78
 80010b0:	40020400 	.word	0x40020400
 80010b4:	0800ad8c 	.word	0x0800ad8c
 80010b8:	20000490 	.word	0x20000490
 80010bc:	20000478 	.word	0x20000478
 80010c0:	000f4240 	.word	0x000f4240
 80010c4:	0800ad9c 	.word	0x0800ad9c

080010c8 <HAL_TIM_IC_CaptureCallback>:
	}
	return 0;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d8:	d119      	bne.n	800110e <HAL_TIM_IC_CaptureCallback+0x46>
	{
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7f1b      	ldrb	r3, [r3, #28]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d152      	bne.n	8001188 <HAL_TIM_IC_CaptureCallback+0xc0>
		{
			tim_capture[2][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010e2:	2100      	movs	r1, #0
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f005 fb89 	bl	80067fc <HAL_TIM_ReadCapturedValue>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a28      	ldr	r2, [pc, #160]	; (8001190 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80010ee:	6113      	str	r3, [r2, #16]
			if (tim_capture[2][0]!= 0)
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d047      	beq.n	8001188 <HAL_TIM_IC_CaptureCallback+0xc0>
			{
				tim_capture[2][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80010f8:	2104      	movs	r1, #4
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f005 fb7e 	bl	80067fc <HAL_TIM_ReadCapturedValue>
 8001100:	4603      	mov	r3, r0
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001104:	6153      	str	r3, [r2, #20]
				freq_update[2]=1;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001108:	2201      	movs	r2, #1
 800110a:	709a      	strb	r2, [r3, #2]
				tim_capture[0][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
				freq_update[0]=1;
			}
		}
	}
}
 800110c:	e03c      	b.n	8001188 <HAL_TIM_IC_CaptureCallback+0xc0>
	else if(htim->Instance==TIM5)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a21      	ldr	r2, [pc, #132]	; (8001198 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d119      	bne.n	800114c <HAL_TIM_IC_CaptureCallback+0x84>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7f1b      	ldrb	r3, [r3, #28]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d133      	bne.n	8001188 <HAL_TIM_IC_CaptureCallback+0xc0>
			tim_capture[1][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001120:	2104      	movs	r1, #4
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f005 fb6a 	bl	80067fc <HAL_TIM_ReadCapturedValue>
 8001128:	4603      	mov	r3, r0
 800112a:	4a19      	ldr	r2, [pc, #100]	; (8001190 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800112c:	6093      	str	r3, [r2, #8]
			if (tim_capture[1][0]!= 0)
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d028      	beq.n	8001188 <HAL_TIM_IC_CaptureCallback+0xc0>
				tim_capture[1][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001136:	2100      	movs	r1, #0
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f005 fb5f 	bl	80067fc <HAL_TIM_ReadCapturedValue>
 800113e:	4603      	mov	r3, r0
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001142:	60d3      	str	r3, [r2, #12]
				freq_update[1]=1;
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001146:	2201      	movs	r2, #1
 8001148:	705a      	strb	r2, [r3, #1]
}
 800114a:	e01d      	b.n	8001188 <HAL_TIM_IC_CaptureCallback+0xc0>
	else if(htim->Instance==TIM9)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d118      	bne.n	8001188 <HAL_TIM_IC_CaptureCallback+0xc0>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7f1b      	ldrb	r3, [r3, #28]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d114      	bne.n	8001188 <HAL_TIM_IC_CaptureCallback+0xc0>
			tim_capture[0][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800115e:	2100      	movs	r1, #0
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f005 fb4b 	bl	80067fc <HAL_TIM_ReadCapturedValue>
 8001166:	4603      	mov	r3, r0
 8001168:	4a09      	ldr	r2, [pc, #36]	; (8001190 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800116a:	6013      	str	r3, [r2, #0]
			if (tim_capture[0][0]!= 0)
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d009      	beq.n	8001188 <HAL_TIM_IC_CaptureCallback+0xc0>
				tim_capture[0][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001174:	2104      	movs	r1, #4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f005 fb40 	bl	80067fc <HAL_TIM_ReadCapturedValue>
 800117c:	4603      	mov	r3, r0
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001180:	6053      	str	r3, [r2, #4]
				freq_update[0]=1;
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000478 	.word	0x20000478
 8001194:	20000490 	.word	0x20000490
 8001198:	40000c00 	.word	0x40000c00
 800119c:	40014000 	.word	0x40014000

080011a0 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	uint16_t PIN_LED = PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED;
 80011a6:	231e      	movs	r3, #30
 80011a8:	80fb      	strh	r3, [r7, #6]
	if (HAL_GetTick()- tick >=1000)
 80011aa:	f001 f8cb 	bl	8002344 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_SYSTICK_Callback+0x48>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ba:	d310      	bcc.n	80011de <HAL_SYSTICK_Callback+0x3e>
	{
		tick = HAL_GetTick();
 80011bc:	f001 f8c2 	bl	8002344 <HAL_GetTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <HAL_SYSTICK_Callback+0x48>)
 80011c4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC,PINC_HEART|PIN_LED);
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	4806      	ldr	r0, [pc, #24]	; (80011ec <HAL_SYSTICK_Callback+0x4c>)
 80011d2:	f002 fb3a 	bl	800384a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, PINB_EN);
 80011d6:	2101      	movs	r1, #1
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_SYSTICK_Callback+0x50>)
 80011da:	f002 fb36 	bl	800384a <HAL_GPIO_TogglePin>
	}
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000474 	.word	0x20000474
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020400 	.word	0x40020400

080011f4 <dmsg>:

void dmsg(char *msg)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	char *str = malloc(strlen(msg) + 3);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7fe ffe7 	bl	80001d0 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	3303      	adds	r3, #3
 8001206:	4618      	mov	r0, r3
 8001208:	f006 feb6 	bl	8007f78 <malloc>
 800120c:	4603      	mov	r3, r0
 800120e:	60fb      	str	r3, [r7, #12]
	strcpy(str, msg);
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f007 fc48 	bl	8008aa8 <strcpy>
	strcat(str, "\r\n");
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7fe ffd9 	bl	80001d0 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4413      	add	r3, r2
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <dmsg+0x5c>)
 8001228:	8811      	ldrh	r1, [r2, #0]
 800122a:	7892      	ldrb	r2, [r2, #2]
 800122c:	8019      	strh	r1, [r3, #0]
 800122e:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7fe ffcd 	bl	80001d0 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	68f9      	ldr	r1, [r7, #12]
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <dmsg+0x60>)
 8001242:	f005 fea8 	bl	8006f96 <HAL_UART_Transmit>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	0800adc0 	.word	0x0800adc0
 8001254:	20000494 	.word	0x20000494

08001258 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	; 0x50
 800125c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2230      	movs	r2, #48	; 0x30
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f006 fe9c 	bl	8007fa4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <SystemClock_Config+0xd4>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	4a29      	ldr	r2, [pc, #164]	; (800132c <SystemClock_Config+0xd4>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	; 0x40
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <SystemClock_Config+0xd4>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <SystemClock_Config+0xd8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a23      	ldr	r2, [pc, #140]	; (8001330 <SystemClock_Config+0xd8>)
 80012a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <SystemClock_Config+0xd8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 320;
 80012cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d2:	2302      	movs	r3, #2
 80012d4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d6:	2304      	movs	r3, #4
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	4618      	mov	r0, r3
 80012e0:	f004 f8ee 	bl	80054c0 <HAL_RCC_OscConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x96>
	{
		Error_Handler();
 80012ea:	f000 fb37 	bl	800195c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2302      	movs	r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012fe:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001304:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2105      	movs	r1, #5
 800130c:	4618      	mov	r0, r3
 800130e:	f004 fb4f 	bl	80059b0 <HAL_RCC_ClockConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001318:	f000 fb20 	bl	800195c <Error_Handler>
	}
	__HAL_RCC_HSI_DISABLE();
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SystemClock_Config+0xdc>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	3750      	adds	r7, #80	; 0x50
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000
 8001334:	42470000 	.word	0x42470000

08001338 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]

	htim2.Instance = TIM2;
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <MX_TIM2_Init+0xd0>)
 800135c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001360:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80;
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <MX_TIM2_Init+0xd0>)
 8001364:	2250      	movs	r2, #80	; 0x50
 8001366:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <MX_TIM2_Init+0xd0>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <MX_TIM2_Init+0xd0>)
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <MX_TIM2_Init+0xd0>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <MX_TIM2_Init+0xd0>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <MX_TIM2_Init+0xd0>)
 8001384:	f004 fedc 	bl	8006140 <HAL_TIM_IC_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 800138e:	f000 fae5 	bl	800195c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001392:	2304      	movs	r3, #4
 8001394:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001396:	2350      	movs	r3, #80	; 0x50
 8001398:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4816      	ldr	r0, [pc, #88]	; (8001408 <MX_TIM2_Init+0xd0>)
 80013ae:	f005 f9e3 	bl	8006778 <HAL_TIM_SlaveConfigSynchro>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 80013b8:	f000 fad0 	bl	800195c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013c0:	2301      	movs	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_TIM2_Init+0xd0>)
 80013d4:	f005 f934 	bl	8006640 <HAL_TIM_IC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0xaa>
	{
		Error_Handler();
 80013de:	f000 fabd 	bl	800195c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013e2:	2302      	movs	r3, #2
 80013e4:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80013e6:	2302      	movs	r3, #2
 80013e8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2204      	movs	r2, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM2_Init+0xd0>)
 80013f2:	f005 f925 	bl	8006640 <HAL_TIM_IC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0xc8>
	{
		Error_Handler();
 80013fc:	f000 faae 	bl	800195c <Error_Handler>
	}
}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000039c 	.word	0x2000039c

0800140c <MX_TIM5_Init>:

static void MX_TIM5_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]

	htim5.Instance = TIM5;
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <MX_TIM5_Init+0xd0>)
 8001430:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <MX_TIM5_Init+0xd4>)
 8001432:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 80;
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <MX_TIM5_Init+0xd0>)
 8001436:	2250      	movs	r2, #80	; 0x50
 8001438:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <MX_TIM5_Init+0xd0>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 0xFFFFFFFF;
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <MX_TIM5_Init+0xd0>)
 8001442:	f04f 32ff 	mov.w	r2, #4294967295
 8001446:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b24      	ldr	r3, [pc, #144]	; (80014dc <MX_TIM5_Init+0xd0>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <MX_TIM5_Init+0xd0>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001454:	4821      	ldr	r0, [pc, #132]	; (80014dc <MX_TIM5_Init+0xd0>)
 8001456:	f004 fe73 	bl	8006140 <HAL_TIM_IC_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM5_Init+0x58>
	{
		Error_Handler();
 8001460:	f000 fa7c 	bl	800195c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001464:	2304      	movs	r3, #4
 8001466:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001468:	2360      	movs	r3, #96	; 0x60
 800146a:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4817      	ldr	r0, [pc, #92]	; (80014dc <MX_TIM5_Init+0xd0>)
 8001480:	f005 f97a 	bl	8006778 <HAL_TIM_SlaveConfigSynchro>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM5_Init+0x82>
	{
		Error_Handler();
 800148a:	f000 fa67 	bl	800195c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800148e:	2302      	movs	r3, #2
 8001490:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001492:	2302      	movs	r3, #2
 8001494:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	4619      	mov	r1, r3
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <MX_TIM5_Init+0xd0>)
 80014a6:	f005 f8cb 	bl	8006640 <HAL_TIM_IC_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM5_Init+0xa8>
	{
		Error_Handler();
 80014b0:	f000 fa54 	bl	800195c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014b8:	2301      	movs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2204      	movs	r2, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_TIM5_Init+0xd0>)
 80014c4:	f005 f8bc 	bl	8006640 <HAL_TIM_IC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM5_Init+0xc6>
	{
		Error_Handler();
 80014ce:	f000 fa45 	bl	800195c <Error_Handler>
	}
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200003e4 	.word	0x200003e4
 80014e0:	40000c00 	.word	0x40000c00

080014e4 <MX_TIM9_Init>:

static void MX_TIM9_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]

	htim9.Instance = TIM9;
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <MX_TIM9_Init+0xd0>)
 8001508:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <MX_TIM9_Init+0xd4>)
 800150a:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 160;
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_TIM9_Init+0xd0>)
 800150e:	22a0      	movs	r2, #160	; 0xa0
 8001510:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <MX_TIM9_Init+0xd0>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 0xFFFF;
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <MX_TIM9_Init+0xd0>)
 800151a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151e:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <MX_TIM9_Init+0xd0>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <MX_TIM9_Init+0xd0>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800152c:	4821      	ldr	r0, [pc, #132]	; (80015b4 <MX_TIM9_Init+0xd0>)
 800152e:	f004 fe07 	bl	8006140 <HAL_TIM_IC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM9_Init+0x58>
	{
		Error_Handler();
 8001538:	f000 fa10 	bl	800195c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800153c:	2304      	movs	r3, #4
 800153e:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001540:	2350      	movs	r3, #80	; 0x50
 8001542:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4817      	ldr	r0, [pc, #92]	; (80015b4 <MX_TIM9_Init+0xd0>)
 8001558:	f005 f90e 	bl	8006778 <HAL_TIM_SlaveConfigSynchro>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM9_Init+0x82>
	{
		Error_Handler();
 8001562:	f000 f9fb 	bl	800195c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800156a:	2301      	movs	r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_TIM9_Init+0xd0>)
 800157e:	f005 f85f 	bl	8006640 <HAL_TIM_IC_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM9_Init+0xa8>
	{
		Error_Handler();
 8001588:	f000 f9e8 	bl	800195c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800158c:	2302      	movs	r3, #2
 800158e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001590:	2302      	movs	r3, #2
 8001592:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2204      	movs	r2, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_TIM9_Init+0xd0>)
 800159c:	f005 f850 	bl	8006640 <HAL_TIM_IC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM9_Init+0xc6>
	{
		Error_Handler();
 80015a6:	f000 f9d9 	bl	800195c <Error_Handler>
	}
}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000042c 	.word	0x2000042c
 80015b8:	40014000 	.word	0x40014000

080015bc <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80015c2:	463b      	mov	r3, r7
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
	hadc1.Instance = ADC1;
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MX_ADC1_Init+0x98>)
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <MX_ADC1_Init+0x9c>)
 80015d2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_ADC1_Init+0x98>)
 80015d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015da:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_ADC1_Init+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_ADC1_Init+0x98>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_ADC1_Init+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_ADC1_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_ADC1_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_ADC1_Init+0x98>)
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <MX_ADC1_Init+0xa0>)
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_ADC1_Init+0x98>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_ADC1_Init+0x98>)
 800160a:	2201      	movs	r2, #1
 800160c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_ADC1_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_ADC1_Init+0x98>)
 8001618:	2201      	movs	r2, #1
 800161a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_ADC1_Init+0x98>)
 800161e:	f000 fec1 	bl	80023a4 <HAL_ADC_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001628:	f000 f998 	bl	800195c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_3;
 800162c:	2303      	movs	r3, #3
 800162e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_ADC1_Init+0x98>)
 800163e:	f001 f823 	bl	8002688 <HAL_ADC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001648:	f000 f988 	bl	800195c <Error_Handler>
	}
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200001f8 	.word	0x200001f8
 8001658:	40012000 	.word	0x40012000
 800165c:	0f000001 	.word	0x0f000001

08001660 <MX_CAN1_Init>:

static void MX_CAN1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_CAN1_Init+0x60>)
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <MX_CAN1_Init+0x64>)
 8001668:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_CAN1_Init+0x60>)
 800166c:	2210      	movs	r2, #16
 800166e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_CAN1_Init+0x60>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_CAN1_Init+0x60>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_CAN1_Init+0x60>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_CAN1_Init+0x60>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <MX_CAN1_Init+0x60>)
 800168a:	2200      	movs	r2, #0
 800168c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_CAN1_Init+0x60>)
 8001690:	2200      	movs	r2, #0
 8001692:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_CAN1_Init+0x60>)
 8001696:	2200      	movs	r2, #0
 8001698:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_CAN1_Init+0x60>)
 800169c:	2200      	movs	r2, #0
 800169e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_CAN1_Init+0x60>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_CAN1_Init+0x60>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_CAN1_Init+0x60>)
 80016ae:	f001 fa13 	bl	8002ad8 <HAL_CAN_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_CAN1_Init+0x5c>
	{
		Error_Handler();
 80016b8:	f000 f950 	bl	800195c <Error_Handler>
	}
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000240 	.word	0x20000240
 80016c4:	40006400 	.word	0x40006400

080016c8 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <MX_I2C2_Init+0x50>)
 80016ce:	4a13      	ldr	r2, [pc, #76]	; (800171c <MX_I2C2_Init+0x54>)
 80016d0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_I2C2_Init+0x50>)
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <MX_I2C2_Init+0x58>)
 80016d6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_I2C2_Init+0x50>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_I2C2_Init+0x50>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_I2C2_Init+0x50>)
 80016e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ea:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <MX_I2C2_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_I2C2_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <MX_I2C2_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_I2C2_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <MX_I2C2_Init+0x50>)
 8001706:	f002 f8bb 	bl	8003880 <HAL_I2C_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001710:	f000 f924 	bl	800195c <Error_Handler>
	}

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000268 	.word	0x20000268
 800171c:	40005800 	.word	0x40005800
 8001720:	000186a0 	.word	0x000186a0

08001724 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_SPI1_Init+0x64>)
 800172a:	4a18      	ldr	r2, [pc, #96]	; (800178c <MX_SPI1_Init+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_SPI1_Init+0x64>)
 8001730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001734:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MX_SPI1_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_SPI1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_SPI1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <MX_SPI1_Init+0x64>)
 8001750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001754:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <MX_SPI1_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <MX_SPI1_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <MX_SPI1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <MX_SPI1_Init+0x64>)
 8001770:	220a      	movs	r2, #10
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <MX_SPI1_Init+0x64>)
 8001776:	f004 fb3b 	bl	8005df0 <HAL_SPI_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001780:	f000 f8ec 	bl	800195c <Error_Handler>
	}

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200002bc 	.word	0x200002bc
 800178c:	40013000 	.word	0x40013000

08001790 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <MX_USART1_UART_Init+0x50>)
 8001798:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 800179c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017b6:	220c      	movs	r2, #12
 80017b8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USART1_UART_Init+0x4c>)
 80017c8:	f005 fb98 	bl	8006efc <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80017d2:	f000 f8c3 	bl	800195c <Error_Handler>
	}

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000314 	.word	0x20000314
 80017e0:	40011000 	.word	0x40011000

080017e4 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_USART3_UART_Init+0x50>)
 80017ec:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART3_UART_Init+0x4c>)
 800181c:	f005 fb6e 	bl	8006efc <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001826:	f000 f899 	bl	800195c <Error_Handler>
	}

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000358 	.word	0x20000358
 8001834:	40004800 	.word	0x40004800

08001838 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b3e      	ldr	r3, [pc, #248]	; (800194c <MX_GPIO_Init+0x114>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a3d      	ldr	r2, [pc, #244]	; (800194c <MX_GPIO_Init+0x114>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <MX_GPIO_Init+0x114>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <MX_GPIO_Init+0x114>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a36      	ldr	r2, [pc, #216]	; (800194c <MX_GPIO_Init+0x114>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <MX_GPIO_Init+0x114>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <MX_GPIO_Init+0x114>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a2f      	ldr	r2, [pc, #188]	; (800194c <MX_GPIO_Init+0x114>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <MX_GPIO_Init+0x114>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOC, PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED|PINC_CAN_STB|PINC_HEART, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f242 211e 	movw	r1, #8734	; 0x221e
 80018a8:	4829      	ldr	r0, [pc, #164]	; (8001950 <MX_GPIO_Init+0x118>)
 80018aa:	f001 ffb5 	bl	8003818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, PINC_SPI_SSA|PINC_SPI_SSB|PINC_SPI_SSV|PINC_SPI_SST, GPIO_PIN_SET);
 80018ae:	2201      	movs	r2, #1
 80018b0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80018b4:	4826      	ldr	r0, [pc, #152]	; (8001950 <MX_GPIO_Init+0x118>)
 80018b6:	f001 ffaf 	bl	8003818 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED|PINC_CAN_STB|
 80018ba:	f242 33fe 	movw	r3, #9214	; 0x23fe
 80018be:	60fb      	str	r3, [r7, #12]
					  PINC_HEART|PINC_SPI_SSA|PINC_SPI_SSB|PINC_SPI_SSV|PINC_SPI_SST;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4619      	mov	r1, r3
 80018d2:	481f      	ldr	r0, [pc, #124]	; (8001950 <MX_GPIO_Init+0x118>)
 80018d4:	f001 fdec 	bl	80034b0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINC_SWITCH;
 80018d8:	2301      	movs	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4619      	mov	r1, r3
 80018ea:	4819      	ldr	r0, [pc, #100]	; (8001950 <MX_GPIO_Init+0x118>)
 80018ec:	f001 fde0 	bl	80034b0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINA_IC_FREQ3|PINA_IC_FREQ2|PINA_IC_FREQ1;
 80018f0:	2307      	movs	r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001900:	2301      	movs	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4619      	mov	r1, r3
 800190a:	4812      	ldr	r0, [pc, #72]	; (8001954 <MX_GPIO_Init+0x11c>)
 800190c:	f001 fdd0 	bl	80034b0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINB_EN;
 8001910:	2301      	movs	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	480c      	ldr	r0, [pc, #48]	; (8001958 <MX_GPIO_Init+0x120>)
 8001928:	f001 fdc2 	bl	80034b0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINB_STATE;
 800192c:	2302      	movs	r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001934:	2302      	movs	r3, #2
 8001936:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <MX_GPIO_Init+0x120>)
 8001940:	f001 fdb6 	bl	80034b0 <HAL_GPIO_Init>

}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40020800 	.word	0x40020800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400

0800195c <Error_Handler>:

void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
	__disable_irq();
	while (1)
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>
	...

08001968 <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <HAL_MspInit+0x4c>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x4c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80019a6:	2005      	movs	r0, #5
 80019a8:	f001 fc9a 	bl	80032e0 <HAL_NVIC_SetPriorityGrouping>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08e      	sub	sp, #56	; 0x38
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d8:	d134      	bne.n	8001a44 <HAL_TIM_IC_MspInit+0x8c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
 80019de:	4b55      	ldr	r3, [pc, #340]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a54      	ldr	r2, [pc, #336]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	4b4e      	ldr	r3, [pc, #312]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PINA_IC_FREQ3;
 8001a12:	2301      	movs	r3, #1
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a22:	2301      	movs	r3, #1
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4842      	ldr	r0, [pc, #264]	; (8001b38 <HAL_TIM_IC_MspInit+0x180>)
 8001a2e:	f001 fd3f 	bl	80034b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2102      	movs	r1, #2
 8001a36:	201c      	movs	r0, #28
 8001a38:	f001 fc5d 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a3c:	201c      	movs	r0, #28
 8001a3e:	f001 fc76 	bl	800332e <HAL_NVIC_EnableIRQ>
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  }

}
 8001a42:	e072      	b.n	8001b2a <HAL_TIM_IC_MspInit+0x172>
  else if(htim_ic->Instance==TIM5)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a3c      	ldr	r2, [pc, #240]	; (8001b3c <HAL_TIM_IC_MspInit+0x184>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d134      	bne.n	8001ab8 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a37      	ldr	r2, [pc, #220]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a30      	ldr	r2, [pc, #192]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PINA_IC_FREQ2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a96:	2302      	movs	r3, #2
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4825      	ldr	r0, [pc, #148]	; (8001b38 <HAL_TIM_IC_MspInit+0x180>)
 8001aa2:	f001 fd05 	bl	80034b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	2032      	movs	r0, #50	; 0x32
 8001aac:	f001 fc23 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f001 fc3c 	bl	800332e <HAL_NVIC_EnableIRQ>
}
 8001ab6:	e038      	b.n	8001b2a <HAL_TIM_IC_MspInit+0x172>
  else if(htim_ic->Instance==TIM9)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <HAL_TIM_IC_MspInit+0x188>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d133      	bne.n	8001b2a <HAL_TIM_IC_MspInit+0x172>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_TIM_IC_MspInit+0x17c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINA_IC_FREQ1;
 8001afa:	2304      	movs	r3, #4
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b12:	4619      	mov	r1, r3
 8001b14:	4808      	ldr	r0, [pc, #32]	; (8001b38 <HAL_TIM_IC_MspInit+0x180>)
 8001b16:	f001 fccb 	bl	80034b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2103      	movs	r1, #3
 8001b1e:	2018      	movs	r0, #24
 8001b20:	f001 fbe9 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b24:	2018      	movs	r0, #24
 8001b26:	f001 fc02 	bl	800332e <HAL_NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3738      	adds	r7, #56	; 0x38
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40000c00 	.word	0x40000c00
 8001b40:	40014000 	.word	0x40014000

08001b44 <HAL_ADC_MspInit>:
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  }
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <HAL_ADC_MspInit+0x8c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d12f      	bne.n	8001bc6 <HAL_ADC_MspInit+0x82>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_ADC_MspInit+0x90>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <HAL_ADC_MspInit+0x90>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_ADC_MspInit+0x90>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_ADC_MspInit+0x90>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <HAL_ADC_MspInit+0x90>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_ADC_MspInit+0x90>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = PINA_ADC_VMON;
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <HAL_ADC_MspInit+0x94>)
 8001bb2:	f001 fc7d 	bl	80034b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2102      	movs	r1, #2
 8001bba:	2012      	movs	r0, #18
 8001bbc:	f001 fb9b 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001bc0:	2012      	movs	r0, #18
 8001bc2:	f001 fbb4 	bl	800332e <HAL_NVIC_EnableIRQ>
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40012000 	.word	0x40012000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a29      	ldr	r2, [pc, #164]	; (8001ca0 <HAL_CAN_MspInit+0xc4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d14c      	bne.n	8001c98 <HAL_CAN_MspInit+0xbc>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <HAL_CAN_MspInit+0xc8>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <HAL_CAN_MspInit+0xc8>)
 8001c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_CAN_MspInit+0xc8>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_CAN_MspInit+0xc8>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <HAL_CAN_MspInit+0xc8>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_CAN_MspInit+0xc8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PINB_CAN_RX|PINB_CAN_TX;
 8001c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c48:	2309      	movs	r3, #9
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4815      	ldr	r0, [pc, #84]	; (8001ca8 <HAL_CAN_MspInit+0xcc>)
 8001c54:	f001 fc2c 	bl	80034b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	2013      	movs	r0, #19
 8001c5e:	f001 fb4a 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001c62:	2013      	movs	r0, #19
 8001c64:	f001 fb63 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	2014      	movs	r0, #20
 8001c6e:	f001 fb42 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c72:	2014      	movs	r0, #20
 8001c74:	f001 fb5b 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	2015      	movs	r0, #21
 8001c7e:	f001 fb3a 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c82:	2015      	movs	r0, #21
 8001c84:	f001 fb53 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	2016      	movs	r0, #22
 8001c8e:	f001 fb32 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001c92:	2016      	movs	r0, #22
 8001c94:	f001 fb4b 	bl	800332e <HAL_NVIC_EnableIRQ>
  }

}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40006400 	.word	0x40006400
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020400 	.word	0x40020400

08001cac <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <HAL_I2C_MspInit+0xa4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d13c      	bne.n	8001d48 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_I2C_MspInit+0xa8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <HAL_I2C_MspInit+0xa8>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_I2C_MspInit+0xa8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = PINB_I2C_SCL|PINB_12C_SDA;
 8001cea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf0:	2312      	movs	r3, #18
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <HAL_I2C_MspInit+0xac>)
 8001d08:	f001 fbd2 	bl	80034b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_I2C_MspInit+0xa8>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <HAL_I2C_MspInit+0xa8>)
 8001d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_I2C_MspInit+0xa8>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 2, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	2021      	movs	r0, #33	; 0x21
 8001d2e:	f001 fae2 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d32:	2021      	movs	r0, #33	; 0x21
 8001d34:	f001 fafb 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 2, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	2022      	movs	r0, #34	; 0x22
 8001d3e:	f001 fada 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001d42:	2022      	movs	r0, #34	; 0x22
 8001d44:	f001 faf3 	bl	800332e <HAL_NVIC_EnableIRQ>
  }

}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40005800 	.word	0x40005800
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020400 	.word	0x40020400

08001d5c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_SPI_MspInit+0x94>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d133      	bne.n	8001de6 <HAL_SPI_MspInit+0x8a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <HAL_SPI_MspInit+0x98>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_SPI_MspInit+0x98>)
 8001d88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_SPI_MspInit+0x98>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_SPI_MspInit+0x98>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <HAL_SPI_MspInit+0x98>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_SPI_MspInit+0x98>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PINA_SPI_SCK|PINA_SPI_MISO|PINA_SPI_MOSI;
 8001db6:	23e0      	movs	r3, #224	; 0xe0
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4809      	ldr	r0, [pc, #36]	; (8001df8 <HAL_SPI_MspInit+0x9c>)
 8001dd2:	f001 fb6d 	bl	80034b0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2102      	movs	r1, #2
 8001dda:	2023      	movs	r0, #35	; 0x23
 8001ddc:	f001 fa8b 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001de0:	2023      	movs	r0, #35	; 0x23
 8001de2:	f001 faa4 	bl	800332e <HAL_NVIC_EnableIRQ>
  }

}
 8001de6:	bf00      	nop
 8001de8:	3728      	adds	r7, #40	; 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40013000 	.word	0x40013000
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020000 	.word	0x40020000

08001dfc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a3a      	ldr	r2, [pc, #232]	; (8001f04 <HAL_UART_MspInit+0x108>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d134      	bne.n	8001e88 <HAL_UART_MspInit+0x8c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a38      	ldr	r2, [pc, #224]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001e28:	f043 0310 	orr.w	r3, r3, #16
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PINB_UART1_TX|PINB_UART1_RX;
 8001e56:	23c0      	movs	r3, #192	; 0xc0
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e66:	2307      	movs	r3, #7
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4826      	ldr	r0, [pc, #152]	; (8001f0c <HAL_UART_MspInit+0x110>)
 8001e72:	f001 fb1d 	bl	80034b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2103      	movs	r1, #3
 8001e7a:	2025      	movs	r0, #37	; 0x25
 8001e7c:	f001 fa3b 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e80:	2025      	movs	r0, #37	; 0x25
 8001e82:	f001 fa54 	bl	800332e <HAL_NVIC_EnableIRQ>
    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  }

}
 8001e86:	e039      	b.n	8001efc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <HAL_UART_MspInit+0x114>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d134      	bne.n	8001efc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_UART_MspInit+0x10c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINC_UART2_RX|PINC_UART2_TX;
 8001eca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001edc:	2307      	movs	r3, #7
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480b      	ldr	r0, [pc, #44]	; (8001f14 <HAL_UART_MspInit+0x118>)
 8001ee8:	f001 fae2 	bl	80034b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2103      	movs	r1, #3
 8001ef0:	2027      	movs	r0, #39	; 0x27
 8001ef2:	f001 fa00 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ef6:	2027      	movs	r0, #39	; 0x27
 8001ef8:	f001 fa19 	bl	800332e <HAL_NVIC_EnableIRQ>
}
 8001efc:	bf00      	nop
 8001efe:	3730      	adds	r7, #48	; 0x30
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40011000 	.word	0x40011000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40004800 	.word	0x40004800
 8001f14:	40020800 	.word	0x40020800

08001f18 <NMI_Handler>:
extern TIM_HandleTypeDef htim9;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;

void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <NMI_Handler+0x4>

08001f1e <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  while (1)
 8001f22:	e7fe      	b.n	8001f22 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2a <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  while (1)
 8001f34:	e7fe      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f36 <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001f64:	f000 f9da 	bl	800231c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001f68:	f001 f9fb 	bl	8003362 <HAL_SYSTICK_IRQHandler>
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <TIM1_BRK_TIM9_IRQHandler>:

void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim9);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001f76:	f004 fa5b 	bl	8006430 <HAL_TIM_IRQHandler>
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000042c 	.word	0x2000042c

08001f84 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <TIM2_IRQHandler+0x10>)
 8001f8a:	f004 fa51 	bl	8006430 <HAL_TIM_IRQHandler>
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000039c 	.word	0x2000039c

08001f98 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim5);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <TIM5_IRQHandler+0x10>)
 8001f9e:	f004 fa47 	bl	8006430 <HAL_TIM_IRQHandler>
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200003e4 	.word	0x200003e4

08001fac <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <ADC_IRQHandler+0x10>)
 8001fb2:	f000 fa3a 	bl	800242a <HAL_ADC_IRQHandler>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200001f8 	.word	0x200001f8

08001fc0 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <CAN1_TX_IRQHandler+0x10>)
 8001fc6:	f000 fe82 	bl	8002cce <HAL_CAN_IRQHandler>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000240 	.word	0x20000240

08001fd4 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <CAN1_RX0_IRQHandler+0x10>)
 8001fda:	f000 fe78 	bl	8002cce <HAL_CAN_IRQHandler>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000240 	.word	0x20000240

08001fe8 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <CAN1_RX1_IRQHandler+0x10>)
 8001fee:	f000 fe6e 	bl	8002cce <HAL_CAN_IRQHandler>
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000240 	.word	0x20000240

08001ffc <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <CAN1_SCE_IRQHandler+0x10>)
 8002002:	f000 fe64 	bl	8002cce <HAL_CAN_IRQHandler>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000240 	.word	0x20000240

08002010 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <I2C2_EV_IRQHandler+0x10>)
 8002016:	f001 fd77 	bl	8003b08 <HAL_I2C_EV_IRQHandler>
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000268 	.word	0x20000268

08002024 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <I2C2_ER_IRQHandler+0x10>)
 800202a:	f001 fede 	bl	8003dea <HAL_I2C_ER_IRQHandler>
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000268 	.word	0x20000268

08002038 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <SPI1_IRQHandler+0x10>)
 800203e:	f003 ff61 	bl	8005f04 <HAL_SPI_IRQHandler>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200002bc 	.word	0x200002bc

0800204c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <USART1_IRQHandler+0x10>)
 8002052:	f005 f833 	bl	80070bc <HAL_UART_IRQHandler>
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000314 	.word	0x20000314

08002060 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <USART3_IRQHandler+0x10>)
 8002066:	f005 f829 	bl	80070bc <HAL_UART_IRQHandler>
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000358 	.word	0x20000358

08002074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
	return 1;
 8002078:	2301      	movs	r3, #1
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_kill>:

int _kill(int pid, int sig)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800208e:	f005 ff49 	bl	8007f24 <__errno>
 8002092:	4603      	mov	r3, r0
 8002094:	2216      	movs	r2, #22
 8002096:	601a      	str	r2, [r3, #0]
	return -1;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_exit>:

void _exit (int status)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ffe7 	bl	8002084 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020b6:	e7fe      	b.n	80020b6 <_exit+0x12>

080020b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e00a      	b.n	80020e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ca:	f3af 8000 	nop.w
 80020ce:	4601      	mov	r1, r0
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	60ba      	str	r2, [r7, #8]
 80020d6:	b2ca      	uxtb	r2, r1
 80020d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	dbf0      	blt.n	80020ca <_read+0x12>
	}

return len;
 80020e8:	687b      	ldr	r3, [r7, #4]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	e009      	b.n	8002118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	60ba      	str	r2, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf1      	blt.n	8002104 <_write+0x12>
	}
	return len;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_close>:

int _close(int file)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
	return -1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002152:	605a      	str	r2, [r3, #4]
	return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_isatty>:

int _isatty(int file)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
	return 1;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
	return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <_sbrk+0x5c>)
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <_sbrk+0x60>)
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <_sbrk+0x64>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <_sbrk+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d207      	bcs.n	80021d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c4:	f005 feae 	bl	8007f24 <__errno>
 80021c8:	4603      	mov	r3, r0
 80021ca:	220c      	movs	r2, #12
 80021cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	e009      	b.n	80021e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <_sbrk+0x64>)
 80021e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20020000 	.word	0x20020000
 80021f4:	00000400 	.word	0x00000400
 80021f8:	200004d8 	.word	0x200004d8
 80021fc:	200004f0 	.word	0x200004f0

08002200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SystemInit+0x20>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <SystemInit+0x20>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800225c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002228:	480d      	ldr	r0, [pc, #52]	; (8002260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222a:	490e      	ldr	r1, [pc, #56]	; (8002264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002240:	4c0b      	ldr	r4, [pc, #44]	; (8002270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800224e:	f7ff ffd7 	bl	8002200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002252:	f005 fe6d 	bl	8007f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002256:	f7fe fe29 	bl	8000eac <main>
  bx  lr    
 800225a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800225c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002268:	0800b1c4 	.word	0x0800b1c4
  ldr r2, =_sbss
 800226c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002270:	200004f0 	.word	0x200004f0

08002274 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <CAN2_RX0_IRQHandler>
	...

08002278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <HAL_Init+0x40>)
 8002282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_Init+0x40>)
 800228e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_Init+0x40>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f001 f81d 	bl	80032e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f000 f808 	bl	80022bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ac:	f7ff fb5c 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023c00 	.word	0x40023c00

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x54>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f001 f835 	bl	800334a <HAL_SYSTICK_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00e      	b.n	8002308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d80a      	bhi.n	8002306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f0:	2200      	movs	r2, #0
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f000 fffd 	bl	80032f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fc:	4a06      	ldr	r2, [pc, #24]	; (8002318 <HAL_InitTick+0x5c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000000 	.word	0x20000000
 8002314:	20000008 	.word	0x20000008
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x20>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x24>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_IncTick+0x24>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000008 	.word	0x20000008
 8002340:	200004dc 	.word	0x200004dc

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200004dc 	.word	0x200004dc

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002382:	bf00      	nop
 8002384:	f7ff ffde 	bl	8002344 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008

080023a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e033      	b.n	8002422 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fbbe 	bl	8001b44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ea:	f023 0302 	bic.w	r3, r3, #2
 80023ee:	f043 0202 	orr.w	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fa68 	bl	80028cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	f043 0201 	orr.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	641a      	str	r2, [r3, #64]	; 0x40
 8002412:	e001      	b.n	8002418 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d049      	beq.n	80024f4 <HAL_ADC_IRQHandler+0xca>
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d046      	beq.n	80024f4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d12b      	bne.n	80024e4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002490:	2b00      	cmp	r3, #0
 8002492:	d127      	bne.n	80024e4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d119      	bne.n	80024e4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0220 	bic.w	r2, r2, #32
 80024be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f8b0 	bl	800264a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f06f 0212 	mvn.w	r2, #18
 80024f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d057      	beq.n	80025ba <HAL_ADC_IRQHandler+0x190>
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d054      	beq.n	80025ba <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d139      	bne.n	80025aa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800254e:	2b00      	cmp	r3, #0
 8002550:	d12b      	bne.n	80025aa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800255c:	2b00      	cmp	r3, #0
 800255e:	d124      	bne.n	80025aa <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11d      	bne.n	80025aa <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	d119      	bne.n	80025aa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002584:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fa8a 	bl	8002ac4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 020c 	mvn.w	r2, #12
 80025b8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d017      	beq.n	8002600 <HAL_ADC_IRQHandler+0x1d6>
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d014      	beq.n	8002600 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d10d      	bne.n	8002600 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f834 	bl	800265e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f06f 0201 	mvn.w	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800260e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <HAL_ADC_IRQHandler+0x218>
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	f043 0202 	orr.w	r2, r3, #2
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0220 	mvn.w	r2, #32
 8002630:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f81d 	bl	8002672 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0220 	mvn.w	r2, #32
 8002640:	601a      	str	r2, [r3, #0]
  }
}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1c>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e105      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x228>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b09      	cmp	r3, #9
 80026b2:	d925      	bls.n	8002700 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68d9      	ldr	r1, [r3, #12]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	3b1e      	subs	r3, #30
 80026ca:	2207      	movs	r2, #7
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43da      	mvns	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	400a      	ands	r2, r1
 80026d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68d9      	ldr	r1, [r3, #12]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	4603      	mov	r3, r0
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4403      	add	r3, r0
 80026f2:	3b1e      	subs	r3, #30
 80026f4:	409a      	lsls	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	e022      	b.n	8002746 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6919      	ldr	r1, [r3, #16]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	2207      	movs	r2, #7
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	400a      	ands	r2, r1
 8002722:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6919      	ldr	r1, [r3, #16]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	4603      	mov	r3, r0
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4403      	add	r3, r0
 800273c:	409a      	lsls	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b06      	cmp	r3, #6
 800274c:	d824      	bhi.n	8002798 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	3b05      	subs	r3, #5
 8002760:	221f      	movs	r2, #31
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	400a      	ands	r2, r1
 800276e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	3b05      	subs	r3, #5
 800278a:	fa00 f203 	lsl.w	r2, r0, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	635a      	str	r2, [r3, #52]	; 0x34
 8002796:	e04c      	b.n	8002832 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b0c      	cmp	r3, #12
 800279e:	d824      	bhi.n	80027ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b23      	subs	r3, #35	; 0x23
 80027b2:	221f      	movs	r2, #31
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43da      	mvns	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	400a      	ands	r2, r1
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	3b23      	subs	r3, #35	; 0x23
 80027dc:	fa00 f203 	lsl.w	r2, r0, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
 80027e8:	e023      	b.n	8002832 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b41      	subs	r3, #65	; 0x41
 80027fc:	221f      	movs	r2, #31
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	400a      	ands	r2, r1
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3b41      	subs	r3, #65	; 0x41
 8002826:	fa00 f203 	lsl.w	r2, r0, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_ADC_ConfigChannel+0x234>)
 8002834:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a21      	ldr	r2, [pc, #132]	; (80028c0 <HAL_ADC_ConfigChannel+0x238>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d109      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1cc>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b12      	cmp	r3, #18
 8002846:	d105      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_ADC_ConfigChannel+0x238>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d123      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x21e>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b10      	cmp	r3, #16
 8002864:	d003      	beq.n	800286e <HAL_ADC_ConfigChannel+0x1e6>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b11      	cmp	r3, #17
 800286c:	d11b      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b10      	cmp	r3, #16
 8002880:	d111      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_ADC_ConfigChannel+0x23c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_ADC_ConfigChannel+0x240>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	0c9a      	lsrs	r2, r3, #18
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002898:	e002      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	3b01      	subs	r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f9      	bne.n	800289a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40012300 	.word	0x40012300
 80028c0:	40012000 	.word	0x40012000
 80028c4:	20000000 	.word	0x20000000
 80028c8:	431bde83 	.word	0x431bde83

080028cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028d4:	4b79      	ldr	r3, [pc, #484]	; (8002abc <ADC_Init+0x1f0>)
 80028d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002900:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	021a      	lsls	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6899      	ldr	r1, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <ADC_Init+0x1f4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d022      	beq.n	80029aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002972:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002994:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6899      	ldr	r1, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	e00f      	b.n	80029ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0202 	bic.w	r2, r2, #2
 80029d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7e1b      	ldrb	r3, [r3, #24]
 80029e4:	005a      	lsls	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01b      	beq.n	8002a30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	3b01      	subs	r3, #1
 8002a24:	035a      	lsls	r2, r3, #13
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	e007      	b.n	8002a40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	051a      	lsls	r2, r3, #20
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a82:	025a      	lsls	r2, r3, #9
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6899      	ldr	r1, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	029a      	lsls	r2, r3, #10
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40012300 	.word	0x40012300
 8002ac0:	0f000001 	.word	0x0f000001

08002ac4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0ed      	b.n	8002cc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff f870 	bl	8001bdc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b0c:	f7ff fc1a 	bl	8002344 <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b12:	e012      	b.n	8002b3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b14:	f7ff fc16 	bl	8002344 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b0a      	cmp	r3, #10
 8002b20:	d90b      	bls.n	8002b3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2205      	movs	r2, #5
 8002b32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0c5      	b.n	8002cc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0e5      	beq.n	8002b14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0202 	bic.w	r2, r2, #2
 8002b56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b58:	f7ff fbf4 	bl	8002344 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b5e:	e012      	b.n	8002b86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b60:	f7ff fbf0 	bl	8002344 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b0a      	cmp	r3, #10
 8002b6c:	d90b      	bls.n	8002b86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2205      	movs	r2, #5
 8002b7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e09f      	b.n	8002cc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e5      	bne.n	8002b60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7e1b      	ldrb	r3, [r3, #24]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d108      	bne.n	8002bae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e007      	b.n	8002bbe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7e5b      	ldrb	r3, [r3, #25]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e007      	b.n	8002be8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7e9b      	ldrb	r3, [r3, #26]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d108      	bne.n	8002c02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0220 	orr.w	r2, r2, #32
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e007      	b.n	8002c12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0220 	bic.w	r2, r2, #32
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7edb      	ldrb	r3, [r3, #27]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0210 	bic.w	r2, r2, #16
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e007      	b.n	8002c3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0210 	orr.w	r2, r2, #16
 8002c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7f1b      	ldrb	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0208 	orr.w	r2, r2, #8
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e007      	b.n	8002c66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0208 	bic.w	r2, r2, #8
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7f5b      	ldrb	r3, [r3, #29]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d108      	bne.n	8002c80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0204 	orr.w	r2, r2, #4
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e007      	b.n	8002c90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0204 	bic.w	r2, r2, #4
 8002c8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	ea42 0103 	orr.w	r1, r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	1e5a      	subs	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b08a      	sub	sp, #40	; 0x28
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d07c      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d023      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2201      	movs	r2, #1
 8002d24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f983 	bl	800303c <HAL_CAN_TxMailbox0CompleteCallback>
 8002d36:	e016      	b.n	8002d66 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	e00c      	b.n	8002d66 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5e:	e002      	b.n	8002d66 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f989 	bl	8003078 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d024      	beq.n	8002dba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f963 	bl	8003050 <HAL_CAN_TxMailbox1CompleteCallback>
 8002d8a:	e016      	b.n	8002dba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9e:	e00c      	b.n	8002dba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	e002      	b.n	8002dba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f969 	bl	800308c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d024      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dcc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f943 	bl	8003064 <HAL_CAN_TxMailbox2CompleteCallback>
 8002dde:	e016      	b.n	8002e0e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
 8002df2:	e00c      	b.n	8002e0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
 8002e06:	e002      	b.n	8002e0e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f949 	bl	80030a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00c      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2210      	movs	r2, #16
 8002e30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f93a 	bl	80030c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f921 	bl	80030b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2210      	movs	r2, #16
 8002e94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2208      	movs	r2, #8
 8002eb0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f91c 	bl	80030f0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f903 	bl	80030dc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2210      	movs	r2, #16
 8002ef0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f906 	bl	8003104 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2208      	movs	r2, #8
 8002f12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f8ff 	bl	8003118 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d07b      	beq.n	800301c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d072      	beq.n	8003014 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d043      	beq.n	8003014 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d03e      	beq.n	8003014 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f9c:	2b60      	cmp	r3, #96	; 0x60
 8002f9e:	d02b      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x32a>
 8002fa0:	2b60      	cmp	r3, #96	; 0x60
 8002fa2:	d82e      	bhi.n	8003002 <HAL_CAN_IRQHandler+0x334>
 8002fa4:	2b50      	cmp	r3, #80	; 0x50
 8002fa6:	d022      	beq.n	8002fee <HAL_CAN_IRQHandler+0x320>
 8002fa8:	2b50      	cmp	r3, #80	; 0x50
 8002faa:	d82a      	bhi.n	8003002 <HAL_CAN_IRQHandler+0x334>
 8002fac:	2b40      	cmp	r3, #64	; 0x40
 8002fae:	d019      	beq.n	8002fe4 <HAL_CAN_IRQHandler+0x316>
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d826      	bhi.n	8003002 <HAL_CAN_IRQHandler+0x334>
 8002fb4:	2b30      	cmp	r3, #48	; 0x30
 8002fb6:	d010      	beq.n	8002fda <HAL_CAN_IRQHandler+0x30c>
 8002fb8:	2b30      	cmp	r3, #48	; 0x30
 8002fba:	d822      	bhi.n	8003002 <HAL_CAN_IRQHandler+0x334>
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d002      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0x2f8>
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d005      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002fc4:	e01d      	b.n	8003002 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	f043 0308 	orr.w	r3, r3, #8
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fce:	e019      	b.n	8003004 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	f043 0310 	orr.w	r3, r3, #16
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fd8:	e014      	b.n	8003004 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	f043 0320 	orr.w	r3, r3, #32
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fe2:	e00f      	b.n	8003004 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fec:	e00a      	b.n	8003004 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ff6:	e005      	b.n	8003004 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003000:	e000      	b.n	8003004 <HAL_CAN_IRQHandler+0x336>
            break;
 8003002:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003012:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2204      	movs	r2, #4
 800301a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f87c 	bl	800312c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003034:	bf00      	nop
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <__NVIC_SetPriorityGrouping+0x44>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800315c:	4013      	ands	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800316c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003172:	4a04      	ldr	r2, [pc, #16]	; (8003184 <__NVIC_SetPriorityGrouping+0x44>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <__NVIC_GetPriorityGrouping+0x18>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	f003 0307 	and.w	r3, r3, #7
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db0b      	blt.n	80031ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	f003 021f 	and.w	r2, r3, #31
 80031bc:	4907      	ldr	r1, [pc, #28]	; (80031dc <__NVIC_EnableIRQ+0x38>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2001      	movs	r0, #1
 80031c6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000e100 	.word	0xe000e100

080031e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	6039      	str	r1, [r7, #0]
 80031ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	db0a      	blt.n	800320a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	490c      	ldr	r1, [pc, #48]	; (800322c <__NVIC_SetPriority+0x4c>)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	0112      	lsls	r2, r2, #4
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	440b      	add	r3, r1
 8003204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003208:	e00a      	b.n	8003220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	4908      	ldr	r1, [pc, #32]	; (8003230 <__NVIC_SetPriority+0x50>)
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	3b04      	subs	r3, #4
 8003218:	0112      	lsls	r2, r2, #4
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	440b      	add	r3, r1
 800321e:	761a      	strb	r2, [r3, #24]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000e100 	.word	0xe000e100
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	; 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f1c3 0307 	rsb	r3, r3, #7
 800324e:	2b04      	cmp	r3, #4
 8003250:	bf28      	it	cs
 8003252:	2304      	movcs	r3, #4
 8003254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3304      	adds	r3, #4
 800325a:	2b06      	cmp	r3, #6
 800325c:	d902      	bls.n	8003264 <NVIC_EncodePriority+0x30>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3b03      	subs	r3, #3
 8003262:	e000      	b.n	8003266 <NVIC_EncodePriority+0x32>
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	f04f 32ff 	mov.w	r2, #4294967295
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	401a      	ands	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800327c:	f04f 31ff 	mov.w	r1, #4294967295
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	43d9      	mvns	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	4313      	orrs	r3, r2
         );
}
 800328e:	4618      	mov	r0, r3
 8003290:	3724      	adds	r7, #36	; 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ac:	d301      	bcc.n	80032b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ae:	2301      	movs	r3, #1
 80032b0:	e00f      	b.n	80032d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <SysTick_Config+0x40>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ba:	210f      	movs	r1, #15
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	f7ff ff8e 	bl	80031e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <SysTick_Config+0x40>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <SysTick_Config+0x40>)
 80032cc:	2207      	movs	r2, #7
 80032ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000e010 	.word	0xe000e010

080032e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff29 	bl	8003140 <__NVIC_SetPriorityGrouping>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003308:	f7ff ff3e 	bl	8003188 <__NVIC_GetPriorityGrouping>
 800330c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	6978      	ldr	r0, [r7, #20]
 8003314:	f7ff ff8e 	bl	8003234 <NVIC_EncodePriority>
 8003318:	4602      	mov	r2, r0
 800331a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff5d 	bl	80031e0 <__NVIC_SetPriority>
}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff31 	bl	80031a4 <__NVIC_EnableIRQ>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff ffa2 	bl	800329c <SysTick_Config>
 8003358:	4603      	mov	r3, r0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003366:	f7fd ff1b 	bl	80011a0 <HAL_SYSTICK_Callback>
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800337c:	f7fe ffe2 	bl	8002344 <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d008      	beq.n	80033a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e052      	b.n	8003446 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0216 	bic.w	r2, r2, #22
 80033ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d103      	bne.n	80033d0 <HAL_DMA_Abort+0x62>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0208 	bic.w	r2, r2, #8
 80033de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033f0:	e013      	b.n	800341a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033f2:	f7fe ffa7 	bl	8002344 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d90c      	bls.n	800341a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2203      	movs	r2, #3
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e015      	b.n	8003446 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e4      	bne.n	80033f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	223f      	movs	r2, #63	; 0x3f
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d004      	beq.n	800346c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2280      	movs	r2, #128	; 0x80
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e00c      	b.n	8003486 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2205      	movs	r2, #5
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a0:	b2db      	uxtb	r3, r3
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	e16b      	b.n	80037a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034cc:	2201      	movs	r2, #1
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	f040 815a 	bne.w	800379e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d005      	beq.n	8003502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d130      	bne.n	8003564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	2203      	movs	r2, #3
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003538:	2201      	movs	r2, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 0201 	and.w	r2, r3, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b03      	cmp	r3, #3
 800356e:	d017      	beq.n	80035a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d123      	bne.n	80035f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	08da      	lsrs	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3208      	adds	r2, #8
 80035b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	220f      	movs	r2, #15
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	08da      	lsrs	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3208      	adds	r2, #8
 80035ee:	69b9      	ldr	r1, [r7, #24]
 80035f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0203 	and.w	r2, r3, #3
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80b4 	beq.w	800379e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b60      	ldr	r3, [pc, #384]	; (80037bc <HAL_GPIO_Init+0x30c>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	4a5f      	ldr	r2, [pc, #380]	; (80037bc <HAL_GPIO_Init+0x30c>)
 8003640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003644:	6453      	str	r3, [r2, #68]	; 0x44
 8003646:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <HAL_GPIO_Init+0x30c>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003652:	4a5b      	ldr	r2, [pc, #364]	; (80037c0 <HAL_GPIO_Init+0x310>)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_GPIO_Init+0x314>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d02b      	beq.n	80036d6 <HAL_GPIO_Init+0x226>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_GPIO_Init+0x318>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d025      	beq.n	80036d2 <HAL_GPIO_Init+0x222>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_GPIO_Init+0x31c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01f      	beq.n	80036ce <HAL_GPIO_Init+0x21e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_GPIO_Init+0x320>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d019      	beq.n	80036ca <HAL_GPIO_Init+0x21a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a4e      	ldr	r2, [pc, #312]	; (80037d4 <HAL_GPIO_Init+0x324>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_GPIO_Init+0x216>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a4d      	ldr	r2, [pc, #308]	; (80037d8 <HAL_GPIO_Init+0x328>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00d      	beq.n	80036c2 <HAL_GPIO_Init+0x212>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a4c      	ldr	r2, [pc, #304]	; (80037dc <HAL_GPIO_Init+0x32c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <HAL_GPIO_Init+0x20e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4b      	ldr	r2, [pc, #300]	; (80037e0 <HAL_GPIO_Init+0x330>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_GPIO_Init+0x20a>
 80036b6:	2307      	movs	r3, #7
 80036b8:	e00e      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036ba:	2308      	movs	r3, #8
 80036bc:	e00c      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036be:	2306      	movs	r3, #6
 80036c0:	e00a      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036c2:	2305      	movs	r3, #5
 80036c4:	e008      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036c6:	2304      	movs	r3, #4
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036ca:	2303      	movs	r3, #3
 80036cc:	e004      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036d6:	2300      	movs	r3, #0
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	f002 0203 	and.w	r2, r2, #3
 80036de:	0092      	lsls	r2, r2, #2
 80036e0:	4093      	lsls	r3, r2
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e8:	4935      	ldr	r1, [pc, #212]	; (80037c0 <HAL_GPIO_Init+0x310>)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3302      	adds	r3, #2
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f6:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <HAL_GPIO_Init+0x334>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800371a:	4a32      	ldr	r2, [pc, #200]	; (80037e4 <HAL_GPIO_Init+0x334>)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003720:	4b30      	ldr	r3, [pc, #192]	; (80037e4 <HAL_GPIO_Init+0x334>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003744:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <HAL_GPIO_Init+0x334>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800374a:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <HAL_GPIO_Init+0x334>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800376e:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_GPIO_Init+0x334>)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_GPIO_Init+0x334>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003798:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <HAL_GPIO_Init+0x334>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3301      	adds	r3, #1
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	f67f ae90 	bls.w	80034cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3724      	adds	r7, #36	; 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40013800 	.word	0x40013800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	40020400 	.word	0x40020400
 80037cc:	40020800 	.word	0x40020800
 80037d0:	40020c00 	.word	0x40020c00
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40021400 	.word	0x40021400
 80037dc:	40021800 	.word	0x40021800
 80037e0:	40021c00 	.word	0x40021c00
 80037e4:	40013c00 	.word	0x40013c00

080037e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
 8003804:	e001      	b.n	800380a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800380a:	7bfb      	ldrb	r3, [r7, #15]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
 8003824:	4613      	mov	r3, r2
 8003826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003828:	787b      	ldrb	r3, [r7, #1]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800382e:	887a      	ldrh	r2, [r7, #2]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003834:	e003      	b.n	800383e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003836:	887b      	ldrh	r3, [r7, #2]
 8003838:	041a      	lsls	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	619a      	str	r2, [r3, #24]
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800385c:	887a      	ldrh	r2, [r7, #2]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4013      	ands	r3, r2
 8003862:	041a      	lsls	r2, r3, #16
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	43d9      	mvns	r1, r3
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	400b      	ands	r3, r1
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	619a      	str	r2, [r3, #24]
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e12b      	b.n	8003aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe fa00 	bl	8001cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2224      	movs	r2, #36	; 0x24
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e4:	f002 fa5c 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 80038e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a81      	ldr	r2, [pc, #516]	; (8003af4 <HAL_I2C_Init+0x274>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d807      	bhi.n	8003904 <HAL_I2C_Init+0x84>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a80      	ldr	r2, [pc, #512]	; (8003af8 <HAL_I2C_Init+0x278>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	bf94      	ite	ls
 80038fc:	2301      	movls	r3, #1
 80038fe:	2300      	movhi	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e006      	b.n	8003912 <HAL_I2C_Init+0x92>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a7d      	ldr	r2, [pc, #500]	; (8003afc <HAL_I2C_Init+0x27c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0e7      	b.n	8003aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a78      	ldr	r2, [pc, #480]	; (8003b00 <HAL_I2C_Init+0x280>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0c9b      	lsrs	r3, r3, #18
 8003924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a6a      	ldr	r2, [pc, #424]	; (8003af4 <HAL_I2C_Init+0x274>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d802      	bhi.n	8003954 <HAL_I2C_Init+0xd4>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3301      	adds	r3, #1
 8003952:	e009      	b.n	8003968 <HAL_I2C_Init+0xe8>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	4a69      	ldr	r2, [pc, #420]	; (8003b04 <HAL_I2C_Init+0x284>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	3301      	adds	r3, #1
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	430b      	orrs	r3, r1
 800396e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800397a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	495c      	ldr	r1, [pc, #368]	; (8003af4 <HAL_I2C_Init+0x274>)
 8003984:	428b      	cmp	r3, r1
 8003986:	d819      	bhi.n	80039bc <HAL_I2C_Init+0x13c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e59      	subs	r1, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fbb1 f3f3 	udiv	r3, r1, r3
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	f640 73fc 	movw	r3, #4092	; 0xffc
 800399c:	400b      	ands	r3, r1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_I2C_Init+0x138>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e59      	subs	r1, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b6:	e051      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039b8:	2304      	movs	r3, #4
 80039ba:	e04f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d111      	bne.n	80039e8 <HAL_I2C_Init+0x168>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e012      	b.n	8003a0e <HAL_I2C_Init+0x18e>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Init+0x196>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10e      	bne.n	8003a3c <HAL_I2C_Init+0x1bc>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e58      	subs	r0, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	440b      	add	r3, r1
 8003a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3a:	e00f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	0099      	lsls	r1, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	6809      	ldr	r1, [r1, #0]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6911      	ldr	r1, [r2, #16]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68d2      	ldr	r2, [r2, #12]
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	000186a0 	.word	0x000186a0
 8003af8:	001e847f 	.word	0x001e847f
 8003afc:	003d08ff 	.word	0x003d08ff
 8003b00:	431bde83 	.word	0x431bde83
 8003b04:	10624dd3 	.word	0x10624dd3

08003b08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d003      	beq.n	8003b40 <HAL_I2C_EV_IRQHandler+0x38>
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	f040 80c1 	bne.w	8003cc2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <HAL_I2C_EV_IRQHandler+0x6e>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b60:	d003      	beq.n	8003b6a <HAL_I2C_EV_IRQHandler+0x62>
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b68:	d101      	bne.n	8003b6e <HAL_I2C_EV_IRQHandler+0x66>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_I2C_EV_IRQHandler+0x68>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f000 8132 	beq.w	8003dda <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00c      	beq.n	8003b9a <HAL_I2C_EV_IRQHandler+0x92>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	0a5b      	lsrs	r3, r3, #9
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d006      	beq.n	8003b9a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f001 fc7b 	bl	8005488 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fd83 	bl	800469e <I2C_Master_SB>
 8003b98:	e092      	b.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0xb2>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	0a5b      	lsrs	r3, r3, #9
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fdf9 	bl	80047aa <I2C_Master_ADD10>
 8003bb8:	e082      	b.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_I2C_EV_IRQHandler+0xd2>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	0a5b      	lsrs	r3, r3, #9
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fe13 	bl	80047fe <I2C_Master_ADDR>
 8003bd8:	e072      	b.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d03b      	beq.n	8003c5e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf4:	f000 80f3 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	09db      	lsrs	r3, r3, #7
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00f      	beq.n	8003c24 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	0a9b      	lsrs	r3, r3, #10
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f9f3 	bl	8004008 <I2C_MasterTransmit_TXE>
 8003c22:	e04d      	b.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80d6 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	0a5b      	lsrs	r3, r3, #9
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80cf 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c40:	7bbb      	ldrb	r3, [r7, #14]
 8003c42:	2b21      	cmp	r3, #33	; 0x21
 8003c44:	d103      	bne.n	8003c4e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fa7a 	bl	8004140 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c4c:	e0c7      	b.n	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	f040 80c4 	bne.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fae8 	bl	800422c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c5c:	e0bf      	b.n	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6c:	f000 80b7 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00f      	beq.n	8003c9c <HAL_I2C_EV_IRQHandler+0x194>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	0a9b      	lsrs	r3, r3, #10
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_I2C_EV_IRQHandler+0x194>
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fb5d 	bl	8004354 <I2C_MasterReceive_RXNE>
 8003c9a:	e011      	b.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 809a 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	0a5b      	lsrs	r3, r3, #9
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8093 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fc06 	bl	80044ca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cbe:	e08e      	b.n	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cc0:	e08d      	b.n	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	e007      	b.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	085b      	lsrs	r3, r3, #1
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d012      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x20e>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	0a5b      	lsrs	r3, r3, #9
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d0c:	69b9      	ldr	r1, [r7, #24]
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 ffc4 	bl	8004c9c <I2C_Slave_ADDR>
 8003d14:	e066      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_I2C_EV_IRQHandler+0x22e>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	0a5b      	lsrs	r3, r3, #9
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fffe 	bl	8004d30 <I2C_Slave_STOPF>
 8003d34:	e056      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d36:	7bbb      	ldrb	r3, [r7, #14]
 8003d38:	2b21      	cmp	r3, #33	; 0x21
 8003d3a:	d002      	beq.n	8003d42 <HAL_I2C_EV_IRQHandler+0x23a>
 8003d3c:	7bbb      	ldrb	r3, [r7, #14]
 8003d3e:	2b29      	cmp	r3, #41	; 0x29
 8003d40:	d125      	bne.n	8003d8e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	09db      	lsrs	r3, r3, #7
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00f      	beq.n	8003d6e <HAL_I2C_EV_IRQHandler+0x266>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	0a9b      	lsrs	r3, r3, #10
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_I2C_EV_IRQHandler+0x266>
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 feda 	bl	8004b20 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d6c:	e039      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d033      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2da>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	0a5b      	lsrs	r3, r3, #9
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02d      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 ff07 	bl	8004b9a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8c:	e029      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00f      	beq.n	8003dba <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	0a9b      	lsrs	r3, r3, #10
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_I2C_EV_IRQHandler+0x2b2>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	089b      	lsrs	r3, r3, #2
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 ff12 	bl	8004bdc <I2C_SlaveReceive_RXNE>
 8003db8:	e014      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	089b      	lsrs	r3, r3, #2
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00e      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	0a5b      	lsrs	r3, r3, #9
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 ff40 	bl	8004c58 <I2C_SlaveReceive_BTF>
 8003dd8:	e004      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003de2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b08a      	sub	sp, #40	; 0x28
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e0c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00e      	beq.n	8003e38 <HAL_I2C_ER_IRQHandler+0x4e>
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e36:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	0a5b      	lsrs	r3, r3, #9
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00e      	beq.n	8003e62 <HAL_I2C_ER_IRQHandler+0x78>
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003e60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	0a9b      	lsrs	r3, r3, #10
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d03f      	beq.n	8003eee <HAL_I2C_ER_IRQHandler+0x104>
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d039      	beq.n	8003eee <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003e7a:	7efb      	ldrb	r3, [r7, #27]
 8003e7c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003e94:	7ebb      	ldrb	r3, [r7, #26]
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d112      	bne.n	8003ec0 <HAL_I2C_ER_IRQHandler+0xd6>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10f      	bne.n	8003ec0 <HAL_I2C_ER_IRQHandler+0xd6>
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	2b21      	cmp	r3, #33	; 0x21
 8003ea4:	d008      	beq.n	8003eb8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003ea6:	7cfb      	ldrb	r3, [r7, #19]
 8003ea8:	2b29      	cmp	r3, #41	; 0x29
 8003eaa:	d005      	beq.n	8003eb8 <HAL_I2C_ER_IRQHandler+0xce>
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	2b28      	cmp	r3, #40	; 0x28
 8003eb0:	d106      	bne.n	8003ec0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b21      	cmp	r3, #33	; 0x21
 8003eb6:	d103      	bne.n	8003ec0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f001 f869 	bl	8004f90 <I2C_Slave_AF>
 8003ebe:	e016      	b.n	8003eee <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ec8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	f043 0304 	orr.w	r3, r3, #4
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ed2:	7efb      	ldrb	r3, [r7, #27]
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d002      	beq.n	8003ede <HAL_I2C_ER_IRQHandler+0xf4>
 8003ed8:	7efb      	ldrb	r3, [r7, #27]
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d107      	bne.n	8003eee <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	0adb      	lsrs	r3, r3, #11
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00e      	beq.n	8003f18 <HAL_I2C_ER_IRQHandler+0x12e>
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	f043 0308 	orr.w	r3, r3, #8
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f16:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f001 f8a0 	bl	8005070 <I2C_ITError>
  }
}
 8003f30:	bf00      	nop
 8003f32:	3728      	adds	r7, #40	; 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
 8003f94:	4613      	mov	r3, r2
 8003f96:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004016:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800401e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	2b00      	cmp	r3, #0
 800402c:	d150      	bne.n	80040d0 <I2C_MasterTransmit_TXE+0xc8>
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	2b21      	cmp	r3, #33	; 0x21
 8004032:	d14d      	bne.n	80040d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b08      	cmp	r3, #8
 8004038:	d01d      	beq.n	8004076 <I2C_MasterTransmit_TXE+0x6e>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b20      	cmp	r3, #32
 800403e:	d01a      	beq.n	8004076 <I2C_MasterTransmit_TXE+0x6e>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004046:	d016      	beq.n	8004076 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004056:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2211      	movs	r2, #17
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ff62 	bl	8003f38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004074:	e060      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004084:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004094:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d107      	bne.n	80040c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ff7d 	bl	8003fb8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040be:	e03b      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff35 	bl	8003f38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040ce:	e033      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b21      	cmp	r3, #33	; 0x21
 80040d4:	d005      	beq.n	80040e2 <I2C_MasterTransmit_TXE+0xda>
 80040d6:	7bbb      	ldrb	r3, [r7, #14]
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d12d      	bne.n	8004138 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b22      	cmp	r3, #34	; 0x22
 80040e0:	d12a      	bne.n	8004138 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d108      	bne.n	80040fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80040fc:	e01c      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d103      	bne.n	8004112 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f88e 	bl	800422c <I2C_MemoryTransmit_TXE_BTF>
}
 8004110:	e012      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004136:	e7ff      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b21      	cmp	r3, #33	; 0x21
 8004158:	d164      	bne.n	8004224 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d012      	beq.n	800418a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004188:	e04c      	b.n	8004224 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d01d      	beq.n	80041cc <I2C_MasterTransmit_BTF+0x8c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b20      	cmp	r3, #32
 8004194:	d01a      	beq.n	80041cc <I2C_MasterTransmit_BTF+0x8c>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800419c:	d016      	beq.n	80041cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2211      	movs	r2, #17
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff feb7 	bl	8003f38 <HAL_I2C_MasterTxCpltCallback>
}
 80041ca:	e02b      	b.n	8004224 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b40      	cmp	r3, #64	; 0x40
 8004204:	d107      	bne.n	8004216 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fed2 	bl	8003fb8 <HAL_I2C_MemTxCpltCallback>
}
 8004214:	e006      	b.n	8004224 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe8a 	bl	8003f38 <HAL_I2C_MasterTxCpltCallback>
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d11d      	bne.n	8004280 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10b      	bne.n	8004264 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	b2da      	uxtb	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	1c9a      	adds	r2, r3, #2
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004262:	e073      	b.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004268:	b29b      	uxth	r3, r3
 800426a:	121b      	asrs	r3, r3, #8
 800426c:	b2da      	uxtb	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800427e:	e065      	b.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	2b01      	cmp	r3, #1
 8004286:	d10b      	bne.n	80042a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	b2da      	uxtb	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800429e:	e055      	b.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d151      	bne.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b22      	cmp	r3, #34	; 0x22
 80042ac:	d10d      	bne.n	80042ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042c8:	e040      	b.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d015      	beq.n	8004300 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b21      	cmp	r3, #33	; 0x21
 80042d8:	d112      	bne.n	8004300 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	781a      	ldrb	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042fe:	e025      	b.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d120      	bne.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b21      	cmp	r3, #33	; 0x21
 800430e:	d11d      	bne.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800431e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fe36 	bl	8003fb8 <HAL_I2C_MemTxCpltCallback>
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b22      	cmp	r3, #34	; 0x22
 8004366:	f040 80ac 	bne.w	80044c2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d921      	bls.n	80043bc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	f040 808c 	bne.w	80044c2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80043ba:	e082      	b.n	80044c2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d075      	beq.n	80044b0 <I2C_MasterReceive_RXNE+0x15c>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d002      	beq.n	80043d0 <I2C_MasterReceive_RXNE+0x7c>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d16f      	bne.n	80044b0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f001 f827 	bl	8005424 <I2C_WaitOnSTOPRequestThroughIT>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d142      	bne.n	8004462 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d10a      	bne.n	800444c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fdc1 	bl	8003fcc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800444a:	e03a      	b.n	80044c2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2212      	movs	r2, #18
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff fd76 	bl	8003f4c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004460:	e02f      	b.n	80044c2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004470:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fd99 	bl	8003fe0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044ae:	e008      	b.n	80044c2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044be:	605a      	str	r2, [r3, #4]
}
 80044c0:	e7ff      	b.n	80044c2 <I2C_MasterReceive_RXNE+0x16e>
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d11b      	bne.n	800451a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004518:	e0bd      	b.n	8004696 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b03      	cmp	r3, #3
 8004522:	d129      	bne.n	8004578 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004532:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d00a      	beq.n	8004550 <I2C_MasterReceive_BTF+0x86>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d007      	beq.n	8004550 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004576:	e08e      	b.n	8004696 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d176      	bne.n	8004670 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d002      	beq.n	800458e <I2C_MasterReceive_BTF+0xc4>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b10      	cmp	r3, #16
 800458c:	d108      	bne.n	80045a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e019      	b.n	80045d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d002      	beq.n	80045ac <I2C_MasterReceive_BTF+0xe2>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d108      	bne.n	80045be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e00a      	b.n	80045d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d007      	beq.n	80045d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800462e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d10a      	bne.n	800465a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fcba 	bl	8003fcc <HAL_I2C_MemRxCpltCallback>
}
 8004658:	e01d      	b.n	8004696 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2212      	movs	r2, #18
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff fc6f 	bl	8003f4c <HAL_I2C_MasterRxCpltCallback>
}
 800466e:	e012      	b.n	8004696 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d117      	bne.n	80046e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80046cc:	e067      	b.n	800479e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	611a      	str	r2, [r3, #16]
}
 80046e0:	e05d      	b.n	800479e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ea:	d133      	bne.n	8004754 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b21      	cmp	r3, #33	; 0x21
 80046f6:	d109      	bne.n	800470c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004708:	611a      	str	r2, [r3, #16]
 800470a:	e008      	b.n	800471e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	b2da      	uxtb	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <I2C_Master_SB+0x92>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d108      	bne.n	8004742 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d032      	beq.n	800479e <I2C_Master_SB+0x100>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d02d      	beq.n	800479e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004750:	605a      	str	r2, [r3, #4]
}
 8004752:	e024      	b.n	800479e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10e      	bne.n	800477a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	b29b      	uxth	r3, r3
 8004762:	11db      	asrs	r3, r3, #7
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0306 	and.w	r3, r3, #6
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f063 030f 	orn	r3, r3, #15
 8004770:	b2da      	uxtb	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	611a      	str	r2, [r3, #16]
}
 8004778:	e011      	b.n	800479e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477e:	2b01      	cmp	r3, #1
 8004780:	d10d      	bne.n	800479e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	b29b      	uxth	r3, r3
 8004788:	11db      	asrs	r3, r3, #7
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 0306 	and.w	r3, r3, #6
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f063 030e 	orn	r3, r3, #14
 8004796:	b2da      	uxtb	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <I2C_Master_ADD10+0x26>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00c      	beq.n	80047f2 <I2C_Master_ADD10+0x48>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f0:	605a      	str	r2, [r3, #4]
  }
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80047fe:	b480      	push	{r7}
 8004800:	b091      	sub	sp, #68	; 0x44
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b22      	cmp	r3, #34	; 0x22
 8004826:	f040 8169 	bne.w	8004afc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <I2C_Master_ADDR+0x54>
 8004832:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d10b      	bne.n	8004852 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483a:	2300      	movs	r3, #0
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	633b      	str	r3, [r7, #48]	; 0x30
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	633b      	str	r3, [r7, #48]	; 0x30
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	e160      	b.n	8004b14 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004856:	2b00      	cmp	r3, #0
 8004858:	d11d      	bne.n	8004896 <I2C_Master_ADDR+0x98>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004862:	d118      	bne.n	8004896 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004888:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	651a      	str	r2, [r3, #80]	; 0x50
 8004894:	e13e      	b.n	8004b14 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d113      	bne.n	80048c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a0:	2300      	movs	r3, #0
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e115      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	f040 808a 	bne.w	80049e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80048d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048da:	d137      	bne.n	800494c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fa:	d113      	bne.n	8004924 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	e0e7      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004924:	2300      	movs	r3, #0
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e0d3      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	2b08      	cmp	r3, #8
 8004950:	d02e      	beq.n	80049b0 <I2C_Master_ADDR+0x1b2>
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	2b20      	cmp	r3, #32
 8004956:	d02b      	beq.n	80049b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	2b12      	cmp	r3, #18
 800495c:	d102      	bne.n	8004964 <I2C_Master_ADDR+0x166>
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	2b01      	cmp	r3, #1
 8004962:	d125      	bne.n	80049b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	2b04      	cmp	r3, #4
 8004968:	d00e      	beq.n	8004988 <I2C_Master_ADDR+0x18a>
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	2b02      	cmp	r3, #2
 800496e:	d00b      	beq.n	8004988 <I2C_Master_ADDR+0x18a>
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	2b10      	cmp	r3, #16
 8004974:	d008      	beq.n	8004988 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e007      	b.n	8004998 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004996:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004998:	2300      	movs	r3, #0
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	e0a1      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e085      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d14d      	bne.n	8004a8e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d016      	beq.n	8004a26 <I2C_Master_ADDR+0x228>
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d013      	beq.n	8004a26 <I2C_Master_ADDR+0x228>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d010      	beq.n	8004a26 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a12:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e007      	b.n	8004a36 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a34:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a44:	d117      	bne.n	8004a76 <I2C_Master_ADDR+0x278>
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a4c:	d00b      	beq.n	8004a66 <I2C_Master_ADDR+0x268>
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d008      	beq.n	8004a66 <I2C_Master_ADDR+0x268>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d005      	beq.n	8004a66 <I2C_Master_ADDR+0x268>
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d002      	beq.n	8004a66 <I2C_Master_ADDR+0x268>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d107      	bne.n	8004a76 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	e032      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a9c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aac:	d117      	bne.n	8004ade <I2C_Master_ADDR+0x2e0>
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ab4:	d00b      	beq.n	8004ace <I2C_Master_ADDR+0x2d0>
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d008      	beq.n	8004ace <I2C_Master_ADDR+0x2d0>
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d005      	beq.n	8004ace <I2C_Master_ADDR+0x2d0>
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d002      	beq.n	8004ace <I2C_Master_ADDR+0x2d0>
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d107      	bne.n	8004ade <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004adc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004afa:	e00b      	b.n	8004b14 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
}
 8004b12:	e7ff      	b.n	8004b14 <I2C_Master_ADDR+0x316>
 8004b14:	bf00      	nop
 8004b16:	3744      	adds	r7, #68	; 0x44
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02b      	beq.n	8004b92 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	781a      	ldrb	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d114      	bne.n	8004b92 <I2C_SlaveTransmit_TXE+0x72>
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	2b29      	cmp	r3, #41	; 0x29
 8004b6c:	d111      	bne.n	8004b92 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2221      	movs	r2, #33	; 0x21
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2228      	movs	r2, #40	; 0x28
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff f9e7 	bl	8003f60 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d011      	beq.n	8004bd0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d02c      	beq.n	8004c50 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d114      	bne.n	8004c50 <I2C_SlaveReceive_RXNE+0x74>
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	2b2a      	cmp	r3, #42	; 0x2a
 8004c2a:	d111      	bne.n	8004c50 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2222      	movs	r2, #34	; 0x22
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2228      	movs	r2, #40	; 0x28
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff f992 	bl	8003f74 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d012      	beq.n	8004c90 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cb6:	2b28      	cmp	r3, #40	; 0x28
 8004cb8:	d127      	bne.n	8004d0a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	09db      	lsrs	r3, r3, #7
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	81bb      	strh	r3, [r7, #12]
 8004cec:	e002      	b.n	8004cf4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004cfc:	89ba      	ldrh	r2, [r7, #12]
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff f940 	bl	8003f88 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d08:	e00e      	b.n	8004d28 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8c:	d172      	bne.n	8004e74 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b22      	cmp	r3, #34	; 0x22
 8004d92:	d002      	beq.n	8004d9a <I2C_Slave_STOPF+0x6a>
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b2a      	cmp	r3, #42	; 0x2a
 8004d98:	d135      	bne.n	8004e06 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fb5d 	bl	8003492 <HAL_DMA_GetState>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d049      	beq.n	8004e72 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	4a69      	ldr	r2, [pc, #420]	; (8004f88 <I2C_Slave_STOPF+0x258>)
 8004de4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fb2f 	bl	800344e <HAL_DMA_Abort_IT>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d03d      	beq.n	8004e72 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e00:	4610      	mov	r0, r2
 8004e02:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e04:	e035      	b.n	8004e72 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f043 0204 	orr.w	r2, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fb27 	bl	8003492 <HAL_DMA_GetState>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d014      	beq.n	8004e74 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	4a4e      	ldr	r2, [pc, #312]	; (8004f88 <I2C_Slave_STOPF+0x258>)
 8004e50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe faf9 	bl	800344e <HAL_DMA_Abort_IT>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4798      	blx	r3
 8004e70:	e000      	b.n	8004e74 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e72:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d03e      	beq.n	8004efc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d112      	bne.n	8004eb2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d112      	bne.n	8004ee6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	f043 0204 	orr.w	r2, r3, #4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f8b3 	bl	8005070 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f0a:	e039      	b.n	8004f80 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f10:	d109      	bne.n	8004f26 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2228      	movs	r2, #40	; 0x28
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff f827 	bl	8003f74 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b28      	cmp	r3, #40	; 0x28
 8004f30:	d111      	bne.n	8004f56 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <I2C_Slave_STOPF+0x25c>)
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff f828 	bl	8003fa4 <HAL_I2C_ListenCpltCallback>
}
 8004f54:	e014      	b.n	8004f80 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	2b22      	cmp	r3, #34	; 0x22
 8004f5c:	d002      	beq.n	8004f64 <I2C_Slave_STOPF+0x234>
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b22      	cmp	r3, #34	; 0x22
 8004f62:	d10d      	bne.n	8004f80 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fe fffa 	bl	8003f74 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	080052d5 	.word	0x080052d5
 8004f8c:	ffff0000 	.word	0xffff0000

08004f90 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d002      	beq.n	8004fb2 <I2C_Slave_AF+0x22>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d129      	bne.n	8005006 <I2C_Slave_AF+0x76>
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b28      	cmp	r3, #40	; 0x28
 8004fb6:	d126      	bne.n	8005006 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a2c      	ldr	r2, [pc, #176]	; (800506c <I2C_Slave_AF+0xdc>)
 8004fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fcc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fd6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fe ffd0 	bl	8003fa4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005004:	e02e      	b.n	8005064 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	2b21      	cmp	r3, #33	; 0x21
 800500a:	d126      	bne.n	800505a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a17      	ldr	r2, [pc, #92]	; (800506c <I2C_Slave_AF+0xdc>)
 8005010:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2221      	movs	r2, #33	; 0x21
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005036:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005040:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005050:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fe ff84 	bl	8003f60 <HAL_I2C_SlaveTxCpltCallback>
}
 8005058:	e004      	b.n	8005064 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005062:	615a      	str	r2, [r3, #20]
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	ffff0000 	.word	0xffff0000

08005070 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005086:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	2b10      	cmp	r3, #16
 800508c:	d002      	beq.n	8005094 <I2C_ITError+0x24>
 800508e:	7bbb      	ldrb	r3, [r7, #14]
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	d10a      	bne.n	80050aa <I2C_ITError+0x3a>
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b22      	cmp	r3, #34	; 0x22
 8005098:	d107      	bne.n	80050aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050b0:	2b28      	cmp	r3, #40	; 0x28
 80050b2:	d107      	bne.n	80050c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2228      	movs	r2, #40	; 0x28
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050c2:	e015      	b.n	80050f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d2:	d00a      	beq.n	80050ea <I2C_ITError+0x7a>
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b60      	cmp	r3, #96	; 0x60
 80050d8:	d007      	beq.n	80050ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fe:	d162      	bne.n	80051c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800510e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	d020      	beq.n	8005160 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005122:	4a6a      	ldr	r2, [pc, #424]	; (80052cc <I2C_ITError+0x25c>)
 8005124:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe f98f 	bl	800344e <HAL_DMA_Abort_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8089 	beq.w	800524a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800515a:	4610      	mov	r0, r2
 800515c:	4798      	blx	r3
 800515e:	e074      	b.n	800524a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	4a59      	ldr	r2, [pc, #356]	; (80052cc <I2C_ITError+0x25c>)
 8005166:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	4618      	mov	r0, r3
 800516e:	f7fe f96e 	bl	800344e <HAL_DMA_Abort_IT>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d068      	beq.n	800524a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	d10b      	bne.n	800519e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
 80051c4:	e041      	b.n	800524a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b60      	cmp	r3, #96	; 0x60
 80051d0:	d125      	bne.n	800521e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d10b      	bne.n	8005206 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0201 	bic.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fe feec 	bl	8003ff4 <HAL_I2C_AbortCpltCallback>
 800521c:	e015      	b.n	800524a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d10b      	bne.n	8005244 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fe fecb 	bl	8003fe0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10e      	bne.n	8005278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005286:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b04      	cmp	r3, #4
 800529a:	d113      	bne.n	80052c4 <I2C_ITError+0x254>
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b28      	cmp	r3, #40	; 0x28
 80052a0:	d110      	bne.n	80052c4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a0a      	ldr	r2, [pc, #40]	; (80052d0 <I2C_ITError+0x260>)
 80052a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fe fe70 	bl	8003fa4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	080052d5 	.word	0x080052d5
 80052d0:	ffff0000 	.word	0xffff0000

080052d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80052ee:	4b4b      	ldr	r3, [pc, #300]	; (800541c <I2C_DMAAbort+0x148>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	08db      	lsrs	r3, r3, #3
 80052f4:	4a4a      	ldr	r2, [pc, #296]	; (8005420 <I2C_DMAAbort+0x14c>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	0a1a      	lsrs	r2, r3, #8
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	00da      	lsls	r2, r3, #3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f043 0220 	orr.w	r2, r3, #32
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800531a:	e00a      	b.n	8005332 <I2C_DMAAbort+0x5e>
    }
    count--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3b01      	subs	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d0ea      	beq.n	8005308 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533e:	2200      	movs	r2, #0
 8005340:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	2200      	movs	r2, #0
 8005350:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005360:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2200      	movs	r2, #0
 8005366:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	2200      	movs	r2, #0
 8005376:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	2200      	movs	r2, #0
 8005386:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b60      	cmp	r3, #96	; 0x60
 80053a2:	d10e      	bne.n	80053c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2200      	movs	r2, #0
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053ba:	6978      	ldr	r0, [r7, #20]
 80053bc:	f7fe fe1a 	bl	8003ff4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053c0:	e027      	b.n	8005412 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053c8:	2b28      	cmp	r3, #40	; 0x28
 80053ca:	d117      	bne.n	80053fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2200      	movs	r2, #0
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2228      	movs	r2, #40	; 0x28
 80053f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053fa:	e007      	b.n	800540c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800540c:	6978      	ldr	r0, [r7, #20]
 800540e:	f7fe fde7 	bl	8003fe0 <HAL_I2C_ErrorCallback>
}
 8005412:	bf00      	nop
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000000 	.word	0x20000000
 8005420:	14f8b589 	.word	0x14f8b589

08005424 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005430:	4b13      	ldr	r3, [pc, #76]	; (8005480 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	08db      	lsrs	r3, r3, #3
 8005436:	4a13      	ldr	r2, [pc, #76]	; (8005484 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005438:	fba2 2303 	umull	r2, r3, r2, r3
 800543c:	0a1a      	lsrs	r2, r3, #8
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3b01      	subs	r3, #1
 800544a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d107      	bne.n	8005462 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f043 0220 	orr.w	r2, r3, #32
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e008      	b.n	8005474 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800546c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005470:	d0e9      	beq.n	8005446 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	20000000 	.word	0x20000000
 8005484:	14f8b589 	.word	0x14f8b589

08005488 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005498:	d103      	bne.n	80054a2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80054a0:	e007      	b.n	80054b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80054aa:	d102      	bne.n	80054b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2208      	movs	r2, #8
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e267      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d075      	beq.n	80055ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054de:	4b88      	ldr	r3, [pc, #544]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d00c      	beq.n	8005504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ea:	4b85      	ldr	r3, [pc, #532]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d112      	bne.n	800551c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054f6:	4b82      	ldr	r3, [pc, #520]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005502:	d10b      	bne.n	800551c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005504:	4b7e      	ldr	r3, [pc, #504]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d05b      	beq.n	80055c8 <HAL_RCC_OscConfig+0x108>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d157      	bne.n	80055c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e242      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005524:	d106      	bne.n	8005534 <HAL_RCC_OscConfig+0x74>
 8005526:	4b76      	ldr	r3, [pc, #472]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a75      	ldr	r2, [pc, #468]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	e01d      	b.n	8005570 <HAL_RCC_OscConfig+0xb0>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800553c:	d10c      	bne.n	8005558 <HAL_RCC_OscConfig+0x98>
 800553e:	4b70      	ldr	r3, [pc, #448]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a6f      	ldr	r2, [pc, #444]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	4b6d      	ldr	r3, [pc, #436]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a6c      	ldr	r2, [pc, #432]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e00b      	b.n	8005570 <HAL_RCC_OscConfig+0xb0>
 8005558:	4b69      	ldr	r3, [pc, #420]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a68      	ldr	r2, [pc, #416]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800555e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4b66      	ldr	r3, [pc, #408]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a65      	ldr	r2, [pc, #404]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800556a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800556e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d013      	beq.n	80055a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005578:	f7fc fee4 	bl	8002344 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005580:	f7fc fee0 	bl	8002344 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b64      	cmp	r3, #100	; 0x64
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e207      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005592:	4b5b      	ldr	r3, [pc, #364]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0xc0>
 800559e:	e014      	b.n	80055ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a0:	f7fc fed0 	bl	8002344 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a8:	f7fc fecc 	bl	8002344 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e1f3      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ba:	4b51      	ldr	r3, [pc, #324]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0xe8>
 80055c6:	e000      	b.n	80055ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d063      	beq.n	800569e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055d6:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055e2:	4b47      	ldr	r3, [pc, #284]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d11c      	bne.n	8005628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ee:	4b44      	ldr	r3, [pc, #272]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d116      	bne.n	8005628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055fa:	4b41      	ldr	r3, [pc, #260]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_RCC_OscConfig+0x152>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d001      	beq.n	8005612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e1c7      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005612:	4b3b      	ldr	r3, [pc, #236]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4937      	ldr	r1, [pc, #220]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005622:	4313      	orrs	r3, r2
 8005624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005626:	e03a      	b.n	800569e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005630:	4b34      	ldr	r3, [pc, #208]	; (8005704 <HAL_RCC_OscConfig+0x244>)
 8005632:	2201      	movs	r2, #1
 8005634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fc fe85 	bl	8002344 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800563e:	f7fc fe81 	bl	8002344 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e1a8      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005650:	4b2b      	ldr	r3, [pc, #172]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565c:	4b28      	ldr	r3, [pc, #160]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4925      	ldr	r1, [pc, #148]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800566c:	4313      	orrs	r3, r2
 800566e:	600b      	str	r3, [r1, #0]
 8005670:	e015      	b.n	800569e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005672:	4b24      	ldr	r3, [pc, #144]	; (8005704 <HAL_RCC_OscConfig+0x244>)
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005678:	f7fc fe64 	bl	8002344 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005680:	f7fc fe60 	bl	8002344 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e187      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005692:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f0      	bne.n	8005680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d036      	beq.n	8005718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d016      	beq.n	80056e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <HAL_RCC_OscConfig+0x248>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b8:	f7fc fe44 	bl	8002344 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c0:	f7fc fe40 	bl	8002344 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e167      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80056d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f0      	beq.n	80056c0 <HAL_RCC_OscConfig+0x200>
 80056de:	e01b      	b.n	8005718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <HAL_RCC_OscConfig+0x248>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056e6:	f7fc fe2d 	bl	8002344 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ec:	e00e      	b.n	800570c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ee:	f7fc fe29 	bl	8002344 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d907      	bls.n	800570c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e150      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
 8005700:	40023800 	.word	0x40023800
 8005704:	42470000 	.word	0x42470000
 8005708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800570c:	4b88      	ldr	r3, [pc, #544]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800570e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1ea      	bne.n	80056ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8097 	beq.w	8005854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005726:	2300      	movs	r3, #0
 8005728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800572a:	4b81      	ldr	r3, [pc, #516]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	4b7d      	ldr	r3, [pc, #500]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	4a7c      	ldr	r2, [pc, #496]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005744:	6413      	str	r3, [r2, #64]	; 0x40
 8005746:	4b7a      	ldr	r3, [pc, #488]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005752:	2301      	movs	r3, #1
 8005754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005756:	4b77      	ldr	r3, [pc, #476]	; (8005934 <HAL_RCC_OscConfig+0x474>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575e:	2b00      	cmp	r3, #0
 8005760:	d118      	bne.n	8005794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005762:	4b74      	ldr	r3, [pc, #464]	; (8005934 <HAL_RCC_OscConfig+0x474>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a73      	ldr	r2, [pc, #460]	; (8005934 <HAL_RCC_OscConfig+0x474>)
 8005768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800576e:	f7fc fde9 	bl	8002344 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005776:	f7fc fde5 	bl	8002344 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e10c      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005788:	4b6a      	ldr	r3, [pc, #424]	; (8005934 <HAL_RCC_OscConfig+0x474>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0f0      	beq.n	8005776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d106      	bne.n	80057aa <HAL_RCC_OscConfig+0x2ea>
 800579c:	4b64      	ldr	r3, [pc, #400]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	4a63      	ldr	r2, [pc, #396]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	6713      	str	r3, [r2, #112]	; 0x70
 80057a8:	e01c      	b.n	80057e4 <HAL_RCC_OscConfig+0x324>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d10c      	bne.n	80057cc <HAL_RCC_OscConfig+0x30c>
 80057b2:	4b5f      	ldr	r3, [pc, #380]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b6:	4a5e      	ldr	r2, [pc, #376]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	6713      	str	r3, [r2, #112]	; 0x70
 80057be:	4b5c      	ldr	r3, [pc, #368]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	4a5b      	ldr	r2, [pc, #364]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ca:	e00b      	b.n	80057e4 <HAL_RCC_OscConfig+0x324>
 80057cc:	4b58      	ldr	r3, [pc, #352]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	4a57      	ldr	r2, [pc, #348]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	6713      	str	r3, [r2, #112]	; 0x70
 80057d8:	4b55      	ldr	r3, [pc, #340]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	4a54      	ldr	r2, [pc, #336]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057de:	f023 0304 	bic.w	r3, r3, #4
 80057e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d015      	beq.n	8005818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ec:	f7fc fdaa 	bl	8002344 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f2:	e00a      	b.n	800580a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057f4:	f7fc fda6 	bl	8002344 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e0cb      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580a:	4b49      	ldr	r3, [pc, #292]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0ee      	beq.n	80057f4 <HAL_RCC_OscConfig+0x334>
 8005816:	e014      	b.n	8005842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005818:	f7fc fd94 	bl	8002344 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800581e:	e00a      	b.n	8005836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005820:	f7fc fd90 	bl	8002344 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f241 3288 	movw	r2, #5000	; 0x1388
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e0b5      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005836:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1ee      	bne.n	8005820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005842:	7dfb      	ldrb	r3, [r7, #23]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d105      	bne.n	8005854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005848:	4b39      	ldr	r3, [pc, #228]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	4a38      	ldr	r2, [pc, #224]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800584e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80a1 	beq.w	80059a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800585e:	4b34      	ldr	r3, [pc, #208]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 030c 	and.w	r3, r3, #12
 8005866:	2b08      	cmp	r3, #8
 8005868:	d05c      	beq.n	8005924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d141      	bne.n	80058f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005872:	4b31      	ldr	r3, [pc, #196]	; (8005938 <HAL_RCC_OscConfig+0x478>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7fc fd64 	bl	8002344 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005880:	f7fc fd60 	bl	8002344 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e087      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005892:	4b27      	ldr	r3, [pc, #156]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	019b      	lsls	r3, r3, #6
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	3b01      	subs	r3, #1
 80058b8:	041b      	lsls	r3, r3, #16
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	061b      	lsls	r3, r3, #24
 80058c2:	491b      	ldr	r1, [pc, #108]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058c8:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <HAL_RCC_OscConfig+0x478>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ce:	f7fc fd39 	bl	8002344 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d6:	f7fc fd35 	bl	8002344 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e05c      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e8:	4b11      	ldr	r3, [pc, #68]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x416>
 80058f4:	e054      	b.n	80059a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <HAL_RCC_OscConfig+0x478>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fc:	f7fc fd22 	bl	8002344 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005904:	f7fc fd1e 	bl	8002344 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e045      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005916:	4b06      	ldr	r3, [pc, #24]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x444>
 8005922:	e03d      	b.n	80059a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d107      	bne.n	800593c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e038      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
 8005930:	40023800 	.word	0x40023800
 8005934:	40007000 	.word	0x40007000
 8005938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800593c:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <HAL_RCC_OscConfig+0x4ec>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d028      	beq.n	800599c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d121      	bne.n	800599c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005962:	429a      	cmp	r2, r3
 8005964:	d11a      	bne.n	800599c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800596c:	4013      	ands	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005974:	4293      	cmp	r3, r2
 8005976:	d111      	bne.n	800599c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	085b      	lsrs	r3, r3, #1
 8005984:	3b01      	subs	r3, #1
 8005986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d107      	bne.n	800599c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40023800 	.word	0x40023800

080059b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0cc      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059c4:	4b68      	ldr	r3, [pc, #416]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d90c      	bls.n	80059ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	4b65      	ldr	r3, [pc, #404]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059da:	4b63      	ldr	r3, [pc, #396]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d001      	beq.n	80059ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0b8      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d020      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a04:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4a58      	ldr	r2, [pc, #352]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a1c:	4b53      	ldr	r3, [pc, #332]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4a52      	ldr	r2, [pc, #328]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a28:	4b50      	ldr	r3, [pc, #320]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	494d      	ldr	r1, [pc, #308]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d044      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d107      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4e:	4b47      	ldr	r3, [pc, #284]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d119      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e07f      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d003      	beq.n	8005a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d107      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6e:	4b3f      	ldr	r3, [pc, #252]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e06f      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a7e:	4b3b      	ldr	r3, [pc, #236]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e067      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a8e:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f023 0203 	bic.w	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4934      	ldr	r1, [pc, #208]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aa0:	f7fc fc50 	bl	8002344 <HAL_GetTick>
 8005aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa6:	e00a      	b.n	8005abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aa8:	f7fc fc4c 	bl	8002344 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e04f      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 020c 	and.w	r2, r3, #12
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d1eb      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad0:	4b25      	ldr	r3, [pc, #148]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d20c      	bcs.n	8005af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ade:	4b22      	ldr	r3, [pc, #136]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae6:	4b20      	ldr	r3, [pc, #128]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d001      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e032      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b04:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4916      	ldr	r1, [pc, #88]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	490e      	ldr	r1, [pc, #56]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b36:	f000 f821 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	091b      	lsrs	r3, r3, #4
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	490a      	ldr	r1, [pc, #40]	; (8005b70 <HAL_RCC_ClockConfig+0x1c0>)
 8005b48:	5ccb      	ldrb	r3, [r1, r3]
 8005b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4e:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fc fbb0 	bl	80022bc <HAL_InitTick>

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40023c00 	.word	0x40023c00
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	0800adc4 	.word	0x0800adc4
 8005b74:	20000000 	.word	0x20000000
 8005b78:	20000004 	.word	0x20000004

08005b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b80:	b094      	sub	sp, #80	; 0x50
 8005b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	647b      	str	r3, [r7, #68]	; 0x44
 8005b88:	2300      	movs	r3, #0
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b94:	4b79      	ldr	r3, [pc, #484]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 030c 	and.w	r3, r3, #12
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d00d      	beq.n	8005bbc <HAL_RCC_GetSysClockFreq+0x40>
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	f200 80e1 	bhi.w	8005d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d003      	beq.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bae:	e0db      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bb0:	4b73      	ldr	r3, [pc, #460]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005bb4:	e0db      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bb6:	4b73      	ldr	r3, [pc, #460]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x208>)
 8005bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bba:	e0d8      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bbc:	4b6f      	ldr	r3, [pc, #444]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bc6:	4b6d      	ldr	r3, [pc, #436]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d063      	beq.n	8005c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bd2:	4b6a      	ldr	r3, [pc, #424]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	099b      	lsrs	r3, r3, #6
 8005bd8:	2200      	movs	r2, #0
 8005bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be4:	633b      	str	r3, [r7, #48]	; 0x30
 8005be6:	2300      	movs	r3, #0
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bee:	4622      	mov	r2, r4
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f04f 0100 	mov.w	r1, #0
 8005bfa:	0159      	lsls	r1, r3, #5
 8005bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c00:	0150      	lsls	r0, r2, #5
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4621      	mov	r1, r4
 8005c08:	1a51      	subs	r1, r2, r1
 8005c0a:	6139      	str	r1, [r7, #16]
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c20:	4659      	mov	r1, fp
 8005c22:	018b      	lsls	r3, r1, #6
 8005c24:	4651      	mov	r1, sl
 8005c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c2a:	4651      	mov	r1, sl
 8005c2c:	018a      	lsls	r2, r1, #6
 8005c2e:	4651      	mov	r1, sl
 8005c30:	ebb2 0801 	subs.w	r8, r2, r1
 8005c34:	4659      	mov	r1, fp
 8005c36:	eb63 0901 	sbc.w	r9, r3, r1
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c4e:	4690      	mov	r8, r2
 8005c50:	4699      	mov	r9, r3
 8005c52:	4623      	mov	r3, r4
 8005c54:	eb18 0303 	adds.w	r3, r8, r3
 8005c58:	60bb      	str	r3, [r7, #8]
 8005c5a:	462b      	mov	r3, r5
 8005c5c:	eb49 0303 	adc.w	r3, r9, r3
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c6e:	4629      	mov	r1, r5
 8005c70:	024b      	lsls	r3, r1, #9
 8005c72:	4621      	mov	r1, r4
 8005c74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c78:	4621      	mov	r1, r4
 8005c7a:	024a      	lsls	r2, r1, #9
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c82:	2200      	movs	r2, #0
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c8c:	f7fa ff8c 	bl	8000ba8 <__aeabi_uldivmod>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4613      	mov	r3, r2
 8005c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c98:	e058      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9a:	4b38      	ldr	r3, [pc, #224]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	099b      	lsrs	r3, r3, #6
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005caa:	623b      	str	r3, [r7, #32]
 8005cac:	2300      	movs	r3, #0
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	f04f 0000 	mov.w	r0, #0
 8005cbc:	f04f 0100 	mov.w	r1, #0
 8005cc0:	0159      	lsls	r1, r3, #5
 8005cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cc6:	0150      	lsls	r0, r2, #5
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4641      	mov	r1, r8
 8005cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cec:	ebb2 040a 	subs.w	r4, r2, sl
 8005cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	00eb      	lsls	r3, r5, #3
 8005cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d02:	00e2      	lsls	r2, r4, #3
 8005d04:	4614      	mov	r4, r2
 8005d06:	461d      	mov	r5, r3
 8005d08:	4643      	mov	r3, r8
 8005d0a:	18e3      	adds	r3, r4, r3
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	464b      	mov	r3, r9
 8005d10:	eb45 0303 	adc.w	r3, r5, r3
 8005d14:	607b      	str	r3, [r7, #4]
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d22:	4629      	mov	r1, r5
 8005d24:	028b      	lsls	r3, r1, #10
 8005d26:	4621      	mov	r1, r4
 8005d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	028a      	lsls	r2, r1, #10
 8005d30:	4610      	mov	r0, r2
 8005d32:	4619      	mov	r1, r3
 8005d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d36:	2200      	movs	r2, #0
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	61fa      	str	r2, [r7, #28]
 8005d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d40:	f7fa ff32 	bl	8000ba8 <__aeabi_uldivmod>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4613      	mov	r3, r2
 8005d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	0c1b      	lsrs	r3, r3, #16
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	3301      	adds	r3, #1
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d66:	e002      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3750      	adds	r7, #80	; 0x50
 8005d74:	46bd      	mov	sp, r7
 8005d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	00f42400 	.word	0x00f42400
 8005d84:	007a1200 	.word	0x007a1200

08005d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d8c:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20000000 	.word	0x20000000

08005da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005da4:	f7ff fff0 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005da8:	4602      	mov	r2, r0
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	0a9b      	lsrs	r3, r3, #10
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	4903      	ldr	r1, [pc, #12]	; (8005dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005db6:	5ccb      	ldrb	r3, [r1, r3]
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	0800add4 	.word	0x0800add4

08005dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dcc:	f7ff ffdc 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	0b5b      	lsrs	r3, r3, #13
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	4903      	ldr	r1, [pc, #12]	; (8005dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dde:	5ccb      	ldrb	r3, [r1, r3]
 8005de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40023800 	.word	0x40023800
 8005dec:	0800add4 	.word	0x0800add4

08005df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e07b      	b.n	8005efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d108      	bne.n	8005e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e12:	d009      	beq.n	8005e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	61da      	str	r2, [r3, #28]
 8005e1a:	e005      	b.n	8005e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fb ff8a 	bl	8001d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eac:	ea42 0103 	orr.w	r1, r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	0c1b      	lsrs	r3, r3, #16
 8005ec6:	f003 0104 	and.w	r1, r3, #4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f003 0210 	and.w	r2, r3, #16
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	099b      	lsrs	r3, r3, #6
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10f      	bne.n	8005f48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	099b      	lsrs	r3, r3, #6
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
    return;
 8005f46:	e0d7      	b.n	80060f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	085b      	lsrs	r3, r3, #1
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <HAL_SPI_IRQHandler+0x66>
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	09db      	lsrs	r3, r3, #7
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
    return;
 8005f68:	e0c6      	b.n	80060f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10c      	bne.n	8005f90 <HAL_SPI_IRQHandler+0x8c>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	099b      	lsrs	r3, r3, #6
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	0a1b      	lsrs	r3, r3, #8
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80b4 	beq.w	80060f8 <HAL_SPI_IRQHandler+0x1f4>
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80ad 	beq.w	80060f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	099b      	lsrs	r3, r3, #6
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d023      	beq.n	8005ff2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d011      	beq.n	8005fda <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	f043 0204 	orr.w	r2, r3, #4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	e00b      	b.n	8005ff2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	693b      	ldr	r3, [r7, #16]
        return;
 8005ff0:	e082      	b.n	80060f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d014      	beq.n	8006028 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	f043 0201 	orr.w	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	0a1b      	lsrs	r3, r3, #8
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00c      	beq.n	800604e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006038:	f043 0208 	orr.w	r2, r3, #8
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006040:	2300      	movs	r3, #0
 8006042:	60bb      	str	r3, [r7, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	2b00      	cmp	r3, #0
 8006054:	d04f      	beq.n	80060f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006064:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d104      	bne.n	8006082 <HAL_SPI_IRQHandler+0x17e>
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d034      	beq.n	80060ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0203 	bic.w	r2, r2, #3
 8006090:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d011      	beq.n	80060be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609e:	4a18      	ldr	r2, [pc, #96]	; (8006100 <HAL_SPI_IRQHandler+0x1fc>)
 80060a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fd f9d1 	bl	800344e <HAL_DMA_Abort_IT>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d016      	beq.n	80060f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ca:	4a0d      	ldr	r2, [pc, #52]	; (8006100 <HAL_SPI_IRQHandler+0x1fc>)
 80060cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fd f9bb 	bl	800344e <HAL_DMA_Abort_IT>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80060ea:	e003      	b.n	80060f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f809 	bl	8006104 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060f2:	e000      	b.n	80060f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80060f4:	bf00      	nop
    return;
 80060f6:	bf00      	nop
  }
}
 80060f8:	3720      	adds	r7, #32
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	08006119 	.word	0x08006119

08006104 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff ffe6 	bl	8006104 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e041      	b.n	80061d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fb fc26 	bl	80019b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f000 fba8 	bl	80068d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_IC_Start_IT+0x1e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	e013      	b.n	8006226 <HAL_TIM_IC_Start_IT+0x46>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b04      	cmp	r3, #4
 8006202:	d104      	bne.n	800620e <HAL_TIM_IC_Start_IT+0x2e>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800620a:	b2db      	uxtb	r3, r3
 800620c:	e00b      	b.n	8006226 <HAL_TIM_IC_Start_IT+0x46>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d104      	bne.n	800621e <HAL_TIM_IC_Start_IT+0x3e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800621a:	b2db      	uxtb	r3, r3
 800621c:	e003      	b.n	8006226 <HAL_TIM_IC_Start_IT+0x46>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006224:	b2db      	uxtb	r3, r3
 8006226:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <HAL_TIM_IC_Start_IT+0x58>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006234:	b2db      	uxtb	r3, r3
 8006236:	e013      	b.n	8006260 <HAL_TIM_IC_Start_IT+0x80>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b04      	cmp	r3, #4
 800623c:	d104      	bne.n	8006248 <HAL_TIM_IC_Start_IT+0x68>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e00b      	b.n	8006260 <HAL_TIM_IC_Start_IT+0x80>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b08      	cmp	r3, #8
 800624c:	d104      	bne.n	8006258 <HAL_TIM_IC_Start_IT+0x78>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006254:	b2db      	uxtb	r3, r3
 8006256:	e003      	b.n	8006260 <HAL_TIM_IC_Start_IT+0x80>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800625e:	b2db      	uxtb	r3, r3
 8006260:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006262:	7bbb      	ldrb	r3, [r7, #14]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d102      	bne.n	800626e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006268:	7b7b      	ldrb	r3, [r7, #13]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d001      	beq.n	8006272 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e0cc      	b.n	800640c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <HAL_TIM_IC_Start_IT+0xa2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006280:	e013      	b.n	80062aa <HAL_TIM_IC_Start_IT+0xca>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b04      	cmp	r3, #4
 8006286:	d104      	bne.n	8006292 <HAL_TIM_IC_Start_IT+0xb2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006290:	e00b      	b.n	80062aa <HAL_TIM_IC_Start_IT+0xca>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_IC_Start_IT+0xc2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a0:	e003      	b.n	80062aa <HAL_TIM_IC_Start_IT+0xca>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <HAL_TIM_IC_Start_IT+0xda>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062b8:	e013      	b.n	80062e2 <HAL_TIM_IC_Start_IT+0x102>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d104      	bne.n	80062ca <HAL_TIM_IC_Start_IT+0xea>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062c8:	e00b      	b.n	80062e2 <HAL_TIM_IC_Start_IT+0x102>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d104      	bne.n	80062da <HAL_TIM_IC_Start_IT+0xfa>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d8:	e003      	b.n	80062e2 <HAL_TIM_IC_Start_IT+0x102>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2202      	movs	r2, #2
 80062de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b0c      	cmp	r3, #12
 80062e6:	d841      	bhi.n	800636c <HAL_TIM_IC_Start_IT+0x18c>
 80062e8:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <HAL_TIM_IC_Start_IT+0x110>)
 80062ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ee:	bf00      	nop
 80062f0:	08006325 	.word	0x08006325
 80062f4:	0800636d 	.word	0x0800636d
 80062f8:	0800636d 	.word	0x0800636d
 80062fc:	0800636d 	.word	0x0800636d
 8006300:	08006337 	.word	0x08006337
 8006304:	0800636d 	.word	0x0800636d
 8006308:	0800636d 	.word	0x0800636d
 800630c:	0800636d 	.word	0x0800636d
 8006310:	08006349 	.word	0x08006349
 8006314:	0800636d 	.word	0x0800636d
 8006318:	0800636d 	.word	0x0800636d
 800631c:	0800636d 	.word	0x0800636d
 8006320:	0800635b 	.word	0x0800635b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0202 	orr.w	r2, r2, #2
 8006332:	60da      	str	r2, [r3, #12]
      break;
 8006334:	e01d      	b.n	8006372 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0204 	orr.w	r2, r2, #4
 8006344:	60da      	str	r2, [r3, #12]
      break;
 8006346:	e014      	b.n	8006372 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0208 	orr.w	r2, r2, #8
 8006356:	60da      	str	r2, [r3, #12]
      break;
 8006358:	e00b      	b.n	8006372 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0210 	orr.w	r2, r2, #16
 8006368:	60da      	str	r2, [r3, #12]
      break;
 800636a:	e002      	b.n	8006372 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]
      break;
 8006370:	bf00      	nop
  }

  if (status == HAL_OK)
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d148      	bne.n	800640a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2201      	movs	r2, #1
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fd82 	bl	8006e8a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a22      	ldr	r2, [pc, #136]	; (8006414 <HAL_TIM_IC_Start_IT+0x234>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d022      	beq.n	80063d6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006398:	d01d      	beq.n	80063d6 <HAL_TIM_IC_Start_IT+0x1f6>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1e      	ldr	r2, [pc, #120]	; (8006418 <HAL_TIM_IC_Start_IT+0x238>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d018      	beq.n	80063d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1c      	ldr	r2, [pc, #112]	; (800641c <HAL_TIM_IC_Start_IT+0x23c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <HAL_TIM_IC_Start_IT+0x240>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00e      	beq.n	80063d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a19      	ldr	r2, [pc, #100]	; (8006424 <HAL_TIM_IC_Start_IT+0x244>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d009      	beq.n	80063d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_TIM_IC_Start_IT+0x248>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d004      	beq.n	80063d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a16      	ldr	r2, [pc, #88]	; (800642c <HAL_TIM_IC_Start_IT+0x24c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d111      	bne.n	80063fa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b06      	cmp	r3, #6
 80063e6:	d010      	beq.n	800640a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f8:	e007      	b.n	800640a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0201 	orr.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40010000 	.word	0x40010000
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800
 8006420:	40000c00 	.word	0x40000c00
 8006424:	40010400 	.word	0x40010400
 8006428:	40014000 	.word	0x40014000
 800642c:	40001800 	.word	0x40001800

08006430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0202 	mvn.w	r2, #2
 800645c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fa fe28 	bl	80010c8 <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa0c 	bl	8006898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa13 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b04      	cmp	r3, #4
 8006498:	d122      	bne.n	80064e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0204 	mvn.w	r2, #4
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fa fdfe 	bl	80010c8 <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9e2 	bl	8006898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f9e9 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d122      	bne.n	8006534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d11b      	bne.n	8006534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0208 	mvn.w	r2, #8
 8006504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2204      	movs	r2, #4
 800650a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fa fdd4 	bl	80010c8 <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9b8 	bl	8006898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f9bf 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b10      	cmp	r3, #16
 8006540:	d122      	bne.n	8006588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b10      	cmp	r3, #16
 800654e:	d11b      	bne.n	8006588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0210 	mvn.w	r2, #16
 8006558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2208      	movs	r2, #8
 800655e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fa fdaa 	bl	80010c8 <HAL_TIM_IC_CaptureCallback>
 8006574:	e005      	b.n	8006582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f98e 	bl	8006898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f995 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10e      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d107      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f06f 0201 	mvn.w	r2, #1
 80065ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f968 	bl	8006884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	2b80      	cmp	r3, #128	; 0x80
 80065c0:	d10e      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065cc:	2b80      	cmp	r3, #128	; 0x80
 80065ce:	d107      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fc84 	bl	8006ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d10e      	bne.n	800660c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d107      	bne.n	800660c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f95a 	bl	80068c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b20      	cmp	r3, #32
 8006618:	d10e      	bne.n	8006638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b20      	cmp	r3, #32
 8006626:	d107      	bne.n	8006638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0220 	mvn.w	r2, #32
 8006630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fc4e 	bl	8006ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_TIM_IC_ConfigChannel+0x1e>
 800665a:	2302      	movs	r3, #2
 800665c:	e088      	b.n	8006770 <HAL_TIM_IC_ConfigChannel+0x130>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d11b      	bne.n	80066a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f000 fa5c 	bl	8006b38 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 020c 	bic.w	r2, r2, #12
 800668e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6999      	ldr	r1, [r3, #24]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	619a      	str	r2, [r3, #24]
 80066a2:	e060      	b.n	8006766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d11c      	bne.n	80066e4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6819      	ldr	r1, [r3, #0]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f000 fae0 	bl	8006c7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6999      	ldr	r1, [r3, #24]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	021a      	lsls	r2, r3, #8
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	619a      	str	r2, [r3, #24]
 80066e2:	e040      	b.n	8006766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d11b      	bne.n	8006722 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6819      	ldr	r1, [r3, #0]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f000 fb2d 	bl	8006d58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 020c 	bic.w	r2, r2, #12
 800670c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69d9      	ldr	r1, [r3, #28]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	61da      	str	r2, [r3, #28]
 8006720:	e021      	b.n	8006766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b0c      	cmp	r3, #12
 8006726:	d11c      	bne.n	8006762 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	6819      	ldr	r1, [r3, #0]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f000 fb4a 	bl	8006dd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	69da      	ldr	r2, [r3, #28]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800674a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	69d9      	ldr	r1, [r3, #28]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	021a      	lsls	r2, r3, #8
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	61da      	str	r2, [r3, #28]
 8006760:	e001      	b.n	8006766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800676e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_TIM_SlaveConfigSynchro+0x18>
 800678c:	2302      	movs	r3, #2
 800678e:	e031      	b.n	80067f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f936 	bl	8006a14 <TIM_SlaveTimer_SetConfig>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e018      	b.n	80067f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067e0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b0c      	cmp	r3, #12
 800680e:	d831      	bhi.n	8006874 <HAL_TIM_ReadCapturedValue+0x78>
 8006810:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	0800684d 	.word	0x0800684d
 800681c:	08006875 	.word	0x08006875
 8006820:	08006875 	.word	0x08006875
 8006824:	08006875 	.word	0x08006875
 8006828:	08006857 	.word	0x08006857
 800682c:	08006875 	.word	0x08006875
 8006830:	08006875 	.word	0x08006875
 8006834:	08006875 	.word	0x08006875
 8006838:	08006861 	.word	0x08006861
 800683c:	08006875 	.word	0x08006875
 8006840:	08006875 	.word	0x08006875
 8006844:	08006875 	.word	0x08006875
 8006848:	0800686b 	.word	0x0800686b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006852:	60fb      	str	r3, [r7, #12]

      break;
 8006854:	e00f      	b.n	8006876 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	60fb      	str	r3, [r7, #12]

      break;
 800685e:	e00a      	b.n	8006876 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006866:	60fb      	str	r3, [r7, #12]

      break;
 8006868:	e005      	b.n	8006876 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006870:	60fb      	str	r3, [r7, #12]

      break;
 8006872:	e000      	b.n	8006876 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006874:	bf00      	nop
  }

  return tmpreg;
 8006876:	68fb      	ldr	r3, [r7, #12]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a40      	ldr	r2, [pc, #256]	; (80069e8 <TIM_Base_SetConfig+0x114>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f2:	d00f      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a3d      	ldr	r2, [pc, #244]	; (80069ec <TIM_Base_SetConfig+0x118>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00b      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a3c      	ldr	r2, [pc, #240]	; (80069f0 <TIM_Base_SetConfig+0x11c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d007      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a3b      	ldr	r2, [pc, #236]	; (80069f4 <TIM_Base_SetConfig+0x120>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a3a      	ldr	r2, [pc, #232]	; (80069f8 <TIM_Base_SetConfig+0x124>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d108      	bne.n	8006926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a2f      	ldr	r2, [pc, #188]	; (80069e8 <TIM_Base_SetConfig+0x114>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d02b      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006934:	d027      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2c      	ldr	r2, [pc, #176]	; (80069ec <TIM_Base_SetConfig+0x118>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d023      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2b      	ldr	r2, [pc, #172]	; (80069f0 <TIM_Base_SetConfig+0x11c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01f      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2a      	ldr	r2, [pc, #168]	; (80069f4 <TIM_Base_SetConfig+0x120>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d01b      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a29      	ldr	r2, [pc, #164]	; (80069f8 <TIM_Base_SetConfig+0x124>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d017      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a28      	ldr	r2, [pc, #160]	; (80069fc <TIM_Base_SetConfig+0x128>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a27      	ldr	r2, [pc, #156]	; (8006a00 <TIM_Base_SetConfig+0x12c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00f      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a26      	ldr	r2, [pc, #152]	; (8006a04 <TIM_Base_SetConfig+0x130>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00b      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a25      	ldr	r2, [pc, #148]	; (8006a08 <TIM_Base_SetConfig+0x134>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a24      	ldr	r2, [pc, #144]	; (8006a0c <TIM_Base_SetConfig+0x138>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a23      	ldr	r2, [pc, #140]	; (8006a10 <TIM_Base_SetConfig+0x13c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a0a      	ldr	r2, [pc, #40]	; (80069e8 <TIM_Base_SetConfig+0x114>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_Base_SetConfig+0xf8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a0c      	ldr	r2, [pc, #48]	; (80069f8 <TIM_Base_SetConfig+0x124>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d103      	bne.n	80069d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	615a      	str	r2, [r3, #20]
}
 80069da:	bf00      	nop
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40000c00 	.word	0x40000c00
 80069f8:	40010400 	.word	0x40010400
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40014400 	.word	0x40014400
 8006a04:	40014800 	.word	0x40014800
 8006a08:	40001800 	.word	0x40001800
 8006a0c:	40001c00 	.word	0x40001c00
 8006a10:	40002000 	.word	0x40002000

08006a14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a30:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f023 0307 	bic.w	r3, r3, #7
 8006a42:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2b70      	cmp	r3, #112	; 0x70
 8006a5c:	d01a      	beq.n	8006a94 <TIM_SlaveTimer_SetConfig+0x80>
 8006a5e:	2b70      	cmp	r3, #112	; 0x70
 8006a60:	d860      	bhi.n	8006b24 <TIM_SlaveTimer_SetConfig+0x110>
 8006a62:	2b60      	cmp	r3, #96	; 0x60
 8006a64:	d054      	beq.n	8006b10 <TIM_SlaveTimer_SetConfig+0xfc>
 8006a66:	2b60      	cmp	r3, #96	; 0x60
 8006a68:	d85c      	bhi.n	8006b24 <TIM_SlaveTimer_SetConfig+0x110>
 8006a6a:	2b50      	cmp	r3, #80	; 0x50
 8006a6c:	d046      	beq.n	8006afc <TIM_SlaveTimer_SetConfig+0xe8>
 8006a6e:	2b50      	cmp	r3, #80	; 0x50
 8006a70:	d858      	bhi.n	8006b24 <TIM_SlaveTimer_SetConfig+0x110>
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d019      	beq.n	8006aaa <TIM_SlaveTimer_SetConfig+0x96>
 8006a76:	2b40      	cmp	r3, #64	; 0x40
 8006a78:	d854      	bhi.n	8006b24 <TIM_SlaveTimer_SetConfig+0x110>
 8006a7a:	2b30      	cmp	r3, #48	; 0x30
 8006a7c:	d055      	beq.n	8006b2a <TIM_SlaveTimer_SetConfig+0x116>
 8006a7e:	2b30      	cmp	r3, #48	; 0x30
 8006a80:	d850      	bhi.n	8006b24 <TIM_SlaveTimer_SetConfig+0x110>
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d051      	beq.n	8006b2a <TIM_SlaveTimer_SetConfig+0x116>
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d84c      	bhi.n	8006b24 <TIM_SlaveTimer_SetConfig+0x110>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d04d      	beq.n	8006b2a <TIM_SlaveTimer_SetConfig+0x116>
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d04b      	beq.n	8006b2a <TIM_SlaveTimer_SetConfig+0x116>
 8006a92:	e047      	b.n	8006b24 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68d9      	ldr	r1, [r3, #12]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f000 f9d1 	bl	8006e4a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006aa8:	e040      	b.n	8006b2c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	d101      	bne.n	8006ab6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e03b      	b.n	8006b2e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6a1a      	ldr	r2, [r3, #32]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0201 	bic.w	r2, r2, #1
 8006acc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006adc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
      break;
 8006afa:	e017      	b.n	8006b2c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	6899      	ldr	r1, [r3, #8]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f000 f889 	bl	8006c20 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006b0e:	e00d      	b.n	8006b2c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	6899      	ldr	r1, [r3, #8]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f000 f8eb 	bl	8006cf8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006b22:	e003      	b.n	8006b2c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	75fb      	strb	r3, [r7, #23]
      break;
 8006b28:	e000      	b.n	8006b2c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006b2a:	bf00      	nop
  }

  return status;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f023 0201 	bic.w	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4a28      	ldr	r2, [pc, #160]	; (8006c04 <TIM_TI1_SetConfig+0xcc>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d01b      	beq.n	8006b9e <TIM_TI1_SetConfig+0x66>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6c:	d017      	beq.n	8006b9e <TIM_TI1_SetConfig+0x66>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a25      	ldr	r2, [pc, #148]	; (8006c08 <TIM_TI1_SetConfig+0xd0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <TIM_TI1_SetConfig+0x66>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a24      	ldr	r2, [pc, #144]	; (8006c0c <TIM_TI1_SetConfig+0xd4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00f      	beq.n	8006b9e <TIM_TI1_SetConfig+0x66>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a23      	ldr	r2, [pc, #140]	; (8006c10 <TIM_TI1_SetConfig+0xd8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00b      	beq.n	8006b9e <TIM_TI1_SetConfig+0x66>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <TIM_TI1_SetConfig+0xdc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d007      	beq.n	8006b9e <TIM_TI1_SetConfig+0x66>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <TIM_TI1_SetConfig+0xe0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_TI1_SetConfig+0x66>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <TIM_TI1_SetConfig+0xe4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d101      	bne.n	8006ba2 <TIM_TI1_SetConfig+0x6a>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <TIM_TI1_SetConfig+0x6c>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d008      	beq.n	8006bba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e003      	b.n	8006bc2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f023 030a 	bic.w	r3, r3, #10
 8006bdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f003 030a 	and.w	r3, r3, #10
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	621a      	str	r2, [r3, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40010000 	.word	0x40010000
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40000c00 	.word	0x40000c00
 8006c14:	40010400 	.word	0x40010400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40001800 	.word	0x40001800

08006c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f023 0201 	bic.w	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f023 030a 	bic.w	r3, r3, #10
 8006c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b087      	sub	sp, #28
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f023 0210 	bic.w	r2, r3, #16
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006caa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	031b      	lsls	r3, r3, #12
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	621a      	str	r2, [r3, #32]
}
 8006cec:	bf00      	nop
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	f023 0210 	bic.w	r2, r3, #16
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	031b      	lsls	r3, r3, #12
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	621a      	str	r2, [r3, #32]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f023 0303 	bic.w	r3, r3, #3
 8006d84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006da8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	621a      	str	r2, [r3, #32]
}
 8006dc4:	bf00      	nop
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	031b      	lsls	r3, r3, #12
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006e22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	031b      	lsls	r3, r3, #12
 8006e28:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b087      	sub	sp, #28
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
 8006e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	021a      	lsls	r2, r3, #8
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	609a      	str	r2, [r3, #8]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b087      	sub	sp, #28
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f003 031f 	and.w	r3, r3, #31
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1a      	ldr	r2, [r3, #32]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	43db      	mvns	r3, r3
 8006eac:	401a      	ands	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a1a      	ldr	r2, [r3, #32]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	621a      	str	r2, [r3, #32]
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e03f      	b.n	8006f8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fa ff6a 	bl	8001dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2224      	movs	r2, #36	; 0x24
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fd7b 	bl	8007a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695a      	ldr	r2, [r3, #20]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b08a      	sub	sp, #40	; 0x28
 8006f9a:	af02      	add	r7, sp, #8
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	603b      	str	r3, [r7, #0]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d17c      	bne.n	80070b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <HAL_UART_Transmit+0x2c>
 8006fbc:	88fb      	ldrh	r3, [r7, #6]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e075      	b.n	80070b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_UART_Transmit+0x3e>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e06e      	b.n	80070b2 <HAL_UART_Transmit+0x11c>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2221      	movs	r2, #33	; 0x21
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fea:	f7fb f9ab 	bl	8002344 <HAL_GetTick>
 8006fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007004:	d108      	bne.n	8007018 <HAL_UART_Transmit+0x82>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	e003      	b.n	8007020 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007028:	e02a      	b.n	8007080 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2200      	movs	r2, #0
 8007032:	2180      	movs	r1, #128	; 0x80
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 faf9 	bl	800762c <UART_WaitOnFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e036      	b.n	80070b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10b      	bne.n	8007062 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007058:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	3302      	adds	r3, #2
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	e007      	b.n	8007072 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	781a      	ldrb	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	3301      	adds	r3, #1
 8007070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1cf      	bne.n	800702a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2200      	movs	r2, #0
 8007092:	2140      	movs	r1, #64	; 0x40
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 fac9 	bl	800762c <UART_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e006      	b.n	80070b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	e000      	b.n	80070b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070b0:	2302      	movs	r3, #2
  }
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3720      	adds	r7, #32
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b0ba      	sub	sp, #232	; 0xe8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10f      	bne.n	8007122 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	d009      	beq.n	8007122 <HAL_UART_IRQHandler+0x66>
 800710e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fbd3 	bl	80078c6 <UART_Receive_IT>
      return;
 8007120:	e256      	b.n	80075d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80de 	beq.w	80072e8 <HAL_UART_IRQHandler+0x22c>
 800712c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d106      	bne.n	8007146 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80d1 	beq.w	80072e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00b      	beq.n	800716a <HAL_UART_IRQHandler+0xae>
 8007152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f043 0201 	orr.w	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <HAL_UART_IRQHandler+0xd2>
 8007176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d005      	beq.n	800718e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	f043 0202 	orr.w	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <HAL_UART_IRQHandler+0xf6>
 800719a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f043 0204 	orr.w	r2, r3, #4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d011      	beq.n	80071e2 <HAL_UART_IRQHandler+0x126>
 80071be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f043 0208 	orr.w	r2, r3, #8
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 81ed 	beq.w	80075c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f0:	f003 0320 	and.w	r3, r3, #32
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <HAL_UART_IRQHandler+0x14e>
 80071f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fb5e 	bl	80078c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b40      	cmp	r3, #64	; 0x40
 8007216:	bf0c      	ite	eq
 8007218:	2301      	moveq	r3, #1
 800721a:	2300      	movne	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d103      	bne.n	8007236 <HAL_UART_IRQHandler+0x17a>
 800722e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04f      	beq.n	80072d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa66 	bl	8007708 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d141      	bne.n	80072ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3314      	adds	r3, #20
 8007250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3314      	adds	r3, #20
 8007272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007276:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800727a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800728e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1d9      	bne.n	800724a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	2b00      	cmp	r3, #0
 800729c:	d013      	beq.n	80072c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	4a7d      	ldr	r2, [pc, #500]	; (8007498 <HAL_UART_IRQHandler+0x3dc>)
 80072a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fc f8cf 	bl	800344e <HAL_DMA_Abort_IT>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d016      	beq.n	80072e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072c0:	4610      	mov	r0, r2
 80072c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	e00e      	b.n	80072e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f99a 	bl	8007600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072cc:	e00a      	b.n	80072e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f996 	bl	8007600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	e006      	b.n	80072e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f992 	bl	8007600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072e2:	e170      	b.n	80075c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e4:	bf00      	nop
    return;
 80072e6:	e16e      	b.n	80075c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	f040 814a 	bne.w	8007586 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 8143 	beq.w	8007586 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 813c 	beq.w	8007586 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800730e:	2300      	movs	r3, #0
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60bb      	str	r3, [r7, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	60bb      	str	r3, [r7, #8]
 8007322:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732e:	2b40      	cmp	r3, #64	; 0x40
 8007330:	f040 80b4 	bne.w	800749c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007340:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8140 	beq.w	80075ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800734e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007352:	429a      	cmp	r2, r3
 8007354:	f080 8139 	bcs.w	80075ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800735e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800736a:	f000 8088 	beq.w	800747e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800738c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	330c      	adds	r3, #12
 8007396:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800739a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800739e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1d9      	bne.n	800736e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3314      	adds	r3, #20
 80073c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3314      	adds	r3, #20
 80073da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e1      	bne.n	80073ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3314      	adds	r3, #20
 80073fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800740c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3314      	adds	r3, #20
 8007416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800741a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800741c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007420:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e3      	bne.n	80073f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	330c      	adds	r3, #12
 8007442:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800744c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744e:	f023 0310 	bic.w	r3, r3, #16
 8007452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007460:	65ba      	str	r2, [r7, #88]	; 0x58
 8007462:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007466:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800746e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e3      	bne.n	800743c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	4618      	mov	r0, r3
 800747a:	f7fb ff78 	bl	800336e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007486:	b29b      	uxth	r3, r3
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	b29b      	uxth	r3, r3
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f8c0 	bl	8007614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007494:	e099      	b.n	80075ca <HAL_UART_IRQHandler+0x50e>
 8007496:	bf00      	nop
 8007498:	080077cf 	.word	0x080077cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 808b 	beq.w	80075ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 8086 	beq.w	80075ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	330c      	adds	r3, #12
 80074c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	330c      	adds	r3, #12
 80074e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074e6:	647a      	str	r2, [r7, #68]	; 0x44
 80074e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ee:	e841 2300 	strex	r3, r2, [r1]
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1e3      	bne.n	80074c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3314      	adds	r3, #20
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	623b      	str	r3, [r7, #32]
   return(result);
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	f023 0301 	bic.w	r3, r3, #1
 8007510:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3314      	adds	r3, #20
 800751a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800751e:	633a      	str	r2, [r7, #48]	; 0x30
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e3      	bne.n	80074fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	330c      	adds	r3, #12
 8007546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0310 	bic.w	r3, r3, #16
 8007556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007564:	61fa      	str	r2, [r7, #28]
 8007566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	69b9      	ldr	r1, [r7, #24]
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	617b      	str	r3, [r7, #20]
   return(result);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e3      	bne.n	8007540 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f848 	bl	8007614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007584:	e023      	b.n	80075ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758e:	2b00      	cmp	r3, #0
 8007590:	d009      	beq.n	80075a6 <HAL_UART_IRQHandler+0x4ea>
 8007592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f929 	bl	80077f6 <UART_Transmit_IT>
    return;
 80075a4:	e014      	b.n	80075d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00e      	beq.n	80075d0 <HAL_UART_IRQHandler+0x514>
 80075b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d008      	beq.n	80075d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f969 	bl	8007896 <UART_EndTransmit_IT>
    return;
 80075c4:	e004      	b.n	80075d0 <HAL_UART_IRQHandler+0x514>
    return;
 80075c6:	bf00      	nop
 80075c8:	e002      	b.n	80075d0 <HAL_UART_IRQHandler+0x514>
      return;
 80075ca:	bf00      	nop
 80075cc:	e000      	b.n	80075d0 <HAL_UART_IRQHandler+0x514>
      return;
 80075ce:	bf00      	nop
  }
}
 80075d0:	37e8      	adds	r7, #232	; 0xe8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop

080075d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b090      	sub	sp, #64	; 0x40
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800763c:	e050      	b.n	80076e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d04c      	beq.n	80076e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <UART_WaitOnFlagUntilTimeout+0x30>
 800764c:	f7fa fe7a 	bl	8002344 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007658:	429a      	cmp	r2, r3
 800765a:	d241      	bcs.n	80076e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	330c      	adds	r3, #12
 800767a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800767c:	637a      	str	r2, [r7, #52]	; 0x34
 800767e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e5      	bne.n	800765c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3314      	adds	r3, #20
 8007696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	613b      	str	r3, [r7, #16]
   return(result);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f023 0301 	bic.w	r3, r3, #1
 80076a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3314      	adds	r3, #20
 80076ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076b0:	623a      	str	r2, [r7, #32]
 80076b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b4:	69f9      	ldr	r1, [r7, #28]
 80076b6:	6a3a      	ldr	r2, [r7, #32]
 80076b8:	e841 2300 	strex	r3, r2, [r1]
 80076bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e5      	bne.n	8007690 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e00f      	b.n	8007700 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4013      	ands	r3, r2
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	bf0c      	ite	eq
 80076f0:	2301      	moveq	r3, #1
 80076f2:	2300      	movne	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	461a      	mov	r2, r3
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d09f      	beq.n	800763e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3740      	adds	r7, #64	; 0x40
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007708:	b480      	push	{r7}
 800770a:	b095      	sub	sp, #84	; 0x54
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	330c      	adds	r3, #12
 800772e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007730:	643a      	str	r2, [r7, #64]	; 0x40
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e5      	bne.n	8007710 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3314      	adds	r3, #20
 800774a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	61fb      	str	r3, [r7, #28]
   return(result);
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	64bb      	str	r3, [r7, #72]	; 0x48
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3314      	adds	r3, #20
 8007762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007764:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800776a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e5      	bne.n	8007744 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777c:	2b01      	cmp	r3, #1
 800777e:	d119      	bne.n	80077b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f023 0310 	bic.w	r3, r3, #16
 8007796:	647b      	str	r3, [r7, #68]	; 0x44
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a0:	61ba      	str	r2, [r7, #24]
 80077a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6979      	ldr	r1, [r7, #20]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	e841 2300 	strex	r3, r2, [r1]
 80077ac:	613b      	str	r3, [r7, #16]
   return(result);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e5      	bne.n	8007780 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077c2:	bf00      	nop
 80077c4:	3754      	adds	r7, #84	; 0x54
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff ff09 	bl	8007600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b21      	cmp	r3, #33	; 0x21
 8007808:	d13e      	bne.n	8007888 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007812:	d114      	bne.n	800783e <UART_Transmit_IT+0x48>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d110      	bne.n	800783e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007830:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	1c9a      	adds	r2, r3, #2
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	621a      	str	r2, [r3, #32]
 800783c:	e008      	b.n	8007850 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	1c59      	adds	r1, r3, #1
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6211      	str	r1, [r2, #32]
 8007848:	781a      	ldrb	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	b29b      	uxth	r3, r3
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	4619      	mov	r1, r3
 800785e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10f      	bne.n	8007884 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007872:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007882:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e000      	b.n	800788a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fe8e 	bl	80075d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b08c      	sub	sp, #48	; 0x30
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b22      	cmp	r3, #34	; 0x22
 80078d8:	f040 80ab 	bne.w	8007a32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e4:	d117      	bne.n	8007916 <UART_Receive_IT+0x50>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d113      	bne.n	8007916 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007904:	b29a      	uxth	r2, r3
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	1c9a      	adds	r2, r3, #2
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	629a      	str	r2, [r3, #40]	; 0x28
 8007914:	e026      	b.n	8007964 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800791c:	2300      	movs	r3, #0
 800791e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007928:	d007      	beq.n	800793a <UART_Receive_IT+0x74>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <UART_Receive_IT+0x82>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	e008      	b.n	800795a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007954:	b2da      	uxtb	r2, r3
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29b      	uxth	r3, r3
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	4619      	mov	r1, r3
 8007972:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007974:	2b00      	cmp	r3, #0
 8007976:	d15a      	bne.n	8007a2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0220 	bic.w	r2, r2, #32
 8007986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695a      	ldr	r2, [r3, #20]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0201 	bic.w	r2, r2, #1
 80079a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d135      	bne.n	8007a24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	330c      	adds	r3, #12
 80079c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	613b      	str	r3, [r7, #16]
   return(result);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f023 0310 	bic.w	r3, r3, #16
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	330c      	adds	r3, #12
 80079dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079de:	623a      	str	r2, [r7, #32]
 80079e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	69f9      	ldr	r1, [r7, #28]
 80079e4:	6a3a      	ldr	r2, [r7, #32]
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e5      	bne.n	80079be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d10a      	bne.n	8007a16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a00:	2300      	movs	r3, #0
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff fdf9 	bl	8007614 <HAL_UARTEx_RxEventCallback>
 8007a22:	e002      	b.n	8007a2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff fde1 	bl	80075ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e002      	b.n	8007a34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	e000      	b.n	8007a34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a32:	2302      	movs	r3, #2
  }
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3730      	adds	r7, #48	; 0x30
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a40:	b0c0      	sub	sp, #256	; 0x100
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a58:	68d9      	ldr	r1, [r3, #12]
 8007a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	ea40 0301 	orr.w	r3, r0, r1
 8007a64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	431a      	orrs	r2, r3
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a94:	f021 010c 	bic.w	r1, r1, #12
 8007a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab6:	6999      	ldr	r1, [r3, #24]
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	ea40 0301 	orr.w	r3, r0, r1
 8007ac2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	4b8f      	ldr	r3, [pc, #572]	; (8007d08 <UART_SetConfig+0x2cc>)
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d005      	beq.n	8007adc <UART_SetConfig+0xa0>
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b8d      	ldr	r3, [pc, #564]	; (8007d0c <UART_SetConfig+0x2d0>)
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d104      	bne.n	8007ae6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007adc:	f7fe f974 	bl	8005dc8 <HAL_RCC_GetPCLK2Freq>
 8007ae0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ae4:	e003      	b.n	8007aee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ae6:	f7fe f95b 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 8007aea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af8:	f040 810c 	bne.w	8007d14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b0e:	4622      	mov	r2, r4
 8007b10:	462b      	mov	r3, r5
 8007b12:	1891      	adds	r1, r2, r2
 8007b14:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b16:	415b      	adcs	r3, r3
 8007b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b1e:	4621      	mov	r1, r4
 8007b20:	eb12 0801 	adds.w	r8, r2, r1
 8007b24:	4629      	mov	r1, r5
 8007b26:	eb43 0901 	adc.w	r9, r3, r1
 8007b2a:	f04f 0200 	mov.w	r2, #0
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b3e:	4690      	mov	r8, r2
 8007b40:	4699      	mov	r9, r3
 8007b42:	4623      	mov	r3, r4
 8007b44:	eb18 0303 	adds.w	r3, r8, r3
 8007b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	eb49 0303 	adc.w	r3, r9, r3
 8007b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	18db      	adds	r3, r3, r3
 8007b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007b70:	4613      	mov	r3, r2
 8007b72:	eb42 0303 	adc.w	r3, r2, r3
 8007b76:	657b      	str	r3, [r7, #84]	; 0x54
 8007b78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b80:	f7f9 f812 	bl	8000ba8 <__aeabi_uldivmod>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4b61      	ldr	r3, [pc, #388]	; (8007d10 <UART_SetConfig+0x2d4>)
 8007b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	011c      	lsls	r4, r3, #4
 8007b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ba0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	1891      	adds	r1, r2, r2
 8007baa:	64b9      	str	r1, [r7, #72]	; 0x48
 8007bac:	415b      	adcs	r3, r3
 8007bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bb4:	4641      	mov	r1, r8
 8007bb6:	eb12 0a01 	adds.w	sl, r2, r1
 8007bba:	4649      	mov	r1, r9
 8007bbc:	eb43 0b01 	adc.w	fp, r3, r1
 8007bc0:	f04f 0200 	mov.w	r2, #0
 8007bc4:	f04f 0300 	mov.w	r3, #0
 8007bc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bd4:	4692      	mov	sl, r2
 8007bd6:	469b      	mov	fp, r3
 8007bd8:	4643      	mov	r3, r8
 8007bda:	eb1a 0303 	adds.w	r3, sl, r3
 8007bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007be2:	464b      	mov	r3, r9
 8007be4:	eb4b 0303 	adc.w	r3, fp, r3
 8007be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c00:	460b      	mov	r3, r1
 8007c02:	18db      	adds	r3, r3, r3
 8007c04:	643b      	str	r3, [r7, #64]	; 0x40
 8007c06:	4613      	mov	r3, r2
 8007c08:	eb42 0303 	adc.w	r3, r2, r3
 8007c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c16:	f7f8 ffc7 	bl	8000ba8 <__aeabi_uldivmod>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4611      	mov	r1, r2
 8007c20:	4b3b      	ldr	r3, [pc, #236]	; (8007d10 <UART_SetConfig+0x2d4>)
 8007c22:	fba3 2301 	umull	r2, r3, r3, r1
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	2264      	movs	r2, #100	; 0x64
 8007c2a:	fb02 f303 	mul.w	r3, r2, r3
 8007c2e:	1acb      	subs	r3, r1, r3
 8007c30:	00db      	lsls	r3, r3, #3
 8007c32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c36:	4b36      	ldr	r3, [pc, #216]	; (8007d10 <UART_SetConfig+0x2d4>)
 8007c38:	fba3 2302 	umull	r2, r3, r3, r2
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c44:	441c      	add	r4, r3
 8007c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	1891      	adds	r1, r2, r2
 8007c5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c60:	415b      	adcs	r3, r3
 8007c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c68:	4641      	mov	r1, r8
 8007c6a:	1851      	adds	r1, r2, r1
 8007c6c:	6339      	str	r1, [r7, #48]	; 0x30
 8007c6e:	4649      	mov	r1, r9
 8007c70:	414b      	adcs	r3, r1
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c80:	4659      	mov	r1, fp
 8007c82:	00cb      	lsls	r3, r1, #3
 8007c84:	4651      	mov	r1, sl
 8007c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c8a:	4651      	mov	r1, sl
 8007c8c:	00ca      	lsls	r2, r1, #3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	4603      	mov	r3, r0
 8007c94:	4642      	mov	r2, r8
 8007c96:	189b      	adds	r3, r3, r2
 8007c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c9c:	464b      	mov	r3, r9
 8007c9e:	460a      	mov	r2, r1
 8007ca0:	eb42 0303 	adc.w	r3, r2, r3
 8007ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	18db      	adds	r3, r3, r3
 8007cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	eb42 0303 	adc.w	r3, r2, r3
 8007cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cd2:	f7f8 ff69 	bl	8000ba8 <__aeabi_uldivmod>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4b0d      	ldr	r3, [pc, #52]	; (8007d10 <UART_SetConfig+0x2d4>)
 8007cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	2164      	movs	r1, #100	; 0x64
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	3332      	adds	r3, #50	; 0x32
 8007cee:	4a08      	ldr	r2, [pc, #32]	; (8007d10 <UART_SetConfig+0x2d4>)
 8007cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf4:	095b      	lsrs	r3, r3, #5
 8007cf6:	f003 0207 	and.w	r2, r3, #7
 8007cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4422      	add	r2, r4
 8007d02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d04:	e105      	b.n	8007f12 <UART_SetConfig+0x4d6>
 8007d06:	bf00      	nop
 8007d08:	40011000 	.word	0x40011000
 8007d0c:	40011400 	.word	0x40011400
 8007d10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d26:	4642      	mov	r2, r8
 8007d28:	464b      	mov	r3, r9
 8007d2a:	1891      	adds	r1, r2, r2
 8007d2c:	6239      	str	r1, [r7, #32]
 8007d2e:	415b      	adcs	r3, r3
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
 8007d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d36:	4641      	mov	r1, r8
 8007d38:	1854      	adds	r4, r2, r1
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	eb43 0501 	adc.w	r5, r3, r1
 8007d40:	f04f 0200 	mov.w	r2, #0
 8007d44:	f04f 0300 	mov.w	r3, #0
 8007d48:	00eb      	lsls	r3, r5, #3
 8007d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d4e:	00e2      	lsls	r2, r4, #3
 8007d50:	4614      	mov	r4, r2
 8007d52:	461d      	mov	r5, r3
 8007d54:	4643      	mov	r3, r8
 8007d56:	18e3      	adds	r3, r4, r3
 8007d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	eb45 0303 	adc.w	r3, r5, r3
 8007d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d82:	4629      	mov	r1, r5
 8007d84:	008b      	lsls	r3, r1, #2
 8007d86:	4621      	mov	r1, r4
 8007d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	008a      	lsls	r2, r1, #2
 8007d90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d94:	f7f8 ff08 	bl	8000ba8 <__aeabi_uldivmod>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4b60      	ldr	r3, [pc, #384]	; (8007f20 <UART_SetConfig+0x4e4>)
 8007d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007da2:	095b      	lsrs	r3, r3, #5
 8007da4:	011c      	lsls	r4, r3, #4
 8007da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007db0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007db4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007db8:	4642      	mov	r2, r8
 8007dba:	464b      	mov	r3, r9
 8007dbc:	1891      	adds	r1, r2, r2
 8007dbe:	61b9      	str	r1, [r7, #24]
 8007dc0:	415b      	adcs	r3, r3
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dc8:	4641      	mov	r1, r8
 8007dca:	1851      	adds	r1, r2, r1
 8007dcc:	6139      	str	r1, [r7, #16]
 8007dce:	4649      	mov	r1, r9
 8007dd0:	414b      	adcs	r3, r1
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	f04f 0200 	mov.w	r2, #0
 8007dd8:	f04f 0300 	mov.w	r3, #0
 8007ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007de0:	4659      	mov	r1, fp
 8007de2:	00cb      	lsls	r3, r1, #3
 8007de4:	4651      	mov	r1, sl
 8007de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dea:	4651      	mov	r1, sl
 8007dec:	00ca      	lsls	r2, r1, #3
 8007dee:	4610      	mov	r0, r2
 8007df0:	4619      	mov	r1, r3
 8007df2:	4603      	mov	r3, r0
 8007df4:	4642      	mov	r2, r8
 8007df6:	189b      	adds	r3, r3, r2
 8007df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dfc:	464b      	mov	r3, r9
 8007dfe:	460a      	mov	r2, r1
 8007e00:	eb42 0303 	adc.w	r3, r2, r3
 8007e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	f04f 0300 	mov.w	r3, #0
 8007e1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e20:	4649      	mov	r1, r9
 8007e22:	008b      	lsls	r3, r1, #2
 8007e24:	4641      	mov	r1, r8
 8007e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e2a:	4641      	mov	r1, r8
 8007e2c:	008a      	lsls	r2, r1, #2
 8007e2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e32:	f7f8 feb9 	bl	8000ba8 <__aeabi_uldivmod>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4b39      	ldr	r3, [pc, #228]	; (8007f20 <UART_SetConfig+0x4e4>)
 8007e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	2164      	movs	r1, #100	; 0x64
 8007e44:	fb01 f303 	mul.w	r3, r1, r3
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	3332      	adds	r3, #50	; 0x32
 8007e4e:	4a34      	ldr	r2, [pc, #208]	; (8007f20 <UART_SetConfig+0x4e4>)
 8007e50:	fba2 2303 	umull	r2, r3, r2, r3
 8007e54:	095b      	lsrs	r3, r3, #5
 8007e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e5a:	441c      	add	r4, r3
 8007e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e60:	2200      	movs	r2, #0
 8007e62:	673b      	str	r3, [r7, #112]	; 0x70
 8007e64:	677a      	str	r2, [r7, #116]	; 0x74
 8007e66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e6a:	4642      	mov	r2, r8
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	1891      	adds	r1, r2, r2
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	415b      	adcs	r3, r3
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e7a:	4641      	mov	r1, r8
 8007e7c:	1851      	adds	r1, r2, r1
 8007e7e:	6039      	str	r1, [r7, #0]
 8007e80:	4649      	mov	r1, r9
 8007e82:	414b      	adcs	r3, r1
 8007e84:	607b      	str	r3, [r7, #4]
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e92:	4659      	mov	r1, fp
 8007e94:	00cb      	lsls	r3, r1, #3
 8007e96:	4651      	mov	r1, sl
 8007e98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e9c:	4651      	mov	r1, sl
 8007e9e:	00ca      	lsls	r2, r1, #3
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	189b      	adds	r3, r3, r2
 8007eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eac:	464b      	mov	r3, r9
 8007eae:	460a      	mov	r2, r1
 8007eb0:	eb42 0303 	adc.w	r3, r2, r3
 8007eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8007ec0:	667a      	str	r2, [r7, #100]	; 0x64
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ece:	4649      	mov	r1, r9
 8007ed0:	008b      	lsls	r3, r1, #2
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ed8:	4641      	mov	r1, r8
 8007eda:	008a      	lsls	r2, r1, #2
 8007edc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ee0:	f7f8 fe62 	bl	8000ba8 <__aeabi_uldivmod>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <UART_SetConfig+0x4e4>)
 8007eea:	fba3 1302 	umull	r1, r3, r3, r2
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	2164      	movs	r1, #100	; 0x64
 8007ef2:	fb01 f303 	mul.w	r3, r1, r3
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	3332      	adds	r3, #50	; 0x32
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <UART_SetConfig+0x4e4>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	f003 020f 	and.w	r2, r3, #15
 8007f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4422      	add	r2, r4
 8007f10:	609a      	str	r2, [r3, #8]
}
 8007f12:	bf00      	nop
 8007f14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f1e:	bf00      	nop
 8007f20:	51eb851f 	.word	0x51eb851f

08007f24 <__errno>:
 8007f24:	4b01      	ldr	r3, [pc, #4]	; (8007f2c <__errno+0x8>)
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	2000000c 	.word	0x2000000c

08007f30 <__libc_init_array>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	4d0d      	ldr	r5, [pc, #52]	; (8007f68 <__libc_init_array+0x38>)
 8007f34:	4c0d      	ldr	r4, [pc, #52]	; (8007f6c <__libc_init_array+0x3c>)
 8007f36:	1b64      	subs	r4, r4, r5
 8007f38:	10a4      	asrs	r4, r4, #2
 8007f3a:	2600      	movs	r6, #0
 8007f3c:	42a6      	cmp	r6, r4
 8007f3e:	d109      	bne.n	8007f54 <__libc_init_array+0x24>
 8007f40:	4d0b      	ldr	r5, [pc, #44]	; (8007f70 <__libc_init_array+0x40>)
 8007f42:	4c0c      	ldr	r4, [pc, #48]	; (8007f74 <__libc_init_array+0x44>)
 8007f44:	f002 ff0a 	bl	800ad5c <_init>
 8007f48:	1b64      	subs	r4, r4, r5
 8007f4a:	10a4      	asrs	r4, r4, #2
 8007f4c:	2600      	movs	r6, #0
 8007f4e:	42a6      	cmp	r6, r4
 8007f50:	d105      	bne.n	8007f5e <__libc_init_array+0x2e>
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f58:	4798      	blx	r3
 8007f5a:	3601      	adds	r6, #1
 8007f5c:	e7ee      	b.n	8007f3c <__libc_init_array+0xc>
 8007f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f62:	4798      	blx	r3
 8007f64:	3601      	adds	r6, #1
 8007f66:	e7f2      	b.n	8007f4e <__libc_init_array+0x1e>
 8007f68:	0800b1bc 	.word	0x0800b1bc
 8007f6c:	0800b1bc 	.word	0x0800b1bc
 8007f70:	0800b1bc 	.word	0x0800b1bc
 8007f74:	0800b1c0 	.word	0x0800b1c0

08007f78 <malloc>:
 8007f78:	4b02      	ldr	r3, [pc, #8]	; (8007f84 <malloc+0xc>)
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	f000 b885 	b.w	800808c <_malloc_r>
 8007f82:	bf00      	nop
 8007f84:	2000000c 	.word	0x2000000c

08007f88 <memcpy>:
 8007f88:	440a      	add	r2, r1
 8007f8a:	4291      	cmp	r1, r2
 8007f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f90:	d100      	bne.n	8007f94 <memcpy+0xc>
 8007f92:	4770      	bx	lr
 8007f94:	b510      	push	{r4, lr}
 8007f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f9e:	4291      	cmp	r1, r2
 8007fa0:	d1f9      	bne.n	8007f96 <memcpy+0xe>
 8007fa2:	bd10      	pop	{r4, pc}

08007fa4 <memset>:
 8007fa4:	4402      	add	r2, r0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d100      	bne.n	8007fae <memset+0xa>
 8007fac:	4770      	bx	lr
 8007fae:	f803 1b01 	strb.w	r1, [r3], #1
 8007fb2:	e7f9      	b.n	8007fa8 <memset+0x4>

08007fb4 <_free_r>:
 8007fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fb6:	2900      	cmp	r1, #0
 8007fb8:	d044      	beq.n	8008044 <_free_r+0x90>
 8007fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fbe:	9001      	str	r0, [sp, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8007fc6:	bfb8      	it	lt
 8007fc8:	18e4      	addlt	r4, r4, r3
 8007fca:	f001 fbf3 	bl	80097b4 <__malloc_lock>
 8007fce:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <_free_r+0x94>)
 8007fd0:	9801      	ldr	r0, [sp, #4]
 8007fd2:	6813      	ldr	r3, [r2, #0]
 8007fd4:	b933      	cbnz	r3, 8007fe4 <_free_r+0x30>
 8007fd6:	6063      	str	r3, [r4, #4]
 8007fd8:	6014      	str	r4, [r2, #0]
 8007fda:	b003      	add	sp, #12
 8007fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fe0:	f001 bbee 	b.w	80097c0 <__malloc_unlock>
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	d908      	bls.n	8007ffa <_free_r+0x46>
 8007fe8:	6825      	ldr	r5, [r4, #0]
 8007fea:	1961      	adds	r1, r4, r5
 8007fec:	428b      	cmp	r3, r1
 8007fee:	bf01      	itttt	eq
 8007ff0:	6819      	ldreq	r1, [r3, #0]
 8007ff2:	685b      	ldreq	r3, [r3, #4]
 8007ff4:	1949      	addeq	r1, r1, r5
 8007ff6:	6021      	streq	r1, [r4, #0]
 8007ff8:	e7ed      	b.n	8007fd6 <_free_r+0x22>
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	b10b      	cbz	r3, 8008004 <_free_r+0x50>
 8008000:	42a3      	cmp	r3, r4
 8008002:	d9fa      	bls.n	8007ffa <_free_r+0x46>
 8008004:	6811      	ldr	r1, [r2, #0]
 8008006:	1855      	adds	r5, r2, r1
 8008008:	42a5      	cmp	r5, r4
 800800a:	d10b      	bne.n	8008024 <_free_r+0x70>
 800800c:	6824      	ldr	r4, [r4, #0]
 800800e:	4421      	add	r1, r4
 8008010:	1854      	adds	r4, r2, r1
 8008012:	42a3      	cmp	r3, r4
 8008014:	6011      	str	r1, [r2, #0]
 8008016:	d1e0      	bne.n	8007fda <_free_r+0x26>
 8008018:	681c      	ldr	r4, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	6053      	str	r3, [r2, #4]
 800801e:	4421      	add	r1, r4
 8008020:	6011      	str	r1, [r2, #0]
 8008022:	e7da      	b.n	8007fda <_free_r+0x26>
 8008024:	d902      	bls.n	800802c <_free_r+0x78>
 8008026:	230c      	movs	r3, #12
 8008028:	6003      	str	r3, [r0, #0]
 800802a:	e7d6      	b.n	8007fda <_free_r+0x26>
 800802c:	6825      	ldr	r5, [r4, #0]
 800802e:	1961      	adds	r1, r4, r5
 8008030:	428b      	cmp	r3, r1
 8008032:	bf04      	itt	eq
 8008034:	6819      	ldreq	r1, [r3, #0]
 8008036:	685b      	ldreq	r3, [r3, #4]
 8008038:	6063      	str	r3, [r4, #4]
 800803a:	bf04      	itt	eq
 800803c:	1949      	addeq	r1, r1, r5
 800803e:	6021      	streq	r1, [r4, #0]
 8008040:	6054      	str	r4, [r2, #4]
 8008042:	e7ca      	b.n	8007fda <_free_r+0x26>
 8008044:	b003      	add	sp, #12
 8008046:	bd30      	pop	{r4, r5, pc}
 8008048:	200004e0 	.word	0x200004e0

0800804c <sbrk_aligned>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	4e0e      	ldr	r6, [pc, #56]	; (8008088 <sbrk_aligned+0x3c>)
 8008050:	460c      	mov	r4, r1
 8008052:	6831      	ldr	r1, [r6, #0]
 8008054:	4605      	mov	r5, r0
 8008056:	b911      	cbnz	r1, 800805e <sbrk_aligned+0x12>
 8008058:	f000 fcf6 	bl	8008a48 <_sbrk_r>
 800805c:	6030      	str	r0, [r6, #0]
 800805e:	4621      	mov	r1, r4
 8008060:	4628      	mov	r0, r5
 8008062:	f000 fcf1 	bl	8008a48 <_sbrk_r>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	d00a      	beq.n	8008080 <sbrk_aligned+0x34>
 800806a:	1cc4      	adds	r4, r0, #3
 800806c:	f024 0403 	bic.w	r4, r4, #3
 8008070:	42a0      	cmp	r0, r4
 8008072:	d007      	beq.n	8008084 <sbrk_aligned+0x38>
 8008074:	1a21      	subs	r1, r4, r0
 8008076:	4628      	mov	r0, r5
 8008078:	f000 fce6 	bl	8008a48 <_sbrk_r>
 800807c:	3001      	adds	r0, #1
 800807e:	d101      	bne.n	8008084 <sbrk_aligned+0x38>
 8008080:	f04f 34ff 	mov.w	r4, #4294967295
 8008084:	4620      	mov	r0, r4
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	200004e4 	.word	0x200004e4

0800808c <_malloc_r>:
 800808c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008090:	1ccd      	adds	r5, r1, #3
 8008092:	f025 0503 	bic.w	r5, r5, #3
 8008096:	3508      	adds	r5, #8
 8008098:	2d0c      	cmp	r5, #12
 800809a:	bf38      	it	cc
 800809c:	250c      	movcc	r5, #12
 800809e:	2d00      	cmp	r5, #0
 80080a0:	4607      	mov	r7, r0
 80080a2:	db01      	blt.n	80080a8 <_malloc_r+0x1c>
 80080a4:	42a9      	cmp	r1, r5
 80080a6:	d905      	bls.n	80080b4 <_malloc_r+0x28>
 80080a8:	230c      	movs	r3, #12
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	2600      	movs	r6, #0
 80080ae:	4630      	mov	r0, r6
 80080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b4:	4e2e      	ldr	r6, [pc, #184]	; (8008170 <_malloc_r+0xe4>)
 80080b6:	f001 fb7d 	bl	80097b4 <__malloc_lock>
 80080ba:	6833      	ldr	r3, [r6, #0]
 80080bc:	461c      	mov	r4, r3
 80080be:	bb34      	cbnz	r4, 800810e <_malloc_r+0x82>
 80080c0:	4629      	mov	r1, r5
 80080c2:	4638      	mov	r0, r7
 80080c4:	f7ff ffc2 	bl	800804c <sbrk_aligned>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	4604      	mov	r4, r0
 80080cc:	d14d      	bne.n	800816a <_malloc_r+0xde>
 80080ce:	6834      	ldr	r4, [r6, #0]
 80080d0:	4626      	mov	r6, r4
 80080d2:	2e00      	cmp	r6, #0
 80080d4:	d140      	bne.n	8008158 <_malloc_r+0xcc>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	4631      	mov	r1, r6
 80080da:	4638      	mov	r0, r7
 80080dc:	eb04 0803 	add.w	r8, r4, r3
 80080e0:	f000 fcb2 	bl	8008a48 <_sbrk_r>
 80080e4:	4580      	cmp	r8, r0
 80080e6:	d13a      	bne.n	800815e <_malloc_r+0xd2>
 80080e8:	6821      	ldr	r1, [r4, #0]
 80080ea:	3503      	adds	r5, #3
 80080ec:	1a6d      	subs	r5, r5, r1
 80080ee:	f025 0503 	bic.w	r5, r5, #3
 80080f2:	3508      	adds	r5, #8
 80080f4:	2d0c      	cmp	r5, #12
 80080f6:	bf38      	it	cc
 80080f8:	250c      	movcc	r5, #12
 80080fa:	4629      	mov	r1, r5
 80080fc:	4638      	mov	r0, r7
 80080fe:	f7ff ffa5 	bl	800804c <sbrk_aligned>
 8008102:	3001      	adds	r0, #1
 8008104:	d02b      	beq.n	800815e <_malloc_r+0xd2>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	442b      	add	r3, r5
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	e00e      	b.n	800812c <_malloc_r+0xa0>
 800810e:	6822      	ldr	r2, [r4, #0]
 8008110:	1b52      	subs	r2, r2, r5
 8008112:	d41e      	bmi.n	8008152 <_malloc_r+0xc6>
 8008114:	2a0b      	cmp	r2, #11
 8008116:	d916      	bls.n	8008146 <_malloc_r+0xba>
 8008118:	1961      	adds	r1, r4, r5
 800811a:	42a3      	cmp	r3, r4
 800811c:	6025      	str	r5, [r4, #0]
 800811e:	bf18      	it	ne
 8008120:	6059      	strne	r1, [r3, #4]
 8008122:	6863      	ldr	r3, [r4, #4]
 8008124:	bf08      	it	eq
 8008126:	6031      	streq	r1, [r6, #0]
 8008128:	5162      	str	r2, [r4, r5]
 800812a:	604b      	str	r3, [r1, #4]
 800812c:	4638      	mov	r0, r7
 800812e:	f104 060b 	add.w	r6, r4, #11
 8008132:	f001 fb45 	bl	80097c0 <__malloc_unlock>
 8008136:	f026 0607 	bic.w	r6, r6, #7
 800813a:	1d23      	adds	r3, r4, #4
 800813c:	1af2      	subs	r2, r6, r3
 800813e:	d0b6      	beq.n	80080ae <_malloc_r+0x22>
 8008140:	1b9b      	subs	r3, r3, r6
 8008142:	50a3      	str	r3, [r4, r2]
 8008144:	e7b3      	b.n	80080ae <_malloc_r+0x22>
 8008146:	6862      	ldr	r2, [r4, #4]
 8008148:	42a3      	cmp	r3, r4
 800814a:	bf0c      	ite	eq
 800814c:	6032      	streq	r2, [r6, #0]
 800814e:	605a      	strne	r2, [r3, #4]
 8008150:	e7ec      	b.n	800812c <_malloc_r+0xa0>
 8008152:	4623      	mov	r3, r4
 8008154:	6864      	ldr	r4, [r4, #4]
 8008156:	e7b2      	b.n	80080be <_malloc_r+0x32>
 8008158:	4634      	mov	r4, r6
 800815a:	6876      	ldr	r6, [r6, #4]
 800815c:	e7b9      	b.n	80080d2 <_malloc_r+0x46>
 800815e:	230c      	movs	r3, #12
 8008160:	603b      	str	r3, [r7, #0]
 8008162:	4638      	mov	r0, r7
 8008164:	f001 fb2c 	bl	80097c0 <__malloc_unlock>
 8008168:	e7a1      	b.n	80080ae <_malloc_r+0x22>
 800816a:	6025      	str	r5, [r4, #0]
 800816c:	e7de      	b.n	800812c <_malloc_r+0xa0>
 800816e:	bf00      	nop
 8008170:	200004e0 	.word	0x200004e0

08008174 <__cvt>:
 8008174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	ec55 4b10 	vmov	r4, r5, d0
 800817c:	2d00      	cmp	r5, #0
 800817e:	460e      	mov	r6, r1
 8008180:	4619      	mov	r1, r3
 8008182:	462b      	mov	r3, r5
 8008184:	bfbb      	ittet	lt
 8008186:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800818a:	461d      	movlt	r5, r3
 800818c:	2300      	movge	r3, #0
 800818e:	232d      	movlt	r3, #45	; 0x2d
 8008190:	700b      	strb	r3, [r1, #0]
 8008192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008194:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008198:	4691      	mov	r9, r2
 800819a:	f023 0820 	bic.w	r8, r3, #32
 800819e:	bfbc      	itt	lt
 80081a0:	4622      	movlt	r2, r4
 80081a2:	4614      	movlt	r4, r2
 80081a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081a8:	d005      	beq.n	80081b6 <__cvt+0x42>
 80081aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081ae:	d100      	bne.n	80081b2 <__cvt+0x3e>
 80081b0:	3601      	adds	r6, #1
 80081b2:	2102      	movs	r1, #2
 80081b4:	e000      	b.n	80081b8 <__cvt+0x44>
 80081b6:	2103      	movs	r1, #3
 80081b8:	ab03      	add	r3, sp, #12
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	ab02      	add	r3, sp, #8
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	ec45 4b10 	vmov	d0, r4, r5
 80081c4:	4653      	mov	r3, sl
 80081c6:	4632      	mov	r2, r6
 80081c8:	f000 fd02 	bl	8008bd0 <_dtoa_r>
 80081cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081d0:	4607      	mov	r7, r0
 80081d2:	d102      	bne.n	80081da <__cvt+0x66>
 80081d4:	f019 0f01 	tst.w	r9, #1
 80081d8:	d022      	beq.n	8008220 <__cvt+0xac>
 80081da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081de:	eb07 0906 	add.w	r9, r7, r6
 80081e2:	d110      	bne.n	8008206 <__cvt+0x92>
 80081e4:	783b      	ldrb	r3, [r7, #0]
 80081e6:	2b30      	cmp	r3, #48	; 0x30
 80081e8:	d10a      	bne.n	8008200 <__cvt+0x8c>
 80081ea:	2200      	movs	r2, #0
 80081ec:	2300      	movs	r3, #0
 80081ee:	4620      	mov	r0, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	f7f8 fc69 	bl	8000ac8 <__aeabi_dcmpeq>
 80081f6:	b918      	cbnz	r0, 8008200 <__cvt+0x8c>
 80081f8:	f1c6 0601 	rsb	r6, r6, #1
 80081fc:	f8ca 6000 	str.w	r6, [sl]
 8008200:	f8da 3000 	ldr.w	r3, [sl]
 8008204:	4499      	add	r9, r3
 8008206:	2200      	movs	r2, #0
 8008208:	2300      	movs	r3, #0
 800820a:	4620      	mov	r0, r4
 800820c:	4629      	mov	r1, r5
 800820e:	f7f8 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008212:	b108      	cbz	r0, 8008218 <__cvt+0xa4>
 8008214:	f8cd 900c 	str.w	r9, [sp, #12]
 8008218:	2230      	movs	r2, #48	; 0x30
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	454b      	cmp	r3, r9
 800821e:	d307      	bcc.n	8008230 <__cvt+0xbc>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008224:	1bdb      	subs	r3, r3, r7
 8008226:	4638      	mov	r0, r7
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	b004      	add	sp, #16
 800822c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008230:	1c59      	adds	r1, r3, #1
 8008232:	9103      	str	r1, [sp, #12]
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	e7f0      	b.n	800821a <__cvt+0xa6>

08008238 <__exponent>:
 8008238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800823a:	4603      	mov	r3, r0
 800823c:	2900      	cmp	r1, #0
 800823e:	bfb8      	it	lt
 8008240:	4249      	neglt	r1, r1
 8008242:	f803 2b02 	strb.w	r2, [r3], #2
 8008246:	bfb4      	ite	lt
 8008248:	222d      	movlt	r2, #45	; 0x2d
 800824a:	222b      	movge	r2, #43	; 0x2b
 800824c:	2909      	cmp	r1, #9
 800824e:	7042      	strb	r2, [r0, #1]
 8008250:	dd2a      	ble.n	80082a8 <__exponent+0x70>
 8008252:	f10d 0407 	add.w	r4, sp, #7
 8008256:	46a4      	mov	ip, r4
 8008258:	270a      	movs	r7, #10
 800825a:	46a6      	mov	lr, r4
 800825c:	460a      	mov	r2, r1
 800825e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008262:	fb07 1516 	mls	r5, r7, r6, r1
 8008266:	3530      	adds	r5, #48	; 0x30
 8008268:	2a63      	cmp	r2, #99	; 0x63
 800826a:	f104 34ff 	add.w	r4, r4, #4294967295
 800826e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008272:	4631      	mov	r1, r6
 8008274:	dcf1      	bgt.n	800825a <__exponent+0x22>
 8008276:	3130      	adds	r1, #48	; 0x30
 8008278:	f1ae 0502 	sub.w	r5, lr, #2
 800827c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008280:	1c44      	adds	r4, r0, #1
 8008282:	4629      	mov	r1, r5
 8008284:	4561      	cmp	r1, ip
 8008286:	d30a      	bcc.n	800829e <__exponent+0x66>
 8008288:	f10d 0209 	add.w	r2, sp, #9
 800828c:	eba2 020e 	sub.w	r2, r2, lr
 8008290:	4565      	cmp	r5, ip
 8008292:	bf88      	it	hi
 8008294:	2200      	movhi	r2, #0
 8008296:	4413      	add	r3, r2
 8008298:	1a18      	subs	r0, r3, r0
 800829a:	b003      	add	sp, #12
 800829c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082a6:	e7ed      	b.n	8008284 <__exponent+0x4c>
 80082a8:	2330      	movs	r3, #48	; 0x30
 80082aa:	3130      	adds	r1, #48	; 0x30
 80082ac:	7083      	strb	r3, [r0, #2]
 80082ae:	70c1      	strb	r1, [r0, #3]
 80082b0:	1d03      	adds	r3, r0, #4
 80082b2:	e7f1      	b.n	8008298 <__exponent+0x60>

080082b4 <_printf_float>:
 80082b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	ed2d 8b02 	vpush	{d8}
 80082bc:	b08d      	sub	sp, #52	; 0x34
 80082be:	460c      	mov	r4, r1
 80082c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80082c4:	4616      	mov	r6, r2
 80082c6:	461f      	mov	r7, r3
 80082c8:	4605      	mov	r5, r0
 80082ca:	f001 fa6f 	bl	80097ac <_localeconv_r>
 80082ce:	f8d0 a000 	ldr.w	sl, [r0]
 80082d2:	4650      	mov	r0, sl
 80082d4:	f7f7 ff7c 	bl	80001d0 <strlen>
 80082d8:	2300      	movs	r3, #0
 80082da:	930a      	str	r3, [sp, #40]	; 0x28
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	9305      	str	r3, [sp, #20]
 80082e0:	f8d8 3000 	ldr.w	r3, [r8]
 80082e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80082e8:	3307      	adds	r3, #7
 80082ea:	f023 0307 	bic.w	r3, r3, #7
 80082ee:	f103 0208 	add.w	r2, r3, #8
 80082f2:	f8c8 2000 	str.w	r2, [r8]
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80082fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008302:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008306:	9307      	str	r3, [sp, #28]
 8008308:	f8cd 8018 	str.w	r8, [sp, #24]
 800830c:	ee08 0a10 	vmov	s16, r0
 8008310:	4b9f      	ldr	r3, [pc, #636]	; (8008590 <_printf_float+0x2dc>)
 8008312:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008316:	f04f 32ff 	mov.w	r2, #4294967295
 800831a:	f7f8 fc07 	bl	8000b2c <__aeabi_dcmpun>
 800831e:	bb88      	cbnz	r0, 8008384 <_printf_float+0xd0>
 8008320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008324:	4b9a      	ldr	r3, [pc, #616]	; (8008590 <_printf_float+0x2dc>)
 8008326:	f04f 32ff 	mov.w	r2, #4294967295
 800832a:	f7f8 fbe1 	bl	8000af0 <__aeabi_dcmple>
 800832e:	bb48      	cbnz	r0, 8008384 <_printf_float+0xd0>
 8008330:	2200      	movs	r2, #0
 8008332:	2300      	movs	r3, #0
 8008334:	4640      	mov	r0, r8
 8008336:	4649      	mov	r1, r9
 8008338:	f7f8 fbd0 	bl	8000adc <__aeabi_dcmplt>
 800833c:	b110      	cbz	r0, 8008344 <_printf_float+0x90>
 800833e:	232d      	movs	r3, #45	; 0x2d
 8008340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008344:	4b93      	ldr	r3, [pc, #588]	; (8008594 <_printf_float+0x2e0>)
 8008346:	4894      	ldr	r0, [pc, #592]	; (8008598 <_printf_float+0x2e4>)
 8008348:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800834c:	bf94      	ite	ls
 800834e:	4698      	movls	r8, r3
 8008350:	4680      	movhi	r8, r0
 8008352:	2303      	movs	r3, #3
 8008354:	6123      	str	r3, [r4, #16]
 8008356:	9b05      	ldr	r3, [sp, #20]
 8008358:	f023 0204 	bic.w	r2, r3, #4
 800835c:	6022      	str	r2, [r4, #0]
 800835e:	f04f 0900 	mov.w	r9, #0
 8008362:	9700      	str	r7, [sp, #0]
 8008364:	4633      	mov	r3, r6
 8008366:	aa0b      	add	r2, sp, #44	; 0x2c
 8008368:	4621      	mov	r1, r4
 800836a:	4628      	mov	r0, r5
 800836c:	f000 f9d8 	bl	8008720 <_printf_common>
 8008370:	3001      	adds	r0, #1
 8008372:	f040 8090 	bne.w	8008496 <_printf_float+0x1e2>
 8008376:	f04f 30ff 	mov.w	r0, #4294967295
 800837a:	b00d      	add	sp, #52	; 0x34
 800837c:	ecbd 8b02 	vpop	{d8}
 8008380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	4642      	mov	r2, r8
 8008386:	464b      	mov	r3, r9
 8008388:	4640      	mov	r0, r8
 800838a:	4649      	mov	r1, r9
 800838c:	f7f8 fbce 	bl	8000b2c <__aeabi_dcmpun>
 8008390:	b140      	cbz	r0, 80083a4 <_printf_float+0xf0>
 8008392:	464b      	mov	r3, r9
 8008394:	2b00      	cmp	r3, #0
 8008396:	bfbc      	itt	lt
 8008398:	232d      	movlt	r3, #45	; 0x2d
 800839a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800839e:	487f      	ldr	r0, [pc, #508]	; (800859c <_printf_float+0x2e8>)
 80083a0:	4b7f      	ldr	r3, [pc, #508]	; (80085a0 <_printf_float+0x2ec>)
 80083a2:	e7d1      	b.n	8008348 <_printf_float+0x94>
 80083a4:	6863      	ldr	r3, [r4, #4]
 80083a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083aa:	9206      	str	r2, [sp, #24]
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	d13f      	bne.n	8008430 <_printf_float+0x17c>
 80083b0:	2306      	movs	r3, #6
 80083b2:	6063      	str	r3, [r4, #4]
 80083b4:	9b05      	ldr	r3, [sp, #20]
 80083b6:	6861      	ldr	r1, [r4, #4]
 80083b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80083bc:	2300      	movs	r3, #0
 80083be:	9303      	str	r3, [sp, #12]
 80083c0:	ab0a      	add	r3, sp, #40	; 0x28
 80083c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80083c6:	ab09      	add	r3, sp, #36	; 0x24
 80083c8:	ec49 8b10 	vmov	d0, r8, r9
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	6022      	str	r2, [r4, #0]
 80083d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083d4:	4628      	mov	r0, r5
 80083d6:	f7ff fecd 	bl	8008174 <__cvt>
 80083da:	9b06      	ldr	r3, [sp, #24]
 80083dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083de:	2b47      	cmp	r3, #71	; 0x47
 80083e0:	4680      	mov	r8, r0
 80083e2:	d108      	bne.n	80083f6 <_printf_float+0x142>
 80083e4:	1cc8      	adds	r0, r1, #3
 80083e6:	db02      	blt.n	80083ee <_printf_float+0x13a>
 80083e8:	6863      	ldr	r3, [r4, #4]
 80083ea:	4299      	cmp	r1, r3
 80083ec:	dd41      	ble.n	8008472 <_printf_float+0x1be>
 80083ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80083f2:	fa5f fb8b 	uxtb.w	fp, fp
 80083f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083fa:	d820      	bhi.n	800843e <_printf_float+0x18a>
 80083fc:	3901      	subs	r1, #1
 80083fe:	465a      	mov	r2, fp
 8008400:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008404:	9109      	str	r1, [sp, #36]	; 0x24
 8008406:	f7ff ff17 	bl	8008238 <__exponent>
 800840a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800840c:	1813      	adds	r3, r2, r0
 800840e:	2a01      	cmp	r2, #1
 8008410:	4681      	mov	r9, r0
 8008412:	6123      	str	r3, [r4, #16]
 8008414:	dc02      	bgt.n	800841c <_printf_float+0x168>
 8008416:	6822      	ldr	r2, [r4, #0]
 8008418:	07d2      	lsls	r2, r2, #31
 800841a:	d501      	bpl.n	8008420 <_printf_float+0x16c>
 800841c:	3301      	adds	r3, #1
 800841e:	6123      	str	r3, [r4, #16]
 8008420:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008424:	2b00      	cmp	r3, #0
 8008426:	d09c      	beq.n	8008362 <_printf_float+0xae>
 8008428:	232d      	movs	r3, #45	; 0x2d
 800842a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800842e:	e798      	b.n	8008362 <_printf_float+0xae>
 8008430:	9a06      	ldr	r2, [sp, #24]
 8008432:	2a47      	cmp	r2, #71	; 0x47
 8008434:	d1be      	bne.n	80083b4 <_printf_float+0x100>
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1bc      	bne.n	80083b4 <_printf_float+0x100>
 800843a:	2301      	movs	r3, #1
 800843c:	e7b9      	b.n	80083b2 <_printf_float+0xfe>
 800843e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008442:	d118      	bne.n	8008476 <_printf_float+0x1c2>
 8008444:	2900      	cmp	r1, #0
 8008446:	6863      	ldr	r3, [r4, #4]
 8008448:	dd0b      	ble.n	8008462 <_printf_float+0x1ae>
 800844a:	6121      	str	r1, [r4, #16]
 800844c:	b913      	cbnz	r3, 8008454 <_printf_float+0x1a0>
 800844e:	6822      	ldr	r2, [r4, #0]
 8008450:	07d0      	lsls	r0, r2, #31
 8008452:	d502      	bpl.n	800845a <_printf_float+0x1a6>
 8008454:	3301      	adds	r3, #1
 8008456:	440b      	add	r3, r1
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	65a1      	str	r1, [r4, #88]	; 0x58
 800845c:	f04f 0900 	mov.w	r9, #0
 8008460:	e7de      	b.n	8008420 <_printf_float+0x16c>
 8008462:	b913      	cbnz	r3, 800846a <_printf_float+0x1b6>
 8008464:	6822      	ldr	r2, [r4, #0]
 8008466:	07d2      	lsls	r2, r2, #31
 8008468:	d501      	bpl.n	800846e <_printf_float+0x1ba>
 800846a:	3302      	adds	r3, #2
 800846c:	e7f4      	b.n	8008458 <_printf_float+0x1a4>
 800846e:	2301      	movs	r3, #1
 8008470:	e7f2      	b.n	8008458 <_printf_float+0x1a4>
 8008472:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008478:	4299      	cmp	r1, r3
 800847a:	db05      	blt.n	8008488 <_printf_float+0x1d4>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	6121      	str	r1, [r4, #16]
 8008480:	07d8      	lsls	r0, r3, #31
 8008482:	d5ea      	bpl.n	800845a <_printf_float+0x1a6>
 8008484:	1c4b      	adds	r3, r1, #1
 8008486:	e7e7      	b.n	8008458 <_printf_float+0x1a4>
 8008488:	2900      	cmp	r1, #0
 800848a:	bfd4      	ite	le
 800848c:	f1c1 0202 	rsble	r2, r1, #2
 8008490:	2201      	movgt	r2, #1
 8008492:	4413      	add	r3, r2
 8008494:	e7e0      	b.n	8008458 <_printf_float+0x1a4>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	055a      	lsls	r2, r3, #21
 800849a:	d407      	bmi.n	80084ac <_printf_float+0x1f8>
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	4642      	mov	r2, r8
 80084a0:	4631      	mov	r1, r6
 80084a2:	4628      	mov	r0, r5
 80084a4:	47b8      	blx	r7
 80084a6:	3001      	adds	r0, #1
 80084a8:	d12c      	bne.n	8008504 <_printf_float+0x250>
 80084aa:	e764      	b.n	8008376 <_printf_float+0xc2>
 80084ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084b0:	f240 80e0 	bls.w	8008674 <_printf_float+0x3c0>
 80084b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084b8:	2200      	movs	r2, #0
 80084ba:	2300      	movs	r3, #0
 80084bc:	f7f8 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d034      	beq.n	800852e <_printf_float+0x27a>
 80084c4:	4a37      	ldr	r2, [pc, #220]	; (80085a4 <_printf_float+0x2f0>)
 80084c6:	2301      	movs	r3, #1
 80084c8:	4631      	mov	r1, r6
 80084ca:	4628      	mov	r0, r5
 80084cc:	47b8      	blx	r7
 80084ce:	3001      	adds	r0, #1
 80084d0:	f43f af51 	beq.w	8008376 <_printf_float+0xc2>
 80084d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d8:	429a      	cmp	r2, r3
 80084da:	db02      	blt.n	80084e2 <_printf_float+0x22e>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	07d8      	lsls	r0, r3, #31
 80084e0:	d510      	bpl.n	8008504 <_printf_float+0x250>
 80084e2:	ee18 3a10 	vmov	r3, s16
 80084e6:	4652      	mov	r2, sl
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	f43f af41 	beq.w	8008376 <_printf_float+0xc2>
 80084f4:	f04f 0800 	mov.w	r8, #0
 80084f8:	f104 091a 	add.w	r9, r4, #26
 80084fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fe:	3b01      	subs	r3, #1
 8008500:	4543      	cmp	r3, r8
 8008502:	dc09      	bgt.n	8008518 <_printf_float+0x264>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	079b      	lsls	r3, r3, #30
 8008508:	f100 8105 	bmi.w	8008716 <_printf_float+0x462>
 800850c:	68e0      	ldr	r0, [r4, #12]
 800850e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008510:	4298      	cmp	r0, r3
 8008512:	bfb8      	it	lt
 8008514:	4618      	movlt	r0, r3
 8008516:	e730      	b.n	800837a <_printf_float+0xc6>
 8008518:	2301      	movs	r3, #1
 800851a:	464a      	mov	r2, r9
 800851c:	4631      	mov	r1, r6
 800851e:	4628      	mov	r0, r5
 8008520:	47b8      	blx	r7
 8008522:	3001      	adds	r0, #1
 8008524:	f43f af27 	beq.w	8008376 <_printf_float+0xc2>
 8008528:	f108 0801 	add.w	r8, r8, #1
 800852c:	e7e6      	b.n	80084fc <_printf_float+0x248>
 800852e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008530:	2b00      	cmp	r3, #0
 8008532:	dc39      	bgt.n	80085a8 <_printf_float+0x2f4>
 8008534:	4a1b      	ldr	r2, [pc, #108]	; (80085a4 <_printf_float+0x2f0>)
 8008536:	2301      	movs	r3, #1
 8008538:	4631      	mov	r1, r6
 800853a:	4628      	mov	r0, r5
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	f43f af19 	beq.w	8008376 <_printf_float+0xc2>
 8008544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008548:	4313      	orrs	r3, r2
 800854a:	d102      	bne.n	8008552 <_printf_float+0x29e>
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	07d9      	lsls	r1, r3, #31
 8008550:	d5d8      	bpl.n	8008504 <_printf_float+0x250>
 8008552:	ee18 3a10 	vmov	r3, s16
 8008556:	4652      	mov	r2, sl
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	47b8      	blx	r7
 800855e:	3001      	adds	r0, #1
 8008560:	f43f af09 	beq.w	8008376 <_printf_float+0xc2>
 8008564:	f04f 0900 	mov.w	r9, #0
 8008568:	f104 0a1a 	add.w	sl, r4, #26
 800856c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856e:	425b      	negs	r3, r3
 8008570:	454b      	cmp	r3, r9
 8008572:	dc01      	bgt.n	8008578 <_printf_float+0x2c4>
 8008574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008576:	e792      	b.n	800849e <_printf_float+0x1ea>
 8008578:	2301      	movs	r3, #1
 800857a:	4652      	mov	r2, sl
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f aef7 	beq.w	8008376 <_printf_float+0xc2>
 8008588:	f109 0901 	add.w	r9, r9, #1
 800858c:	e7ee      	b.n	800856c <_printf_float+0x2b8>
 800858e:	bf00      	nop
 8008590:	7fefffff 	.word	0x7fefffff
 8008594:	0800ade0 	.word	0x0800ade0
 8008598:	0800ade4 	.word	0x0800ade4
 800859c:	0800adec 	.word	0x0800adec
 80085a0:	0800ade8 	.word	0x0800ade8
 80085a4:	0800adf0 	.word	0x0800adf0
 80085a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085ac:	429a      	cmp	r2, r3
 80085ae:	bfa8      	it	ge
 80085b0:	461a      	movge	r2, r3
 80085b2:	2a00      	cmp	r2, #0
 80085b4:	4691      	mov	r9, r2
 80085b6:	dc37      	bgt.n	8008628 <_printf_float+0x374>
 80085b8:	f04f 0b00 	mov.w	fp, #0
 80085bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085c0:	f104 021a 	add.w	r2, r4, #26
 80085c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085c6:	9305      	str	r3, [sp, #20]
 80085c8:	eba3 0309 	sub.w	r3, r3, r9
 80085cc:	455b      	cmp	r3, fp
 80085ce:	dc33      	bgt.n	8008638 <_printf_float+0x384>
 80085d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d4:	429a      	cmp	r2, r3
 80085d6:	db3b      	blt.n	8008650 <_printf_float+0x39c>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	07da      	lsls	r2, r3, #31
 80085dc:	d438      	bmi.n	8008650 <_printf_float+0x39c>
 80085de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e0:	9a05      	ldr	r2, [sp, #20]
 80085e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085e4:	1a9a      	subs	r2, r3, r2
 80085e6:	eba3 0901 	sub.w	r9, r3, r1
 80085ea:	4591      	cmp	r9, r2
 80085ec:	bfa8      	it	ge
 80085ee:	4691      	movge	r9, r2
 80085f0:	f1b9 0f00 	cmp.w	r9, #0
 80085f4:	dc35      	bgt.n	8008662 <_printf_float+0x3ae>
 80085f6:	f04f 0800 	mov.w	r8, #0
 80085fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085fe:	f104 0a1a 	add.w	sl, r4, #26
 8008602:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008606:	1a9b      	subs	r3, r3, r2
 8008608:	eba3 0309 	sub.w	r3, r3, r9
 800860c:	4543      	cmp	r3, r8
 800860e:	f77f af79 	ble.w	8008504 <_printf_float+0x250>
 8008612:	2301      	movs	r3, #1
 8008614:	4652      	mov	r2, sl
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	47b8      	blx	r7
 800861c:	3001      	adds	r0, #1
 800861e:	f43f aeaa 	beq.w	8008376 <_printf_float+0xc2>
 8008622:	f108 0801 	add.w	r8, r8, #1
 8008626:	e7ec      	b.n	8008602 <_printf_float+0x34e>
 8008628:	4613      	mov	r3, r2
 800862a:	4631      	mov	r1, r6
 800862c:	4642      	mov	r2, r8
 800862e:	4628      	mov	r0, r5
 8008630:	47b8      	blx	r7
 8008632:	3001      	adds	r0, #1
 8008634:	d1c0      	bne.n	80085b8 <_printf_float+0x304>
 8008636:	e69e      	b.n	8008376 <_printf_float+0xc2>
 8008638:	2301      	movs	r3, #1
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	9205      	str	r2, [sp, #20]
 8008640:	47b8      	blx	r7
 8008642:	3001      	adds	r0, #1
 8008644:	f43f ae97 	beq.w	8008376 <_printf_float+0xc2>
 8008648:	9a05      	ldr	r2, [sp, #20]
 800864a:	f10b 0b01 	add.w	fp, fp, #1
 800864e:	e7b9      	b.n	80085c4 <_printf_float+0x310>
 8008650:	ee18 3a10 	vmov	r3, s16
 8008654:	4652      	mov	r2, sl
 8008656:	4631      	mov	r1, r6
 8008658:	4628      	mov	r0, r5
 800865a:	47b8      	blx	r7
 800865c:	3001      	adds	r0, #1
 800865e:	d1be      	bne.n	80085de <_printf_float+0x32a>
 8008660:	e689      	b.n	8008376 <_printf_float+0xc2>
 8008662:	9a05      	ldr	r2, [sp, #20]
 8008664:	464b      	mov	r3, r9
 8008666:	4442      	add	r2, r8
 8008668:	4631      	mov	r1, r6
 800866a:	4628      	mov	r0, r5
 800866c:	47b8      	blx	r7
 800866e:	3001      	adds	r0, #1
 8008670:	d1c1      	bne.n	80085f6 <_printf_float+0x342>
 8008672:	e680      	b.n	8008376 <_printf_float+0xc2>
 8008674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008676:	2a01      	cmp	r2, #1
 8008678:	dc01      	bgt.n	800867e <_printf_float+0x3ca>
 800867a:	07db      	lsls	r3, r3, #31
 800867c:	d538      	bpl.n	80086f0 <_printf_float+0x43c>
 800867e:	2301      	movs	r3, #1
 8008680:	4642      	mov	r2, r8
 8008682:	4631      	mov	r1, r6
 8008684:	4628      	mov	r0, r5
 8008686:	47b8      	blx	r7
 8008688:	3001      	adds	r0, #1
 800868a:	f43f ae74 	beq.w	8008376 <_printf_float+0xc2>
 800868e:	ee18 3a10 	vmov	r3, s16
 8008692:	4652      	mov	r2, sl
 8008694:	4631      	mov	r1, r6
 8008696:	4628      	mov	r0, r5
 8008698:	47b8      	blx	r7
 800869a:	3001      	adds	r0, #1
 800869c:	f43f ae6b 	beq.w	8008376 <_printf_float+0xc2>
 80086a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086a4:	2200      	movs	r2, #0
 80086a6:	2300      	movs	r3, #0
 80086a8:	f7f8 fa0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80086ac:	b9d8      	cbnz	r0, 80086e6 <_printf_float+0x432>
 80086ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b0:	f108 0201 	add.w	r2, r8, #1
 80086b4:	3b01      	subs	r3, #1
 80086b6:	4631      	mov	r1, r6
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b8      	blx	r7
 80086bc:	3001      	adds	r0, #1
 80086be:	d10e      	bne.n	80086de <_printf_float+0x42a>
 80086c0:	e659      	b.n	8008376 <_printf_float+0xc2>
 80086c2:	2301      	movs	r3, #1
 80086c4:	4652      	mov	r2, sl
 80086c6:	4631      	mov	r1, r6
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b8      	blx	r7
 80086cc:	3001      	adds	r0, #1
 80086ce:	f43f ae52 	beq.w	8008376 <_printf_float+0xc2>
 80086d2:	f108 0801 	add.w	r8, r8, #1
 80086d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d8:	3b01      	subs	r3, #1
 80086da:	4543      	cmp	r3, r8
 80086dc:	dcf1      	bgt.n	80086c2 <_printf_float+0x40e>
 80086de:	464b      	mov	r3, r9
 80086e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80086e4:	e6dc      	b.n	80084a0 <_printf_float+0x1ec>
 80086e6:	f04f 0800 	mov.w	r8, #0
 80086ea:	f104 0a1a 	add.w	sl, r4, #26
 80086ee:	e7f2      	b.n	80086d6 <_printf_float+0x422>
 80086f0:	2301      	movs	r3, #1
 80086f2:	4642      	mov	r2, r8
 80086f4:	e7df      	b.n	80086b6 <_printf_float+0x402>
 80086f6:	2301      	movs	r3, #1
 80086f8:	464a      	mov	r2, r9
 80086fa:	4631      	mov	r1, r6
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b8      	blx	r7
 8008700:	3001      	adds	r0, #1
 8008702:	f43f ae38 	beq.w	8008376 <_printf_float+0xc2>
 8008706:	f108 0801 	add.w	r8, r8, #1
 800870a:	68e3      	ldr	r3, [r4, #12]
 800870c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800870e:	1a5b      	subs	r3, r3, r1
 8008710:	4543      	cmp	r3, r8
 8008712:	dcf0      	bgt.n	80086f6 <_printf_float+0x442>
 8008714:	e6fa      	b.n	800850c <_printf_float+0x258>
 8008716:	f04f 0800 	mov.w	r8, #0
 800871a:	f104 0919 	add.w	r9, r4, #25
 800871e:	e7f4      	b.n	800870a <_printf_float+0x456>

08008720 <_printf_common>:
 8008720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008724:	4616      	mov	r6, r2
 8008726:	4699      	mov	r9, r3
 8008728:	688a      	ldr	r2, [r1, #8]
 800872a:	690b      	ldr	r3, [r1, #16]
 800872c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008730:	4293      	cmp	r3, r2
 8008732:	bfb8      	it	lt
 8008734:	4613      	movlt	r3, r2
 8008736:	6033      	str	r3, [r6, #0]
 8008738:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800873c:	4607      	mov	r7, r0
 800873e:	460c      	mov	r4, r1
 8008740:	b10a      	cbz	r2, 8008746 <_printf_common+0x26>
 8008742:	3301      	adds	r3, #1
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	0699      	lsls	r1, r3, #26
 800874a:	bf42      	ittt	mi
 800874c:	6833      	ldrmi	r3, [r6, #0]
 800874e:	3302      	addmi	r3, #2
 8008750:	6033      	strmi	r3, [r6, #0]
 8008752:	6825      	ldr	r5, [r4, #0]
 8008754:	f015 0506 	ands.w	r5, r5, #6
 8008758:	d106      	bne.n	8008768 <_printf_common+0x48>
 800875a:	f104 0a19 	add.w	sl, r4, #25
 800875e:	68e3      	ldr	r3, [r4, #12]
 8008760:	6832      	ldr	r2, [r6, #0]
 8008762:	1a9b      	subs	r3, r3, r2
 8008764:	42ab      	cmp	r3, r5
 8008766:	dc26      	bgt.n	80087b6 <_printf_common+0x96>
 8008768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800876c:	1e13      	subs	r3, r2, #0
 800876e:	6822      	ldr	r2, [r4, #0]
 8008770:	bf18      	it	ne
 8008772:	2301      	movne	r3, #1
 8008774:	0692      	lsls	r2, r2, #26
 8008776:	d42b      	bmi.n	80087d0 <_printf_common+0xb0>
 8008778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800877c:	4649      	mov	r1, r9
 800877e:	4638      	mov	r0, r7
 8008780:	47c0      	blx	r8
 8008782:	3001      	adds	r0, #1
 8008784:	d01e      	beq.n	80087c4 <_printf_common+0xa4>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	68e5      	ldr	r5, [r4, #12]
 800878a:	6832      	ldr	r2, [r6, #0]
 800878c:	f003 0306 	and.w	r3, r3, #6
 8008790:	2b04      	cmp	r3, #4
 8008792:	bf08      	it	eq
 8008794:	1aad      	subeq	r5, r5, r2
 8008796:	68a3      	ldr	r3, [r4, #8]
 8008798:	6922      	ldr	r2, [r4, #16]
 800879a:	bf0c      	ite	eq
 800879c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087a0:	2500      	movne	r5, #0
 80087a2:	4293      	cmp	r3, r2
 80087a4:	bfc4      	itt	gt
 80087a6:	1a9b      	subgt	r3, r3, r2
 80087a8:	18ed      	addgt	r5, r5, r3
 80087aa:	2600      	movs	r6, #0
 80087ac:	341a      	adds	r4, #26
 80087ae:	42b5      	cmp	r5, r6
 80087b0:	d11a      	bne.n	80087e8 <_printf_common+0xc8>
 80087b2:	2000      	movs	r0, #0
 80087b4:	e008      	b.n	80087c8 <_printf_common+0xa8>
 80087b6:	2301      	movs	r3, #1
 80087b8:	4652      	mov	r2, sl
 80087ba:	4649      	mov	r1, r9
 80087bc:	4638      	mov	r0, r7
 80087be:	47c0      	blx	r8
 80087c0:	3001      	adds	r0, #1
 80087c2:	d103      	bne.n	80087cc <_printf_common+0xac>
 80087c4:	f04f 30ff 	mov.w	r0, #4294967295
 80087c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087cc:	3501      	adds	r5, #1
 80087ce:	e7c6      	b.n	800875e <_printf_common+0x3e>
 80087d0:	18e1      	adds	r1, r4, r3
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	2030      	movs	r0, #48	; 0x30
 80087d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087da:	4422      	add	r2, r4
 80087dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087e4:	3302      	adds	r3, #2
 80087e6:	e7c7      	b.n	8008778 <_printf_common+0x58>
 80087e8:	2301      	movs	r3, #1
 80087ea:	4622      	mov	r2, r4
 80087ec:	4649      	mov	r1, r9
 80087ee:	4638      	mov	r0, r7
 80087f0:	47c0      	blx	r8
 80087f2:	3001      	adds	r0, #1
 80087f4:	d0e6      	beq.n	80087c4 <_printf_common+0xa4>
 80087f6:	3601      	adds	r6, #1
 80087f8:	e7d9      	b.n	80087ae <_printf_common+0x8e>
	...

080087fc <_printf_i>:
 80087fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008800:	7e0f      	ldrb	r7, [r1, #24]
 8008802:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008804:	2f78      	cmp	r7, #120	; 0x78
 8008806:	4691      	mov	r9, r2
 8008808:	4680      	mov	r8, r0
 800880a:	460c      	mov	r4, r1
 800880c:	469a      	mov	sl, r3
 800880e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008812:	d807      	bhi.n	8008824 <_printf_i+0x28>
 8008814:	2f62      	cmp	r7, #98	; 0x62
 8008816:	d80a      	bhi.n	800882e <_printf_i+0x32>
 8008818:	2f00      	cmp	r7, #0
 800881a:	f000 80d8 	beq.w	80089ce <_printf_i+0x1d2>
 800881e:	2f58      	cmp	r7, #88	; 0x58
 8008820:	f000 80a3 	beq.w	800896a <_printf_i+0x16e>
 8008824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800882c:	e03a      	b.n	80088a4 <_printf_i+0xa8>
 800882e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008832:	2b15      	cmp	r3, #21
 8008834:	d8f6      	bhi.n	8008824 <_printf_i+0x28>
 8008836:	a101      	add	r1, pc, #4	; (adr r1, 800883c <_printf_i+0x40>)
 8008838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800883c:	08008895 	.word	0x08008895
 8008840:	080088a9 	.word	0x080088a9
 8008844:	08008825 	.word	0x08008825
 8008848:	08008825 	.word	0x08008825
 800884c:	08008825 	.word	0x08008825
 8008850:	08008825 	.word	0x08008825
 8008854:	080088a9 	.word	0x080088a9
 8008858:	08008825 	.word	0x08008825
 800885c:	08008825 	.word	0x08008825
 8008860:	08008825 	.word	0x08008825
 8008864:	08008825 	.word	0x08008825
 8008868:	080089b5 	.word	0x080089b5
 800886c:	080088d9 	.word	0x080088d9
 8008870:	08008997 	.word	0x08008997
 8008874:	08008825 	.word	0x08008825
 8008878:	08008825 	.word	0x08008825
 800887c:	080089d7 	.word	0x080089d7
 8008880:	08008825 	.word	0x08008825
 8008884:	080088d9 	.word	0x080088d9
 8008888:	08008825 	.word	0x08008825
 800888c:	08008825 	.word	0x08008825
 8008890:	0800899f 	.word	0x0800899f
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	1d1a      	adds	r2, r3, #4
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	602a      	str	r2, [r5, #0]
 800889c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088a4:	2301      	movs	r3, #1
 80088a6:	e0a3      	b.n	80089f0 <_printf_i+0x1f4>
 80088a8:	6820      	ldr	r0, [r4, #0]
 80088aa:	6829      	ldr	r1, [r5, #0]
 80088ac:	0606      	lsls	r6, r0, #24
 80088ae:	f101 0304 	add.w	r3, r1, #4
 80088b2:	d50a      	bpl.n	80088ca <_printf_i+0xce>
 80088b4:	680e      	ldr	r6, [r1, #0]
 80088b6:	602b      	str	r3, [r5, #0]
 80088b8:	2e00      	cmp	r6, #0
 80088ba:	da03      	bge.n	80088c4 <_printf_i+0xc8>
 80088bc:	232d      	movs	r3, #45	; 0x2d
 80088be:	4276      	negs	r6, r6
 80088c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088c4:	485e      	ldr	r0, [pc, #376]	; (8008a40 <_printf_i+0x244>)
 80088c6:	230a      	movs	r3, #10
 80088c8:	e019      	b.n	80088fe <_printf_i+0x102>
 80088ca:	680e      	ldr	r6, [r1, #0]
 80088cc:	602b      	str	r3, [r5, #0]
 80088ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088d2:	bf18      	it	ne
 80088d4:	b236      	sxthne	r6, r6
 80088d6:	e7ef      	b.n	80088b8 <_printf_i+0xbc>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	6820      	ldr	r0, [r4, #0]
 80088dc:	1d19      	adds	r1, r3, #4
 80088de:	6029      	str	r1, [r5, #0]
 80088e0:	0601      	lsls	r1, r0, #24
 80088e2:	d501      	bpl.n	80088e8 <_printf_i+0xec>
 80088e4:	681e      	ldr	r6, [r3, #0]
 80088e6:	e002      	b.n	80088ee <_printf_i+0xf2>
 80088e8:	0646      	lsls	r6, r0, #25
 80088ea:	d5fb      	bpl.n	80088e4 <_printf_i+0xe8>
 80088ec:	881e      	ldrh	r6, [r3, #0]
 80088ee:	4854      	ldr	r0, [pc, #336]	; (8008a40 <_printf_i+0x244>)
 80088f0:	2f6f      	cmp	r7, #111	; 0x6f
 80088f2:	bf0c      	ite	eq
 80088f4:	2308      	moveq	r3, #8
 80088f6:	230a      	movne	r3, #10
 80088f8:	2100      	movs	r1, #0
 80088fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088fe:	6865      	ldr	r5, [r4, #4]
 8008900:	60a5      	str	r5, [r4, #8]
 8008902:	2d00      	cmp	r5, #0
 8008904:	bfa2      	ittt	ge
 8008906:	6821      	ldrge	r1, [r4, #0]
 8008908:	f021 0104 	bicge.w	r1, r1, #4
 800890c:	6021      	strge	r1, [r4, #0]
 800890e:	b90e      	cbnz	r6, 8008914 <_printf_i+0x118>
 8008910:	2d00      	cmp	r5, #0
 8008912:	d04d      	beq.n	80089b0 <_printf_i+0x1b4>
 8008914:	4615      	mov	r5, r2
 8008916:	fbb6 f1f3 	udiv	r1, r6, r3
 800891a:	fb03 6711 	mls	r7, r3, r1, r6
 800891e:	5dc7      	ldrb	r7, [r0, r7]
 8008920:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008924:	4637      	mov	r7, r6
 8008926:	42bb      	cmp	r3, r7
 8008928:	460e      	mov	r6, r1
 800892a:	d9f4      	bls.n	8008916 <_printf_i+0x11a>
 800892c:	2b08      	cmp	r3, #8
 800892e:	d10b      	bne.n	8008948 <_printf_i+0x14c>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	07de      	lsls	r6, r3, #31
 8008934:	d508      	bpl.n	8008948 <_printf_i+0x14c>
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	6861      	ldr	r1, [r4, #4]
 800893a:	4299      	cmp	r1, r3
 800893c:	bfde      	ittt	le
 800893e:	2330      	movle	r3, #48	; 0x30
 8008940:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008944:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008948:	1b52      	subs	r2, r2, r5
 800894a:	6122      	str	r2, [r4, #16]
 800894c:	f8cd a000 	str.w	sl, [sp]
 8008950:	464b      	mov	r3, r9
 8008952:	aa03      	add	r2, sp, #12
 8008954:	4621      	mov	r1, r4
 8008956:	4640      	mov	r0, r8
 8008958:	f7ff fee2 	bl	8008720 <_printf_common>
 800895c:	3001      	adds	r0, #1
 800895e:	d14c      	bne.n	80089fa <_printf_i+0x1fe>
 8008960:	f04f 30ff 	mov.w	r0, #4294967295
 8008964:	b004      	add	sp, #16
 8008966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896a:	4835      	ldr	r0, [pc, #212]	; (8008a40 <_printf_i+0x244>)
 800896c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008970:	6829      	ldr	r1, [r5, #0]
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	f851 6b04 	ldr.w	r6, [r1], #4
 8008978:	6029      	str	r1, [r5, #0]
 800897a:	061d      	lsls	r5, r3, #24
 800897c:	d514      	bpl.n	80089a8 <_printf_i+0x1ac>
 800897e:	07df      	lsls	r7, r3, #31
 8008980:	bf44      	itt	mi
 8008982:	f043 0320 	orrmi.w	r3, r3, #32
 8008986:	6023      	strmi	r3, [r4, #0]
 8008988:	b91e      	cbnz	r6, 8008992 <_printf_i+0x196>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	f023 0320 	bic.w	r3, r3, #32
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	2310      	movs	r3, #16
 8008994:	e7b0      	b.n	80088f8 <_printf_i+0xfc>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	f043 0320 	orr.w	r3, r3, #32
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	2378      	movs	r3, #120	; 0x78
 80089a0:	4828      	ldr	r0, [pc, #160]	; (8008a44 <_printf_i+0x248>)
 80089a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089a6:	e7e3      	b.n	8008970 <_printf_i+0x174>
 80089a8:	0659      	lsls	r1, r3, #25
 80089aa:	bf48      	it	mi
 80089ac:	b2b6      	uxthmi	r6, r6
 80089ae:	e7e6      	b.n	800897e <_printf_i+0x182>
 80089b0:	4615      	mov	r5, r2
 80089b2:	e7bb      	b.n	800892c <_printf_i+0x130>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	6826      	ldr	r6, [r4, #0]
 80089b8:	6961      	ldr	r1, [r4, #20]
 80089ba:	1d18      	adds	r0, r3, #4
 80089bc:	6028      	str	r0, [r5, #0]
 80089be:	0635      	lsls	r5, r6, #24
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	d501      	bpl.n	80089c8 <_printf_i+0x1cc>
 80089c4:	6019      	str	r1, [r3, #0]
 80089c6:	e002      	b.n	80089ce <_printf_i+0x1d2>
 80089c8:	0670      	lsls	r0, r6, #25
 80089ca:	d5fb      	bpl.n	80089c4 <_printf_i+0x1c8>
 80089cc:	8019      	strh	r1, [r3, #0]
 80089ce:	2300      	movs	r3, #0
 80089d0:	6123      	str	r3, [r4, #16]
 80089d2:	4615      	mov	r5, r2
 80089d4:	e7ba      	b.n	800894c <_printf_i+0x150>
 80089d6:	682b      	ldr	r3, [r5, #0]
 80089d8:	1d1a      	adds	r2, r3, #4
 80089da:	602a      	str	r2, [r5, #0]
 80089dc:	681d      	ldr	r5, [r3, #0]
 80089de:	6862      	ldr	r2, [r4, #4]
 80089e0:	2100      	movs	r1, #0
 80089e2:	4628      	mov	r0, r5
 80089e4:	f7f7 fbfc 	bl	80001e0 <memchr>
 80089e8:	b108      	cbz	r0, 80089ee <_printf_i+0x1f2>
 80089ea:	1b40      	subs	r0, r0, r5
 80089ec:	6060      	str	r0, [r4, #4]
 80089ee:	6863      	ldr	r3, [r4, #4]
 80089f0:	6123      	str	r3, [r4, #16]
 80089f2:	2300      	movs	r3, #0
 80089f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f8:	e7a8      	b.n	800894c <_printf_i+0x150>
 80089fa:	6923      	ldr	r3, [r4, #16]
 80089fc:	462a      	mov	r2, r5
 80089fe:	4649      	mov	r1, r9
 8008a00:	4640      	mov	r0, r8
 8008a02:	47d0      	blx	sl
 8008a04:	3001      	adds	r0, #1
 8008a06:	d0ab      	beq.n	8008960 <_printf_i+0x164>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	079b      	lsls	r3, r3, #30
 8008a0c:	d413      	bmi.n	8008a36 <_printf_i+0x23a>
 8008a0e:	68e0      	ldr	r0, [r4, #12]
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	4298      	cmp	r0, r3
 8008a14:	bfb8      	it	lt
 8008a16:	4618      	movlt	r0, r3
 8008a18:	e7a4      	b.n	8008964 <_printf_i+0x168>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	4649      	mov	r1, r9
 8008a20:	4640      	mov	r0, r8
 8008a22:	47d0      	blx	sl
 8008a24:	3001      	adds	r0, #1
 8008a26:	d09b      	beq.n	8008960 <_printf_i+0x164>
 8008a28:	3501      	adds	r5, #1
 8008a2a:	68e3      	ldr	r3, [r4, #12]
 8008a2c:	9903      	ldr	r1, [sp, #12]
 8008a2e:	1a5b      	subs	r3, r3, r1
 8008a30:	42ab      	cmp	r3, r5
 8008a32:	dcf2      	bgt.n	8008a1a <_printf_i+0x21e>
 8008a34:	e7eb      	b.n	8008a0e <_printf_i+0x212>
 8008a36:	2500      	movs	r5, #0
 8008a38:	f104 0619 	add.w	r6, r4, #25
 8008a3c:	e7f5      	b.n	8008a2a <_printf_i+0x22e>
 8008a3e:	bf00      	nop
 8008a40:	0800adf2 	.word	0x0800adf2
 8008a44:	0800ae03 	.word	0x0800ae03

08008a48 <_sbrk_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d06      	ldr	r5, [pc, #24]	; (8008a64 <_sbrk_r+0x1c>)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	602b      	str	r3, [r5, #0]
 8008a54:	f7f9 fb9e 	bl	8002194 <_sbrk>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_sbrk_r+0x1a>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_sbrk_r+0x1a>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	200004e8 	.word	0x200004e8

08008a68 <siprintf>:
 8008a68:	b40e      	push	{r1, r2, r3}
 8008a6a:	b500      	push	{lr}
 8008a6c:	b09c      	sub	sp, #112	; 0x70
 8008a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8008a70:	9002      	str	r0, [sp, #8]
 8008a72:	9006      	str	r0, [sp, #24]
 8008a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a78:	4809      	ldr	r0, [pc, #36]	; (8008aa0 <siprintf+0x38>)
 8008a7a:	9107      	str	r1, [sp, #28]
 8008a7c:	9104      	str	r1, [sp, #16]
 8008a7e:	4909      	ldr	r1, [pc, #36]	; (8008aa4 <siprintf+0x3c>)
 8008a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a84:	9105      	str	r1, [sp, #20]
 8008a86:	6800      	ldr	r0, [r0, #0]
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	a902      	add	r1, sp, #8
 8008a8c:	f001 fa94 	bl	8009fb8 <_svfiprintf_r>
 8008a90:	9b02      	ldr	r3, [sp, #8]
 8008a92:	2200      	movs	r2, #0
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	b01c      	add	sp, #112	; 0x70
 8008a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a9c:	b003      	add	sp, #12
 8008a9e:	4770      	bx	lr
 8008aa0:	2000000c 	.word	0x2000000c
 8008aa4:	ffff0208 	.word	0xffff0208

08008aa8 <strcpy>:
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aae:	f803 2b01 	strb.w	r2, [r3], #1
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	d1f9      	bne.n	8008aaa <strcpy+0x2>
 8008ab6:	4770      	bx	lr

08008ab8 <quorem>:
 8008ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	6903      	ldr	r3, [r0, #16]
 8008abe:	690c      	ldr	r4, [r1, #16]
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	4607      	mov	r7, r0
 8008ac4:	f2c0 8081 	blt.w	8008bca <quorem+0x112>
 8008ac8:	3c01      	subs	r4, #1
 8008aca:	f101 0814 	add.w	r8, r1, #20
 8008ace:	f100 0514 	add.w	r5, r0, #20
 8008ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008adc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ae8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008aec:	fbb2 f6f3 	udiv	r6, r2, r3
 8008af0:	d331      	bcc.n	8008b56 <quorem+0x9e>
 8008af2:	f04f 0e00 	mov.w	lr, #0
 8008af6:	4640      	mov	r0, r8
 8008af8:	46ac      	mov	ip, r5
 8008afa:	46f2      	mov	sl, lr
 8008afc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b00:	b293      	uxth	r3, r2
 8008b02:	fb06 e303 	mla	r3, r6, r3, lr
 8008b06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	ebaa 0303 	sub.w	r3, sl, r3
 8008b10:	f8dc a000 	ldr.w	sl, [ip]
 8008b14:	0c12      	lsrs	r2, r2, #16
 8008b16:	fa13 f38a 	uxtah	r3, r3, sl
 8008b1a:	fb06 e202 	mla	r2, r6, r2, lr
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	9b00      	ldr	r3, [sp, #0]
 8008b22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b26:	b292      	uxth	r2, r2
 8008b28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b30:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b34:	4581      	cmp	r9, r0
 8008b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b3a:	f84c 3b04 	str.w	r3, [ip], #4
 8008b3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b42:	d2db      	bcs.n	8008afc <quorem+0x44>
 8008b44:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b48:	b92b      	cbnz	r3, 8008b56 <quorem+0x9e>
 8008b4a:	9b01      	ldr	r3, [sp, #4]
 8008b4c:	3b04      	subs	r3, #4
 8008b4e:	429d      	cmp	r5, r3
 8008b50:	461a      	mov	r2, r3
 8008b52:	d32e      	bcc.n	8008bb2 <quorem+0xfa>
 8008b54:	613c      	str	r4, [r7, #16]
 8008b56:	4638      	mov	r0, r7
 8008b58:	f001 f8ba 	bl	8009cd0 <__mcmp>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	db24      	blt.n	8008baa <quorem+0xf2>
 8008b60:	3601      	adds	r6, #1
 8008b62:	4628      	mov	r0, r5
 8008b64:	f04f 0c00 	mov.w	ip, #0
 8008b68:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b6c:	f8d0 e000 	ldr.w	lr, [r0]
 8008b70:	b293      	uxth	r3, r2
 8008b72:	ebac 0303 	sub.w	r3, ip, r3
 8008b76:	0c12      	lsrs	r2, r2, #16
 8008b78:	fa13 f38e 	uxtah	r3, r3, lr
 8008b7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b8a:	45c1      	cmp	r9, r8
 8008b8c:	f840 3b04 	str.w	r3, [r0], #4
 8008b90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b94:	d2e8      	bcs.n	8008b68 <quorem+0xb0>
 8008b96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b9e:	b922      	cbnz	r2, 8008baa <quorem+0xf2>
 8008ba0:	3b04      	subs	r3, #4
 8008ba2:	429d      	cmp	r5, r3
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	d30a      	bcc.n	8008bbe <quorem+0x106>
 8008ba8:	613c      	str	r4, [r7, #16]
 8008baa:	4630      	mov	r0, r6
 8008bac:	b003      	add	sp, #12
 8008bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb2:	6812      	ldr	r2, [r2, #0]
 8008bb4:	3b04      	subs	r3, #4
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	d1cc      	bne.n	8008b54 <quorem+0x9c>
 8008bba:	3c01      	subs	r4, #1
 8008bbc:	e7c7      	b.n	8008b4e <quorem+0x96>
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	3b04      	subs	r3, #4
 8008bc2:	2a00      	cmp	r2, #0
 8008bc4:	d1f0      	bne.n	8008ba8 <quorem+0xf0>
 8008bc6:	3c01      	subs	r4, #1
 8008bc8:	e7eb      	b.n	8008ba2 <quorem+0xea>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e7ee      	b.n	8008bac <quorem+0xf4>
	...

08008bd0 <_dtoa_r>:
 8008bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	ed2d 8b04 	vpush	{d8-d9}
 8008bd8:	ec57 6b10 	vmov	r6, r7, d0
 8008bdc:	b093      	sub	sp, #76	; 0x4c
 8008bde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008be0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008be4:	9106      	str	r1, [sp, #24]
 8008be6:	ee10 aa10 	vmov	sl, s0
 8008bea:	4604      	mov	r4, r0
 8008bec:	9209      	str	r2, [sp, #36]	; 0x24
 8008bee:	930c      	str	r3, [sp, #48]	; 0x30
 8008bf0:	46bb      	mov	fp, r7
 8008bf2:	b975      	cbnz	r5, 8008c12 <_dtoa_r+0x42>
 8008bf4:	2010      	movs	r0, #16
 8008bf6:	f7ff f9bf 	bl	8007f78 <malloc>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	6260      	str	r0, [r4, #36]	; 0x24
 8008bfe:	b920      	cbnz	r0, 8008c0a <_dtoa_r+0x3a>
 8008c00:	4ba7      	ldr	r3, [pc, #668]	; (8008ea0 <_dtoa_r+0x2d0>)
 8008c02:	21ea      	movs	r1, #234	; 0xea
 8008c04:	48a7      	ldr	r0, [pc, #668]	; (8008ea4 <_dtoa_r+0x2d4>)
 8008c06:	f001 fad7 	bl	800a1b8 <__assert_func>
 8008c0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c0e:	6005      	str	r5, [r0, #0]
 8008c10:	60c5      	str	r5, [r0, #12]
 8008c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c14:	6819      	ldr	r1, [r3, #0]
 8008c16:	b151      	cbz	r1, 8008c2e <_dtoa_r+0x5e>
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	604a      	str	r2, [r1, #4]
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	4093      	lsls	r3, r2
 8008c20:	608b      	str	r3, [r1, #8]
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 fe12 	bl	800984c <_Bfree>
 8008c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	1e3b      	subs	r3, r7, #0
 8008c30:	bfaa      	itet	ge
 8008c32:	2300      	movge	r3, #0
 8008c34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c38:	f8c8 3000 	strge.w	r3, [r8]
 8008c3c:	4b9a      	ldr	r3, [pc, #616]	; (8008ea8 <_dtoa_r+0x2d8>)
 8008c3e:	bfbc      	itt	lt
 8008c40:	2201      	movlt	r2, #1
 8008c42:	f8c8 2000 	strlt.w	r2, [r8]
 8008c46:	ea33 030b 	bics.w	r3, r3, fp
 8008c4a:	d11b      	bne.n	8008c84 <_dtoa_r+0xb4>
 8008c4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c58:	4333      	orrs	r3, r6
 8008c5a:	f000 8592 	beq.w	8009782 <_dtoa_r+0xbb2>
 8008c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c60:	b963      	cbnz	r3, 8008c7c <_dtoa_r+0xac>
 8008c62:	4b92      	ldr	r3, [pc, #584]	; (8008eac <_dtoa_r+0x2dc>)
 8008c64:	e022      	b.n	8008cac <_dtoa_r+0xdc>
 8008c66:	4b92      	ldr	r3, [pc, #584]	; (8008eb0 <_dtoa_r+0x2e0>)
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	9801      	ldr	r0, [sp, #4]
 8008c72:	b013      	add	sp, #76	; 0x4c
 8008c74:	ecbd 8b04 	vpop	{d8-d9}
 8008c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7c:	4b8b      	ldr	r3, [pc, #556]	; (8008eac <_dtoa_r+0x2dc>)
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	3303      	adds	r3, #3
 8008c82:	e7f3      	b.n	8008c6c <_dtoa_r+0x9c>
 8008c84:	2200      	movs	r2, #0
 8008c86:	2300      	movs	r3, #0
 8008c88:	4650      	mov	r0, sl
 8008c8a:	4659      	mov	r1, fp
 8008c8c:	f7f7 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c90:	ec4b ab19 	vmov	d9, sl, fp
 8008c94:	4680      	mov	r8, r0
 8008c96:	b158      	cbz	r0, 8008cb0 <_dtoa_r+0xe0>
 8008c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 856b 	beq.w	800977c <_dtoa_r+0xbac>
 8008ca6:	4883      	ldr	r0, [pc, #524]	; (8008eb4 <_dtoa_r+0x2e4>)
 8008ca8:	6018      	str	r0, [r3, #0]
 8008caa:	1e43      	subs	r3, r0, #1
 8008cac:	9301      	str	r3, [sp, #4]
 8008cae:	e7df      	b.n	8008c70 <_dtoa_r+0xa0>
 8008cb0:	ec4b ab10 	vmov	d0, sl, fp
 8008cb4:	aa10      	add	r2, sp, #64	; 0x40
 8008cb6:	a911      	add	r1, sp, #68	; 0x44
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f001 f8af 	bl	8009e1c <__d2b>
 8008cbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008cc2:	ee08 0a10 	vmov	s16, r0
 8008cc6:	2d00      	cmp	r5, #0
 8008cc8:	f000 8084 	beq.w	8008dd4 <_dtoa_r+0x204>
 8008ccc:	ee19 3a90 	vmov	r3, s19
 8008cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cd8:	4656      	mov	r6, sl
 8008cda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ce2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ce6:	4b74      	ldr	r3, [pc, #464]	; (8008eb8 <_dtoa_r+0x2e8>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	4630      	mov	r0, r6
 8008cec:	4639      	mov	r1, r7
 8008cee:	f7f7 facb 	bl	8000288 <__aeabi_dsub>
 8008cf2:	a365      	add	r3, pc, #404	; (adr r3, 8008e88 <_dtoa_r+0x2b8>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f7f7 fc7e 	bl	80005f8 <__aeabi_dmul>
 8008cfc:	a364      	add	r3, pc, #400	; (adr r3, 8008e90 <_dtoa_r+0x2c0>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	f7f7 fac3 	bl	800028c <__adddf3>
 8008d06:	4606      	mov	r6, r0
 8008d08:	4628      	mov	r0, r5
 8008d0a:	460f      	mov	r7, r1
 8008d0c:	f7f7 fc0a 	bl	8000524 <__aeabi_i2d>
 8008d10:	a361      	add	r3, pc, #388	; (adr r3, 8008e98 <_dtoa_r+0x2c8>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fc6f 	bl	80005f8 <__aeabi_dmul>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4630      	mov	r0, r6
 8008d20:	4639      	mov	r1, r7
 8008d22:	f7f7 fab3 	bl	800028c <__adddf3>
 8008d26:	4606      	mov	r6, r0
 8008d28:	460f      	mov	r7, r1
 8008d2a:	f7f7 ff15 	bl	8000b58 <__aeabi_d2iz>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	9000      	str	r0, [sp, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	4630      	mov	r0, r6
 8008d36:	4639      	mov	r1, r7
 8008d38:	f7f7 fed0 	bl	8000adc <__aeabi_dcmplt>
 8008d3c:	b150      	cbz	r0, 8008d54 <_dtoa_r+0x184>
 8008d3e:	9800      	ldr	r0, [sp, #0]
 8008d40:	f7f7 fbf0 	bl	8000524 <__aeabi_i2d>
 8008d44:	4632      	mov	r2, r6
 8008d46:	463b      	mov	r3, r7
 8008d48:	f7f7 febe 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d4c:	b910      	cbnz	r0, 8008d54 <_dtoa_r+0x184>
 8008d4e:	9b00      	ldr	r3, [sp, #0]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	9b00      	ldr	r3, [sp, #0]
 8008d56:	2b16      	cmp	r3, #22
 8008d58:	d85a      	bhi.n	8008e10 <_dtoa_r+0x240>
 8008d5a:	9a00      	ldr	r2, [sp, #0]
 8008d5c:	4b57      	ldr	r3, [pc, #348]	; (8008ebc <_dtoa_r+0x2ec>)
 8008d5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d66:	ec51 0b19 	vmov	r0, r1, d9
 8008d6a:	f7f7 feb7 	bl	8000adc <__aeabi_dcmplt>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d050      	beq.n	8008e14 <_dtoa_r+0x244>
 8008d72:	9b00      	ldr	r3, [sp, #0]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	2300      	movs	r3, #0
 8008d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d7e:	1b5d      	subs	r5, r3, r5
 8008d80:	1e6b      	subs	r3, r5, #1
 8008d82:	9305      	str	r3, [sp, #20]
 8008d84:	bf45      	ittet	mi
 8008d86:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d8a:	9304      	strmi	r3, [sp, #16]
 8008d8c:	2300      	movpl	r3, #0
 8008d8e:	2300      	movmi	r3, #0
 8008d90:	bf4c      	ite	mi
 8008d92:	9305      	strmi	r3, [sp, #20]
 8008d94:	9304      	strpl	r3, [sp, #16]
 8008d96:	9b00      	ldr	r3, [sp, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	db3d      	blt.n	8008e18 <_dtoa_r+0x248>
 8008d9c:	9b05      	ldr	r3, [sp, #20]
 8008d9e:	9a00      	ldr	r2, [sp, #0]
 8008da0:	920a      	str	r2, [sp, #40]	; 0x28
 8008da2:	4413      	add	r3, r2
 8008da4:	9305      	str	r3, [sp, #20]
 8008da6:	2300      	movs	r3, #0
 8008da8:	9307      	str	r3, [sp, #28]
 8008daa:	9b06      	ldr	r3, [sp, #24]
 8008dac:	2b09      	cmp	r3, #9
 8008dae:	f200 8089 	bhi.w	8008ec4 <_dtoa_r+0x2f4>
 8008db2:	2b05      	cmp	r3, #5
 8008db4:	bfc4      	itt	gt
 8008db6:	3b04      	subgt	r3, #4
 8008db8:	9306      	strgt	r3, [sp, #24]
 8008dba:	9b06      	ldr	r3, [sp, #24]
 8008dbc:	f1a3 0302 	sub.w	r3, r3, #2
 8008dc0:	bfcc      	ite	gt
 8008dc2:	2500      	movgt	r5, #0
 8008dc4:	2501      	movle	r5, #1
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	f200 8087 	bhi.w	8008eda <_dtoa_r+0x30a>
 8008dcc:	e8df f003 	tbb	[pc, r3]
 8008dd0:	59383a2d 	.word	0x59383a2d
 8008dd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008dd8:	441d      	add	r5, r3
 8008dda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	bfc1      	itttt	gt
 8008de2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008de6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008dea:	fa0b f303 	lslgt.w	r3, fp, r3
 8008dee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008df2:	bfda      	itte	le
 8008df4:	f1c3 0320 	rsble	r3, r3, #32
 8008df8:	fa06 f003 	lslle.w	r0, r6, r3
 8008dfc:	4318      	orrgt	r0, r3
 8008dfe:	f7f7 fb81 	bl	8000504 <__aeabi_ui2d>
 8008e02:	2301      	movs	r3, #1
 8008e04:	4606      	mov	r6, r0
 8008e06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e0a:	3d01      	subs	r5, #1
 8008e0c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e0e:	e76a      	b.n	8008ce6 <_dtoa_r+0x116>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e7b2      	b.n	8008d7a <_dtoa_r+0x1aa>
 8008e14:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e16:	e7b1      	b.n	8008d7c <_dtoa_r+0x1ac>
 8008e18:	9b04      	ldr	r3, [sp, #16]
 8008e1a:	9a00      	ldr	r2, [sp, #0]
 8008e1c:	1a9b      	subs	r3, r3, r2
 8008e1e:	9304      	str	r3, [sp, #16]
 8008e20:	4253      	negs	r3, r2
 8008e22:	9307      	str	r3, [sp, #28]
 8008e24:	2300      	movs	r3, #0
 8008e26:	930a      	str	r3, [sp, #40]	; 0x28
 8008e28:	e7bf      	b.n	8008daa <_dtoa_r+0x1da>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9308      	str	r3, [sp, #32]
 8008e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	dc55      	bgt.n	8008ee0 <_dtoa_r+0x310>
 8008e34:	2301      	movs	r3, #1
 8008e36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e3e:	e00c      	b.n	8008e5a <_dtoa_r+0x28a>
 8008e40:	2301      	movs	r3, #1
 8008e42:	e7f3      	b.n	8008e2c <_dtoa_r+0x25c>
 8008e44:	2300      	movs	r3, #0
 8008e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e48:	9308      	str	r3, [sp, #32]
 8008e4a:	9b00      	ldr	r3, [sp, #0]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	9302      	str	r3, [sp, #8]
 8008e50:	3301      	adds	r3, #1
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	9303      	str	r3, [sp, #12]
 8008e56:	bfb8      	it	lt
 8008e58:	2301      	movlt	r3, #1
 8008e5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	6042      	str	r2, [r0, #4]
 8008e60:	2204      	movs	r2, #4
 8008e62:	f102 0614 	add.w	r6, r2, #20
 8008e66:	429e      	cmp	r6, r3
 8008e68:	6841      	ldr	r1, [r0, #4]
 8008e6a:	d93d      	bls.n	8008ee8 <_dtoa_r+0x318>
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 fcad 	bl	80097cc <_Balloc>
 8008e72:	9001      	str	r0, [sp, #4]
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d13b      	bne.n	8008ef0 <_dtoa_r+0x320>
 8008e78:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <_dtoa_r+0x2f0>)
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e80:	e6c0      	b.n	8008c04 <_dtoa_r+0x34>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e7df      	b.n	8008e46 <_dtoa_r+0x276>
 8008e86:	bf00      	nop
 8008e88:	636f4361 	.word	0x636f4361
 8008e8c:	3fd287a7 	.word	0x3fd287a7
 8008e90:	8b60c8b3 	.word	0x8b60c8b3
 8008e94:	3fc68a28 	.word	0x3fc68a28
 8008e98:	509f79fb 	.word	0x509f79fb
 8008e9c:	3fd34413 	.word	0x3fd34413
 8008ea0:	0800ae21 	.word	0x0800ae21
 8008ea4:	0800ae38 	.word	0x0800ae38
 8008ea8:	7ff00000 	.word	0x7ff00000
 8008eac:	0800ae1d 	.word	0x0800ae1d
 8008eb0:	0800ae14 	.word	0x0800ae14
 8008eb4:	0800adf1 	.word	0x0800adf1
 8008eb8:	3ff80000 	.word	0x3ff80000
 8008ebc:	0800af28 	.word	0x0800af28
 8008ec0:	0800ae93 	.word	0x0800ae93
 8008ec4:	2501      	movs	r5, #1
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9306      	str	r3, [sp, #24]
 8008eca:	9508      	str	r5, [sp, #32]
 8008ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2312      	movs	r3, #18
 8008ed8:	e7b0      	b.n	8008e3c <_dtoa_r+0x26c>
 8008eda:	2301      	movs	r3, #1
 8008edc:	9308      	str	r3, [sp, #32]
 8008ede:	e7f5      	b.n	8008ecc <_dtoa_r+0x2fc>
 8008ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ee6:	e7b8      	b.n	8008e5a <_dtoa_r+0x28a>
 8008ee8:	3101      	adds	r1, #1
 8008eea:	6041      	str	r1, [r0, #4]
 8008eec:	0052      	lsls	r2, r2, #1
 8008eee:	e7b8      	b.n	8008e62 <_dtoa_r+0x292>
 8008ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ef2:	9a01      	ldr	r2, [sp, #4]
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	9b03      	ldr	r3, [sp, #12]
 8008ef8:	2b0e      	cmp	r3, #14
 8008efa:	f200 809d 	bhi.w	8009038 <_dtoa_r+0x468>
 8008efe:	2d00      	cmp	r5, #0
 8008f00:	f000 809a 	beq.w	8009038 <_dtoa_r+0x468>
 8008f04:	9b00      	ldr	r3, [sp, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd32      	ble.n	8008f70 <_dtoa_r+0x3a0>
 8008f0a:	4ab7      	ldr	r2, [pc, #732]	; (80091e8 <_dtoa_r+0x618>)
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f18:	9b00      	ldr	r3, [sp, #0]
 8008f1a:	05d8      	lsls	r0, r3, #23
 8008f1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f20:	d516      	bpl.n	8008f50 <_dtoa_r+0x380>
 8008f22:	4bb2      	ldr	r3, [pc, #712]	; (80091ec <_dtoa_r+0x61c>)
 8008f24:	ec51 0b19 	vmov	r0, r1, d9
 8008f28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f2c:	f7f7 fc8e 	bl	800084c <__aeabi_ddiv>
 8008f30:	f007 070f 	and.w	r7, r7, #15
 8008f34:	4682      	mov	sl, r0
 8008f36:	468b      	mov	fp, r1
 8008f38:	2503      	movs	r5, #3
 8008f3a:	4eac      	ldr	r6, [pc, #688]	; (80091ec <_dtoa_r+0x61c>)
 8008f3c:	b957      	cbnz	r7, 8008f54 <_dtoa_r+0x384>
 8008f3e:	4642      	mov	r2, r8
 8008f40:	464b      	mov	r3, r9
 8008f42:	4650      	mov	r0, sl
 8008f44:	4659      	mov	r1, fp
 8008f46:	f7f7 fc81 	bl	800084c <__aeabi_ddiv>
 8008f4a:	4682      	mov	sl, r0
 8008f4c:	468b      	mov	fp, r1
 8008f4e:	e028      	b.n	8008fa2 <_dtoa_r+0x3d2>
 8008f50:	2502      	movs	r5, #2
 8008f52:	e7f2      	b.n	8008f3a <_dtoa_r+0x36a>
 8008f54:	07f9      	lsls	r1, r7, #31
 8008f56:	d508      	bpl.n	8008f6a <_dtoa_r+0x39a>
 8008f58:	4640      	mov	r0, r8
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f60:	f7f7 fb4a 	bl	80005f8 <__aeabi_dmul>
 8008f64:	3501      	adds	r5, #1
 8008f66:	4680      	mov	r8, r0
 8008f68:	4689      	mov	r9, r1
 8008f6a:	107f      	asrs	r7, r7, #1
 8008f6c:	3608      	adds	r6, #8
 8008f6e:	e7e5      	b.n	8008f3c <_dtoa_r+0x36c>
 8008f70:	f000 809b 	beq.w	80090aa <_dtoa_r+0x4da>
 8008f74:	9b00      	ldr	r3, [sp, #0]
 8008f76:	4f9d      	ldr	r7, [pc, #628]	; (80091ec <_dtoa_r+0x61c>)
 8008f78:	425e      	negs	r6, r3
 8008f7a:	4b9b      	ldr	r3, [pc, #620]	; (80091e8 <_dtoa_r+0x618>)
 8008f7c:	f006 020f 	and.w	r2, r6, #15
 8008f80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	ec51 0b19 	vmov	r0, r1, d9
 8008f8c:	f7f7 fb34 	bl	80005f8 <__aeabi_dmul>
 8008f90:	1136      	asrs	r6, r6, #4
 8008f92:	4682      	mov	sl, r0
 8008f94:	468b      	mov	fp, r1
 8008f96:	2300      	movs	r3, #0
 8008f98:	2502      	movs	r5, #2
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	d17a      	bne.n	8009094 <_dtoa_r+0x4c4>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1d3      	bne.n	8008f4a <_dtoa_r+0x37a>
 8008fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 8082 	beq.w	80090ae <_dtoa_r+0x4de>
 8008faa:	4b91      	ldr	r3, [pc, #580]	; (80091f0 <_dtoa_r+0x620>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	4650      	mov	r0, sl
 8008fb0:	4659      	mov	r1, fp
 8008fb2:	f7f7 fd93 	bl	8000adc <__aeabi_dcmplt>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d079      	beq.n	80090ae <_dtoa_r+0x4de>
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d076      	beq.n	80090ae <_dtoa_r+0x4de>
 8008fc0:	9b02      	ldr	r3, [sp, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	dd36      	ble.n	8009034 <_dtoa_r+0x464>
 8008fc6:	9b00      	ldr	r3, [sp, #0]
 8008fc8:	4650      	mov	r0, sl
 8008fca:	4659      	mov	r1, fp
 8008fcc:	1e5f      	subs	r7, r3, #1
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4b88      	ldr	r3, [pc, #544]	; (80091f4 <_dtoa_r+0x624>)
 8008fd2:	f7f7 fb11 	bl	80005f8 <__aeabi_dmul>
 8008fd6:	9e02      	ldr	r6, [sp, #8]
 8008fd8:	4682      	mov	sl, r0
 8008fda:	468b      	mov	fp, r1
 8008fdc:	3501      	adds	r5, #1
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f7f7 faa0 	bl	8000524 <__aeabi_i2d>
 8008fe4:	4652      	mov	r2, sl
 8008fe6:	465b      	mov	r3, fp
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	4b82      	ldr	r3, [pc, #520]	; (80091f8 <_dtoa_r+0x628>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f7f7 f94c 	bl	800028c <__adddf3>
 8008ff4:	46d0      	mov	r8, sl
 8008ff6:	46d9      	mov	r9, fp
 8008ff8:	4682      	mov	sl, r0
 8008ffa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008ffe:	2e00      	cmp	r6, #0
 8009000:	d158      	bne.n	80090b4 <_dtoa_r+0x4e4>
 8009002:	4b7e      	ldr	r3, [pc, #504]	; (80091fc <_dtoa_r+0x62c>)
 8009004:	2200      	movs	r2, #0
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 f93d 	bl	8000288 <__aeabi_dsub>
 800900e:	4652      	mov	r2, sl
 8009010:	465b      	mov	r3, fp
 8009012:	4680      	mov	r8, r0
 8009014:	4689      	mov	r9, r1
 8009016:	f7f7 fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 800901a:	2800      	cmp	r0, #0
 800901c:	f040 8295 	bne.w	800954a <_dtoa_r+0x97a>
 8009020:	4652      	mov	r2, sl
 8009022:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009026:	4640      	mov	r0, r8
 8009028:	4649      	mov	r1, r9
 800902a:	f7f7 fd57 	bl	8000adc <__aeabi_dcmplt>
 800902e:	2800      	cmp	r0, #0
 8009030:	f040 8289 	bne.w	8009546 <_dtoa_r+0x976>
 8009034:	ec5b ab19 	vmov	sl, fp, d9
 8009038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800903a:	2b00      	cmp	r3, #0
 800903c:	f2c0 8148 	blt.w	80092d0 <_dtoa_r+0x700>
 8009040:	9a00      	ldr	r2, [sp, #0]
 8009042:	2a0e      	cmp	r2, #14
 8009044:	f300 8144 	bgt.w	80092d0 <_dtoa_r+0x700>
 8009048:	4b67      	ldr	r3, [pc, #412]	; (80091e8 <_dtoa_r+0x618>)
 800904a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800904e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	f280 80d5 	bge.w	8009204 <_dtoa_r+0x634>
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	f300 80d1 	bgt.w	8009204 <_dtoa_r+0x634>
 8009062:	f040 826f 	bne.w	8009544 <_dtoa_r+0x974>
 8009066:	4b65      	ldr	r3, [pc, #404]	; (80091fc <_dtoa_r+0x62c>)
 8009068:	2200      	movs	r2, #0
 800906a:	4640      	mov	r0, r8
 800906c:	4649      	mov	r1, r9
 800906e:	f7f7 fac3 	bl	80005f8 <__aeabi_dmul>
 8009072:	4652      	mov	r2, sl
 8009074:	465b      	mov	r3, fp
 8009076:	f7f7 fd45 	bl	8000b04 <__aeabi_dcmpge>
 800907a:	9e03      	ldr	r6, [sp, #12]
 800907c:	4637      	mov	r7, r6
 800907e:	2800      	cmp	r0, #0
 8009080:	f040 8245 	bne.w	800950e <_dtoa_r+0x93e>
 8009084:	9d01      	ldr	r5, [sp, #4]
 8009086:	2331      	movs	r3, #49	; 0x31
 8009088:	f805 3b01 	strb.w	r3, [r5], #1
 800908c:	9b00      	ldr	r3, [sp, #0]
 800908e:	3301      	adds	r3, #1
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	e240      	b.n	8009516 <_dtoa_r+0x946>
 8009094:	07f2      	lsls	r2, r6, #31
 8009096:	d505      	bpl.n	80090a4 <_dtoa_r+0x4d4>
 8009098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800909c:	f7f7 faac 	bl	80005f8 <__aeabi_dmul>
 80090a0:	3501      	adds	r5, #1
 80090a2:	2301      	movs	r3, #1
 80090a4:	1076      	asrs	r6, r6, #1
 80090a6:	3708      	adds	r7, #8
 80090a8:	e777      	b.n	8008f9a <_dtoa_r+0x3ca>
 80090aa:	2502      	movs	r5, #2
 80090ac:	e779      	b.n	8008fa2 <_dtoa_r+0x3d2>
 80090ae:	9f00      	ldr	r7, [sp, #0]
 80090b0:	9e03      	ldr	r6, [sp, #12]
 80090b2:	e794      	b.n	8008fde <_dtoa_r+0x40e>
 80090b4:	9901      	ldr	r1, [sp, #4]
 80090b6:	4b4c      	ldr	r3, [pc, #304]	; (80091e8 <_dtoa_r+0x618>)
 80090b8:	4431      	add	r1, r6
 80090ba:	910d      	str	r1, [sp, #52]	; 0x34
 80090bc:	9908      	ldr	r1, [sp, #32]
 80090be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090c6:	2900      	cmp	r1, #0
 80090c8:	d043      	beq.n	8009152 <_dtoa_r+0x582>
 80090ca:	494d      	ldr	r1, [pc, #308]	; (8009200 <_dtoa_r+0x630>)
 80090cc:	2000      	movs	r0, #0
 80090ce:	f7f7 fbbd 	bl	800084c <__aeabi_ddiv>
 80090d2:	4652      	mov	r2, sl
 80090d4:	465b      	mov	r3, fp
 80090d6:	f7f7 f8d7 	bl	8000288 <__aeabi_dsub>
 80090da:	9d01      	ldr	r5, [sp, #4]
 80090dc:	4682      	mov	sl, r0
 80090de:	468b      	mov	fp, r1
 80090e0:	4649      	mov	r1, r9
 80090e2:	4640      	mov	r0, r8
 80090e4:	f7f7 fd38 	bl	8000b58 <__aeabi_d2iz>
 80090e8:	4606      	mov	r6, r0
 80090ea:	f7f7 fa1b 	bl	8000524 <__aeabi_i2d>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4640      	mov	r0, r8
 80090f4:	4649      	mov	r1, r9
 80090f6:	f7f7 f8c7 	bl	8000288 <__aeabi_dsub>
 80090fa:	3630      	adds	r6, #48	; 0x30
 80090fc:	f805 6b01 	strb.w	r6, [r5], #1
 8009100:	4652      	mov	r2, sl
 8009102:	465b      	mov	r3, fp
 8009104:	4680      	mov	r8, r0
 8009106:	4689      	mov	r9, r1
 8009108:	f7f7 fce8 	bl	8000adc <__aeabi_dcmplt>
 800910c:	2800      	cmp	r0, #0
 800910e:	d163      	bne.n	80091d8 <_dtoa_r+0x608>
 8009110:	4642      	mov	r2, r8
 8009112:	464b      	mov	r3, r9
 8009114:	4936      	ldr	r1, [pc, #216]	; (80091f0 <_dtoa_r+0x620>)
 8009116:	2000      	movs	r0, #0
 8009118:	f7f7 f8b6 	bl	8000288 <__aeabi_dsub>
 800911c:	4652      	mov	r2, sl
 800911e:	465b      	mov	r3, fp
 8009120:	f7f7 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8009124:	2800      	cmp	r0, #0
 8009126:	f040 80b5 	bne.w	8009294 <_dtoa_r+0x6c4>
 800912a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800912c:	429d      	cmp	r5, r3
 800912e:	d081      	beq.n	8009034 <_dtoa_r+0x464>
 8009130:	4b30      	ldr	r3, [pc, #192]	; (80091f4 <_dtoa_r+0x624>)
 8009132:	2200      	movs	r2, #0
 8009134:	4650      	mov	r0, sl
 8009136:	4659      	mov	r1, fp
 8009138:	f7f7 fa5e 	bl	80005f8 <__aeabi_dmul>
 800913c:	4b2d      	ldr	r3, [pc, #180]	; (80091f4 <_dtoa_r+0x624>)
 800913e:	4682      	mov	sl, r0
 8009140:	468b      	mov	fp, r1
 8009142:	4640      	mov	r0, r8
 8009144:	4649      	mov	r1, r9
 8009146:	2200      	movs	r2, #0
 8009148:	f7f7 fa56 	bl	80005f8 <__aeabi_dmul>
 800914c:	4680      	mov	r8, r0
 800914e:	4689      	mov	r9, r1
 8009150:	e7c6      	b.n	80090e0 <_dtoa_r+0x510>
 8009152:	4650      	mov	r0, sl
 8009154:	4659      	mov	r1, fp
 8009156:	f7f7 fa4f 	bl	80005f8 <__aeabi_dmul>
 800915a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800915c:	9d01      	ldr	r5, [sp, #4]
 800915e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009160:	4682      	mov	sl, r0
 8009162:	468b      	mov	fp, r1
 8009164:	4649      	mov	r1, r9
 8009166:	4640      	mov	r0, r8
 8009168:	f7f7 fcf6 	bl	8000b58 <__aeabi_d2iz>
 800916c:	4606      	mov	r6, r0
 800916e:	f7f7 f9d9 	bl	8000524 <__aeabi_i2d>
 8009172:	3630      	adds	r6, #48	; 0x30
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4640      	mov	r0, r8
 800917a:	4649      	mov	r1, r9
 800917c:	f7f7 f884 	bl	8000288 <__aeabi_dsub>
 8009180:	f805 6b01 	strb.w	r6, [r5], #1
 8009184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009186:	429d      	cmp	r5, r3
 8009188:	4680      	mov	r8, r0
 800918a:	4689      	mov	r9, r1
 800918c:	f04f 0200 	mov.w	r2, #0
 8009190:	d124      	bne.n	80091dc <_dtoa_r+0x60c>
 8009192:	4b1b      	ldr	r3, [pc, #108]	; (8009200 <_dtoa_r+0x630>)
 8009194:	4650      	mov	r0, sl
 8009196:	4659      	mov	r1, fp
 8009198:	f7f7 f878 	bl	800028c <__adddf3>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4640      	mov	r0, r8
 80091a2:	4649      	mov	r1, r9
 80091a4:	f7f7 fcb8 	bl	8000b18 <__aeabi_dcmpgt>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d173      	bne.n	8009294 <_dtoa_r+0x6c4>
 80091ac:	4652      	mov	r2, sl
 80091ae:	465b      	mov	r3, fp
 80091b0:	4913      	ldr	r1, [pc, #76]	; (8009200 <_dtoa_r+0x630>)
 80091b2:	2000      	movs	r0, #0
 80091b4:	f7f7 f868 	bl	8000288 <__aeabi_dsub>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4640      	mov	r0, r8
 80091be:	4649      	mov	r1, r9
 80091c0:	f7f7 fc8c 	bl	8000adc <__aeabi_dcmplt>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f43f af35 	beq.w	8009034 <_dtoa_r+0x464>
 80091ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091cc:	1e6b      	subs	r3, r5, #1
 80091ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80091d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091d4:	2b30      	cmp	r3, #48	; 0x30
 80091d6:	d0f8      	beq.n	80091ca <_dtoa_r+0x5fa>
 80091d8:	9700      	str	r7, [sp, #0]
 80091da:	e049      	b.n	8009270 <_dtoa_r+0x6a0>
 80091dc:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <_dtoa_r+0x624>)
 80091de:	f7f7 fa0b 	bl	80005f8 <__aeabi_dmul>
 80091e2:	4680      	mov	r8, r0
 80091e4:	4689      	mov	r9, r1
 80091e6:	e7bd      	b.n	8009164 <_dtoa_r+0x594>
 80091e8:	0800af28 	.word	0x0800af28
 80091ec:	0800af00 	.word	0x0800af00
 80091f0:	3ff00000 	.word	0x3ff00000
 80091f4:	40240000 	.word	0x40240000
 80091f8:	401c0000 	.word	0x401c0000
 80091fc:	40140000 	.word	0x40140000
 8009200:	3fe00000 	.word	0x3fe00000
 8009204:	9d01      	ldr	r5, [sp, #4]
 8009206:	4656      	mov	r6, sl
 8009208:	465f      	mov	r7, fp
 800920a:	4642      	mov	r2, r8
 800920c:	464b      	mov	r3, r9
 800920e:	4630      	mov	r0, r6
 8009210:	4639      	mov	r1, r7
 8009212:	f7f7 fb1b 	bl	800084c <__aeabi_ddiv>
 8009216:	f7f7 fc9f 	bl	8000b58 <__aeabi_d2iz>
 800921a:	4682      	mov	sl, r0
 800921c:	f7f7 f982 	bl	8000524 <__aeabi_i2d>
 8009220:	4642      	mov	r2, r8
 8009222:	464b      	mov	r3, r9
 8009224:	f7f7 f9e8 	bl	80005f8 <__aeabi_dmul>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4630      	mov	r0, r6
 800922e:	4639      	mov	r1, r7
 8009230:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009234:	f7f7 f828 	bl	8000288 <__aeabi_dsub>
 8009238:	f805 6b01 	strb.w	r6, [r5], #1
 800923c:	9e01      	ldr	r6, [sp, #4]
 800923e:	9f03      	ldr	r7, [sp, #12]
 8009240:	1bae      	subs	r6, r5, r6
 8009242:	42b7      	cmp	r7, r6
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	d135      	bne.n	80092b6 <_dtoa_r+0x6e6>
 800924a:	f7f7 f81f 	bl	800028c <__adddf3>
 800924e:	4642      	mov	r2, r8
 8009250:	464b      	mov	r3, r9
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	f7f7 fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 800925a:	b9d0      	cbnz	r0, 8009292 <_dtoa_r+0x6c2>
 800925c:	4642      	mov	r2, r8
 800925e:	464b      	mov	r3, r9
 8009260:	4630      	mov	r0, r6
 8009262:	4639      	mov	r1, r7
 8009264:	f7f7 fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8009268:	b110      	cbz	r0, 8009270 <_dtoa_r+0x6a0>
 800926a:	f01a 0f01 	tst.w	sl, #1
 800926e:	d110      	bne.n	8009292 <_dtoa_r+0x6c2>
 8009270:	4620      	mov	r0, r4
 8009272:	ee18 1a10 	vmov	r1, s16
 8009276:	f000 fae9 	bl	800984c <_Bfree>
 800927a:	2300      	movs	r3, #0
 800927c:	9800      	ldr	r0, [sp, #0]
 800927e:	702b      	strb	r3, [r5, #0]
 8009280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009282:	3001      	adds	r0, #1
 8009284:	6018      	str	r0, [r3, #0]
 8009286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009288:	2b00      	cmp	r3, #0
 800928a:	f43f acf1 	beq.w	8008c70 <_dtoa_r+0xa0>
 800928e:	601d      	str	r5, [r3, #0]
 8009290:	e4ee      	b.n	8008c70 <_dtoa_r+0xa0>
 8009292:	9f00      	ldr	r7, [sp, #0]
 8009294:	462b      	mov	r3, r5
 8009296:	461d      	mov	r5, r3
 8009298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800929c:	2a39      	cmp	r2, #57	; 0x39
 800929e:	d106      	bne.n	80092ae <_dtoa_r+0x6de>
 80092a0:	9a01      	ldr	r2, [sp, #4]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d1f7      	bne.n	8009296 <_dtoa_r+0x6c6>
 80092a6:	9901      	ldr	r1, [sp, #4]
 80092a8:	2230      	movs	r2, #48	; 0x30
 80092aa:	3701      	adds	r7, #1
 80092ac:	700a      	strb	r2, [r1, #0]
 80092ae:	781a      	ldrb	r2, [r3, #0]
 80092b0:	3201      	adds	r2, #1
 80092b2:	701a      	strb	r2, [r3, #0]
 80092b4:	e790      	b.n	80091d8 <_dtoa_r+0x608>
 80092b6:	4ba6      	ldr	r3, [pc, #664]	; (8009550 <_dtoa_r+0x980>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	f7f7 f99d 	bl	80005f8 <__aeabi_dmul>
 80092be:	2200      	movs	r2, #0
 80092c0:	2300      	movs	r3, #0
 80092c2:	4606      	mov	r6, r0
 80092c4:	460f      	mov	r7, r1
 80092c6:	f7f7 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d09d      	beq.n	800920a <_dtoa_r+0x63a>
 80092ce:	e7cf      	b.n	8009270 <_dtoa_r+0x6a0>
 80092d0:	9a08      	ldr	r2, [sp, #32]
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	f000 80d7 	beq.w	8009486 <_dtoa_r+0x8b6>
 80092d8:	9a06      	ldr	r2, [sp, #24]
 80092da:	2a01      	cmp	r2, #1
 80092dc:	f300 80ba 	bgt.w	8009454 <_dtoa_r+0x884>
 80092e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092e2:	2a00      	cmp	r2, #0
 80092e4:	f000 80b2 	beq.w	800944c <_dtoa_r+0x87c>
 80092e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092ec:	9e07      	ldr	r6, [sp, #28]
 80092ee:	9d04      	ldr	r5, [sp, #16]
 80092f0:	9a04      	ldr	r2, [sp, #16]
 80092f2:	441a      	add	r2, r3
 80092f4:	9204      	str	r2, [sp, #16]
 80092f6:	9a05      	ldr	r2, [sp, #20]
 80092f8:	2101      	movs	r1, #1
 80092fa:	441a      	add	r2, r3
 80092fc:	4620      	mov	r0, r4
 80092fe:	9205      	str	r2, [sp, #20]
 8009300:	f000 fb5c 	bl	80099bc <__i2b>
 8009304:	4607      	mov	r7, r0
 8009306:	2d00      	cmp	r5, #0
 8009308:	dd0c      	ble.n	8009324 <_dtoa_r+0x754>
 800930a:	9b05      	ldr	r3, [sp, #20]
 800930c:	2b00      	cmp	r3, #0
 800930e:	dd09      	ble.n	8009324 <_dtoa_r+0x754>
 8009310:	42ab      	cmp	r3, r5
 8009312:	9a04      	ldr	r2, [sp, #16]
 8009314:	bfa8      	it	ge
 8009316:	462b      	movge	r3, r5
 8009318:	1ad2      	subs	r2, r2, r3
 800931a:	9204      	str	r2, [sp, #16]
 800931c:	9a05      	ldr	r2, [sp, #20]
 800931e:	1aed      	subs	r5, r5, r3
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	9305      	str	r3, [sp, #20]
 8009324:	9b07      	ldr	r3, [sp, #28]
 8009326:	b31b      	cbz	r3, 8009370 <_dtoa_r+0x7a0>
 8009328:	9b08      	ldr	r3, [sp, #32]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 80af 	beq.w	800948e <_dtoa_r+0x8be>
 8009330:	2e00      	cmp	r6, #0
 8009332:	dd13      	ble.n	800935c <_dtoa_r+0x78c>
 8009334:	4639      	mov	r1, r7
 8009336:	4632      	mov	r2, r6
 8009338:	4620      	mov	r0, r4
 800933a:	f000 fbff 	bl	8009b3c <__pow5mult>
 800933e:	ee18 2a10 	vmov	r2, s16
 8009342:	4601      	mov	r1, r0
 8009344:	4607      	mov	r7, r0
 8009346:	4620      	mov	r0, r4
 8009348:	f000 fb4e 	bl	80099e8 <__multiply>
 800934c:	ee18 1a10 	vmov	r1, s16
 8009350:	4680      	mov	r8, r0
 8009352:	4620      	mov	r0, r4
 8009354:	f000 fa7a 	bl	800984c <_Bfree>
 8009358:	ee08 8a10 	vmov	s16, r8
 800935c:	9b07      	ldr	r3, [sp, #28]
 800935e:	1b9a      	subs	r2, r3, r6
 8009360:	d006      	beq.n	8009370 <_dtoa_r+0x7a0>
 8009362:	ee18 1a10 	vmov	r1, s16
 8009366:	4620      	mov	r0, r4
 8009368:	f000 fbe8 	bl	8009b3c <__pow5mult>
 800936c:	ee08 0a10 	vmov	s16, r0
 8009370:	2101      	movs	r1, #1
 8009372:	4620      	mov	r0, r4
 8009374:	f000 fb22 	bl	80099bc <__i2b>
 8009378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800937a:	2b00      	cmp	r3, #0
 800937c:	4606      	mov	r6, r0
 800937e:	f340 8088 	ble.w	8009492 <_dtoa_r+0x8c2>
 8009382:	461a      	mov	r2, r3
 8009384:	4601      	mov	r1, r0
 8009386:	4620      	mov	r0, r4
 8009388:	f000 fbd8 	bl	8009b3c <__pow5mult>
 800938c:	9b06      	ldr	r3, [sp, #24]
 800938e:	2b01      	cmp	r3, #1
 8009390:	4606      	mov	r6, r0
 8009392:	f340 8081 	ble.w	8009498 <_dtoa_r+0x8c8>
 8009396:	f04f 0800 	mov.w	r8, #0
 800939a:	6933      	ldr	r3, [r6, #16]
 800939c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093a0:	6918      	ldr	r0, [r3, #16]
 80093a2:	f000 fabb 	bl	800991c <__hi0bits>
 80093a6:	f1c0 0020 	rsb	r0, r0, #32
 80093aa:	9b05      	ldr	r3, [sp, #20]
 80093ac:	4418      	add	r0, r3
 80093ae:	f010 001f 	ands.w	r0, r0, #31
 80093b2:	f000 8092 	beq.w	80094da <_dtoa_r+0x90a>
 80093b6:	f1c0 0320 	rsb	r3, r0, #32
 80093ba:	2b04      	cmp	r3, #4
 80093bc:	f340 808a 	ble.w	80094d4 <_dtoa_r+0x904>
 80093c0:	f1c0 001c 	rsb	r0, r0, #28
 80093c4:	9b04      	ldr	r3, [sp, #16]
 80093c6:	4403      	add	r3, r0
 80093c8:	9304      	str	r3, [sp, #16]
 80093ca:	9b05      	ldr	r3, [sp, #20]
 80093cc:	4403      	add	r3, r0
 80093ce:	4405      	add	r5, r0
 80093d0:	9305      	str	r3, [sp, #20]
 80093d2:	9b04      	ldr	r3, [sp, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	dd07      	ble.n	80093e8 <_dtoa_r+0x818>
 80093d8:	ee18 1a10 	vmov	r1, s16
 80093dc:	461a      	mov	r2, r3
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 fc06 	bl	8009bf0 <__lshift>
 80093e4:	ee08 0a10 	vmov	s16, r0
 80093e8:	9b05      	ldr	r3, [sp, #20]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	dd05      	ble.n	80093fa <_dtoa_r+0x82a>
 80093ee:	4631      	mov	r1, r6
 80093f0:	461a      	mov	r2, r3
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 fbfc 	bl	8009bf0 <__lshift>
 80093f8:	4606      	mov	r6, r0
 80093fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d06e      	beq.n	80094de <_dtoa_r+0x90e>
 8009400:	ee18 0a10 	vmov	r0, s16
 8009404:	4631      	mov	r1, r6
 8009406:	f000 fc63 	bl	8009cd0 <__mcmp>
 800940a:	2800      	cmp	r0, #0
 800940c:	da67      	bge.n	80094de <_dtoa_r+0x90e>
 800940e:	9b00      	ldr	r3, [sp, #0]
 8009410:	3b01      	subs	r3, #1
 8009412:	ee18 1a10 	vmov	r1, s16
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	220a      	movs	r2, #10
 800941a:	2300      	movs	r3, #0
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fa37 	bl	8009890 <__multadd>
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	ee08 0a10 	vmov	s16, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 81b1 	beq.w	8009790 <_dtoa_r+0xbc0>
 800942e:	2300      	movs	r3, #0
 8009430:	4639      	mov	r1, r7
 8009432:	220a      	movs	r2, #10
 8009434:	4620      	mov	r0, r4
 8009436:	f000 fa2b 	bl	8009890 <__multadd>
 800943a:	9b02      	ldr	r3, [sp, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	4607      	mov	r7, r0
 8009440:	f300 808e 	bgt.w	8009560 <_dtoa_r+0x990>
 8009444:	9b06      	ldr	r3, [sp, #24]
 8009446:	2b02      	cmp	r3, #2
 8009448:	dc51      	bgt.n	80094ee <_dtoa_r+0x91e>
 800944a:	e089      	b.n	8009560 <_dtoa_r+0x990>
 800944c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800944e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009452:	e74b      	b.n	80092ec <_dtoa_r+0x71c>
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	1e5e      	subs	r6, r3, #1
 8009458:	9b07      	ldr	r3, [sp, #28]
 800945a:	42b3      	cmp	r3, r6
 800945c:	bfbf      	itttt	lt
 800945e:	9b07      	ldrlt	r3, [sp, #28]
 8009460:	9607      	strlt	r6, [sp, #28]
 8009462:	1af2      	sublt	r2, r6, r3
 8009464:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009466:	bfb6      	itet	lt
 8009468:	189b      	addlt	r3, r3, r2
 800946a:	1b9e      	subge	r6, r3, r6
 800946c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	bfb8      	it	lt
 8009472:	2600      	movlt	r6, #0
 8009474:	2b00      	cmp	r3, #0
 8009476:	bfb7      	itett	lt
 8009478:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800947c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009480:	1a9d      	sublt	r5, r3, r2
 8009482:	2300      	movlt	r3, #0
 8009484:	e734      	b.n	80092f0 <_dtoa_r+0x720>
 8009486:	9e07      	ldr	r6, [sp, #28]
 8009488:	9d04      	ldr	r5, [sp, #16]
 800948a:	9f08      	ldr	r7, [sp, #32]
 800948c:	e73b      	b.n	8009306 <_dtoa_r+0x736>
 800948e:	9a07      	ldr	r2, [sp, #28]
 8009490:	e767      	b.n	8009362 <_dtoa_r+0x792>
 8009492:	9b06      	ldr	r3, [sp, #24]
 8009494:	2b01      	cmp	r3, #1
 8009496:	dc18      	bgt.n	80094ca <_dtoa_r+0x8fa>
 8009498:	f1ba 0f00 	cmp.w	sl, #0
 800949c:	d115      	bne.n	80094ca <_dtoa_r+0x8fa>
 800949e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094a2:	b993      	cbnz	r3, 80094ca <_dtoa_r+0x8fa>
 80094a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094a8:	0d1b      	lsrs	r3, r3, #20
 80094aa:	051b      	lsls	r3, r3, #20
 80094ac:	b183      	cbz	r3, 80094d0 <_dtoa_r+0x900>
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	3301      	adds	r3, #1
 80094b2:	9304      	str	r3, [sp, #16]
 80094b4:	9b05      	ldr	r3, [sp, #20]
 80094b6:	3301      	adds	r3, #1
 80094b8:	9305      	str	r3, [sp, #20]
 80094ba:	f04f 0801 	mov.w	r8, #1
 80094be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f47f af6a 	bne.w	800939a <_dtoa_r+0x7ca>
 80094c6:	2001      	movs	r0, #1
 80094c8:	e76f      	b.n	80093aa <_dtoa_r+0x7da>
 80094ca:	f04f 0800 	mov.w	r8, #0
 80094ce:	e7f6      	b.n	80094be <_dtoa_r+0x8ee>
 80094d0:	4698      	mov	r8, r3
 80094d2:	e7f4      	b.n	80094be <_dtoa_r+0x8ee>
 80094d4:	f43f af7d 	beq.w	80093d2 <_dtoa_r+0x802>
 80094d8:	4618      	mov	r0, r3
 80094da:	301c      	adds	r0, #28
 80094dc:	e772      	b.n	80093c4 <_dtoa_r+0x7f4>
 80094de:	9b03      	ldr	r3, [sp, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	dc37      	bgt.n	8009554 <_dtoa_r+0x984>
 80094e4:	9b06      	ldr	r3, [sp, #24]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	dd34      	ble.n	8009554 <_dtoa_r+0x984>
 80094ea:	9b03      	ldr	r3, [sp, #12]
 80094ec:	9302      	str	r3, [sp, #8]
 80094ee:	9b02      	ldr	r3, [sp, #8]
 80094f0:	b96b      	cbnz	r3, 800950e <_dtoa_r+0x93e>
 80094f2:	4631      	mov	r1, r6
 80094f4:	2205      	movs	r2, #5
 80094f6:	4620      	mov	r0, r4
 80094f8:	f000 f9ca 	bl	8009890 <__multadd>
 80094fc:	4601      	mov	r1, r0
 80094fe:	4606      	mov	r6, r0
 8009500:	ee18 0a10 	vmov	r0, s16
 8009504:	f000 fbe4 	bl	8009cd0 <__mcmp>
 8009508:	2800      	cmp	r0, #0
 800950a:	f73f adbb 	bgt.w	8009084 <_dtoa_r+0x4b4>
 800950e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009510:	9d01      	ldr	r5, [sp, #4]
 8009512:	43db      	mvns	r3, r3
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	f04f 0800 	mov.w	r8, #0
 800951a:	4631      	mov	r1, r6
 800951c:	4620      	mov	r0, r4
 800951e:	f000 f995 	bl	800984c <_Bfree>
 8009522:	2f00      	cmp	r7, #0
 8009524:	f43f aea4 	beq.w	8009270 <_dtoa_r+0x6a0>
 8009528:	f1b8 0f00 	cmp.w	r8, #0
 800952c:	d005      	beq.n	800953a <_dtoa_r+0x96a>
 800952e:	45b8      	cmp	r8, r7
 8009530:	d003      	beq.n	800953a <_dtoa_r+0x96a>
 8009532:	4641      	mov	r1, r8
 8009534:	4620      	mov	r0, r4
 8009536:	f000 f989 	bl	800984c <_Bfree>
 800953a:	4639      	mov	r1, r7
 800953c:	4620      	mov	r0, r4
 800953e:	f000 f985 	bl	800984c <_Bfree>
 8009542:	e695      	b.n	8009270 <_dtoa_r+0x6a0>
 8009544:	2600      	movs	r6, #0
 8009546:	4637      	mov	r7, r6
 8009548:	e7e1      	b.n	800950e <_dtoa_r+0x93e>
 800954a:	9700      	str	r7, [sp, #0]
 800954c:	4637      	mov	r7, r6
 800954e:	e599      	b.n	8009084 <_dtoa_r+0x4b4>
 8009550:	40240000 	.word	0x40240000
 8009554:	9b08      	ldr	r3, [sp, #32]
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 80ca 	beq.w	80096f0 <_dtoa_r+0xb20>
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	9302      	str	r3, [sp, #8]
 8009560:	2d00      	cmp	r5, #0
 8009562:	dd05      	ble.n	8009570 <_dtoa_r+0x9a0>
 8009564:	4639      	mov	r1, r7
 8009566:	462a      	mov	r2, r5
 8009568:	4620      	mov	r0, r4
 800956a:	f000 fb41 	bl	8009bf0 <__lshift>
 800956e:	4607      	mov	r7, r0
 8009570:	f1b8 0f00 	cmp.w	r8, #0
 8009574:	d05b      	beq.n	800962e <_dtoa_r+0xa5e>
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	4620      	mov	r0, r4
 800957a:	f000 f927 	bl	80097cc <_Balloc>
 800957e:	4605      	mov	r5, r0
 8009580:	b928      	cbnz	r0, 800958e <_dtoa_r+0x9be>
 8009582:	4b87      	ldr	r3, [pc, #540]	; (80097a0 <_dtoa_r+0xbd0>)
 8009584:	4602      	mov	r2, r0
 8009586:	f240 21ea 	movw	r1, #746	; 0x2ea
 800958a:	f7ff bb3b 	b.w	8008c04 <_dtoa_r+0x34>
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	3202      	adds	r2, #2
 8009592:	0092      	lsls	r2, r2, #2
 8009594:	f107 010c 	add.w	r1, r7, #12
 8009598:	300c      	adds	r0, #12
 800959a:	f7fe fcf5 	bl	8007f88 <memcpy>
 800959e:	2201      	movs	r2, #1
 80095a0:	4629      	mov	r1, r5
 80095a2:	4620      	mov	r0, r4
 80095a4:	f000 fb24 	bl	8009bf0 <__lshift>
 80095a8:	9b01      	ldr	r3, [sp, #4]
 80095aa:	f103 0901 	add.w	r9, r3, #1
 80095ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095b2:	4413      	add	r3, r2
 80095b4:	9305      	str	r3, [sp, #20]
 80095b6:	f00a 0301 	and.w	r3, sl, #1
 80095ba:	46b8      	mov	r8, r7
 80095bc:	9304      	str	r3, [sp, #16]
 80095be:	4607      	mov	r7, r0
 80095c0:	4631      	mov	r1, r6
 80095c2:	ee18 0a10 	vmov	r0, s16
 80095c6:	f7ff fa77 	bl	8008ab8 <quorem>
 80095ca:	4641      	mov	r1, r8
 80095cc:	9002      	str	r0, [sp, #8]
 80095ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095d2:	ee18 0a10 	vmov	r0, s16
 80095d6:	f000 fb7b 	bl	8009cd0 <__mcmp>
 80095da:	463a      	mov	r2, r7
 80095dc:	9003      	str	r0, [sp, #12]
 80095de:	4631      	mov	r1, r6
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fb91 	bl	8009d08 <__mdiff>
 80095e6:	68c2      	ldr	r2, [r0, #12]
 80095e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80095ec:	4605      	mov	r5, r0
 80095ee:	bb02      	cbnz	r2, 8009632 <_dtoa_r+0xa62>
 80095f0:	4601      	mov	r1, r0
 80095f2:	ee18 0a10 	vmov	r0, s16
 80095f6:	f000 fb6b 	bl	8009cd0 <__mcmp>
 80095fa:	4602      	mov	r2, r0
 80095fc:	4629      	mov	r1, r5
 80095fe:	4620      	mov	r0, r4
 8009600:	9207      	str	r2, [sp, #28]
 8009602:	f000 f923 	bl	800984c <_Bfree>
 8009606:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800960a:	ea43 0102 	orr.w	r1, r3, r2
 800960e:	9b04      	ldr	r3, [sp, #16]
 8009610:	430b      	orrs	r3, r1
 8009612:	464d      	mov	r5, r9
 8009614:	d10f      	bne.n	8009636 <_dtoa_r+0xa66>
 8009616:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800961a:	d02a      	beq.n	8009672 <_dtoa_r+0xaa2>
 800961c:	9b03      	ldr	r3, [sp, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	dd02      	ble.n	8009628 <_dtoa_r+0xa58>
 8009622:	9b02      	ldr	r3, [sp, #8]
 8009624:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009628:	f88b a000 	strb.w	sl, [fp]
 800962c:	e775      	b.n	800951a <_dtoa_r+0x94a>
 800962e:	4638      	mov	r0, r7
 8009630:	e7ba      	b.n	80095a8 <_dtoa_r+0x9d8>
 8009632:	2201      	movs	r2, #1
 8009634:	e7e2      	b.n	80095fc <_dtoa_r+0xa2c>
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	db04      	blt.n	8009646 <_dtoa_r+0xa76>
 800963c:	9906      	ldr	r1, [sp, #24]
 800963e:	430b      	orrs	r3, r1
 8009640:	9904      	ldr	r1, [sp, #16]
 8009642:	430b      	orrs	r3, r1
 8009644:	d122      	bne.n	800968c <_dtoa_r+0xabc>
 8009646:	2a00      	cmp	r2, #0
 8009648:	ddee      	ble.n	8009628 <_dtoa_r+0xa58>
 800964a:	ee18 1a10 	vmov	r1, s16
 800964e:	2201      	movs	r2, #1
 8009650:	4620      	mov	r0, r4
 8009652:	f000 facd 	bl	8009bf0 <__lshift>
 8009656:	4631      	mov	r1, r6
 8009658:	ee08 0a10 	vmov	s16, r0
 800965c:	f000 fb38 	bl	8009cd0 <__mcmp>
 8009660:	2800      	cmp	r0, #0
 8009662:	dc03      	bgt.n	800966c <_dtoa_r+0xa9c>
 8009664:	d1e0      	bne.n	8009628 <_dtoa_r+0xa58>
 8009666:	f01a 0f01 	tst.w	sl, #1
 800966a:	d0dd      	beq.n	8009628 <_dtoa_r+0xa58>
 800966c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009670:	d1d7      	bne.n	8009622 <_dtoa_r+0xa52>
 8009672:	2339      	movs	r3, #57	; 0x39
 8009674:	f88b 3000 	strb.w	r3, [fp]
 8009678:	462b      	mov	r3, r5
 800967a:	461d      	mov	r5, r3
 800967c:	3b01      	subs	r3, #1
 800967e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009682:	2a39      	cmp	r2, #57	; 0x39
 8009684:	d071      	beq.n	800976a <_dtoa_r+0xb9a>
 8009686:	3201      	adds	r2, #1
 8009688:	701a      	strb	r2, [r3, #0]
 800968a:	e746      	b.n	800951a <_dtoa_r+0x94a>
 800968c:	2a00      	cmp	r2, #0
 800968e:	dd07      	ble.n	80096a0 <_dtoa_r+0xad0>
 8009690:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009694:	d0ed      	beq.n	8009672 <_dtoa_r+0xaa2>
 8009696:	f10a 0301 	add.w	r3, sl, #1
 800969a:	f88b 3000 	strb.w	r3, [fp]
 800969e:	e73c      	b.n	800951a <_dtoa_r+0x94a>
 80096a0:	9b05      	ldr	r3, [sp, #20]
 80096a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096a6:	4599      	cmp	r9, r3
 80096a8:	d047      	beq.n	800973a <_dtoa_r+0xb6a>
 80096aa:	ee18 1a10 	vmov	r1, s16
 80096ae:	2300      	movs	r3, #0
 80096b0:	220a      	movs	r2, #10
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 f8ec 	bl	8009890 <__multadd>
 80096b8:	45b8      	cmp	r8, r7
 80096ba:	ee08 0a10 	vmov	s16, r0
 80096be:	f04f 0300 	mov.w	r3, #0
 80096c2:	f04f 020a 	mov.w	r2, #10
 80096c6:	4641      	mov	r1, r8
 80096c8:	4620      	mov	r0, r4
 80096ca:	d106      	bne.n	80096da <_dtoa_r+0xb0a>
 80096cc:	f000 f8e0 	bl	8009890 <__multadd>
 80096d0:	4680      	mov	r8, r0
 80096d2:	4607      	mov	r7, r0
 80096d4:	f109 0901 	add.w	r9, r9, #1
 80096d8:	e772      	b.n	80095c0 <_dtoa_r+0x9f0>
 80096da:	f000 f8d9 	bl	8009890 <__multadd>
 80096de:	4639      	mov	r1, r7
 80096e0:	4680      	mov	r8, r0
 80096e2:	2300      	movs	r3, #0
 80096e4:	220a      	movs	r2, #10
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 f8d2 	bl	8009890 <__multadd>
 80096ec:	4607      	mov	r7, r0
 80096ee:	e7f1      	b.n	80096d4 <_dtoa_r+0xb04>
 80096f0:	9b03      	ldr	r3, [sp, #12]
 80096f2:	9302      	str	r3, [sp, #8]
 80096f4:	9d01      	ldr	r5, [sp, #4]
 80096f6:	ee18 0a10 	vmov	r0, s16
 80096fa:	4631      	mov	r1, r6
 80096fc:	f7ff f9dc 	bl	8008ab8 <quorem>
 8009700:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009704:	9b01      	ldr	r3, [sp, #4]
 8009706:	f805 ab01 	strb.w	sl, [r5], #1
 800970a:	1aea      	subs	r2, r5, r3
 800970c:	9b02      	ldr	r3, [sp, #8]
 800970e:	4293      	cmp	r3, r2
 8009710:	dd09      	ble.n	8009726 <_dtoa_r+0xb56>
 8009712:	ee18 1a10 	vmov	r1, s16
 8009716:	2300      	movs	r3, #0
 8009718:	220a      	movs	r2, #10
 800971a:	4620      	mov	r0, r4
 800971c:	f000 f8b8 	bl	8009890 <__multadd>
 8009720:	ee08 0a10 	vmov	s16, r0
 8009724:	e7e7      	b.n	80096f6 <_dtoa_r+0xb26>
 8009726:	9b02      	ldr	r3, [sp, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	bfc8      	it	gt
 800972c:	461d      	movgt	r5, r3
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	bfd8      	it	le
 8009732:	2501      	movle	r5, #1
 8009734:	441d      	add	r5, r3
 8009736:	f04f 0800 	mov.w	r8, #0
 800973a:	ee18 1a10 	vmov	r1, s16
 800973e:	2201      	movs	r2, #1
 8009740:	4620      	mov	r0, r4
 8009742:	f000 fa55 	bl	8009bf0 <__lshift>
 8009746:	4631      	mov	r1, r6
 8009748:	ee08 0a10 	vmov	s16, r0
 800974c:	f000 fac0 	bl	8009cd0 <__mcmp>
 8009750:	2800      	cmp	r0, #0
 8009752:	dc91      	bgt.n	8009678 <_dtoa_r+0xaa8>
 8009754:	d102      	bne.n	800975c <_dtoa_r+0xb8c>
 8009756:	f01a 0f01 	tst.w	sl, #1
 800975a:	d18d      	bne.n	8009678 <_dtoa_r+0xaa8>
 800975c:	462b      	mov	r3, r5
 800975e:	461d      	mov	r5, r3
 8009760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009764:	2a30      	cmp	r2, #48	; 0x30
 8009766:	d0fa      	beq.n	800975e <_dtoa_r+0xb8e>
 8009768:	e6d7      	b.n	800951a <_dtoa_r+0x94a>
 800976a:	9a01      	ldr	r2, [sp, #4]
 800976c:	429a      	cmp	r2, r3
 800976e:	d184      	bne.n	800967a <_dtoa_r+0xaaa>
 8009770:	9b00      	ldr	r3, [sp, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	2331      	movs	r3, #49	; 0x31
 8009778:	7013      	strb	r3, [r2, #0]
 800977a:	e6ce      	b.n	800951a <_dtoa_r+0x94a>
 800977c:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <_dtoa_r+0xbd4>)
 800977e:	f7ff ba95 	b.w	8008cac <_dtoa_r+0xdc>
 8009782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009784:	2b00      	cmp	r3, #0
 8009786:	f47f aa6e 	bne.w	8008c66 <_dtoa_r+0x96>
 800978a:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <_dtoa_r+0xbd8>)
 800978c:	f7ff ba8e 	b.w	8008cac <_dtoa_r+0xdc>
 8009790:	9b02      	ldr	r3, [sp, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	dcae      	bgt.n	80096f4 <_dtoa_r+0xb24>
 8009796:	9b06      	ldr	r3, [sp, #24]
 8009798:	2b02      	cmp	r3, #2
 800979a:	f73f aea8 	bgt.w	80094ee <_dtoa_r+0x91e>
 800979e:	e7a9      	b.n	80096f4 <_dtoa_r+0xb24>
 80097a0:	0800ae93 	.word	0x0800ae93
 80097a4:	0800adf0 	.word	0x0800adf0
 80097a8:	0800ae14 	.word	0x0800ae14

080097ac <_localeconv_r>:
 80097ac:	4800      	ldr	r0, [pc, #0]	; (80097b0 <_localeconv_r+0x4>)
 80097ae:	4770      	bx	lr
 80097b0:	20000160 	.word	0x20000160

080097b4 <__malloc_lock>:
 80097b4:	4801      	ldr	r0, [pc, #4]	; (80097bc <__malloc_lock+0x8>)
 80097b6:	f000 bd30 	b.w	800a21a <__retarget_lock_acquire_recursive>
 80097ba:	bf00      	nop
 80097bc:	200004ec 	.word	0x200004ec

080097c0 <__malloc_unlock>:
 80097c0:	4801      	ldr	r0, [pc, #4]	; (80097c8 <__malloc_unlock+0x8>)
 80097c2:	f000 bd2b 	b.w	800a21c <__retarget_lock_release_recursive>
 80097c6:	bf00      	nop
 80097c8:	200004ec 	.word	0x200004ec

080097cc <_Balloc>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097d0:	4604      	mov	r4, r0
 80097d2:	460d      	mov	r5, r1
 80097d4:	b976      	cbnz	r6, 80097f4 <_Balloc+0x28>
 80097d6:	2010      	movs	r0, #16
 80097d8:	f7fe fbce 	bl	8007f78 <malloc>
 80097dc:	4602      	mov	r2, r0
 80097de:	6260      	str	r0, [r4, #36]	; 0x24
 80097e0:	b920      	cbnz	r0, 80097ec <_Balloc+0x20>
 80097e2:	4b18      	ldr	r3, [pc, #96]	; (8009844 <_Balloc+0x78>)
 80097e4:	4818      	ldr	r0, [pc, #96]	; (8009848 <_Balloc+0x7c>)
 80097e6:	2166      	movs	r1, #102	; 0x66
 80097e8:	f000 fce6 	bl	800a1b8 <__assert_func>
 80097ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097f0:	6006      	str	r6, [r0, #0]
 80097f2:	60c6      	str	r6, [r0, #12]
 80097f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097f6:	68f3      	ldr	r3, [r6, #12]
 80097f8:	b183      	cbz	r3, 800981c <_Balloc+0x50>
 80097fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009802:	b9b8      	cbnz	r0, 8009834 <_Balloc+0x68>
 8009804:	2101      	movs	r1, #1
 8009806:	fa01 f605 	lsl.w	r6, r1, r5
 800980a:	1d72      	adds	r2, r6, #5
 800980c:	0092      	lsls	r2, r2, #2
 800980e:	4620      	mov	r0, r4
 8009810:	f000 fb60 	bl	8009ed4 <_calloc_r>
 8009814:	b160      	cbz	r0, 8009830 <_Balloc+0x64>
 8009816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800981a:	e00e      	b.n	800983a <_Balloc+0x6e>
 800981c:	2221      	movs	r2, #33	; 0x21
 800981e:	2104      	movs	r1, #4
 8009820:	4620      	mov	r0, r4
 8009822:	f000 fb57 	bl	8009ed4 <_calloc_r>
 8009826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009828:	60f0      	str	r0, [r6, #12]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e4      	bne.n	80097fa <_Balloc+0x2e>
 8009830:	2000      	movs	r0, #0
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	6802      	ldr	r2, [r0, #0]
 8009836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800983a:	2300      	movs	r3, #0
 800983c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009840:	e7f7      	b.n	8009832 <_Balloc+0x66>
 8009842:	bf00      	nop
 8009844:	0800ae21 	.word	0x0800ae21
 8009848:	0800aea4 	.word	0x0800aea4

0800984c <_Bfree>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009850:	4605      	mov	r5, r0
 8009852:	460c      	mov	r4, r1
 8009854:	b976      	cbnz	r6, 8009874 <_Bfree+0x28>
 8009856:	2010      	movs	r0, #16
 8009858:	f7fe fb8e 	bl	8007f78 <malloc>
 800985c:	4602      	mov	r2, r0
 800985e:	6268      	str	r0, [r5, #36]	; 0x24
 8009860:	b920      	cbnz	r0, 800986c <_Bfree+0x20>
 8009862:	4b09      	ldr	r3, [pc, #36]	; (8009888 <_Bfree+0x3c>)
 8009864:	4809      	ldr	r0, [pc, #36]	; (800988c <_Bfree+0x40>)
 8009866:	218a      	movs	r1, #138	; 0x8a
 8009868:	f000 fca6 	bl	800a1b8 <__assert_func>
 800986c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009870:	6006      	str	r6, [r0, #0]
 8009872:	60c6      	str	r6, [r0, #12]
 8009874:	b13c      	cbz	r4, 8009886 <_Bfree+0x3a>
 8009876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009878:	6862      	ldr	r2, [r4, #4]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009880:	6021      	str	r1, [r4, #0]
 8009882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009886:	bd70      	pop	{r4, r5, r6, pc}
 8009888:	0800ae21 	.word	0x0800ae21
 800988c:	0800aea4 	.word	0x0800aea4

08009890 <__multadd>:
 8009890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009894:	690d      	ldr	r5, [r1, #16]
 8009896:	4607      	mov	r7, r0
 8009898:	460c      	mov	r4, r1
 800989a:	461e      	mov	r6, r3
 800989c:	f101 0c14 	add.w	ip, r1, #20
 80098a0:	2000      	movs	r0, #0
 80098a2:	f8dc 3000 	ldr.w	r3, [ip]
 80098a6:	b299      	uxth	r1, r3
 80098a8:	fb02 6101 	mla	r1, r2, r1, r6
 80098ac:	0c1e      	lsrs	r6, r3, #16
 80098ae:	0c0b      	lsrs	r3, r1, #16
 80098b0:	fb02 3306 	mla	r3, r2, r6, r3
 80098b4:	b289      	uxth	r1, r1
 80098b6:	3001      	adds	r0, #1
 80098b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098bc:	4285      	cmp	r5, r0
 80098be:	f84c 1b04 	str.w	r1, [ip], #4
 80098c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098c6:	dcec      	bgt.n	80098a2 <__multadd+0x12>
 80098c8:	b30e      	cbz	r6, 800990e <__multadd+0x7e>
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	42ab      	cmp	r3, r5
 80098ce:	dc19      	bgt.n	8009904 <__multadd+0x74>
 80098d0:	6861      	ldr	r1, [r4, #4]
 80098d2:	4638      	mov	r0, r7
 80098d4:	3101      	adds	r1, #1
 80098d6:	f7ff ff79 	bl	80097cc <_Balloc>
 80098da:	4680      	mov	r8, r0
 80098dc:	b928      	cbnz	r0, 80098ea <__multadd+0x5a>
 80098de:	4602      	mov	r2, r0
 80098e0:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <__multadd+0x84>)
 80098e2:	480d      	ldr	r0, [pc, #52]	; (8009918 <__multadd+0x88>)
 80098e4:	21b5      	movs	r1, #181	; 0xb5
 80098e6:	f000 fc67 	bl	800a1b8 <__assert_func>
 80098ea:	6922      	ldr	r2, [r4, #16]
 80098ec:	3202      	adds	r2, #2
 80098ee:	f104 010c 	add.w	r1, r4, #12
 80098f2:	0092      	lsls	r2, r2, #2
 80098f4:	300c      	adds	r0, #12
 80098f6:	f7fe fb47 	bl	8007f88 <memcpy>
 80098fa:	4621      	mov	r1, r4
 80098fc:	4638      	mov	r0, r7
 80098fe:	f7ff ffa5 	bl	800984c <_Bfree>
 8009902:	4644      	mov	r4, r8
 8009904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009908:	3501      	adds	r5, #1
 800990a:	615e      	str	r6, [r3, #20]
 800990c:	6125      	str	r5, [r4, #16]
 800990e:	4620      	mov	r0, r4
 8009910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009914:	0800ae93 	.word	0x0800ae93
 8009918:	0800aea4 	.word	0x0800aea4

0800991c <__hi0bits>:
 800991c:	0c03      	lsrs	r3, r0, #16
 800991e:	041b      	lsls	r3, r3, #16
 8009920:	b9d3      	cbnz	r3, 8009958 <__hi0bits+0x3c>
 8009922:	0400      	lsls	r0, r0, #16
 8009924:	2310      	movs	r3, #16
 8009926:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800992a:	bf04      	itt	eq
 800992c:	0200      	lsleq	r0, r0, #8
 800992e:	3308      	addeq	r3, #8
 8009930:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009934:	bf04      	itt	eq
 8009936:	0100      	lsleq	r0, r0, #4
 8009938:	3304      	addeq	r3, #4
 800993a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800993e:	bf04      	itt	eq
 8009940:	0080      	lsleq	r0, r0, #2
 8009942:	3302      	addeq	r3, #2
 8009944:	2800      	cmp	r0, #0
 8009946:	db05      	blt.n	8009954 <__hi0bits+0x38>
 8009948:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800994c:	f103 0301 	add.w	r3, r3, #1
 8009950:	bf08      	it	eq
 8009952:	2320      	moveq	r3, #32
 8009954:	4618      	mov	r0, r3
 8009956:	4770      	bx	lr
 8009958:	2300      	movs	r3, #0
 800995a:	e7e4      	b.n	8009926 <__hi0bits+0xa>

0800995c <__lo0bits>:
 800995c:	6803      	ldr	r3, [r0, #0]
 800995e:	f013 0207 	ands.w	r2, r3, #7
 8009962:	4601      	mov	r1, r0
 8009964:	d00b      	beq.n	800997e <__lo0bits+0x22>
 8009966:	07da      	lsls	r2, r3, #31
 8009968:	d423      	bmi.n	80099b2 <__lo0bits+0x56>
 800996a:	0798      	lsls	r0, r3, #30
 800996c:	bf49      	itett	mi
 800996e:	085b      	lsrmi	r3, r3, #1
 8009970:	089b      	lsrpl	r3, r3, #2
 8009972:	2001      	movmi	r0, #1
 8009974:	600b      	strmi	r3, [r1, #0]
 8009976:	bf5c      	itt	pl
 8009978:	600b      	strpl	r3, [r1, #0]
 800997a:	2002      	movpl	r0, #2
 800997c:	4770      	bx	lr
 800997e:	b298      	uxth	r0, r3
 8009980:	b9a8      	cbnz	r0, 80099ae <__lo0bits+0x52>
 8009982:	0c1b      	lsrs	r3, r3, #16
 8009984:	2010      	movs	r0, #16
 8009986:	b2da      	uxtb	r2, r3
 8009988:	b90a      	cbnz	r2, 800998e <__lo0bits+0x32>
 800998a:	3008      	adds	r0, #8
 800998c:	0a1b      	lsrs	r3, r3, #8
 800998e:	071a      	lsls	r2, r3, #28
 8009990:	bf04      	itt	eq
 8009992:	091b      	lsreq	r3, r3, #4
 8009994:	3004      	addeq	r0, #4
 8009996:	079a      	lsls	r2, r3, #30
 8009998:	bf04      	itt	eq
 800999a:	089b      	lsreq	r3, r3, #2
 800999c:	3002      	addeq	r0, #2
 800999e:	07da      	lsls	r2, r3, #31
 80099a0:	d403      	bmi.n	80099aa <__lo0bits+0x4e>
 80099a2:	085b      	lsrs	r3, r3, #1
 80099a4:	f100 0001 	add.w	r0, r0, #1
 80099a8:	d005      	beq.n	80099b6 <__lo0bits+0x5a>
 80099aa:	600b      	str	r3, [r1, #0]
 80099ac:	4770      	bx	lr
 80099ae:	4610      	mov	r0, r2
 80099b0:	e7e9      	b.n	8009986 <__lo0bits+0x2a>
 80099b2:	2000      	movs	r0, #0
 80099b4:	4770      	bx	lr
 80099b6:	2020      	movs	r0, #32
 80099b8:	4770      	bx	lr
	...

080099bc <__i2b>:
 80099bc:	b510      	push	{r4, lr}
 80099be:	460c      	mov	r4, r1
 80099c0:	2101      	movs	r1, #1
 80099c2:	f7ff ff03 	bl	80097cc <_Balloc>
 80099c6:	4602      	mov	r2, r0
 80099c8:	b928      	cbnz	r0, 80099d6 <__i2b+0x1a>
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <__i2b+0x24>)
 80099cc:	4805      	ldr	r0, [pc, #20]	; (80099e4 <__i2b+0x28>)
 80099ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099d2:	f000 fbf1 	bl	800a1b8 <__assert_func>
 80099d6:	2301      	movs	r3, #1
 80099d8:	6144      	str	r4, [r0, #20]
 80099da:	6103      	str	r3, [r0, #16]
 80099dc:	bd10      	pop	{r4, pc}
 80099de:	bf00      	nop
 80099e0:	0800ae93 	.word	0x0800ae93
 80099e4:	0800aea4 	.word	0x0800aea4

080099e8 <__multiply>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	4691      	mov	r9, r2
 80099ee:	690a      	ldr	r2, [r1, #16]
 80099f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	bfb8      	it	lt
 80099f8:	460b      	movlt	r3, r1
 80099fa:	460c      	mov	r4, r1
 80099fc:	bfbc      	itt	lt
 80099fe:	464c      	movlt	r4, r9
 8009a00:	4699      	movlt	r9, r3
 8009a02:	6927      	ldr	r7, [r4, #16]
 8009a04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a08:	68a3      	ldr	r3, [r4, #8]
 8009a0a:	6861      	ldr	r1, [r4, #4]
 8009a0c:	eb07 060a 	add.w	r6, r7, sl
 8009a10:	42b3      	cmp	r3, r6
 8009a12:	b085      	sub	sp, #20
 8009a14:	bfb8      	it	lt
 8009a16:	3101      	addlt	r1, #1
 8009a18:	f7ff fed8 	bl	80097cc <_Balloc>
 8009a1c:	b930      	cbnz	r0, 8009a2c <__multiply+0x44>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	4b44      	ldr	r3, [pc, #272]	; (8009b34 <__multiply+0x14c>)
 8009a22:	4845      	ldr	r0, [pc, #276]	; (8009b38 <__multiply+0x150>)
 8009a24:	f240 115d 	movw	r1, #349	; 0x15d
 8009a28:	f000 fbc6 	bl	800a1b8 <__assert_func>
 8009a2c:	f100 0514 	add.w	r5, r0, #20
 8009a30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a34:	462b      	mov	r3, r5
 8009a36:	2200      	movs	r2, #0
 8009a38:	4543      	cmp	r3, r8
 8009a3a:	d321      	bcc.n	8009a80 <__multiply+0x98>
 8009a3c:	f104 0314 	add.w	r3, r4, #20
 8009a40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a44:	f109 0314 	add.w	r3, r9, #20
 8009a48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a4c:	9202      	str	r2, [sp, #8]
 8009a4e:	1b3a      	subs	r2, r7, r4
 8009a50:	3a15      	subs	r2, #21
 8009a52:	f022 0203 	bic.w	r2, r2, #3
 8009a56:	3204      	adds	r2, #4
 8009a58:	f104 0115 	add.w	r1, r4, #21
 8009a5c:	428f      	cmp	r7, r1
 8009a5e:	bf38      	it	cc
 8009a60:	2204      	movcc	r2, #4
 8009a62:	9201      	str	r2, [sp, #4]
 8009a64:	9a02      	ldr	r2, [sp, #8]
 8009a66:	9303      	str	r3, [sp, #12]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d80c      	bhi.n	8009a86 <__multiply+0x9e>
 8009a6c:	2e00      	cmp	r6, #0
 8009a6e:	dd03      	ble.n	8009a78 <__multiply+0x90>
 8009a70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d05a      	beq.n	8009b2e <__multiply+0x146>
 8009a78:	6106      	str	r6, [r0, #16]
 8009a7a:	b005      	add	sp, #20
 8009a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a80:	f843 2b04 	str.w	r2, [r3], #4
 8009a84:	e7d8      	b.n	8009a38 <__multiply+0x50>
 8009a86:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a8a:	f1ba 0f00 	cmp.w	sl, #0
 8009a8e:	d024      	beq.n	8009ada <__multiply+0xf2>
 8009a90:	f104 0e14 	add.w	lr, r4, #20
 8009a94:	46a9      	mov	r9, r5
 8009a96:	f04f 0c00 	mov.w	ip, #0
 8009a9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a9e:	f8d9 1000 	ldr.w	r1, [r9]
 8009aa2:	fa1f fb82 	uxth.w	fp, r2
 8009aa6:	b289      	uxth	r1, r1
 8009aa8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009aac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ab0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ab4:	4461      	add	r1, ip
 8009ab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009aba:	fb0a c20b 	mla	r2, sl, fp, ip
 8009abe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ac2:	b289      	uxth	r1, r1
 8009ac4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ac8:	4577      	cmp	r7, lr
 8009aca:	f849 1b04 	str.w	r1, [r9], #4
 8009ace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ad2:	d8e2      	bhi.n	8009a9a <__multiply+0xb2>
 8009ad4:	9a01      	ldr	r2, [sp, #4]
 8009ad6:	f845 c002 	str.w	ip, [r5, r2]
 8009ada:	9a03      	ldr	r2, [sp, #12]
 8009adc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	f1b9 0f00 	cmp.w	r9, #0
 8009ae6:	d020      	beq.n	8009b2a <__multiply+0x142>
 8009ae8:	6829      	ldr	r1, [r5, #0]
 8009aea:	f104 0c14 	add.w	ip, r4, #20
 8009aee:	46ae      	mov	lr, r5
 8009af0:	f04f 0a00 	mov.w	sl, #0
 8009af4:	f8bc b000 	ldrh.w	fp, [ip]
 8009af8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009afc:	fb09 220b 	mla	r2, r9, fp, r2
 8009b00:	4492      	add	sl, r2
 8009b02:	b289      	uxth	r1, r1
 8009b04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b08:	f84e 1b04 	str.w	r1, [lr], #4
 8009b0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b10:	f8be 1000 	ldrh.w	r1, [lr]
 8009b14:	0c12      	lsrs	r2, r2, #16
 8009b16:	fb09 1102 	mla	r1, r9, r2, r1
 8009b1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b1e:	4567      	cmp	r7, ip
 8009b20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b24:	d8e6      	bhi.n	8009af4 <__multiply+0x10c>
 8009b26:	9a01      	ldr	r2, [sp, #4]
 8009b28:	50a9      	str	r1, [r5, r2]
 8009b2a:	3504      	adds	r5, #4
 8009b2c:	e79a      	b.n	8009a64 <__multiply+0x7c>
 8009b2e:	3e01      	subs	r6, #1
 8009b30:	e79c      	b.n	8009a6c <__multiply+0x84>
 8009b32:	bf00      	nop
 8009b34:	0800ae93 	.word	0x0800ae93
 8009b38:	0800aea4 	.word	0x0800aea4

08009b3c <__pow5mult>:
 8009b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b40:	4615      	mov	r5, r2
 8009b42:	f012 0203 	ands.w	r2, r2, #3
 8009b46:	4606      	mov	r6, r0
 8009b48:	460f      	mov	r7, r1
 8009b4a:	d007      	beq.n	8009b5c <__pow5mult+0x20>
 8009b4c:	4c25      	ldr	r4, [pc, #148]	; (8009be4 <__pow5mult+0xa8>)
 8009b4e:	3a01      	subs	r2, #1
 8009b50:	2300      	movs	r3, #0
 8009b52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b56:	f7ff fe9b 	bl	8009890 <__multadd>
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	10ad      	asrs	r5, r5, #2
 8009b5e:	d03d      	beq.n	8009bdc <__pow5mult+0xa0>
 8009b60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b62:	b97c      	cbnz	r4, 8009b84 <__pow5mult+0x48>
 8009b64:	2010      	movs	r0, #16
 8009b66:	f7fe fa07 	bl	8007f78 <malloc>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	6270      	str	r0, [r6, #36]	; 0x24
 8009b6e:	b928      	cbnz	r0, 8009b7c <__pow5mult+0x40>
 8009b70:	4b1d      	ldr	r3, [pc, #116]	; (8009be8 <__pow5mult+0xac>)
 8009b72:	481e      	ldr	r0, [pc, #120]	; (8009bec <__pow5mult+0xb0>)
 8009b74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b78:	f000 fb1e 	bl	800a1b8 <__assert_func>
 8009b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b80:	6004      	str	r4, [r0, #0]
 8009b82:	60c4      	str	r4, [r0, #12]
 8009b84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b8c:	b94c      	cbnz	r4, 8009ba2 <__pow5mult+0x66>
 8009b8e:	f240 2171 	movw	r1, #625	; 0x271
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7ff ff12 	bl	80099bc <__i2b>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	6003      	str	r3, [r0, #0]
 8009ba2:	f04f 0900 	mov.w	r9, #0
 8009ba6:	07eb      	lsls	r3, r5, #31
 8009ba8:	d50a      	bpl.n	8009bc0 <__pow5mult+0x84>
 8009baa:	4639      	mov	r1, r7
 8009bac:	4622      	mov	r2, r4
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f7ff ff1a 	bl	80099e8 <__multiply>
 8009bb4:	4639      	mov	r1, r7
 8009bb6:	4680      	mov	r8, r0
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff fe47 	bl	800984c <_Bfree>
 8009bbe:	4647      	mov	r7, r8
 8009bc0:	106d      	asrs	r5, r5, #1
 8009bc2:	d00b      	beq.n	8009bdc <__pow5mult+0xa0>
 8009bc4:	6820      	ldr	r0, [r4, #0]
 8009bc6:	b938      	cbnz	r0, 8009bd8 <__pow5mult+0x9c>
 8009bc8:	4622      	mov	r2, r4
 8009bca:	4621      	mov	r1, r4
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f7ff ff0b 	bl	80099e8 <__multiply>
 8009bd2:	6020      	str	r0, [r4, #0]
 8009bd4:	f8c0 9000 	str.w	r9, [r0]
 8009bd8:	4604      	mov	r4, r0
 8009bda:	e7e4      	b.n	8009ba6 <__pow5mult+0x6a>
 8009bdc:	4638      	mov	r0, r7
 8009bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009be2:	bf00      	nop
 8009be4:	0800aff0 	.word	0x0800aff0
 8009be8:	0800ae21 	.word	0x0800ae21
 8009bec:	0800aea4 	.word	0x0800aea4

08009bf0 <__lshift>:
 8009bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	6849      	ldr	r1, [r1, #4]
 8009bf8:	6923      	ldr	r3, [r4, #16]
 8009bfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bfe:	68a3      	ldr	r3, [r4, #8]
 8009c00:	4607      	mov	r7, r0
 8009c02:	4691      	mov	r9, r2
 8009c04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c08:	f108 0601 	add.w	r6, r8, #1
 8009c0c:	42b3      	cmp	r3, r6
 8009c0e:	db0b      	blt.n	8009c28 <__lshift+0x38>
 8009c10:	4638      	mov	r0, r7
 8009c12:	f7ff fddb 	bl	80097cc <_Balloc>
 8009c16:	4605      	mov	r5, r0
 8009c18:	b948      	cbnz	r0, 8009c2e <__lshift+0x3e>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	4b2a      	ldr	r3, [pc, #168]	; (8009cc8 <__lshift+0xd8>)
 8009c1e:	482b      	ldr	r0, [pc, #172]	; (8009ccc <__lshift+0xdc>)
 8009c20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c24:	f000 fac8 	bl	800a1b8 <__assert_func>
 8009c28:	3101      	adds	r1, #1
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	e7ee      	b.n	8009c0c <__lshift+0x1c>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f100 0114 	add.w	r1, r0, #20
 8009c34:	f100 0210 	add.w	r2, r0, #16
 8009c38:	4618      	mov	r0, r3
 8009c3a:	4553      	cmp	r3, sl
 8009c3c:	db37      	blt.n	8009cae <__lshift+0xbe>
 8009c3e:	6920      	ldr	r0, [r4, #16]
 8009c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c44:	f104 0314 	add.w	r3, r4, #20
 8009c48:	f019 091f 	ands.w	r9, r9, #31
 8009c4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c54:	d02f      	beq.n	8009cb6 <__lshift+0xc6>
 8009c56:	f1c9 0e20 	rsb	lr, r9, #32
 8009c5a:	468a      	mov	sl, r1
 8009c5c:	f04f 0c00 	mov.w	ip, #0
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	fa02 f209 	lsl.w	r2, r2, r9
 8009c66:	ea42 020c 	orr.w	r2, r2, ip
 8009c6a:	f84a 2b04 	str.w	r2, [sl], #4
 8009c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c72:	4298      	cmp	r0, r3
 8009c74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009c78:	d8f2      	bhi.n	8009c60 <__lshift+0x70>
 8009c7a:	1b03      	subs	r3, r0, r4
 8009c7c:	3b15      	subs	r3, #21
 8009c7e:	f023 0303 	bic.w	r3, r3, #3
 8009c82:	3304      	adds	r3, #4
 8009c84:	f104 0215 	add.w	r2, r4, #21
 8009c88:	4290      	cmp	r0, r2
 8009c8a:	bf38      	it	cc
 8009c8c:	2304      	movcc	r3, #4
 8009c8e:	f841 c003 	str.w	ip, [r1, r3]
 8009c92:	f1bc 0f00 	cmp.w	ip, #0
 8009c96:	d001      	beq.n	8009c9c <__lshift+0xac>
 8009c98:	f108 0602 	add.w	r6, r8, #2
 8009c9c:	3e01      	subs	r6, #1
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	612e      	str	r6, [r5, #16]
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	f7ff fdd2 	bl	800984c <_Bfree>
 8009ca8:	4628      	mov	r0, r5
 8009caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cae:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	e7c1      	b.n	8009c3a <__lshift+0x4a>
 8009cb6:	3904      	subs	r1, #4
 8009cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cc0:	4298      	cmp	r0, r3
 8009cc2:	d8f9      	bhi.n	8009cb8 <__lshift+0xc8>
 8009cc4:	e7ea      	b.n	8009c9c <__lshift+0xac>
 8009cc6:	bf00      	nop
 8009cc8:	0800ae93 	.word	0x0800ae93
 8009ccc:	0800aea4 	.word	0x0800aea4

08009cd0 <__mcmp>:
 8009cd0:	b530      	push	{r4, r5, lr}
 8009cd2:	6902      	ldr	r2, [r0, #16]
 8009cd4:	690c      	ldr	r4, [r1, #16]
 8009cd6:	1b12      	subs	r2, r2, r4
 8009cd8:	d10e      	bne.n	8009cf8 <__mcmp+0x28>
 8009cda:	f100 0314 	add.w	r3, r0, #20
 8009cde:	3114      	adds	r1, #20
 8009ce0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ce4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ce8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009cec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009cf0:	42a5      	cmp	r5, r4
 8009cf2:	d003      	beq.n	8009cfc <__mcmp+0x2c>
 8009cf4:	d305      	bcc.n	8009d02 <__mcmp+0x32>
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	bd30      	pop	{r4, r5, pc}
 8009cfc:	4283      	cmp	r3, r0
 8009cfe:	d3f3      	bcc.n	8009ce8 <__mcmp+0x18>
 8009d00:	e7fa      	b.n	8009cf8 <__mcmp+0x28>
 8009d02:	f04f 32ff 	mov.w	r2, #4294967295
 8009d06:	e7f7      	b.n	8009cf8 <__mcmp+0x28>

08009d08 <__mdiff>:
 8009d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	460c      	mov	r4, r1
 8009d0e:	4606      	mov	r6, r0
 8009d10:	4611      	mov	r1, r2
 8009d12:	4620      	mov	r0, r4
 8009d14:	4690      	mov	r8, r2
 8009d16:	f7ff ffdb 	bl	8009cd0 <__mcmp>
 8009d1a:	1e05      	subs	r5, r0, #0
 8009d1c:	d110      	bne.n	8009d40 <__mdiff+0x38>
 8009d1e:	4629      	mov	r1, r5
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff fd53 	bl	80097cc <_Balloc>
 8009d26:	b930      	cbnz	r0, 8009d36 <__mdiff+0x2e>
 8009d28:	4b3a      	ldr	r3, [pc, #232]	; (8009e14 <__mdiff+0x10c>)
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	f240 2132 	movw	r1, #562	; 0x232
 8009d30:	4839      	ldr	r0, [pc, #228]	; (8009e18 <__mdiff+0x110>)
 8009d32:	f000 fa41 	bl	800a1b8 <__assert_func>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d40:	bfa4      	itt	ge
 8009d42:	4643      	movge	r3, r8
 8009d44:	46a0      	movge	r8, r4
 8009d46:	4630      	mov	r0, r6
 8009d48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d4c:	bfa6      	itte	ge
 8009d4e:	461c      	movge	r4, r3
 8009d50:	2500      	movge	r5, #0
 8009d52:	2501      	movlt	r5, #1
 8009d54:	f7ff fd3a 	bl	80097cc <_Balloc>
 8009d58:	b920      	cbnz	r0, 8009d64 <__mdiff+0x5c>
 8009d5a:	4b2e      	ldr	r3, [pc, #184]	; (8009e14 <__mdiff+0x10c>)
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d62:	e7e5      	b.n	8009d30 <__mdiff+0x28>
 8009d64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d68:	6926      	ldr	r6, [r4, #16]
 8009d6a:	60c5      	str	r5, [r0, #12]
 8009d6c:	f104 0914 	add.w	r9, r4, #20
 8009d70:	f108 0514 	add.w	r5, r8, #20
 8009d74:	f100 0e14 	add.w	lr, r0, #20
 8009d78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009d7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d80:	f108 0210 	add.w	r2, r8, #16
 8009d84:	46f2      	mov	sl, lr
 8009d86:	2100      	movs	r1, #0
 8009d88:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d90:	fa1f f883 	uxth.w	r8, r3
 8009d94:	fa11 f18b 	uxtah	r1, r1, fp
 8009d98:	0c1b      	lsrs	r3, r3, #16
 8009d9a:	eba1 0808 	sub.w	r8, r1, r8
 8009d9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009da2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009da6:	fa1f f888 	uxth.w	r8, r8
 8009daa:	1419      	asrs	r1, r3, #16
 8009dac:	454e      	cmp	r6, r9
 8009dae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009db2:	f84a 3b04 	str.w	r3, [sl], #4
 8009db6:	d8e7      	bhi.n	8009d88 <__mdiff+0x80>
 8009db8:	1b33      	subs	r3, r6, r4
 8009dba:	3b15      	subs	r3, #21
 8009dbc:	f023 0303 	bic.w	r3, r3, #3
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	3415      	adds	r4, #21
 8009dc4:	42a6      	cmp	r6, r4
 8009dc6:	bf38      	it	cc
 8009dc8:	2304      	movcc	r3, #4
 8009dca:	441d      	add	r5, r3
 8009dcc:	4473      	add	r3, lr
 8009dce:	469e      	mov	lr, r3
 8009dd0:	462e      	mov	r6, r5
 8009dd2:	4566      	cmp	r6, ip
 8009dd4:	d30e      	bcc.n	8009df4 <__mdiff+0xec>
 8009dd6:	f10c 0203 	add.w	r2, ip, #3
 8009dda:	1b52      	subs	r2, r2, r5
 8009ddc:	f022 0203 	bic.w	r2, r2, #3
 8009de0:	3d03      	subs	r5, #3
 8009de2:	45ac      	cmp	ip, r5
 8009de4:	bf38      	it	cc
 8009de6:	2200      	movcc	r2, #0
 8009de8:	441a      	add	r2, r3
 8009dea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009dee:	b17b      	cbz	r3, 8009e10 <__mdiff+0x108>
 8009df0:	6107      	str	r7, [r0, #16]
 8009df2:	e7a3      	b.n	8009d3c <__mdiff+0x34>
 8009df4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009df8:	fa11 f288 	uxtah	r2, r1, r8
 8009dfc:	1414      	asrs	r4, r2, #16
 8009dfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e02:	b292      	uxth	r2, r2
 8009e04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e08:	f84e 2b04 	str.w	r2, [lr], #4
 8009e0c:	1421      	asrs	r1, r4, #16
 8009e0e:	e7e0      	b.n	8009dd2 <__mdiff+0xca>
 8009e10:	3f01      	subs	r7, #1
 8009e12:	e7ea      	b.n	8009dea <__mdiff+0xe2>
 8009e14:	0800ae93 	.word	0x0800ae93
 8009e18:	0800aea4 	.word	0x0800aea4

08009e1c <__d2b>:
 8009e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e20:	4689      	mov	r9, r1
 8009e22:	2101      	movs	r1, #1
 8009e24:	ec57 6b10 	vmov	r6, r7, d0
 8009e28:	4690      	mov	r8, r2
 8009e2a:	f7ff fccf 	bl	80097cc <_Balloc>
 8009e2e:	4604      	mov	r4, r0
 8009e30:	b930      	cbnz	r0, 8009e40 <__d2b+0x24>
 8009e32:	4602      	mov	r2, r0
 8009e34:	4b25      	ldr	r3, [pc, #148]	; (8009ecc <__d2b+0xb0>)
 8009e36:	4826      	ldr	r0, [pc, #152]	; (8009ed0 <__d2b+0xb4>)
 8009e38:	f240 310a 	movw	r1, #778	; 0x30a
 8009e3c:	f000 f9bc 	bl	800a1b8 <__assert_func>
 8009e40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e48:	bb35      	cbnz	r5, 8009e98 <__d2b+0x7c>
 8009e4a:	2e00      	cmp	r6, #0
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	d028      	beq.n	8009ea2 <__d2b+0x86>
 8009e50:	4668      	mov	r0, sp
 8009e52:	9600      	str	r6, [sp, #0]
 8009e54:	f7ff fd82 	bl	800995c <__lo0bits>
 8009e58:	9900      	ldr	r1, [sp, #0]
 8009e5a:	b300      	cbz	r0, 8009e9e <__d2b+0x82>
 8009e5c:	9a01      	ldr	r2, [sp, #4]
 8009e5e:	f1c0 0320 	rsb	r3, r0, #32
 8009e62:	fa02 f303 	lsl.w	r3, r2, r3
 8009e66:	430b      	orrs	r3, r1
 8009e68:	40c2      	lsrs	r2, r0
 8009e6a:	6163      	str	r3, [r4, #20]
 8009e6c:	9201      	str	r2, [sp, #4]
 8009e6e:	9b01      	ldr	r3, [sp, #4]
 8009e70:	61a3      	str	r3, [r4, #24]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	bf14      	ite	ne
 8009e76:	2202      	movne	r2, #2
 8009e78:	2201      	moveq	r2, #1
 8009e7a:	6122      	str	r2, [r4, #16]
 8009e7c:	b1d5      	cbz	r5, 8009eb4 <__d2b+0x98>
 8009e7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e82:	4405      	add	r5, r0
 8009e84:	f8c9 5000 	str.w	r5, [r9]
 8009e88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e8c:	f8c8 0000 	str.w	r0, [r8]
 8009e90:	4620      	mov	r0, r4
 8009e92:	b003      	add	sp, #12
 8009e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e9c:	e7d5      	b.n	8009e4a <__d2b+0x2e>
 8009e9e:	6161      	str	r1, [r4, #20]
 8009ea0:	e7e5      	b.n	8009e6e <__d2b+0x52>
 8009ea2:	a801      	add	r0, sp, #4
 8009ea4:	f7ff fd5a 	bl	800995c <__lo0bits>
 8009ea8:	9b01      	ldr	r3, [sp, #4]
 8009eaa:	6163      	str	r3, [r4, #20]
 8009eac:	2201      	movs	r2, #1
 8009eae:	6122      	str	r2, [r4, #16]
 8009eb0:	3020      	adds	r0, #32
 8009eb2:	e7e3      	b.n	8009e7c <__d2b+0x60>
 8009eb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009eb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ebc:	f8c9 0000 	str.w	r0, [r9]
 8009ec0:	6918      	ldr	r0, [r3, #16]
 8009ec2:	f7ff fd2b 	bl	800991c <__hi0bits>
 8009ec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009eca:	e7df      	b.n	8009e8c <__d2b+0x70>
 8009ecc:	0800ae93 	.word	0x0800ae93
 8009ed0:	0800aea4 	.word	0x0800aea4

08009ed4 <_calloc_r>:
 8009ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ed6:	fba1 2402 	umull	r2, r4, r1, r2
 8009eda:	b94c      	cbnz	r4, 8009ef0 <_calloc_r+0x1c>
 8009edc:	4611      	mov	r1, r2
 8009ede:	9201      	str	r2, [sp, #4]
 8009ee0:	f7fe f8d4 	bl	800808c <_malloc_r>
 8009ee4:	9a01      	ldr	r2, [sp, #4]
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	b930      	cbnz	r0, 8009ef8 <_calloc_r+0x24>
 8009eea:	4628      	mov	r0, r5
 8009eec:	b003      	add	sp, #12
 8009eee:	bd30      	pop	{r4, r5, pc}
 8009ef0:	220c      	movs	r2, #12
 8009ef2:	6002      	str	r2, [r0, #0]
 8009ef4:	2500      	movs	r5, #0
 8009ef6:	e7f8      	b.n	8009eea <_calloc_r+0x16>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	f7fe f853 	bl	8007fa4 <memset>
 8009efe:	e7f4      	b.n	8009eea <_calloc_r+0x16>

08009f00 <__ssputs_r>:
 8009f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f04:	688e      	ldr	r6, [r1, #8]
 8009f06:	429e      	cmp	r6, r3
 8009f08:	4682      	mov	sl, r0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	4690      	mov	r8, r2
 8009f0e:	461f      	mov	r7, r3
 8009f10:	d838      	bhi.n	8009f84 <__ssputs_r+0x84>
 8009f12:	898a      	ldrh	r2, [r1, #12]
 8009f14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f18:	d032      	beq.n	8009f80 <__ssputs_r+0x80>
 8009f1a:	6825      	ldr	r5, [r4, #0]
 8009f1c:	6909      	ldr	r1, [r1, #16]
 8009f1e:	eba5 0901 	sub.w	r9, r5, r1
 8009f22:	6965      	ldr	r5, [r4, #20]
 8009f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	444b      	add	r3, r9
 8009f30:	106d      	asrs	r5, r5, #1
 8009f32:	429d      	cmp	r5, r3
 8009f34:	bf38      	it	cc
 8009f36:	461d      	movcc	r5, r3
 8009f38:	0553      	lsls	r3, r2, #21
 8009f3a:	d531      	bpl.n	8009fa0 <__ssputs_r+0xa0>
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	f7fe f8a5 	bl	800808c <_malloc_r>
 8009f42:	4606      	mov	r6, r0
 8009f44:	b950      	cbnz	r0, 8009f5c <__ssputs_r+0x5c>
 8009f46:	230c      	movs	r3, #12
 8009f48:	f8ca 3000 	str.w	r3, [sl]
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295
 8009f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5c:	6921      	ldr	r1, [r4, #16]
 8009f5e:	464a      	mov	r2, r9
 8009f60:	f7fe f812 	bl	8007f88 <memcpy>
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f6e:	81a3      	strh	r3, [r4, #12]
 8009f70:	6126      	str	r6, [r4, #16]
 8009f72:	6165      	str	r5, [r4, #20]
 8009f74:	444e      	add	r6, r9
 8009f76:	eba5 0509 	sub.w	r5, r5, r9
 8009f7a:	6026      	str	r6, [r4, #0]
 8009f7c:	60a5      	str	r5, [r4, #8]
 8009f7e:	463e      	mov	r6, r7
 8009f80:	42be      	cmp	r6, r7
 8009f82:	d900      	bls.n	8009f86 <__ssputs_r+0x86>
 8009f84:	463e      	mov	r6, r7
 8009f86:	6820      	ldr	r0, [r4, #0]
 8009f88:	4632      	mov	r2, r6
 8009f8a:	4641      	mov	r1, r8
 8009f8c:	f000 f959 	bl	800a242 <memmove>
 8009f90:	68a3      	ldr	r3, [r4, #8]
 8009f92:	1b9b      	subs	r3, r3, r6
 8009f94:	60a3      	str	r3, [r4, #8]
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	4433      	add	r3, r6
 8009f9a:	6023      	str	r3, [r4, #0]
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	e7db      	b.n	8009f58 <__ssputs_r+0x58>
 8009fa0:	462a      	mov	r2, r5
 8009fa2:	f000 f968 	bl	800a276 <_realloc_r>
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d1e1      	bne.n	8009f70 <__ssputs_r+0x70>
 8009fac:	6921      	ldr	r1, [r4, #16]
 8009fae:	4650      	mov	r0, sl
 8009fb0:	f7fe f800 	bl	8007fb4 <_free_r>
 8009fb4:	e7c7      	b.n	8009f46 <__ssputs_r+0x46>
	...

08009fb8 <_svfiprintf_r>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	4698      	mov	r8, r3
 8009fbe:	898b      	ldrh	r3, [r1, #12]
 8009fc0:	061b      	lsls	r3, r3, #24
 8009fc2:	b09d      	sub	sp, #116	; 0x74
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	460d      	mov	r5, r1
 8009fc8:	4614      	mov	r4, r2
 8009fca:	d50e      	bpl.n	8009fea <_svfiprintf_r+0x32>
 8009fcc:	690b      	ldr	r3, [r1, #16]
 8009fce:	b963      	cbnz	r3, 8009fea <_svfiprintf_r+0x32>
 8009fd0:	2140      	movs	r1, #64	; 0x40
 8009fd2:	f7fe f85b 	bl	800808c <_malloc_r>
 8009fd6:	6028      	str	r0, [r5, #0]
 8009fd8:	6128      	str	r0, [r5, #16]
 8009fda:	b920      	cbnz	r0, 8009fe6 <_svfiprintf_r+0x2e>
 8009fdc:	230c      	movs	r3, #12
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	e0d1      	b.n	800a18a <_svfiprintf_r+0x1d2>
 8009fe6:	2340      	movs	r3, #64	; 0x40
 8009fe8:	616b      	str	r3, [r5, #20]
 8009fea:	2300      	movs	r3, #0
 8009fec:	9309      	str	r3, [sp, #36]	; 0x24
 8009fee:	2320      	movs	r3, #32
 8009ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ff8:	2330      	movs	r3, #48	; 0x30
 8009ffa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1a4 <_svfiprintf_r+0x1ec>
 8009ffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a002:	f04f 0901 	mov.w	r9, #1
 800a006:	4623      	mov	r3, r4
 800a008:	469a      	mov	sl, r3
 800a00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a00e:	b10a      	cbz	r2, 800a014 <_svfiprintf_r+0x5c>
 800a010:	2a25      	cmp	r2, #37	; 0x25
 800a012:	d1f9      	bne.n	800a008 <_svfiprintf_r+0x50>
 800a014:	ebba 0b04 	subs.w	fp, sl, r4
 800a018:	d00b      	beq.n	800a032 <_svfiprintf_r+0x7a>
 800a01a:	465b      	mov	r3, fp
 800a01c:	4622      	mov	r2, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	4638      	mov	r0, r7
 800a022:	f7ff ff6d 	bl	8009f00 <__ssputs_r>
 800a026:	3001      	adds	r0, #1
 800a028:	f000 80aa 	beq.w	800a180 <_svfiprintf_r+0x1c8>
 800a02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a02e:	445a      	add	r2, fp
 800a030:	9209      	str	r2, [sp, #36]	; 0x24
 800a032:	f89a 3000 	ldrb.w	r3, [sl]
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 80a2 	beq.w	800a180 <_svfiprintf_r+0x1c8>
 800a03c:	2300      	movs	r3, #0
 800a03e:	f04f 32ff 	mov.w	r2, #4294967295
 800a042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a046:	f10a 0a01 	add.w	sl, sl, #1
 800a04a:	9304      	str	r3, [sp, #16]
 800a04c:	9307      	str	r3, [sp, #28]
 800a04e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a052:	931a      	str	r3, [sp, #104]	; 0x68
 800a054:	4654      	mov	r4, sl
 800a056:	2205      	movs	r2, #5
 800a058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05c:	4851      	ldr	r0, [pc, #324]	; (800a1a4 <_svfiprintf_r+0x1ec>)
 800a05e:	f7f6 f8bf 	bl	80001e0 <memchr>
 800a062:	9a04      	ldr	r2, [sp, #16]
 800a064:	b9d8      	cbnz	r0, 800a09e <_svfiprintf_r+0xe6>
 800a066:	06d0      	lsls	r0, r2, #27
 800a068:	bf44      	itt	mi
 800a06a:	2320      	movmi	r3, #32
 800a06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a070:	0711      	lsls	r1, r2, #28
 800a072:	bf44      	itt	mi
 800a074:	232b      	movmi	r3, #43	; 0x2b
 800a076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a07a:	f89a 3000 	ldrb.w	r3, [sl]
 800a07e:	2b2a      	cmp	r3, #42	; 0x2a
 800a080:	d015      	beq.n	800a0ae <_svfiprintf_r+0xf6>
 800a082:	9a07      	ldr	r2, [sp, #28]
 800a084:	4654      	mov	r4, sl
 800a086:	2000      	movs	r0, #0
 800a088:	f04f 0c0a 	mov.w	ip, #10
 800a08c:	4621      	mov	r1, r4
 800a08e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a092:	3b30      	subs	r3, #48	; 0x30
 800a094:	2b09      	cmp	r3, #9
 800a096:	d94e      	bls.n	800a136 <_svfiprintf_r+0x17e>
 800a098:	b1b0      	cbz	r0, 800a0c8 <_svfiprintf_r+0x110>
 800a09a:	9207      	str	r2, [sp, #28]
 800a09c:	e014      	b.n	800a0c8 <_svfiprintf_r+0x110>
 800a09e:	eba0 0308 	sub.w	r3, r0, r8
 800a0a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	46a2      	mov	sl, r4
 800a0ac:	e7d2      	b.n	800a054 <_svfiprintf_r+0x9c>
 800a0ae:	9b03      	ldr	r3, [sp, #12]
 800a0b0:	1d19      	adds	r1, r3, #4
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	9103      	str	r1, [sp, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	bfbb      	ittet	lt
 800a0ba:	425b      	neglt	r3, r3
 800a0bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a0c0:	9307      	strge	r3, [sp, #28]
 800a0c2:	9307      	strlt	r3, [sp, #28]
 800a0c4:	bfb8      	it	lt
 800a0c6:	9204      	strlt	r2, [sp, #16]
 800a0c8:	7823      	ldrb	r3, [r4, #0]
 800a0ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a0cc:	d10c      	bne.n	800a0e8 <_svfiprintf_r+0x130>
 800a0ce:	7863      	ldrb	r3, [r4, #1]
 800a0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d2:	d135      	bne.n	800a140 <_svfiprintf_r+0x188>
 800a0d4:	9b03      	ldr	r3, [sp, #12]
 800a0d6:	1d1a      	adds	r2, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	9203      	str	r2, [sp, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bfb8      	it	lt
 800a0e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0e4:	3402      	adds	r4, #2
 800a0e6:	9305      	str	r3, [sp, #20]
 800a0e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1b4 <_svfiprintf_r+0x1fc>
 800a0ec:	7821      	ldrb	r1, [r4, #0]
 800a0ee:	2203      	movs	r2, #3
 800a0f0:	4650      	mov	r0, sl
 800a0f2:	f7f6 f875 	bl	80001e0 <memchr>
 800a0f6:	b140      	cbz	r0, 800a10a <_svfiprintf_r+0x152>
 800a0f8:	2340      	movs	r3, #64	; 0x40
 800a0fa:	eba0 000a 	sub.w	r0, r0, sl
 800a0fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a102:	9b04      	ldr	r3, [sp, #16]
 800a104:	4303      	orrs	r3, r0
 800a106:	3401      	adds	r4, #1
 800a108:	9304      	str	r3, [sp, #16]
 800a10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a10e:	4826      	ldr	r0, [pc, #152]	; (800a1a8 <_svfiprintf_r+0x1f0>)
 800a110:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a114:	2206      	movs	r2, #6
 800a116:	f7f6 f863 	bl	80001e0 <memchr>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d038      	beq.n	800a190 <_svfiprintf_r+0x1d8>
 800a11e:	4b23      	ldr	r3, [pc, #140]	; (800a1ac <_svfiprintf_r+0x1f4>)
 800a120:	bb1b      	cbnz	r3, 800a16a <_svfiprintf_r+0x1b2>
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	3307      	adds	r3, #7
 800a126:	f023 0307 	bic.w	r3, r3, #7
 800a12a:	3308      	adds	r3, #8
 800a12c:	9303      	str	r3, [sp, #12]
 800a12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a130:	4433      	add	r3, r6
 800a132:	9309      	str	r3, [sp, #36]	; 0x24
 800a134:	e767      	b.n	800a006 <_svfiprintf_r+0x4e>
 800a136:	fb0c 3202 	mla	r2, ip, r2, r3
 800a13a:	460c      	mov	r4, r1
 800a13c:	2001      	movs	r0, #1
 800a13e:	e7a5      	b.n	800a08c <_svfiprintf_r+0xd4>
 800a140:	2300      	movs	r3, #0
 800a142:	3401      	adds	r4, #1
 800a144:	9305      	str	r3, [sp, #20]
 800a146:	4619      	mov	r1, r3
 800a148:	f04f 0c0a 	mov.w	ip, #10
 800a14c:	4620      	mov	r0, r4
 800a14e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a152:	3a30      	subs	r2, #48	; 0x30
 800a154:	2a09      	cmp	r2, #9
 800a156:	d903      	bls.n	800a160 <_svfiprintf_r+0x1a8>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0c5      	beq.n	800a0e8 <_svfiprintf_r+0x130>
 800a15c:	9105      	str	r1, [sp, #20]
 800a15e:	e7c3      	b.n	800a0e8 <_svfiprintf_r+0x130>
 800a160:	fb0c 2101 	mla	r1, ip, r1, r2
 800a164:	4604      	mov	r4, r0
 800a166:	2301      	movs	r3, #1
 800a168:	e7f0      	b.n	800a14c <_svfiprintf_r+0x194>
 800a16a:	ab03      	add	r3, sp, #12
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	462a      	mov	r2, r5
 800a170:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <_svfiprintf_r+0x1f8>)
 800a172:	a904      	add	r1, sp, #16
 800a174:	4638      	mov	r0, r7
 800a176:	f7fe f89d 	bl	80082b4 <_printf_float>
 800a17a:	1c42      	adds	r2, r0, #1
 800a17c:	4606      	mov	r6, r0
 800a17e:	d1d6      	bne.n	800a12e <_svfiprintf_r+0x176>
 800a180:	89ab      	ldrh	r3, [r5, #12]
 800a182:	065b      	lsls	r3, r3, #25
 800a184:	f53f af2c 	bmi.w	8009fe0 <_svfiprintf_r+0x28>
 800a188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a18a:	b01d      	add	sp, #116	; 0x74
 800a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a190:	ab03      	add	r3, sp, #12
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	462a      	mov	r2, r5
 800a196:	4b06      	ldr	r3, [pc, #24]	; (800a1b0 <_svfiprintf_r+0x1f8>)
 800a198:	a904      	add	r1, sp, #16
 800a19a:	4638      	mov	r0, r7
 800a19c:	f7fe fb2e 	bl	80087fc <_printf_i>
 800a1a0:	e7eb      	b.n	800a17a <_svfiprintf_r+0x1c2>
 800a1a2:	bf00      	nop
 800a1a4:	0800affc 	.word	0x0800affc
 800a1a8:	0800b006 	.word	0x0800b006
 800a1ac:	080082b5 	.word	0x080082b5
 800a1b0:	08009f01 	.word	0x08009f01
 800a1b4:	0800b002 	.word	0x0800b002

0800a1b8 <__assert_func>:
 800a1b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ba:	4614      	mov	r4, r2
 800a1bc:	461a      	mov	r2, r3
 800a1be:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <__assert_func+0x2c>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	68d8      	ldr	r0, [r3, #12]
 800a1c6:	b14c      	cbz	r4, 800a1dc <__assert_func+0x24>
 800a1c8:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <__assert_func+0x30>)
 800a1ca:	9100      	str	r1, [sp, #0]
 800a1cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1d0:	4906      	ldr	r1, [pc, #24]	; (800a1ec <__assert_func+0x34>)
 800a1d2:	462b      	mov	r3, r5
 800a1d4:	f000 f80e 	bl	800a1f4 <fiprintf>
 800a1d8:	f000 faa4 	bl	800a724 <abort>
 800a1dc:	4b04      	ldr	r3, [pc, #16]	; (800a1f0 <__assert_func+0x38>)
 800a1de:	461c      	mov	r4, r3
 800a1e0:	e7f3      	b.n	800a1ca <__assert_func+0x12>
 800a1e2:	bf00      	nop
 800a1e4:	2000000c 	.word	0x2000000c
 800a1e8:	0800b00d 	.word	0x0800b00d
 800a1ec:	0800b01a 	.word	0x0800b01a
 800a1f0:	0800b048 	.word	0x0800b048

0800a1f4 <fiprintf>:
 800a1f4:	b40e      	push	{r1, r2, r3}
 800a1f6:	b503      	push	{r0, r1, lr}
 800a1f8:	4601      	mov	r1, r0
 800a1fa:	ab03      	add	r3, sp, #12
 800a1fc:	4805      	ldr	r0, [pc, #20]	; (800a214 <fiprintf+0x20>)
 800a1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a202:	6800      	ldr	r0, [r0, #0]
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	f000 f88f 	bl	800a328 <_vfiprintf_r>
 800a20a:	b002      	add	sp, #8
 800a20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a210:	b003      	add	sp, #12
 800a212:	4770      	bx	lr
 800a214:	2000000c 	.word	0x2000000c

0800a218 <__retarget_lock_init_recursive>:
 800a218:	4770      	bx	lr

0800a21a <__retarget_lock_acquire_recursive>:
 800a21a:	4770      	bx	lr

0800a21c <__retarget_lock_release_recursive>:
 800a21c:	4770      	bx	lr

0800a21e <__ascii_mbtowc>:
 800a21e:	b082      	sub	sp, #8
 800a220:	b901      	cbnz	r1, 800a224 <__ascii_mbtowc+0x6>
 800a222:	a901      	add	r1, sp, #4
 800a224:	b142      	cbz	r2, 800a238 <__ascii_mbtowc+0x1a>
 800a226:	b14b      	cbz	r3, 800a23c <__ascii_mbtowc+0x1e>
 800a228:	7813      	ldrb	r3, [r2, #0]
 800a22a:	600b      	str	r3, [r1, #0]
 800a22c:	7812      	ldrb	r2, [r2, #0]
 800a22e:	1e10      	subs	r0, r2, #0
 800a230:	bf18      	it	ne
 800a232:	2001      	movne	r0, #1
 800a234:	b002      	add	sp, #8
 800a236:	4770      	bx	lr
 800a238:	4610      	mov	r0, r2
 800a23a:	e7fb      	b.n	800a234 <__ascii_mbtowc+0x16>
 800a23c:	f06f 0001 	mvn.w	r0, #1
 800a240:	e7f8      	b.n	800a234 <__ascii_mbtowc+0x16>

0800a242 <memmove>:
 800a242:	4288      	cmp	r0, r1
 800a244:	b510      	push	{r4, lr}
 800a246:	eb01 0402 	add.w	r4, r1, r2
 800a24a:	d902      	bls.n	800a252 <memmove+0x10>
 800a24c:	4284      	cmp	r4, r0
 800a24e:	4623      	mov	r3, r4
 800a250:	d807      	bhi.n	800a262 <memmove+0x20>
 800a252:	1e43      	subs	r3, r0, #1
 800a254:	42a1      	cmp	r1, r4
 800a256:	d008      	beq.n	800a26a <memmove+0x28>
 800a258:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a25c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a260:	e7f8      	b.n	800a254 <memmove+0x12>
 800a262:	4402      	add	r2, r0
 800a264:	4601      	mov	r1, r0
 800a266:	428a      	cmp	r2, r1
 800a268:	d100      	bne.n	800a26c <memmove+0x2a>
 800a26a:	bd10      	pop	{r4, pc}
 800a26c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a270:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a274:	e7f7      	b.n	800a266 <memmove+0x24>

0800a276 <_realloc_r>:
 800a276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	4680      	mov	r8, r0
 800a27c:	4614      	mov	r4, r2
 800a27e:	460e      	mov	r6, r1
 800a280:	b921      	cbnz	r1, 800a28c <_realloc_r+0x16>
 800a282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a286:	4611      	mov	r1, r2
 800a288:	f7fd bf00 	b.w	800808c <_malloc_r>
 800a28c:	b92a      	cbnz	r2, 800a29a <_realloc_r+0x24>
 800a28e:	f7fd fe91 	bl	8007fb4 <_free_r>
 800a292:	4625      	mov	r5, r4
 800a294:	4628      	mov	r0, r5
 800a296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a29a:	f000 fc67 	bl	800ab6c <_malloc_usable_size_r>
 800a29e:	4284      	cmp	r4, r0
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	d802      	bhi.n	800a2aa <_realloc_r+0x34>
 800a2a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2a8:	d812      	bhi.n	800a2d0 <_realloc_r+0x5a>
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4640      	mov	r0, r8
 800a2ae:	f7fd feed 	bl	800808c <_malloc_r>
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d0ed      	beq.n	800a294 <_realloc_r+0x1e>
 800a2b8:	42bc      	cmp	r4, r7
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	4631      	mov	r1, r6
 800a2be:	bf28      	it	cs
 800a2c0:	463a      	movcs	r2, r7
 800a2c2:	f7fd fe61 	bl	8007f88 <memcpy>
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	f7fd fe73 	bl	8007fb4 <_free_r>
 800a2ce:	e7e1      	b.n	800a294 <_realloc_r+0x1e>
 800a2d0:	4635      	mov	r5, r6
 800a2d2:	e7df      	b.n	800a294 <_realloc_r+0x1e>

0800a2d4 <__sfputc_r>:
 800a2d4:	6893      	ldr	r3, [r2, #8]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	b410      	push	{r4}
 800a2dc:	6093      	str	r3, [r2, #8]
 800a2de:	da08      	bge.n	800a2f2 <__sfputc_r+0x1e>
 800a2e0:	6994      	ldr	r4, [r2, #24]
 800a2e2:	42a3      	cmp	r3, r4
 800a2e4:	db01      	blt.n	800a2ea <__sfputc_r+0x16>
 800a2e6:	290a      	cmp	r1, #10
 800a2e8:	d103      	bne.n	800a2f2 <__sfputc_r+0x1e>
 800a2ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ee:	f000 b94b 	b.w	800a588 <__swbuf_r>
 800a2f2:	6813      	ldr	r3, [r2, #0]
 800a2f4:	1c58      	adds	r0, r3, #1
 800a2f6:	6010      	str	r0, [r2, #0]
 800a2f8:	7019      	strb	r1, [r3, #0]
 800a2fa:	4608      	mov	r0, r1
 800a2fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <__sfputs_r>:
 800a302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a304:	4606      	mov	r6, r0
 800a306:	460f      	mov	r7, r1
 800a308:	4614      	mov	r4, r2
 800a30a:	18d5      	adds	r5, r2, r3
 800a30c:	42ac      	cmp	r4, r5
 800a30e:	d101      	bne.n	800a314 <__sfputs_r+0x12>
 800a310:	2000      	movs	r0, #0
 800a312:	e007      	b.n	800a324 <__sfputs_r+0x22>
 800a314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a318:	463a      	mov	r2, r7
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7ff ffda 	bl	800a2d4 <__sfputc_r>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	d1f3      	bne.n	800a30c <__sfputs_r+0xa>
 800a324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a328 <_vfiprintf_r>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	460d      	mov	r5, r1
 800a32e:	b09d      	sub	sp, #116	; 0x74
 800a330:	4614      	mov	r4, r2
 800a332:	4698      	mov	r8, r3
 800a334:	4606      	mov	r6, r0
 800a336:	b118      	cbz	r0, 800a340 <_vfiprintf_r+0x18>
 800a338:	6983      	ldr	r3, [r0, #24]
 800a33a:	b90b      	cbnz	r3, 800a340 <_vfiprintf_r+0x18>
 800a33c:	f000 fb14 	bl	800a968 <__sinit>
 800a340:	4b89      	ldr	r3, [pc, #548]	; (800a568 <_vfiprintf_r+0x240>)
 800a342:	429d      	cmp	r5, r3
 800a344:	d11b      	bne.n	800a37e <_vfiprintf_r+0x56>
 800a346:	6875      	ldr	r5, [r6, #4]
 800a348:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a34a:	07d9      	lsls	r1, r3, #31
 800a34c:	d405      	bmi.n	800a35a <_vfiprintf_r+0x32>
 800a34e:	89ab      	ldrh	r3, [r5, #12]
 800a350:	059a      	lsls	r2, r3, #22
 800a352:	d402      	bmi.n	800a35a <_vfiprintf_r+0x32>
 800a354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a356:	f7ff ff60 	bl	800a21a <__retarget_lock_acquire_recursive>
 800a35a:	89ab      	ldrh	r3, [r5, #12]
 800a35c:	071b      	lsls	r3, r3, #28
 800a35e:	d501      	bpl.n	800a364 <_vfiprintf_r+0x3c>
 800a360:	692b      	ldr	r3, [r5, #16]
 800a362:	b9eb      	cbnz	r3, 800a3a0 <_vfiprintf_r+0x78>
 800a364:	4629      	mov	r1, r5
 800a366:	4630      	mov	r0, r6
 800a368:	f000 f96e 	bl	800a648 <__swsetup_r>
 800a36c:	b1c0      	cbz	r0, 800a3a0 <_vfiprintf_r+0x78>
 800a36e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a370:	07dc      	lsls	r4, r3, #31
 800a372:	d50e      	bpl.n	800a392 <_vfiprintf_r+0x6a>
 800a374:	f04f 30ff 	mov.w	r0, #4294967295
 800a378:	b01d      	add	sp, #116	; 0x74
 800a37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37e:	4b7b      	ldr	r3, [pc, #492]	; (800a56c <_vfiprintf_r+0x244>)
 800a380:	429d      	cmp	r5, r3
 800a382:	d101      	bne.n	800a388 <_vfiprintf_r+0x60>
 800a384:	68b5      	ldr	r5, [r6, #8]
 800a386:	e7df      	b.n	800a348 <_vfiprintf_r+0x20>
 800a388:	4b79      	ldr	r3, [pc, #484]	; (800a570 <_vfiprintf_r+0x248>)
 800a38a:	429d      	cmp	r5, r3
 800a38c:	bf08      	it	eq
 800a38e:	68f5      	ldreq	r5, [r6, #12]
 800a390:	e7da      	b.n	800a348 <_vfiprintf_r+0x20>
 800a392:	89ab      	ldrh	r3, [r5, #12]
 800a394:	0598      	lsls	r0, r3, #22
 800a396:	d4ed      	bmi.n	800a374 <_vfiprintf_r+0x4c>
 800a398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a39a:	f7ff ff3f 	bl	800a21c <__retarget_lock_release_recursive>
 800a39e:	e7e9      	b.n	800a374 <_vfiprintf_r+0x4c>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a4:	2320      	movs	r3, #32
 800a3a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ae:	2330      	movs	r3, #48	; 0x30
 800a3b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a574 <_vfiprintf_r+0x24c>
 800a3b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3b8:	f04f 0901 	mov.w	r9, #1
 800a3bc:	4623      	mov	r3, r4
 800a3be:	469a      	mov	sl, r3
 800a3c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c4:	b10a      	cbz	r2, 800a3ca <_vfiprintf_r+0xa2>
 800a3c6:	2a25      	cmp	r2, #37	; 0x25
 800a3c8:	d1f9      	bne.n	800a3be <_vfiprintf_r+0x96>
 800a3ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ce:	d00b      	beq.n	800a3e8 <_vfiprintf_r+0xc0>
 800a3d0:	465b      	mov	r3, fp
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7ff ff93 	bl	800a302 <__sfputs_r>
 800a3dc:	3001      	adds	r0, #1
 800a3de:	f000 80aa 	beq.w	800a536 <_vfiprintf_r+0x20e>
 800a3e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3e4:	445a      	add	r2, fp
 800a3e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 80a2 	beq.w	800a536 <_vfiprintf_r+0x20e>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3fc:	f10a 0a01 	add.w	sl, sl, #1
 800a400:	9304      	str	r3, [sp, #16]
 800a402:	9307      	str	r3, [sp, #28]
 800a404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a408:	931a      	str	r3, [sp, #104]	; 0x68
 800a40a:	4654      	mov	r4, sl
 800a40c:	2205      	movs	r2, #5
 800a40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a412:	4858      	ldr	r0, [pc, #352]	; (800a574 <_vfiprintf_r+0x24c>)
 800a414:	f7f5 fee4 	bl	80001e0 <memchr>
 800a418:	9a04      	ldr	r2, [sp, #16]
 800a41a:	b9d8      	cbnz	r0, 800a454 <_vfiprintf_r+0x12c>
 800a41c:	06d1      	lsls	r1, r2, #27
 800a41e:	bf44      	itt	mi
 800a420:	2320      	movmi	r3, #32
 800a422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a426:	0713      	lsls	r3, r2, #28
 800a428:	bf44      	itt	mi
 800a42a:	232b      	movmi	r3, #43	; 0x2b
 800a42c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a430:	f89a 3000 	ldrb.w	r3, [sl]
 800a434:	2b2a      	cmp	r3, #42	; 0x2a
 800a436:	d015      	beq.n	800a464 <_vfiprintf_r+0x13c>
 800a438:	9a07      	ldr	r2, [sp, #28]
 800a43a:	4654      	mov	r4, sl
 800a43c:	2000      	movs	r0, #0
 800a43e:	f04f 0c0a 	mov.w	ip, #10
 800a442:	4621      	mov	r1, r4
 800a444:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a448:	3b30      	subs	r3, #48	; 0x30
 800a44a:	2b09      	cmp	r3, #9
 800a44c:	d94e      	bls.n	800a4ec <_vfiprintf_r+0x1c4>
 800a44e:	b1b0      	cbz	r0, 800a47e <_vfiprintf_r+0x156>
 800a450:	9207      	str	r2, [sp, #28]
 800a452:	e014      	b.n	800a47e <_vfiprintf_r+0x156>
 800a454:	eba0 0308 	sub.w	r3, r0, r8
 800a458:	fa09 f303 	lsl.w	r3, r9, r3
 800a45c:	4313      	orrs	r3, r2
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	46a2      	mov	sl, r4
 800a462:	e7d2      	b.n	800a40a <_vfiprintf_r+0xe2>
 800a464:	9b03      	ldr	r3, [sp, #12]
 800a466:	1d19      	adds	r1, r3, #4
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	9103      	str	r1, [sp, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bfbb      	ittet	lt
 800a470:	425b      	neglt	r3, r3
 800a472:	f042 0202 	orrlt.w	r2, r2, #2
 800a476:	9307      	strge	r3, [sp, #28]
 800a478:	9307      	strlt	r3, [sp, #28]
 800a47a:	bfb8      	it	lt
 800a47c:	9204      	strlt	r2, [sp, #16]
 800a47e:	7823      	ldrb	r3, [r4, #0]
 800a480:	2b2e      	cmp	r3, #46	; 0x2e
 800a482:	d10c      	bne.n	800a49e <_vfiprintf_r+0x176>
 800a484:	7863      	ldrb	r3, [r4, #1]
 800a486:	2b2a      	cmp	r3, #42	; 0x2a
 800a488:	d135      	bne.n	800a4f6 <_vfiprintf_r+0x1ce>
 800a48a:	9b03      	ldr	r3, [sp, #12]
 800a48c:	1d1a      	adds	r2, r3, #4
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	9203      	str	r2, [sp, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	bfb8      	it	lt
 800a496:	f04f 33ff 	movlt.w	r3, #4294967295
 800a49a:	3402      	adds	r4, #2
 800a49c:	9305      	str	r3, [sp, #20]
 800a49e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a584 <_vfiprintf_r+0x25c>
 800a4a2:	7821      	ldrb	r1, [r4, #0]
 800a4a4:	2203      	movs	r2, #3
 800a4a6:	4650      	mov	r0, sl
 800a4a8:	f7f5 fe9a 	bl	80001e0 <memchr>
 800a4ac:	b140      	cbz	r0, 800a4c0 <_vfiprintf_r+0x198>
 800a4ae:	2340      	movs	r3, #64	; 0x40
 800a4b0:	eba0 000a 	sub.w	r0, r0, sl
 800a4b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a4b8:	9b04      	ldr	r3, [sp, #16]
 800a4ba:	4303      	orrs	r3, r0
 800a4bc:	3401      	adds	r4, #1
 800a4be:	9304      	str	r3, [sp, #16]
 800a4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c4:	482c      	ldr	r0, [pc, #176]	; (800a578 <_vfiprintf_r+0x250>)
 800a4c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ca:	2206      	movs	r2, #6
 800a4cc:	f7f5 fe88 	bl	80001e0 <memchr>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d03f      	beq.n	800a554 <_vfiprintf_r+0x22c>
 800a4d4:	4b29      	ldr	r3, [pc, #164]	; (800a57c <_vfiprintf_r+0x254>)
 800a4d6:	bb1b      	cbnz	r3, 800a520 <_vfiprintf_r+0x1f8>
 800a4d8:	9b03      	ldr	r3, [sp, #12]
 800a4da:	3307      	adds	r3, #7
 800a4dc:	f023 0307 	bic.w	r3, r3, #7
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	9303      	str	r3, [sp, #12]
 800a4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e6:	443b      	add	r3, r7
 800a4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ea:	e767      	b.n	800a3bc <_vfiprintf_r+0x94>
 800a4ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	e7a5      	b.n	800a442 <_vfiprintf_r+0x11a>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	3401      	adds	r4, #1
 800a4fa:	9305      	str	r3, [sp, #20]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f04f 0c0a 	mov.w	ip, #10
 800a502:	4620      	mov	r0, r4
 800a504:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a508:	3a30      	subs	r2, #48	; 0x30
 800a50a:	2a09      	cmp	r2, #9
 800a50c:	d903      	bls.n	800a516 <_vfiprintf_r+0x1ee>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0c5      	beq.n	800a49e <_vfiprintf_r+0x176>
 800a512:	9105      	str	r1, [sp, #20]
 800a514:	e7c3      	b.n	800a49e <_vfiprintf_r+0x176>
 800a516:	fb0c 2101 	mla	r1, ip, r1, r2
 800a51a:	4604      	mov	r4, r0
 800a51c:	2301      	movs	r3, #1
 800a51e:	e7f0      	b.n	800a502 <_vfiprintf_r+0x1da>
 800a520:	ab03      	add	r3, sp, #12
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	462a      	mov	r2, r5
 800a526:	4b16      	ldr	r3, [pc, #88]	; (800a580 <_vfiprintf_r+0x258>)
 800a528:	a904      	add	r1, sp, #16
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7fd fec2 	bl	80082b4 <_printf_float>
 800a530:	4607      	mov	r7, r0
 800a532:	1c78      	adds	r0, r7, #1
 800a534:	d1d6      	bne.n	800a4e4 <_vfiprintf_r+0x1bc>
 800a536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a538:	07d9      	lsls	r1, r3, #31
 800a53a:	d405      	bmi.n	800a548 <_vfiprintf_r+0x220>
 800a53c:	89ab      	ldrh	r3, [r5, #12]
 800a53e:	059a      	lsls	r2, r3, #22
 800a540:	d402      	bmi.n	800a548 <_vfiprintf_r+0x220>
 800a542:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a544:	f7ff fe6a 	bl	800a21c <__retarget_lock_release_recursive>
 800a548:	89ab      	ldrh	r3, [r5, #12]
 800a54a:	065b      	lsls	r3, r3, #25
 800a54c:	f53f af12 	bmi.w	800a374 <_vfiprintf_r+0x4c>
 800a550:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a552:	e711      	b.n	800a378 <_vfiprintf_r+0x50>
 800a554:	ab03      	add	r3, sp, #12
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	462a      	mov	r2, r5
 800a55a:	4b09      	ldr	r3, [pc, #36]	; (800a580 <_vfiprintf_r+0x258>)
 800a55c:	a904      	add	r1, sp, #16
 800a55e:	4630      	mov	r0, r6
 800a560:	f7fe f94c 	bl	80087fc <_printf_i>
 800a564:	e7e4      	b.n	800a530 <_vfiprintf_r+0x208>
 800a566:	bf00      	nop
 800a568:	0800b174 	.word	0x0800b174
 800a56c:	0800b194 	.word	0x0800b194
 800a570:	0800b154 	.word	0x0800b154
 800a574:	0800affc 	.word	0x0800affc
 800a578:	0800b006 	.word	0x0800b006
 800a57c:	080082b5 	.word	0x080082b5
 800a580:	0800a303 	.word	0x0800a303
 800a584:	0800b002 	.word	0x0800b002

0800a588 <__swbuf_r>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	460e      	mov	r6, r1
 800a58c:	4614      	mov	r4, r2
 800a58e:	4605      	mov	r5, r0
 800a590:	b118      	cbz	r0, 800a59a <__swbuf_r+0x12>
 800a592:	6983      	ldr	r3, [r0, #24]
 800a594:	b90b      	cbnz	r3, 800a59a <__swbuf_r+0x12>
 800a596:	f000 f9e7 	bl	800a968 <__sinit>
 800a59a:	4b21      	ldr	r3, [pc, #132]	; (800a620 <__swbuf_r+0x98>)
 800a59c:	429c      	cmp	r4, r3
 800a59e:	d12b      	bne.n	800a5f8 <__swbuf_r+0x70>
 800a5a0:	686c      	ldr	r4, [r5, #4]
 800a5a2:	69a3      	ldr	r3, [r4, #24]
 800a5a4:	60a3      	str	r3, [r4, #8]
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	071a      	lsls	r2, r3, #28
 800a5aa:	d52f      	bpl.n	800a60c <__swbuf_r+0x84>
 800a5ac:	6923      	ldr	r3, [r4, #16]
 800a5ae:	b36b      	cbz	r3, 800a60c <__swbuf_r+0x84>
 800a5b0:	6923      	ldr	r3, [r4, #16]
 800a5b2:	6820      	ldr	r0, [r4, #0]
 800a5b4:	1ac0      	subs	r0, r0, r3
 800a5b6:	6963      	ldr	r3, [r4, #20]
 800a5b8:	b2f6      	uxtb	r6, r6
 800a5ba:	4283      	cmp	r3, r0
 800a5bc:	4637      	mov	r7, r6
 800a5be:	dc04      	bgt.n	800a5ca <__swbuf_r+0x42>
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f000 f93c 	bl	800a840 <_fflush_r>
 800a5c8:	bb30      	cbnz	r0, 800a618 <__swbuf_r+0x90>
 800a5ca:	68a3      	ldr	r3, [r4, #8]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	60a3      	str	r3, [r4, #8]
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	6022      	str	r2, [r4, #0]
 800a5d6:	701e      	strb	r6, [r3, #0]
 800a5d8:	6963      	ldr	r3, [r4, #20]
 800a5da:	3001      	adds	r0, #1
 800a5dc:	4283      	cmp	r3, r0
 800a5de:	d004      	beq.n	800a5ea <__swbuf_r+0x62>
 800a5e0:	89a3      	ldrh	r3, [r4, #12]
 800a5e2:	07db      	lsls	r3, r3, #31
 800a5e4:	d506      	bpl.n	800a5f4 <__swbuf_r+0x6c>
 800a5e6:	2e0a      	cmp	r6, #10
 800a5e8:	d104      	bne.n	800a5f4 <__swbuf_r+0x6c>
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	f000 f927 	bl	800a840 <_fflush_r>
 800a5f2:	b988      	cbnz	r0, 800a618 <__swbuf_r+0x90>
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f8:	4b0a      	ldr	r3, [pc, #40]	; (800a624 <__swbuf_r+0x9c>)
 800a5fa:	429c      	cmp	r4, r3
 800a5fc:	d101      	bne.n	800a602 <__swbuf_r+0x7a>
 800a5fe:	68ac      	ldr	r4, [r5, #8]
 800a600:	e7cf      	b.n	800a5a2 <__swbuf_r+0x1a>
 800a602:	4b09      	ldr	r3, [pc, #36]	; (800a628 <__swbuf_r+0xa0>)
 800a604:	429c      	cmp	r4, r3
 800a606:	bf08      	it	eq
 800a608:	68ec      	ldreq	r4, [r5, #12]
 800a60a:	e7ca      	b.n	800a5a2 <__swbuf_r+0x1a>
 800a60c:	4621      	mov	r1, r4
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 f81a 	bl	800a648 <__swsetup_r>
 800a614:	2800      	cmp	r0, #0
 800a616:	d0cb      	beq.n	800a5b0 <__swbuf_r+0x28>
 800a618:	f04f 37ff 	mov.w	r7, #4294967295
 800a61c:	e7ea      	b.n	800a5f4 <__swbuf_r+0x6c>
 800a61e:	bf00      	nop
 800a620:	0800b174 	.word	0x0800b174
 800a624:	0800b194 	.word	0x0800b194
 800a628:	0800b154 	.word	0x0800b154

0800a62c <__ascii_wctomb>:
 800a62c:	b149      	cbz	r1, 800a642 <__ascii_wctomb+0x16>
 800a62e:	2aff      	cmp	r2, #255	; 0xff
 800a630:	bf85      	ittet	hi
 800a632:	238a      	movhi	r3, #138	; 0x8a
 800a634:	6003      	strhi	r3, [r0, #0]
 800a636:	700a      	strbls	r2, [r1, #0]
 800a638:	f04f 30ff 	movhi.w	r0, #4294967295
 800a63c:	bf98      	it	ls
 800a63e:	2001      	movls	r0, #1
 800a640:	4770      	bx	lr
 800a642:	4608      	mov	r0, r1
 800a644:	4770      	bx	lr
	...

0800a648 <__swsetup_r>:
 800a648:	4b32      	ldr	r3, [pc, #200]	; (800a714 <__swsetup_r+0xcc>)
 800a64a:	b570      	push	{r4, r5, r6, lr}
 800a64c:	681d      	ldr	r5, [r3, #0]
 800a64e:	4606      	mov	r6, r0
 800a650:	460c      	mov	r4, r1
 800a652:	b125      	cbz	r5, 800a65e <__swsetup_r+0x16>
 800a654:	69ab      	ldr	r3, [r5, #24]
 800a656:	b913      	cbnz	r3, 800a65e <__swsetup_r+0x16>
 800a658:	4628      	mov	r0, r5
 800a65a:	f000 f985 	bl	800a968 <__sinit>
 800a65e:	4b2e      	ldr	r3, [pc, #184]	; (800a718 <__swsetup_r+0xd0>)
 800a660:	429c      	cmp	r4, r3
 800a662:	d10f      	bne.n	800a684 <__swsetup_r+0x3c>
 800a664:	686c      	ldr	r4, [r5, #4]
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a66c:	0719      	lsls	r1, r3, #28
 800a66e:	d42c      	bmi.n	800a6ca <__swsetup_r+0x82>
 800a670:	06dd      	lsls	r5, r3, #27
 800a672:	d411      	bmi.n	800a698 <__swsetup_r+0x50>
 800a674:	2309      	movs	r3, #9
 800a676:	6033      	str	r3, [r6, #0]
 800a678:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	f04f 30ff 	mov.w	r0, #4294967295
 800a682:	e03e      	b.n	800a702 <__swsetup_r+0xba>
 800a684:	4b25      	ldr	r3, [pc, #148]	; (800a71c <__swsetup_r+0xd4>)
 800a686:	429c      	cmp	r4, r3
 800a688:	d101      	bne.n	800a68e <__swsetup_r+0x46>
 800a68a:	68ac      	ldr	r4, [r5, #8]
 800a68c:	e7eb      	b.n	800a666 <__swsetup_r+0x1e>
 800a68e:	4b24      	ldr	r3, [pc, #144]	; (800a720 <__swsetup_r+0xd8>)
 800a690:	429c      	cmp	r4, r3
 800a692:	bf08      	it	eq
 800a694:	68ec      	ldreq	r4, [r5, #12]
 800a696:	e7e6      	b.n	800a666 <__swsetup_r+0x1e>
 800a698:	0758      	lsls	r0, r3, #29
 800a69a:	d512      	bpl.n	800a6c2 <__swsetup_r+0x7a>
 800a69c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a69e:	b141      	cbz	r1, 800a6b2 <__swsetup_r+0x6a>
 800a6a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a4:	4299      	cmp	r1, r3
 800a6a6:	d002      	beq.n	800a6ae <__swsetup_r+0x66>
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7fd fc83 	bl	8007fb4 <_free_r>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	6363      	str	r3, [r4, #52]	; 0x34
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	6063      	str	r3, [r4, #4]
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f043 0308 	orr.w	r3, r3, #8
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	b94b      	cbnz	r3, 800a6e2 <__swsetup_r+0x9a>
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6d8:	d003      	beq.n	800a6e2 <__swsetup_r+0x9a>
 800a6da:	4621      	mov	r1, r4
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f000 fa05 	bl	800aaec <__smakebuf_r>
 800a6e2:	89a0      	ldrh	r0, [r4, #12]
 800a6e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6e8:	f010 0301 	ands.w	r3, r0, #1
 800a6ec:	d00a      	beq.n	800a704 <__swsetup_r+0xbc>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60a3      	str	r3, [r4, #8]
 800a6f2:	6963      	ldr	r3, [r4, #20]
 800a6f4:	425b      	negs	r3, r3
 800a6f6:	61a3      	str	r3, [r4, #24]
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	b943      	cbnz	r3, 800a70e <__swsetup_r+0xc6>
 800a6fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a700:	d1ba      	bne.n	800a678 <__swsetup_r+0x30>
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	0781      	lsls	r1, r0, #30
 800a706:	bf58      	it	pl
 800a708:	6963      	ldrpl	r3, [r4, #20]
 800a70a:	60a3      	str	r3, [r4, #8]
 800a70c:	e7f4      	b.n	800a6f8 <__swsetup_r+0xb0>
 800a70e:	2000      	movs	r0, #0
 800a710:	e7f7      	b.n	800a702 <__swsetup_r+0xba>
 800a712:	bf00      	nop
 800a714:	2000000c 	.word	0x2000000c
 800a718:	0800b174 	.word	0x0800b174
 800a71c:	0800b194 	.word	0x0800b194
 800a720:	0800b154 	.word	0x0800b154

0800a724 <abort>:
 800a724:	b508      	push	{r3, lr}
 800a726:	2006      	movs	r0, #6
 800a728:	f000 fa50 	bl	800abcc <raise>
 800a72c:	2001      	movs	r0, #1
 800a72e:	f7f7 fcb9 	bl	80020a4 <_exit>
	...

0800a734 <__sflush_r>:
 800a734:	898a      	ldrh	r2, [r1, #12]
 800a736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a73a:	4605      	mov	r5, r0
 800a73c:	0710      	lsls	r0, r2, #28
 800a73e:	460c      	mov	r4, r1
 800a740:	d458      	bmi.n	800a7f4 <__sflush_r+0xc0>
 800a742:	684b      	ldr	r3, [r1, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	dc05      	bgt.n	800a754 <__sflush_r+0x20>
 800a748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	dc02      	bgt.n	800a754 <__sflush_r+0x20>
 800a74e:	2000      	movs	r0, #0
 800a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a756:	2e00      	cmp	r6, #0
 800a758:	d0f9      	beq.n	800a74e <__sflush_r+0x1a>
 800a75a:	2300      	movs	r3, #0
 800a75c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a760:	682f      	ldr	r7, [r5, #0]
 800a762:	602b      	str	r3, [r5, #0]
 800a764:	d032      	beq.n	800a7cc <__sflush_r+0x98>
 800a766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	075a      	lsls	r2, r3, #29
 800a76c:	d505      	bpl.n	800a77a <__sflush_r+0x46>
 800a76e:	6863      	ldr	r3, [r4, #4]
 800a770:	1ac0      	subs	r0, r0, r3
 800a772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a774:	b10b      	cbz	r3, 800a77a <__sflush_r+0x46>
 800a776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a778:	1ac0      	subs	r0, r0, r3
 800a77a:	2300      	movs	r3, #0
 800a77c:	4602      	mov	r2, r0
 800a77e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a780:	6a21      	ldr	r1, [r4, #32]
 800a782:	4628      	mov	r0, r5
 800a784:	47b0      	blx	r6
 800a786:	1c43      	adds	r3, r0, #1
 800a788:	89a3      	ldrh	r3, [r4, #12]
 800a78a:	d106      	bne.n	800a79a <__sflush_r+0x66>
 800a78c:	6829      	ldr	r1, [r5, #0]
 800a78e:	291d      	cmp	r1, #29
 800a790:	d82c      	bhi.n	800a7ec <__sflush_r+0xb8>
 800a792:	4a2a      	ldr	r2, [pc, #168]	; (800a83c <__sflush_r+0x108>)
 800a794:	40ca      	lsrs	r2, r1
 800a796:	07d6      	lsls	r6, r2, #31
 800a798:	d528      	bpl.n	800a7ec <__sflush_r+0xb8>
 800a79a:	2200      	movs	r2, #0
 800a79c:	6062      	str	r2, [r4, #4]
 800a79e:	04d9      	lsls	r1, r3, #19
 800a7a0:	6922      	ldr	r2, [r4, #16]
 800a7a2:	6022      	str	r2, [r4, #0]
 800a7a4:	d504      	bpl.n	800a7b0 <__sflush_r+0x7c>
 800a7a6:	1c42      	adds	r2, r0, #1
 800a7a8:	d101      	bne.n	800a7ae <__sflush_r+0x7a>
 800a7aa:	682b      	ldr	r3, [r5, #0]
 800a7ac:	b903      	cbnz	r3, 800a7b0 <__sflush_r+0x7c>
 800a7ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a7b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7b2:	602f      	str	r7, [r5, #0]
 800a7b4:	2900      	cmp	r1, #0
 800a7b6:	d0ca      	beq.n	800a74e <__sflush_r+0x1a>
 800a7b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7bc:	4299      	cmp	r1, r3
 800a7be:	d002      	beq.n	800a7c6 <__sflush_r+0x92>
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f7fd fbf7 	bl	8007fb4 <_free_r>
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a7ca:	e7c1      	b.n	800a750 <__sflush_r+0x1c>
 800a7cc:	6a21      	ldr	r1, [r4, #32]
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	47b0      	blx	r6
 800a7d4:	1c41      	adds	r1, r0, #1
 800a7d6:	d1c7      	bne.n	800a768 <__sflush_r+0x34>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0c4      	beq.n	800a768 <__sflush_r+0x34>
 800a7de:	2b1d      	cmp	r3, #29
 800a7e0:	d001      	beq.n	800a7e6 <__sflush_r+0xb2>
 800a7e2:	2b16      	cmp	r3, #22
 800a7e4:	d101      	bne.n	800a7ea <__sflush_r+0xb6>
 800a7e6:	602f      	str	r7, [r5, #0]
 800a7e8:	e7b1      	b.n	800a74e <__sflush_r+0x1a>
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f0:	81a3      	strh	r3, [r4, #12]
 800a7f2:	e7ad      	b.n	800a750 <__sflush_r+0x1c>
 800a7f4:	690f      	ldr	r7, [r1, #16]
 800a7f6:	2f00      	cmp	r7, #0
 800a7f8:	d0a9      	beq.n	800a74e <__sflush_r+0x1a>
 800a7fa:	0793      	lsls	r3, r2, #30
 800a7fc:	680e      	ldr	r6, [r1, #0]
 800a7fe:	bf08      	it	eq
 800a800:	694b      	ldreq	r3, [r1, #20]
 800a802:	600f      	str	r7, [r1, #0]
 800a804:	bf18      	it	ne
 800a806:	2300      	movne	r3, #0
 800a808:	eba6 0807 	sub.w	r8, r6, r7
 800a80c:	608b      	str	r3, [r1, #8]
 800a80e:	f1b8 0f00 	cmp.w	r8, #0
 800a812:	dd9c      	ble.n	800a74e <__sflush_r+0x1a>
 800a814:	6a21      	ldr	r1, [r4, #32]
 800a816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a818:	4643      	mov	r3, r8
 800a81a:	463a      	mov	r2, r7
 800a81c:	4628      	mov	r0, r5
 800a81e:	47b0      	blx	r6
 800a820:	2800      	cmp	r0, #0
 800a822:	dc06      	bgt.n	800a832 <__sflush_r+0xfe>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	f04f 30ff 	mov.w	r0, #4294967295
 800a830:	e78e      	b.n	800a750 <__sflush_r+0x1c>
 800a832:	4407      	add	r7, r0
 800a834:	eba8 0800 	sub.w	r8, r8, r0
 800a838:	e7e9      	b.n	800a80e <__sflush_r+0xda>
 800a83a:	bf00      	nop
 800a83c:	20400001 	.word	0x20400001

0800a840 <_fflush_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	690b      	ldr	r3, [r1, #16]
 800a844:	4605      	mov	r5, r0
 800a846:	460c      	mov	r4, r1
 800a848:	b913      	cbnz	r3, 800a850 <_fflush_r+0x10>
 800a84a:	2500      	movs	r5, #0
 800a84c:	4628      	mov	r0, r5
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	b118      	cbz	r0, 800a85a <_fflush_r+0x1a>
 800a852:	6983      	ldr	r3, [r0, #24]
 800a854:	b90b      	cbnz	r3, 800a85a <_fflush_r+0x1a>
 800a856:	f000 f887 	bl	800a968 <__sinit>
 800a85a:	4b14      	ldr	r3, [pc, #80]	; (800a8ac <_fflush_r+0x6c>)
 800a85c:	429c      	cmp	r4, r3
 800a85e:	d11b      	bne.n	800a898 <_fflush_r+0x58>
 800a860:	686c      	ldr	r4, [r5, #4]
 800a862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d0ef      	beq.n	800a84a <_fflush_r+0xa>
 800a86a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a86c:	07d0      	lsls	r0, r2, #31
 800a86e:	d404      	bmi.n	800a87a <_fflush_r+0x3a>
 800a870:	0599      	lsls	r1, r3, #22
 800a872:	d402      	bmi.n	800a87a <_fflush_r+0x3a>
 800a874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a876:	f7ff fcd0 	bl	800a21a <__retarget_lock_acquire_recursive>
 800a87a:	4628      	mov	r0, r5
 800a87c:	4621      	mov	r1, r4
 800a87e:	f7ff ff59 	bl	800a734 <__sflush_r>
 800a882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a884:	07da      	lsls	r2, r3, #31
 800a886:	4605      	mov	r5, r0
 800a888:	d4e0      	bmi.n	800a84c <_fflush_r+0xc>
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	059b      	lsls	r3, r3, #22
 800a88e:	d4dd      	bmi.n	800a84c <_fflush_r+0xc>
 800a890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a892:	f7ff fcc3 	bl	800a21c <__retarget_lock_release_recursive>
 800a896:	e7d9      	b.n	800a84c <_fflush_r+0xc>
 800a898:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <_fflush_r+0x70>)
 800a89a:	429c      	cmp	r4, r3
 800a89c:	d101      	bne.n	800a8a2 <_fflush_r+0x62>
 800a89e:	68ac      	ldr	r4, [r5, #8]
 800a8a0:	e7df      	b.n	800a862 <_fflush_r+0x22>
 800a8a2:	4b04      	ldr	r3, [pc, #16]	; (800a8b4 <_fflush_r+0x74>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	bf08      	it	eq
 800a8a8:	68ec      	ldreq	r4, [r5, #12]
 800a8aa:	e7da      	b.n	800a862 <_fflush_r+0x22>
 800a8ac:	0800b174 	.word	0x0800b174
 800a8b0:	0800b194 	.word	0x0800b194
 800a8b4:	0800b154 	.word	0x0800b154

0800a8b8 <std>:
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	b510      	push	{r4, lr}
 800a8bc:	4604      	mov	r4, r0
 800a8be:	e9c0 3300 	strd	r3, r3, [r0]
 800a8c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8c6:	6083      	str	r3, [r0, #8]
 800a8c8:	8181      	strh	r1, [r0, #12]
 800a8ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a8cc:	81c2      	strh	r2, [r0, #14]
 800a8ce:	6183      	str	r3, [r0, #24]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	2208      	movs	r2, #8
 800a8d4:	305c      	adds	r0, #92	; 0x5c
 800a8d6:	f7fd fb65 	bl	8007fa4 <memset>
 800a8da:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <std+0x38>)
 800a8dc:	6263      	str	r3, [r4, #36]	; 0x24
 800a8de:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <std+0x3c>)
 800a8e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <std+0x40>)
 800a8e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8e6:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <std+0x44>)
 800a8e8:	6224      	str	r4, [r4, #32]
 800a8ea:	6323      	str	r3, [r4, #48]	; 0x30
 800a8ec:	bd10      	pop	{r4, pc}
 800a8ee:	bf00      	nop
 800a8f0:	0800ac05 	.word	0x0800ac05
 800a8f4:	0800ac27 	.word	0x0800ac27
 800a8f8:	0800ac5f 	.word	0x0800ac5f
 800a8fc:	0800ac83 	.word	0x0800ac83

0800a900 <_cleanup_r>:
 800a900:	4901      	ldr	r1, [pc, #4]	; (800a908 <_cleanup_r+0x8>)
 800a902:	f000 b8af 	b.w	800aa64 <_fwalk_reent>
 800a906:	bf00      	nop
 800a908:	0800a841 	.word	0x0800a841

0800a90c <__sfmoreglue>:
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	2268      	movs	r2, #104	; 0x68
 800a910:	1e4d      	subs	r5, r1, #1
 800a912:	4355      	muls	r5, r2
 800a914:	460e      	mov	r6, r1
 800a916:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a91a:	f7fd fbb7 	bl	800808c <_malloc_r>
 800a91e:	4604      	mov	r4, r0
 800a920:	b140      	cbz	r0, 800a934 <__sfmoreglue+0x28>
 800a922:	2100      	movs	r1, #0
 800a924:	e9c0 1600 	strd	r1, r6, [r0]
 800a928:	300c      	adds	r0, #12
 800a92a:	60a0      	str	r0, [r4, #8]
 800a92c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a930:	f7fd fb38 	bl	8007fa4 <memset>
 800a934:	4620      	mov	r0, r4
 800a936:	bd70      	pop	{r4, r5, r6, pc}

0800a938 <__sfp_lock_acquire>:
 800a938:	4801      	ldr	r0, [pc, #4]	; (800a940 <__sfp_lock_acquire+0x8>)
 800a93a:	f7ff bc6e 	b.w	800a21a <__retarget_lock_acquire_recursive>
 800a93e:	bf00      	nop
 800a940:	200004ed 	.word	0x200004ed

0800a944 <__sfp_lock_release>:
 800a944:	4801      	ldr	r0, [pc, #4]	; (800a94c <__sfp_lock_release+0x8>)
 800a946:	f7ff bc69 	b.w	800a21c <__retarget_lock_release_recursive>
 800a94a:	bf00      	nop
 800a94c:	200004ed 	.word	0x200004ed

0800a950 <__sinit_lock_acquire>:
 800a950:	4801      	ldr	r0, [pc, #4]	; (800a958 <__sinit_lock_acquire+0x8>)
 800a952:	f7ff bc62 	b.w	800a21a <__retarget_lock_acquire_recursive>
 800a956:	bf00      	nop
 800a958:	200004ee 	.word	0x200004ee

0800a95c <__sinit_lock_release>:
 800a95c:	4801      	ldr	r0, [pc, #4]	; (800a964 <__sinit_lock_release+0x8>)
 800a95e:	f7ff bc5d 	b.w	800a21c <__retarget_lock_release_recursive>
 800a962:	bf00      	nop
 800a964:	200004ee 	.word	0x200004ee

0800a968 <__sinit>:
 800a968:	b510      	push	{r4, lr}
 800a96a:	4604      	mov	r4, r0
 800a96c:	f7ff fff0 	bl	800a950 <__sinit_lock_acquire>
 800a970:	69a3      	ldr	r3, [r4, #24]
 800a972:	b11b      	cbz	r3, 800a97c <__sinit+0x14>
 800a974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a978:	f7ff bff0 	b.w	800a95c <__sinit_lock_release>
 800a97c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a980:	6523      	str	r3, [r4, #80]	; 0x50
 800a982:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <__sinit+0x68>)
 800a984:	4a13      	ldr	r2, [pc, #76]	; (800a9d4 <__sinit+0x6c>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	62a2      	str	r2, [r4, #40]	; 0x28
 800a98a:	42a3      	cmp	r3, r4
 800a98c:	bf04      	itt	eq
 800a98e:	2301      	moveq	r3, #1
 800a990:	61a3      	streq	r3, [r4, #24]
 800a992:	4620      	mov	r0, r4
 800a994:	f000 f820 	bl	800a9d8 <__sfp>
 800a998:	6060      	str	r0, [r4, #4]
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 f81c 	bl	800a9d8 <__sfp>
 800a9a0:	60a0      	str	r0, [r4, #8]
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 f818 	bl	800a9d8 <__sfp>
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	60e0      	str	r0, [r4, #12]
 800a9ac:	2104      	movs	r1, #4
 800a9ae:	6860      	ldr	r0, [r4, #4]
 800a9b0:	f7ff ff82 	bl	800a8b8 <std>
 800a9b4:	68a0      	ldr	r0, [r4, #8]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	2109      	movs	r1, #9
 800a9ba:	f7ff ff7d 	bl	800a8b8 <std>
 800a9be:	68e0      	ldr	r0, [r4, #12]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	2112      	movs	r1, #18
 800a9c4:	f7ff ff78 	bl	800a8b8 <std>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	61a3      	str	r3, [r4, #24]
 800a9cc:	e7d2      	b.n	800a974 <__sinit+0xc>
 800a9ce:	bf00      	nop
 800a9d0:	0800addc 	.word	0x0800addc
 800a9d4:	0800a901 	.word	0x0800a901

0800a9d8 <__sfp>:
 800a9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9da:	4607      	mov	r7, r0
 800a9dc:	f7ff ffac 	bl	800a938 <__sfp_lock_acquire>
 800a9e0:	4b1e      	ldr	r3, [pc, #120]	; (800aa5c <__sfp+0x84>)
 800a9e2:	681e      	ldr	r6, [r3, #0]
 800a9e4:	69b3      	ldr	r3, [r6, #24]
 800a9e6:	b913      	cbnz	r3, 800a9ee <__sfp+0x16>
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7ff ffbd 	bl	800a968 <__sinit>
 800a9ee:	3648      	adds	r6, #72	; 0x48
 800a9f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	d503      	bpl.n	800aa00 <__sfp+0x28>
 800a9f8:	6833      	ldr	r3, [r6, #0]
 800a9fa:	b30b      	cbz	r3, 800aa40 <__sfp+0x68>
 800a9fc:	6836      	ldr	r6, [r6, #0]
 800a9fe:	e7f7      	b.n	800a9f0 <__sfp+0x18>
 800aa00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa04:	b9d5      	cbnz	r5, 800aa3c <__sfp+0x64>
 800aa06:	4b16      	ldr	r3, [pc, #88]	; (800aa60 <__sfp+0x88>)
 800aa08:	60e3      	str	r3, [r4, #12]
 800aa0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa0e:	6665      	str	r5, [r4, #100]	; 0x64
 800aa10:	f7ff fc02 	bl	800a218 <__retarget_lock_init_recursive>
 800aa14:	f7ff ff96 	bl	800a944 <__sfp_lock_release>
 800aa18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa20:	6025      	str	r5, [r4, #0]
 800aa22:	61a5      	str	r5, [r4, #24]
 800aa24:	2208      	movs	r2, #8
 800aa26:	4629      	mov	r1, r5
 800aa28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa2c:	f7fd faba 	bl	8007fa4 <memset>
 800aa30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa38:	4620      	mov	r0, r4
 800aa3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa3c:	3468      	adds	r4, #104	; 0x68
 800aa3e:	e7d9      	b.n	800a9f4 <__sfp+0x1c>
 800aa40:	2104      	movs	r1, #4
 800aa42:	4638      	mov	r0, r7
 800aa44:	f7ff ff62 	bl	800a90c <__sfmoreglue>
 800aa48:	4604      	mov	r4, r0
 800aa4a:	6030      	str	r0, [r6, #0]
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d1d5      	bne.n	800a9fc <__sfp+0x24>
 800aa50:	f7ff ff78 	bl	800a944 <__sfp_lock_release>
 800aa54:	230c      	movs	r3, #12
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	e7ee      	b.n	800aa38 <__sfp+0x60>
 800aa5a:	bf00      	nop
 800aa5c:	0800addc 	.word	0x0800addc
 800aa60:	ffff0001 	.word	0xffff0001

0800aa64 <_fwalk_reent>:
 800aa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa68:	4606      	mov	r6, r0
 800aa6a:	4688      	mov	r8, r1
 800aa6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa70:	2700      	movs	r7, #0
 800aa72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa76:	f1b9 0901 	subs.w	r9, r9, #1
 800aa7a:	d505      	bpl.n	800aa88 <_fwalk_reent+0x24>
 800aa7c:	6824      	ldr	r4, [r4, #0]
 800aa7e:	2c00      	cmp	r4, #0
 800aa80:	d1f7      	bne.n	800aa72 <_fwalk_reent+0xe>
 800aa82:	4638      	mov	r0, r7
 800aa84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa88:	89ab      	ldrh	r3, [r5, #12]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d907      	bls.n	800aa9e <_fwalk_reent+0x3a>
 800aa8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa92:	3301      	adds	r3, #1
 800aa94:	d003      	beq.n	800aa9e <_fwalk_reent+0x3a>
 800aa96:	4629      	mov	r1, r5
 800aa98:	4630      	mov	r0, r6
 800aa9a:	47c0      	blx	r8
 800aa9c:	4307      	orrs	r7, r0
 800aa9e:	3568      	adds	r5, #104	; 0x68
 800aaa0:	e7e9      	b.n	800aa76 <_fwalk_reent+0x12>

0800aaa2 <__swhatbuf_r>:
 800aaa2:	b570      	push	{r4, r5, r6, lr}
 800aaa4:	460e      	mov	r6, r1
 800aaa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaaa:	2900      	cmp	r1, #0
 800aaac:	b096      	sub	sp, #88	; 0x58
 800aaae:	4614      	mov	r4, r2
 800aab0:	461d      	mov	r5, r3
 800aab2:	da08      	bge.n	800aac6 <__swhatbuf_r+0x24>
 800aab4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	602a      	str	r2, [r5, #0]
 800aabc:	061a      	lsls	r2, r3, #24
 800aabe:	d410      	bmi.n	800aae2 <__swhatbuf_r+0x40>
 800aac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aac4:	e00e      	b.n	800aae4 <__swhatbuf_r+0x42>
 800aac6:	466a      	mov	r2, sp
 800aac8:	f000 f902 	bl	800acd0 <_fstat_r>
 800aacc:	2800      	cmp	r0, #0
 800aace:	dbf1      	blt.n	800aab4 <__swhatbuf_r+0x12>
 800aad0:	9a01      	ldr	r2, [sp, #4]
 800aad2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aad6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aada:	425a      	negs	r2, r3
 800aadc:	415a      	adcs	r2, r3
 800aade:	602a      	str	r2, [r5, #0]
 800aae0:	e7ee      	b.n	800aac0 <__swhatbuf_r+0x1e>
 800aae2:	2340      	movs	r3, #64	; 0x40
 800aae4:	2000      	movs	r0, #0
 800aae6:	6023      	str	r3, [r4, #0]
 800aae8:	b016      	add	sp, #88	; 0x58
 800aaea:	bd70      	pop	{r4, r5, r6, pc}

0800aaec <__smakebuf_r>:
 800aaec:	898b      	ldrh	r3, [r1, #12]
 800aaee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaf0:	079d      	lsls	r5, r3, #30
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	d507      	bpl.n	800ab08 <__smakebuf_r+0x1c>
 800aaf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	6123      	str	r3, [r4, #16]
 800ab00:	2301      	movs	r3, #1
 800ab02:	6163      	str	r3, [r4, #20]
 800ab04:	b002      	add	sp, #8
 800ab06:	bd70      	pop	{r4, r5, r6, pc}
 800ab08:	ab01      	add	r3, sp, #4
 800ab0a:	466a      	mov	r2, sp
 800ab0c:	f7ff ffc9 	bl	800aaa2 <__swhatbuf_r>
 800ab10:	9900      	ldr	r1, [sp, #0]
 800ab12:	4605      	mov	r5, r0
 800ab14:	4630      	mov	r0, r6
 800ab16:	f7fd fab9 	bl	800808c <_malloc_r>
 800ab1a:	b948      	cbnz	r0, 800ab30 <__smakebuf_r+0x44>
 800ab1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab20:	059a      	lsls	r2, r3, #22
 800ab22:	d4ef      	bmi.n	800ab04 <__smakebuf_r+0x18>
 800ab24:	f023 0303 	bic.w	r3, r3, #3
 800ab28:	f043 0302 	orr.w	r3, r3, #2
 800ab2c:	81a3      	strh	r3, [r4, #12]
 800ab2e:	e7e3      	b.n	800aaf8 <__smakebuf_r+0xc>
 800ab30:	4b0d      	ldr	r3, [pc, #52]	; (800ab68 <__smakebuf_r+0x7c>)
 800ab32:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	6020      	str	r0, [r4, #0]
 800ab38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	9b00      	ldr	r3, [sp, #0]
 800ab40:	6163      	str	r3, [r4, #20]
 800ab42:	9b01      	ldr	r3, [sp, #4]
 800ab44:	6120      	str	r0, [r4, #16]
 800ab46:	b15b      	cbz	r3, 800ab60 <__smakebuf_r+0x74>
 800ab48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f000 f8d1 	bl	800acf4 <_isatty_r>
 800ab52:	b128      	cbz	r0, 800ab60 <__smakebuf_r+0x74>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	f023 0303 	bic.w	r3, r3, #3
 800ab5a:	f043 0301 	orr.w	r3, r3, #1
 800ab5e:	81a3      	strh	r3, [r4, #12]
 800ab60:	89a0      	ldrh	r0, [r4, #12]
 800ab62:	4305      	orrs	r5, r0
 800ab64:	81a5      	strh	r5, [r4, #12]
 800ab66:	e7cd      	b.n	800ab04 <__smakebuf_r+0x18>
 800ab68:	0800a901 	.word	0x0800a901

0800ab6c <_malloc_usable_size_r>:
 800ab6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab70:	1f18      	subs	r0, r3, #4
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	bfbc      	itt	lt
 800ab76:	580b      	ldrlt	r3, [r1, r0]
 800ab78:	18c0      	addlt	r0, r0, r3
 800ab7a:	4770      	bx	lr

0800ab7c <_raise_r>:
 800ab7c:	291f      	cmp	r1, #31
 800ab7e:	b538      	push	{r3, r4, r5, lr}
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	d904      	bls.n	800ab90 <_raise_r+0x14>
 800ab86:	2316      	movs	r3, #22
 800ab88:	6003      	str	r3, [r0, #0]
 800ab8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab92:	b112      	cbz	r2, 800ab9a <_raise_r+0x1e>
 800ab94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab98:	b94b      	cbnz	r3, 800abae <_raise_r+0x32>
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 f830 	bl	800ac00 <_getpid_r>
 800aba0:	462a      	mov	r2, r5
 800aba2:	4601      	mov	r1, r0
 800aba4:	4620      	mov	r0, r4
 800aba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abaa:	f000 b817 	b.w	800abdc <_kill_r>
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d00a      	beq.n	800abc8 <_raise_r+0x4c>
 800abb2:	1c59      	adds	r1, r3, #1
 800abb4:	d103      	bne.n	800abbe <_raise_r+0x42>
 800abb6:	2316      	movs	r3, #22
 800abb8:	6003      	str	r3, [r0, #0]
 800abba:	2001      	movs	r0, #1
 800abbc:	e7e7      	b.n	800ab8e <_raise_r+0x12>
 800abbe:	2400      	movs	r4, #0
 800abc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abc4:	4628      	mov	r0, r5
 800abc6:	4798      	blx	r3
 800abc8:	2000      	movs	r0, #0
 800abca:	e7e0      	b.n	800ab8e <_raise_r+0x12>

0800abcc <raise>:
 800abcc:	4b02      	ldr	r3, [pc, #8]	; (800abd8 <raise+0xc>)
 800abce:	4601      	mov	r1, r0
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	f7ff bfd3 	b.w	800ab7c <_raise_r>
 800abd6:	bf00      	nop
 800abd8:	2000000c 	.word	0x2000000c

0800abdc <_kill_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	4d07      	ldr	r5, [pc, #28]	; (800abfc <_kill_r+0x20>)
 800abe0:	2300      	movs	r3, #0
 800abe2:	4604      	mov	r4, r0
 800abe4:	4608      	mov	r0, r1
 800abe6:	4611      	mov	r1, r2
 800abe8:	602b      	str	r3, [r5, #0]
 800abea:	f7f7 fa4b 	bl	8002084 <_kill>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d102      	bne.n	800abf8 <_kill_r+0x1c>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	b103      	cbz	r3, 800abf8 <_kill_r+0x1c>
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	bd38      	pop	{r3, r4, r5, pc}
 800abfa:	bf00      	nop
 800abfc:	200004e8 	.word	0x200004e8

0800ac00 <_getpid_r>:
 800ac00:	f7f7 ba38 	b.w	8002074 <_getpid>

0800ac04 <__sread>:
 800ac04:	b510      	push	{r4, lr}
 800ac06:	460c      	mov	r4, r1
 800ac08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0c:	f000 f894 	bl	800ad38 <_read_r>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	bfab      	itete	ge
 800ac14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac16:	89a3      	ldrhlt	r3, [r4, #12]
 800ac18:	181b      	addge	r3, r3, r0
 800ac1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac1e:	bfac      	ite	ge
 800ac20:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac22:	81a3      	strhlt	r3, [r4, #12]
 800ac24:	bd10      	pop	{r4, pc}

0800ac26 <__swrite>:
 800ac26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2a:	461f      	mov	r7, r3
 800ac2c:	898b      	ldrh	r3, [r1, #12]
 800ac2e:	05db      	lsls	r3, r3, #23
 800ac30:	4605      	mov	r5, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	4616      	mov	r6, r2
 800ac36:	d505      	bpl.n	800ac44 <__swrite+0x1e>
 800ac38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f000 f868 	bl	800ad14 <_lseek_r>
 800ac44:	89a3      	ldrh	r3, [r4, #12]
 800ac46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac4e:	81a3      	strh	r3, [r4, #12]
 800ac50:	4632      	mov	r2, r6
 800ac52:	463b      	mov	r3, r7
 800ac54:	4628      	mov	r0, r5
 800ac56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5a:	f000 b817 	b.w	800ac8c <_write_r>

0800ac5e <__sseek>:
 800ac5e:	b510      	push	{r4, lr}
 800ac60:	460c      	mov	r4, r1
 800ac62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac66:	f000 f855 	bl	800ad14 <_lseek_r>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	bf15      	itete	ne
 800ac70:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac7a:	81a3      	strheq	r3, [r4, #12]
 800ac7c:	bf18      	it	ne
 800ac7e:	81a3      	strhne	r3, [r4, #12]
 800ac80:	bd10      	pop	{r4, pc}

0800ac82 <__sclose>:
 800ac82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac86:	f000 b813 	b.w	800acb0 <_close_r>
	...

0800ac8c <_write_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4d07      	ldr	r5, [pc, #28]	; (800acac <_write_r+0x20>)
 800ac90:	4604      	mov	r4, r0
 800ac92:	4608      	mov	r0, r1
 800ac94:	4611      	mov	r1, r2
 800ac96:	2200      	movs	r2, #0
 800ac98:	602a      	str	r2, [r5, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f7f7 fa29 	bl	80020f2 <_write>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d102      	bne.n	800acaa <_write_r+0x1e>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	b103      	cbz	r3, 800acaa <_write_r+0x1e>
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	200004e8 	.word	0x200004e8

0800acb0 <_close_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4d06      	ldr	r5, [pc, #24]	; (800accc <_close_r+0x1c>)
 800acb4:	2300      	movs	r3, #0
 800acb6:	4604      	mov	r4, r0
 800acb8:	4608      	mov	r0, r1
 800acba:	602b      	str	r3, [r5, #0]
 800acbc:	f7f7 fa35 	bl	800212a <_close>
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	d102      	bne.n	800acca <_close_r+0x1a>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	b103      	cbz	r3, 800acca <_close_r+0x1a>
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	bd38      	pop	{r3, r4, r5, pc}
 800accc:	200004e8 	.word	0x200004e8

0800acd0 <_fstat_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d07      	ldr	r5, [pc, #28]	; (800acf0 <_fstat_r+0x20>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	4611      	mov	r1, r2
 800acdc:	602b      	str	r3, [r5, #0]
 800acde:	f7f7 fa30 	bl	8002142 <_fstat>
 800ace2:	1c43      	adds	r3, r0, #1
 800ace4:	d102      	bne.n	800acec <_fstat_r+0x1c>
 800ace6:	682b      	ldr	r3, [r5, #0]
 800ace8:	b103      	cbz	r3, 800acec <_fstat_r+0x1c>
 800acea:	6023      	str	r3, [r4, #0]
 800acec:	bd38      	pop	{r3, r4, r5, pc}
 800acee:	bf00      	nop
 800acf0:	200004e8 	.word	0x200004e8

0800acf4 <_isatty_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4d06      	ldr	r5, [pc, #24]	; (800ad10 <_isatty_r+0x1c>)
 800acf8:	2300      	movs	r3, #0
 800acfa:	4604      	mov	r4, r0
 800acfc:	4608      	mov	r0, r1
 800acfe:	602b      	str	r3, [r5, #0]
 800ad00:	f7f7 fa2f 	bl	8002162 <_isatty>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_isatty_r+0x1a>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_isatty_r+0x1a>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	200004e8 	.word	0x200004e8

0800ad14 <_lseek_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	; (800ad34 <_lseek_r+0x20>)
 800ad18:	4604      	mov	r4, r0
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	602a      	str	r2, [r5, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f7f7 fa28 	bl	8002178 <_lseek>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_lseek_r+0x1e>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_lseek_r+0x1e>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	200004e8 	.word	0x200004e8

0800ad38 <_read_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4d07      	ldr	r5, [pc, #28]	; (800ad58 <_read_r+0x20>)
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	4608      	mov	r0, r1
 800ad40:	4611      	mov	r1, r2
 800ad42:	2200      	movs	r2, #0
 800ad44:	602a      	str	r2, [r5, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	f7f7 f9b6 	bl	80020b8 <_read>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_read_r+0x1e>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_read_r+0x1e>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	200004e8 	.word	0x200004e8

0800ad5c <_init>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	bf00      	nop
 800ad60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad62:	bc08      	pop	{r3}
 800ad64:	469e      	mov	lr, r3
 800ad66:	4770      	bx	lr

0800ad68 <_fini>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	bf00      	nop
 800ad6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6e:	bc08      	pop	{r3}
 800ad70:	469e      	mov	lr, r3
 800ad72:	4770      	bx	lr
