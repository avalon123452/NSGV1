
NSGV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800bfb8  0800bfb8  0001bfb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c514  0800c514  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c514  0800c514  0001c514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c51c  0800c51c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c51c  0800c51c  0001c51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c520  0800c520  0001c520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000034c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000528  20000528  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a534  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034be  00000000  00000000  0003a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  0003dc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001660  00000000  00000000  0003f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024452  00000000  00000000  00040a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0d2  00000000  00000000  00064e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d687b  00000000  00000000  00080f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015779f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000767c  00000000  00000000  001577f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf9c 	.word	0x0800bf9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800bf9c 	.word	0x0800bf9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);


int main(void)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b0c0      	sub	sp, #256	; 0x100
 8000ef0:	af02      	add	r7, sp, #8
	MAX6675_t thermosen;
	INA219_t ina1, ina2;
	AD7193_t volsen1,volsen2,volsen3;
	uint32_t volid1, volid2, volid3, TxMailbox, vmon=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint16_t vbus=0, vshunt=0, current=0, thermoval=0, year=0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	uint8_t mem=0, open=0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	char msg[100];
	CAN_TxHeaderTypeDef TxHeader={0};
 8000f22:	f107 0318 	add.w	r3, r7, #24
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	615a      	str	r2, [r3, #20]
	TxHeader.DLC = 5;
 8000f34:	2305      	movs	r3, #5
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.StdId = 0x6A4;
 8000f38:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8000f3c:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE   = CAN_ID_STD;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t PIN_LED = PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED;
 8000f46:	231e      	movs	r3, #30
 8000f48:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	float freq[3]={0}, duty_cycle[3]={0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f62:	f002 f869 	bl	8003038 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000f66:	f000 fbbd 	bl	80016e4 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f6a:	f000 fead 	bl	8001cc8 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000f6e:	f000 fdbd 	bl	8001aec <MX_CAN1_Init>
	MX_SPI1_Init();
 8000f72:	f000 fe1f 	bl	8001bb4 <MX_SPI1_Init>
	MX_ADC1_Init();
 8000f76:	f000 fd67 	bl	8001a48 <MX_ADC1_Init>
	MX_I2C2_Init();
 8000f7a:	f000 fded 	bl	8001b58 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000f7e:	f000 fe4f 	bl	8001c20 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000f82:	f000 fe77 	bl	8001c74 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000f86:	f000 fc1d 	bl	80017c4 <MX_TIM2_Init>
	MX_TIM5_Init();
 8000f8a:	f000 fc85 	bl	8001898 <MX_TIM5_Init>
	MX_TIM9_Init();
 8000f8e:	f000 fcef 	bl	8001970 <MX_TIM9_Init>
	DS3231_Init(&hi2c2);
 8000f92:	485c      	ldr	r0, [pc, #368]	; (8001104 <main+0x218>)
 8000f94:	f001 fdcc 	bl	8002b30 <DS3231_Init>
	DS3231_SetFullTime(15, 25, 30);
 8000f98:	221e      	movs	r2, #30
 8000f9a:	2119      	movs	r1, #25
 8000f9c:	200f      	movs	r0, #15
 8000f9e:	f001 ff9a 	bl	8002ed6 <DS3231_SetFullTime>
	DS3231_SetFullDate(29, 9, 4, 2022);
 8000fa2:	f240 73e6 	movw	r3, #2022	; 0x7e6
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	2109      	movs	r1, #9
 8000faa:	201d      	movs	r0, #29
 8000fac:	f001 ffac 	bl	8002f08 <DS3231_SetFullDate>
	CAN_Filter_Config();
 8000fb0:	f000 fb72 	bl	8001698 <CAN_Filter_Config>
	while(!INA219_Init(&ina1, &hi2c2, INA219_ADDRESS));
 8000fb4:	bf00      	nop
 8000fb6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000fba:	2240      	movs	r2, #64	; 0x40
 8000fbc:	4951      	ldr	r1, [pc, #324]	; (8001104 <main+0x218>)
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fd1a 	bl	80029f8 <INA219_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f5      	beq.n	8000fb6 <main+0xca>
	while(!INA219_Init(&ina2, &hi2c2, INA219_ADDRESS+1));
 8000fca:	bf00      	nop
 8000fcc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000fd0:	2241      	movs	r2, #65	; 0x41
 8000fd2:	494c      	ldr	r1, [pc, #304]	; (8001104 <main+0x218>)
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fd0f 	bl	80029f8 <INA219_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f5      	beq.n	8000fcc <main+0xe0>
	M24C32_Init(&hi2c2);
 8000fe0:	4848      	ldr	r0, [pc, #288]	; (8001104 <main+0x218>)
 8000fe2:	f001 ffef 	bl	8002fc4 <M24C32_Init>
	AD7193_Init(&volsen1, &hspi1, GPIOC, PINC_SPI_SSA);
 8000fe6:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8000fea:	2320      	movs	r3, #32
 8000fec:	4a46      	ldr	r2, [pc, #280]	; (8001108 <main+0x21c>)
 8000fee:	4947      	ldr	r1, [pc, #284]	; (800110c <main+0x220>)
 8000ff0:	f001 fb41 	bl	8002676 <AD7193_Init>
	AD7193_Init(&volsen2, &hspi1, GPIOC, PINC_SPI_SSB);
 8000ff4:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8000ff8:	2340      	movs	r3, #64	; 0x40
 8000ffa:	4a43      	ldr	r2, [pc, #268]	; (8001108 <main+0x21c>)
 8000ffc:	4943      	ldr	r1, [pc, #268]	; (800110c <main+0x220>)
 8000ffe:	f001 fb3a 	bl	8002676 <AD7193_Init>
	AD7193_Init(&volsen3, &hspi1, GPIOC, PINC_SPI_SSV);
 8001002:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	4a3f      	ldr	r2, [pc, #252]	; (8001108 <main+0x21c>)
 800100a:	4940      	ldr	r1, [pc, #256]	; (800110c <main+0x220>)
 800100c:	f001 fb33 	bl	8002676 <AD7193_Init>

	MAX6675_Init(&thermosen, &hspi1, GPIOC, PINC_SPI_SST);
 8001010:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001018:	4a3b      	ldr	r2, [pc, #236]	; (8001108 <main+0x21c>)
 800101a:	493c      	ldr	r1, [pc, #240]	; (800110c <main+0x220>)
 800101c:	f001 fd1e 	bl	8002a5c <MAX6675_Init>

	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8001020:	2100      	movs	r1, #0
 8001022:	483b      	ldr	r0, [pc, #236]	; (8001110 <main+0x224>)
 8001024:	f006 fe4c 	bl	8007cc0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 8001028:	2104      	movs	r1, #4
 800102a:	4839      	ldr	r0, [pc, #228]	; (8001110 <main+0x224>)
 800102c:	f006 fe48 	bl	8007cc0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_1);
 8001030:	2100      	movs	r1, #0
 8001032:	4838      	ldr	r0, [pc, #224]	; (8001114 <main+0x228>)
 8001034:	f006 fe44 	bl	8007cc0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_2);
 8001038:	2104      	movs	r1, #4
 800103a:	4836      	ldr	r0, [pc, #216]	; (8001114 <main+0x228>)
 800103c:	f006 fe40 	bl	8007cc0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim9,TIM_CHANNEL_1);
 8001040:	2100      	movs	r1, #0
 8001042:	4835      	ldr	r0, [pc, #212]	; (8001118 <main+0x22c>)
 8001044:	f006 fe3c 	bl	8007cc0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim9,TIM_CHANNEL_2);
 8001048:	2104      	movs	r1, #4
 800104a:	4833      	ldr	r0, [pc, #204]	; (8001118 <main+0x22c>)
 800104c:	f006 fe38 	bl	8007cc0 <HAL_TIM_IC_Start_IT>

	HAL_ADC_Start_IT(&hadc1);
 8001050:	4832      	ldr	r0, [pc, #200]	; (800111c <main+0x230>)
 8001052:	f002 f8cb 	bl	80031ec <HAL_ADC_Start_IT>

	uart= huart1;
 8001056:	4a32      	ldr	r2, [pc, #200]	; (8001120 <main+0x234>)
 8001058:	4b32      	ldr	r3, [pc, #200]	; (8001124 <main+0x238>)
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	2344      	movs	r3, #68	; 0x44
 8001060:	461a      	mov	r2, r3
 8001062:	f008 f8af 	bl	80091c4 <memcpy>

//	M24C32_WriteByte(0x0001, 69);
//	HAL_Delay(1000);
	mem=M24C32_ReadRandomAddr(0x0001);
 8001066:	2001      	movs	r0, #1
 8001068:	f001 ffbc 	bl	8002fe4 <M24C32_ReadRandomAddr>
 800106c:	4603      	mov	r3, r0
 800106e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
//	}

	while (1)
	{
//		LED Toggle
		if (beat==1)
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <main+0x23c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d10f      	bne.n	800109a <main+0x1ae>
		{
			beat=0;
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <main+0x23c>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC,PINC_HEART|PIN_LED);
 8001080:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8001084:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001088:	b29b      	uxth	r3, r3
 800108a:	4619      	mov	r1, r3
 800108c:	481e      	ldr	r0, [pc, #120]	; (8001108 <main+0x21c>)
 800108e:	f003 fcec 	bl	8004a6a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, PINB_EN);
 8001092:	2101      	movs	r1, #1
 8001094:	4825      	ldr	r0, [pc, #148]	; (800112c <main+0x240>)
 8001096:	f003 fce8 	bl	8004a6a <HAL_GPIO_TogglePin>
		}

//		GPIO Input
		memset(msg,0,sizeof(msg));
 800109a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800109e:	2264      	movs	r2, #100	; 0x64
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f008 f89c 	bl	80091e0 <memset>
		sprintf(msg,"Switch Input: %d",HAL_GPIO_ReadPin(GPIOC, PINC_SWITCH));
 80010a8:	2101      	movs	r1, #1
 80010aa:	4817      	ldr	r0, [pc, #92]	; (8001108 <main+0x21c>)
 80010ac:	f003 fcac 	bl	8004a08 <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b8:	491d      	ldr	r1, [pc, #116]	; (8001130 <main+0x244>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f008 fdf2 	bl	8009ca4 <siprintf>
		dmsg(msg);
 80010c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fab5 	bl	8001634 <dmsg>
		memset(msg,0,sizeof(msg));
 80010ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ce:	2264      	movs	r2, #100	; 0x64
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f008 f884 	bl	80091e0 <memset>
		sprintf(msg,"State Input: %d",HAL_GPIO_ReadPin(GPIOB, PINB_STATE));
 80010d8:	2102      	movs	r1, #2
 80010da:	4814      	ldr	r0, [pc, #80]	; (800112c <main+0x240>)
 80010dc:	f003 fc94 	bl	8004a08 <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	4912      	ldr	r1, [pc, #72]	; (8001134 <main+0x248>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f008 fdda 	bl	8009ca4 <siprintf>
		dmsg(msg);
 80010f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fa9d 	bl	8001634 <dmsg>

//		Pulse Input
		for (int i=0; i<3; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001100:	e089      	b.n	8001216 <main+0x32a>
 8001102:	bf00      	nop
 8001104:	20000268 	.word	0x20000268
 8001108:	40020800 	.word	0x40020800
 800110c:	200002bc 	.word	0x200002bc
 8001110:	2000039c 	.word	0x2000039c
 8001114:	200003e4 	.word	0x200003e4
 8001118:	2000042c 	.word	0x2000042c
 800111c:	200001f8 	.word	0x200001f8
 8001120:	20000498 	.word	0x20000498
 8001124:	20000314 	.word	0x20000314
 8001128:	20000493 	.word	0x20000493
 800112c:	40020400 	.word	0x40020400
 8001130:	0800bfb8 	.word	0x0800bfb8
 8001134:	0800bfcc 	.word	0x0800bfcc
		{
			if (freq_update[i]==1)
 8001138:	4ac5      	ldr	r2, [pc, #788]	; (8001450 <main+0x564>)
 800113a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d135      	bne.n	80011b2 <main+0x2c6>
			{
				freq[i]= 1000000/tim_capture[i][0];
 8001146:	4ac3      	ldr	r2, [pc, #780]	; (8001454 <main+0x568>)
 8001148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800114c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001150:	4ac1      	ldr	r2, [pc, #772]	; (8001458 <main+0x56c>)
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	33f8      	adds	r3, #248	; 0xf8
 8001166:	443b      	add	r3, r7
 8001168:	3bec      	subs	r3, #236	; 0xec
 800116a:	edc3 7a00 	vstr	s15, [r3]
				duty_cycle[i]= (tim_capture[i][1]/tim_capture[i][0])*100;
 800116e:	4ab9      	ldr	r2, [pc, #740]	; (8001454 <main+0x568>)
 8001170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	49b6      	ldr	r1, [pc, #728]	; (8001454 <main+0x568>)
 800117c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001180:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001184:	fbb2 f3f3 	udiv	r3, r2, r3
 8001188:	2264      	movs	r2, #100	; 0x64
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	33f8      	adds	r3, #248	; 0xf8
 800119e:	443b      	add	r3, r7
 80011a0:	3bf8      	subs	r3, #248	; 0xf8
 80011a2:	edc3 7a00 	vstr	s15, [r3]
				freq_update[i]=0;
 80011a6:	4aaa      	ldr	r2, [pc, #680]	; (8001450 <main+0x564>)
 80011a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011ac:	4413      	add	r3, r2
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
			}
			memset(msg,0,sizeof(msg));
 80011b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b6:	2264      	movs	r2, #100	; 0x64
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f008 f810 	bl	80091e0 <memset>
			sprintf(msg,"Frequency3: %.2f   Duty Cycle: %.2f", freq[i],duty_cycle[i]);
 80011c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	33f8      	adds	r3, #248	; 0xf8
 80011c8:	443b      	add	r3, r7
 80011ca:	3bec      	subs	r3, #236	; 0xec
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f9ba 	bl	8000548 <__aeabi_f2d>
 80011d4:	4604      	mov	r4, r0
 80011d6:	460d      	mov	r5, r1
 80011d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	33f8      	adds	r3, #248	; 0xf8
 80011e0:	443b      	add	r3, r7
 80011e2:	3bf8      	subs	r3, #248	; 0xf8
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f9ae 	bl	8000548 <__aeabi_f2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80011f4:	e9cd 2300 	strd	r2, r3, [sp]
 80011f8:	4622      	mov	r2, r4
 80011fa:	462b      	mov	r3, r5
 80011fc:	4997      	ldr	r1, [pc, #604]	; (800145c <main+0x570>)
 80011fe:	f008 fd51 	bl	8009ca4 <siprintf>
			dmsg(msg);
 8001202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fa14 	bl	8001634 <dmsg>
		for (int i=0; i<3; i++)
 800120c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001210:	3301      	adds	r3, #1
 8001212:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800121a:	2b02      	cmp	r3, #2
 800121c:	dd8c      	ble.n	8001138 <main+0x24c>
		}

//		Voltage Monitor
		if (adc_update==1)
 800121e:	4b90      	ldr	r3, [pc, #576]	; (8001460 <main+0x574>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d118      	bne.n	8001258 <main+0x36c>
		{
			vmon=HAL_ADC_GetValue(&hadc1);
 8001226:	488f      	ldr	r0, [pc, #572]	; (8001464 <main+0x578>)
 8001228:	f002 f9ce 	bl	80035c8 <HAL_ADC_GetValue>
 800122c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			memset(msg,0,sizeof(msg));
 8001230:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001234:	2264      	movs	r2, #100	; 0x64
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f007 ffd1 	bl	80091e0 <memset>
			sprintf(msg,"Voltage Monitor: %ld", vmon);
 800123e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001242:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001246:	4988      	ldr	r1, [pc, #544]	; (8001468 <main+0x57c>)
 8001248:	4618      	mov	r0, r3
 800124a:	f008 fd2b 	bl	8009ca4 <siprintf>
			dmsg(msg);
 800124e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f9ee 	bl	8001634 <dmsg>
		}
//		RTC
		year= DS3231_GetYear();
 8001258:	f001 fd55 	bl	8002d06 <DS3231_GetYear>
 800125c:	4603      	mov	r3, r0
 800125e:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
		memset(msg,0,sizeof(msg));
 8001262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001266:	2264      	movs	r2, #100	; 0x64
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f007 ffb8 	bl	80091e0 <memset>
		sprintf(msg,"RTC Year: %d", year);
 8001270:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 8001274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001278:	497c      	ldr	r1, [pc, #496]	; (800146c <main+0x580>)
 800127a:	4618      	mov	r0, r3
 800127c:	f008 fd12 	bl	8009ca4 <siprintf>
		dmsg(msg);
 8001280:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f9d5 	bl	8001634 <dmsg>
////		CAN RX
//		memset(msg,0,sizeof(msg));
//		sprintf(msg,"Message Received : #%x",can_msg[0]);
//		dmsg(msg);
//		Current Monitor
		vbus = INA219_ReadBusVoltage(&ina1);
 800128a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800128e:	4618      	mov	r0, r3
 8001290:	f001 faf8 	bl	8002884 <INA219_ReadBusVoltage>
 8001294:	4603      	mov	r3, r0
 8001296:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
		vshunt = INA219_ReadShuntVolage(&ina1);
 800129a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fb2e 	bl	8002900 <INA219_ReadShuntVolage>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
		current = INA219_ReadCurrent(&ina1);
 80012aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 fb0c 	bl	80028cc <INA219_ReadCurrent>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
		memset(msg,0,sizeof(msg));
 80012ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012be:	2264      	movs	r2, #100	; 0x64
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f007 ff8c 	bl	80091e0 <memset>
		sprintf(msg,"Bus Voltage1: %d  Voltage1: %d  Current1: %d", vbus, vshunt, current);
 80012c8:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 80012cc:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 80012d0:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 80012d4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	460b      	mov	r3, r1
 80012dc:	4964      	ldr	r1, [pc, #400]	; (8001470 <main+0x584>)
 80012de:	f008 fce1 	bl	8009ca4 <siprintf>
		dmsg(msg);
 80012e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f9a4 	bl	8001634 <dmsg>
		vbus = INA219_ReadBusVoltage(&ina2);
 80012ec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fac7 	bl	8002884 <INA219_ReadBusVoltage>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
		vshunt = INA219_ReadShuntVolage(&ina2);
 80012fc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fafd 	bl	8002900 <INA219_ReadShuntVolage>
 8001306:	4603      	mov	r3, r0
 8001308:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
		current = INA219_ReadCurrent(&ina2);
 800130c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001310:	4618      	mov	r0, r3
 8001312:	f001 fadb 	bl	80028cc <INA219_ReadCurrent>
 8001316:	4603      	mov	r3, r0
 8001318:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
		memset(msg,0,sizeof(msg));
 800131c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001320:	2264      	movs	r2, #100	; 0x64
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f007 ff5b 	bl	80091e0 <memset>
		sprintf(msg,"Bus Voltage2: %d  Voltage2: %d  Current2: %d", vbus, vshunt, current);
 800132a:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 800132e:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 8001332:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8001336:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	460b      	mov	r3, r1
 800133e:	494d      	ldr	r1, [pc, #308]	; (8001474 <main+0x588>)
 8001340:	f008 fcb0 	bl	8009ca4 <siprintf>
		dmsg(msg);
 8001344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f973 	bl	8001634 <dmsg>
//		EEPROM
		memset(msg,0,sizeof(msg));
 800134e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001352:	2264      	movs	r2, #100	; 0x64
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f007 ff42 	bl	80091e0 <memset>
		sprintf(msg,"Memory 0x1:  %d  ", mem);
 800135c:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8001360:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001364:	4944      	ldr	r1, [pc, #272]	; (8001478 <main+0x58c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f008 fc9c 	bl	8009ca4 <siprintf>
		dmsg(msg);
 800136c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f95f 	bl	8001634 <dmsg>
//		AD7193
		AD7193_Reset(&volsen1);
 8001376:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800137a:	4618      	mov	r0, r3
 800137c:	f001 f991 	bl	80026a2 <AD7193_Reset>
		volid1= AD7193_GetRegValue(&volsen1,1, 3);
 8001380:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001384:	2203      	movs	r2, #3
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f001 f9b9 	bl	8002700 <AD7193_GetRegValue>
 800138e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		AD7193_Reset(&volsen2);
 8001392:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001396:	4618      	mov	r0, r3
 8001398:	f001 f983 	bl	80026a2 <AD7193_Reset>
		volid2= AD7193_GetRegValue(&volsen2,1, 3);
 800139c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013a0:	2203      	movs	r2, #3
 80013a2:	2101      	movs	r1, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 f9ab 	bl	8002700 <AD7193_GetRegValue>
 80013aa:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		AD7193_Reset(&volsen3);
 80013ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 f975 	bl	80026a2 <AD7193_Reset>
		volid3= AD7193_GetRegValue(&volsen3,1, 3);
 80013b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013bc:	2203      	movs	r2, #3
 80013be:	2101      	movs	r1, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 f99d 	bl	8002700 <AD7193_GetRegValue>
 80013c6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		memset(msg,0,sizeof(msg));
 80013ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ce:	2264      	movs	r2, #100	; 0x64
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f007 ff04 	bl	80091e0 <memset>
		sprintf(msg,"AD7193:  #%lx  #%lx  #%lx", volid1, volid2, volid3);
 80013d8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80013dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80013e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80013ea:	4924      	ldr	r1, [pc, #144]	; (800147c <main+0x590>)
 80013ec:	f008 fc5a 	bl	8009ca4 <siprintf>
		dmsg(msg);
 80013f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f91d 	bl	8001634 <dmsg>
//		MAX6675
		thermoval = MAX6675_getReg(&thermosen);
 80013fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fb42 	bl	8002a88 <MAX6675_getReg>
 8001404:	4603      	mov	r3, r0
 8001406:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
		open = MAX6675_isOpen(&thermosen);
 800140a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fb75 	bl	8002afe <MAX6675_isOpen>
 8001414:	4603      	mov	r3, r0
 8001416:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
		memset(msg,0,sizeof(msg));
 800141a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800141e:	2264      	movs	r2, #100	; 0x64
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f007 fedc 	bl	80091e0 <memset>
		sprintf(msg,"MAX6675:  #%x  %d", thermoval, open);
 8001428:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	; 0xe8
 800142c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001430:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001434:	4912      	ldr	r1, [pc, #72]	; (8001480 <main+0x594>)
 8001436:	f008 fc35 	bl	8009ca4 <siprintf>
		dmsg(msg);
 800143a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f8f8 	bl	8001634 <dmsg>
		HAL_Delay(1000);
 8001444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001448:	f001 fe68 	bl	800311c <HAL_Delay>
		if (beat==1)
 800144c:	e611      	b.n	8001072 <main+0x186>
 800144e:	bf00      	nop
 8001450:	20000490 	.word	0x20000490
 8001454:	20000478 	.word	0x20000478
 8001458:	000f4240 	.word	0x000f4240
 800145c:	0800bfdc 	.word	0x0800bfdc
 8001460:	20000494 	.word	0x20000494
 8001464:	200001f8 	.word	0x200001f8
 8001468:	0800c000 	.word	0x0800c000
 800146c:	0800c018 	.word	0x0800c018
 8001470:	0800c028 	.word	0x0800c028
 8001474:	0800c058 	.word	0x0800c058
 8001478:	0800c088 	.word	0x0800c088
 800147c:	0800c09c 	.word	0x0800c09c
 8001480:	0800c0b8 	.word	0x0800c0b8

08001484 <HAL_CAN_TxMailbox0CompleteCallback>:
	}
	return 0;
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	dmsg("CAN Transmitted Mailbox 0");
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 800148e:	f000 f8d1 	bl	8001634 <dmsg>

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	0800c0cc 	.word	0x0800c0cc

080014a0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	dmsg("CAN Transmitted Mailbox 1");
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 80014aa:	f000 f8c3 	bl	8001634 <dmsg>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	0800c0e8 	.word	0x0800c0e8

080014bc <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	dmsg("CAN Transmitted Mailbox 2");
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 80014c6:	f000 f8b5 	bl	8001634 <dmsg>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	0800c104 	.word	0x0800c104

080014d8 <HAL_CAN_RxFifo0MsgPendingCallback>:

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,can_msg) != HAL_OK)
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f002 fc94 	bl	8003e14 <HAL_CAN_GetRxMessage>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80014f2:	f000 fc7b 	bl	8001dec <Error_Handler>
	}
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200004f8 	.word	0x200004f8
 8001504:	200004dc 	.word	0x200004dc

08001508 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	adc_update=1;
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000494 	.word	0x20000494

08001528 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001538:	d119      	bne.n	800156e <HAL_TIM_IC_CaptureCallback+0x46>
	{
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7f1b      	ldrb	r3, [r3, #28]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d152      	bne.n	80015e8 <HAL_TIM_IC_CaptureCallback+0xc0>
		{
			tim_capture[2][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001542:	2100      	movs	r1, #0
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f006 fec9 	bl	80082dc <HAL_TIM_ReadCapturedValue>
 800154a:	4603      	mov	r3, r0
 800154c:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800154e:	6113      	str	r3, [r2, #16]
			if (tim_capture[2][0]!= 0)
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d047      	beq.n	80015e8 <HAL_TIM_IC_CaptureCallback+0xc0>
			{
				tim_capture[2][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001558:	2104      	movs	r1, #4
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f006 febe 	bl	80082dc <HAL_TIM_ReadCapturedValue>
 8001560:	4603      	mov	r3, r0
 8001562:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001564:	6153      	str	r3, [r2, #20]
				freq_update[2]=1;
 8001566:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001568:	2201      	movs	r2, #1
 800156a:	709a      	strb	r2, [r3, #2]
				tim_capture[0][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
				freq_update[0]=1;
			}
		}
	}
}
 800156c:	e03c      	b.n	80015e8 <HAL_TIM_IC_CaptureCallback+0xc0>
	else if(htim->Instance==TIM5)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d119      	bne.n	80015ac <HAL_TIM_IC_CaptureCallback+0x84>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7f1b      	ldrb	r3, [r3, #28]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d133      	bne.n	80015e8 <HAL_TIM_IC_CaptureCallback+0xc0>
			tim_capture[1][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001580:	2104      	movs	r1, #4
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f006 feaa 	bl	80082dc <HAL_TIM_ReadCapturedValue>
 8001588:	4603      	mov	r3, r0
 800158a:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800158c:	6093      	str	r3, [r2, #8]
			if (tim_capture[1][0]!= 0)
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d028      	beq.n	80015e8 <HAL_TIM_IC_CaptureCallback+0xc0>
				tim_capture[1][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001596:	2100      	movs	r1, #0
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f006 fe9f 	bl	80082dc <HAL_TIM_ReadCapturedValue>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80015a2:	60d3      	str	r3, [r2, #12]
				freq_update[1]=1;
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	705a      	strb	r2, [r3, #1]
}
 80015aa:	e01d      	b.n	80015e8 <HAL_TIM_IC_CaptureCallback+0xc0>
	else if(htim->Instance==TIM9)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <HAL_TIM_IC_CaptureCallback+0xd4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d118      	bne.n	80015e8 <HAL_TIM_IC_CaptureCallback+0xc0>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7f1b      	ldrb	r3, [r3, #28]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d114      	bne.n	80015e8 <HAL_TIM_IC_CaptureCallback+0xc0>
			tim_capture[0][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80015be:	2100      	movs	r1, #0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f006 fe8b 	bl	80082dc <HAL_TIM_ReadCapturedValue>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80015ca:	6013      	str	r3, [r2, #0]
			if (tim_capture[0][0]!= 0)
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d009      	beq.n	80015e8 <HAL_TIM_IC_CaptureCallback+0xc0>
				tim_capture[0][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80015d4:	2104      	movs	r1, #4
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f006 fe80 	bl	80082dc <HAL_TIM_ReadCapturedValue>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80015e0:	6053      	str	r3, [r2, #4]
				freq_update[0]=1;
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000478 	.word	0x20000478
 80015f4:	20000490 	.word	0x20000490
 80015f8:	40000c00 	.word	0x40000c00
 80015fc:	40014000 	.word	0x40014000

08001600 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	if (HAL_GetTick()- tick >=1000)
 8001604:	f001 fd7e 	bl	8003104 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_SYSTICK_Callback+0x2c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001614:	d307      	bcc.n	8001626 <HAL_SYSTICK_Callback+0x26>
	{
		tick = HAL_GetTick();
 8001616:	f001 fd75 	bl	8003104 <HAL_GetTick>
 800161a:	4603      	mov	r3, r0
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <HAL_SYSTICK_Callback+0x2c>)
 800161e:	6013      	str	r3, [r2, #0]
		beat=1;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_SYSTICK_Callback+0x30>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
	}
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000474 	.word	0x20000474
 8001630:	20000493 	.word	0x20000493

08001634 <dmsg>:

void dmsg(char *msg)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	char *str = malloc(strlen(msg) + 3);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7fe fdc7 	bl	80001d0 <strlen>
 8001642:	4603      	mov	r3, r0
 8001644:	3303      	adds	r3, #3
 8001646:	4618      	mov	r0, r3
 8001648:	f007 fdb4 	bl	80091b4 <malloc>
 800164c:	4603      	mov	r3, r0
 800164e:	60fb      	str	r3, [r7, #12]
	strcpy(str, msg);
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f008 fb46 	bl	8009ce4 <strcpy>
	strcat(str, "\r\n");
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7fe fdb9 	bl	80001d0 <strlen>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4413      	add	r3, r2
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <dmsg+0x5c>)
 8001668:	8811      	ldrh	r1, [r2, #0]
 800166a:	7892      	ldrb	r2, [r2, #2]
 800166c:	8019      	strh	r1, [r3, #0]
 800166e:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7fe fdad 	bl	80001d0 <strlen>
 8001676:	4603      	mov	r3, r0
 8001678:	b29a      	uxth	r2, r3
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	68f9      	ldr	r1, [r7, #12]
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <dmsg+0x60>)
 8001682:	f007 f9f8 	bl	8008a76 <HAL_UART_Transmit>
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	0800c120 	.word	0x0800c120
 8001694:	20000498 	.word	0x20000498

08001698 <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank  = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0X0000;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80016be:	2301      	movs	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 80016c2:	463b      	mov	r3, r7
 80016c4:	4619      	mov	r1, r3
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <CAN_Filter_Config+0x48>)
 80016c8:	f002 fac4 	bl	8003c54 <HAL_CAN_ConfigFilter>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 80016d2:	f000 fb8b 	bl	8001dec <Error_Handler>
	}

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000240 	.word	0x20000240

080016e4 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b094      	sub	sp, #80	; 0x50
 80016e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	2230      	movs	r2, #48	; 0x30
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f007 fd74 	bl	80091e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <SystemClock_Config+0xd4>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <SystemClock_Config+0xd4>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	6413      	str	r3, [r2, #64]	; 0x40
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <SystemClock_Config+0xd4>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <SystemClock_Config+0xd8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a23      	ldr	r2, [pc, #140]	; (80017bc <SystemClock_Config+0xd8>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <SystemClock_Config+0xd8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001740:	2301      	movs	r3, #1
 8001742:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174a:	2302      	movs	r3, #2
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001754:	2308      	movs	r3, #8
 8001756:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 320;
 8001758:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800175c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800175e:	2302      	movs	r3, #2
 8001760:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001762:	2304      	movs	r3, #4
 8001764:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	4618      	mov	r0, r3
 800176c:	f004 fefa 	bl	8006564 <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001776:	f000 fb39 	bl	8001dec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2302      	movs	r3, #2
 8001780:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800178a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001790:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	2105      	movs	r1, #5
 8001798:	4618      	mov	r0, r3
 800179a:	f005 f95b 	bl	8006a54 <HAL_RCC_ClockConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80017a4:	f000 fb22 	bl	8001dec <Error_Handler>
	}
	__HAL_RCC_HSI_DISABLE();
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SystemClock_Config+0xdc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	3750      	adds	r7, #80	; 0x50
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40007000 	.word	0x40007000
 80017c0:	42470000 	.word	0x42470000

080017c4 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]

	htim2.Instance = TIM2;
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <MX_TIM2_Init+0xd0>)
 80017e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ec:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80;
 80017ee:	4b29      	ldr	r3, [pc, #164]	; (8001894 <MX_TIM2_Init+0xd0>)
 80017f0:	2250      	movs	r2, #80	; 0x50
 80017f2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <MX_TIM2_Init+0xd0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <MX_TIM2_Init+0xd0>)
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <MX_TIM2_Init+0xd0>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <MX_TIM2_Init+0xd0>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800180e:	4821      	ldr	r0, [pc, #132]	; (8001894 <MX_TIM2_Init+0xd0>)
 8001810:	f006 fa06 	bl	8007c20 <HAL_TIM_IC_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 800181a:	f000 fae7 	bl	8001dec <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800181e:	2304      	movs	r3, #4
 8001820:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001822:	2350      	movs	r3, #80	; 0x50
 8001824:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4816      	ldr	r0, [pc, #88]	; (8001894 <MX_TIM2_Init+0xd0>)
 800183a:	f006 fd0d 	bl	8008258 <HAL_TIM_SlaveConfigSynchro>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 8001844:	f000 fad2 	bl	8001dec <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800184c:	2301      	movs	r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	4619      	mov	r1, r3
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_TIM2_Init+0xd0>)
 8001860:	f006 fc5e 	bl	8008120 <HAL_TIM_IC_ConfigChannel>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM2_Init+0xaa>
	{
		Error_Handler();
 800186a:	f000 fabf 	bl	8001dec <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800186e:	2302      	movs	r3, #2
 8001870:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001872:	2302      	movs	r3, #2
 8001874:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2204      	movs	r2, #4
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_TIM2_Init+0xd0>)
 800187e:	f006 fc4f 	bl	8008120 <HAL_TIM_IC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM2_Init+0xc8>
	{
		Error_Handler();
 8001888:	f000 fab0 	bl	8001dec <Error_Handler>
	}
}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000039c 	.word	0x2000039c

08001898 <MX_TIM5_Init>:

static void MX_TIM5_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]

	htim5.Instance = TIM5;
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <MX_TIM5_Init+0xd0>)
 80018bc:	4a2b      	ldr	r2, [pc, #172]	; (800196c <MX_TIM5_Init+0xd4>)
 80018be:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 80;
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <MX_TIM5_Init+0xd0>)
 80018c2:	2250      	movs	r2, #80	; 0x50
 80018c4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <MX_TIM5_Init+0xd0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 0xFFFFFFFF;
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <MX_TIM5_Init+0xd0>)
 80018ce:	f04f 32ff 	mov.w	r2, #4294967295
 80018d2:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <MX_TIM5_Init+0xd0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <MX_TIM5_Init+0xd0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80018e0:	4821      	ldr	r0, [pc, #132]	; (8001968 <MX_TIM5_Init+0xd0>)
 80018e2:	f006 f99d 	bl	8007c20 <HAL_TIM_IC_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM5_Init+0x58>
	{
		Error_Handler();
 80018ec:	f000 fa7e 	bl	8001dec <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80018f0:	2304      	movs	r3, #4
 80018f2:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80018f4:	2360      	movs	r3, #96	; 0x60
 80018f6:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4817      	ldr	r0, [pc, #92]	; (8001968 <MX_TIM5_Init+0xd0>)
 800190c:	f006 fca4 	bl	8008258 <HAL_TIM_SlaveConfigSynchro>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM5_Init+0x82>
	{
		Error_Handler();
 8001916:	f000 fa69 	bl	8001dec <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800191a:	2302      	movs	r3, #2
 800191c:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800191e:	2302      	movs	r3, #2
 8001920:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_TIM5_Init+0xd0>)
 8001932:	f006 fbf5 	bl	8008120 <HAL_TIM_IC_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM5_Init+0xa8>
	{
		Error_Handler();
 800193c:	f000 fa56 	bl	8001dec <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001944:	2301      	movs	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2204      	movs	r2, #4
 800194c:	4619      	mov	r1, r3
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <MX_TIM5_Init+0xd0>)
 8001950:	f006 fbe6 	bl	8008120 <HAL_TIM_IC_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM5_Init+0xc6>
	{
		Error_Handler();
 800195a:	f000 fa47 	bl	8001dec <Error_Handler>
	}
}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200003e4 	.word	0x200003e4
 800196c:	40000c00 	.word	0x40000c00

08001970 <MX_TIM9_Init>:

static void MX_TIM9_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]

	htim9.Instance = TIM9;
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <MX_TIM9_Init+0xd0>)
 8001994:	4a2b      	ldr	r2, [pc, #172]	; (8001a44 <MX_TIM9_Init+0xd4>)
 8001996:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 160;
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <MX_TIM9_Init+0xd0>)
 800199a:	22a0      	movs	r2, #160	; 0xa0
 800199c:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <MX_TIM9_Init+0xd0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 0xFFFF;
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <MX_TIM9_Init+0xd0>)
 80019a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019aa:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <MX_TIM9_Init+0xd0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <MX_TIM9_Init+0xd0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80019b8:	4821      	ldr	r0, [pc, #132]	; (8001a40 <MX_TIM9_Init+0xd0>)
 80019ba:	f006 f931 	bl	8007c20 <HAL_TIM_IC_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM9_Init+0x58>
	{
		Error_Handler();
 80019c4:	f000 fa12 	bl	8001dec <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80019c8:	2304      	movs	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80019cc:	2350      	movs	r3, #80	; 0x50
 80019ce:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4817      	ldr	r0, [pc, #92]	; (8001a40 <MX_TIM9_Init+0xd0>)
 80019e4:	f006 fc38 	bl	8008258 <HAL_TIM_SlaveConfigSynchro>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM9_Init+0x82>
	{
		Error_Handler();
 80019ee:	f000 f9fd 	bl	8001dec <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019f6:	2301      	movs	r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	4619      	mov	r1, r3
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_TIM9_Init+0xd0>)
 8001a0a:	f006 fb89 	bl	8008120 <HAL_TIM_IC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM9_Init+0xa8>
	{
		Error_Handler();
 8001a14:	f000 f9ea 	bl	8001dec <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2204      	movs	r2, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_TIM9_Init+0xd0>)
 8001a28:	f006 fb7a 	bl	8008120 <HAL_TIM_IC_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM9_Init+0xc6>
	{
		Error_Handler();
 8001a32:	f000 f9db 	bl	8001dec <Error_Handler>
	}
}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000042c 	.word	0x2000042c
 8001a44:	40014000 	.word	0x40014000

08001a48 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a4e:	463b      	mov	r3, r7
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
	hadc1.Instance = ADC1;
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a5c:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <MX_ADC1_Init+0x9c>)
 8001a5e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <MX_ADC1_Init+0xa0>)
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aa6:	480e      	ldr	r0, [pc, #56]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001aa8:	f001 fb5c 	bl	8003164 <HAL_ADC_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8001ab2:	f000 f99b 	bl	8001dec <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_3;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001aba:	2301      	movs	r3, #1
 8001abc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <MX_ADC1_Init+0x98>)
 8001ac8:	f001 fda0 	bl	800360c <HAL_ADC_ConfigChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8001ad2:	f000 f98b 	bl	8001dec <Error_Handler>
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200001f8 	.word	0x200001f8
 8001ae4:	40012000 	.word	0x40012000
 8001ae8:	0f000001 	.word	0x0f000001

08001aec <MX_CAN1_Init>:

static void MX_CAN1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001af2:	4a18      	ldr	r2, [pc, #96]	; (8001b54 <MX_CAN1_Init+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 10;
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001af8:	220a      	movs	r2, #10
 8001afa:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001b0a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001b0e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001b12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b16:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <MX_CAN1_Init+0x64>)
 8001b3e:	f001 ff8d 	bl	8003a5c <HAL_CAN_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001b48:	f000 f950 	bl	8001dec <Error_Handler>
	}
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000240 	.word	0x20000240
 8001b54:	40006400 	.word	0x40006400

08001b58 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <MX_I2C2_Init+0x50>)
 8001b5e:	4a13      	ldr	r2, [pc, #76]	; (8001bac <MX_I2C2_Init+0x54>)
 8001b60:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_I2C2_Init+0x50>)
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <MX_I2C2_Init+0x58>)
 8001b66:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_I2C2_Init+0x50>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_I2C2_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_I2C2_Init+0x50>)
 8001b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b7a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <MX_I2C2_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_I2C2_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <MX_I2C2_Init+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_I2C2_Init+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b94:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <MX_I2C2_Init+0x50>)
 8001b96:	f002 ff83 	bl	8004aa0 <HAL_I2C_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001ba0:	f000 f924 	bl	8001dec <Error_Handler>
	}

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000268 	.word	0x20000268
 8001bac:	40005800 	.word	0x40005800
 8001bb0:	000186a0 	.word	0x000186a0

08001bb4 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bba:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <MX_SPI1_Init+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001be8:	2228      	movs	r2, #40	; 0x28
 8001bea:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001c00:	220a      	movs	r2, #10
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <MX_SPI1_Init+0x64>)
 8001c06:	f005 f945 	bl	8006e94 <HAL_SPI_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001c10:	f000 f8ec 	bl	8001dec <Error_Handler>
	}

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200002bc 	.word	0x200002bc
 8001c1c:	40013000 	.word	0x40013000

08001c20 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <MX_USART1_UART_Init+0x50>)
 8001c28:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c30:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c58:	f006 fec0 	bl	80089dc <HAL_UART_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001c62:	f000 f8c3 	bl	8001dec <Error_Handler>
	}

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000314 	.word	0x20000314
 8001c70:	40011000 	.word	0x40011000

08001c74 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_USART3_UART_Init+0x4c>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <MX_USART3_UART_Init+0x50>)
 8001c7c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <MX_USART3_UART_Init+0x4c>)
 8001c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c84:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_USART3_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_USART3_UART_Init+0x4c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <MX_USART3_UART_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_USART3_UART_Init+0x4c>)
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <MX_USART3_UART_Init+0x4c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_USART3_UART_Init+0x4c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_USART3_UART_Init+0x4c>)
 8001cac:	f006 fe96 	bl	80089dc <HAL_UART_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001cb6:	f000 f899 	bl	8001dec <Error_Handler>
	}

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000358 	.word	0x20000358
 8001cc4:	40004800 	.word	0x40004800

08001cc8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <MX_GPIO_Init+0x114>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a3d      	ldr	r2, [pc, #244]	; (8001ddc <MX_GPIO_Init+0x114>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <MX_GPIO_Init+0x114>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <MX_GPIO_Init+0x114>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a36      	ldr	r2, [pc, #216]	; (8001ddc <MX_GPIO_Init+0x114>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <MX_GPIO_Init+0x114>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <MX_GPIO_Init+0x114>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <MX_GPIO_Init+0x114>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <MX_GPIO_Init+0x114>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOC, PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED|PINC_CAN_STB|PINC_HEART, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f242 211e 	movw	r1, #8734	; 0x221e
 8001d38:	4829      	ldr	r0, [pc, #164]	; (8001de0 <MX_GPIO_Init+0x118>)
 8001d3a:	f002 fe7d 	bl	8004a38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, PINC_SPI_SSA|PINC_SPI_SSB|PINC_SPI_SSV|PINC_SPI_SST, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001d44:	4826      	ldr	r0, [pc, #152]	; (8001de0 <MX_GPIO_Init+0x118>)
 8001d46:	f002 fe77 	bl	8004a38 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED|PINC_CAN_STB|
 8001d4a:	f242 33fe 	movw	r3, #9214	; 0x23fe
 8001d4e:	60fb      	str	r3, [r7, #12]
					  PINC_HEART|PINC_SPI_SSA|PINC_SPI_SSB|PINC_SPI_SSV|PINC_SPI_SST;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	4619      	mov	r1, r3
 8001d62:	481f      	ldr	r0, [pc, #124]	; (8001de0 <MX_GPIO_Init+0x118>)
 8001d64:	f002 fcb4 	bl	80046d0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINC_SWITCH;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4819      	ldr	r0, [pc, #100]	; (8001de0 <MX_GPIO_Init+0x118>)
 8001d7c:	f002 fca8 	bl	80046d0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINA_IC_FREQ3|PINA_IC_FREQ2|PINA_IC_FREQ1;
 8001d80:	2307      	movs	r3, #7
 8001d82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d90:	2301      	movs	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4812      	ldr	r0, [pc, #72]	; (8001de4 <MX_GPIO_Init+0x11c>)
 8001d9c:	f002 fc98 	bl	80046d0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINB_EN;
 8001da0:	2301      	movs	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	4619      	mov	r1, r3
 8001db6:	480c      	ldr	r0, [pc, #48]	; (8001de8 <MX_GPIO_Init+0x120>)
 8001db8:	f002 fc8a 	bl	80046d0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINB_STATE;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <MX_GPIO_Init+0x120>)
 8001dd0:	f002 fc7e 	bl	80046d0 <HAL_GPIO_Init>

}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400

08001dec <Error_Handler>:

void Error_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df0:	b672      	cpsid	i
}
 8001df2:	bf00      	nop
	__disable_irq();
	while (1)
 8001df4:	e7fe      	b.n	8001df4 <Error_Handler+0x8>
	...

08001df8 <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001e36:	2005      	movs	r0, #5
 8001e38:	f002 fbe0 	bl	80045fc <HAL_NVIC_SetPriorityGrouping>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	; 0x38
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e68:	d134      	bne.n	8001ed4 <HAL_TIM_IC_MspInit+0x8c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	4b55      	ldr	r3, [pc, #340]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a54      	ldr	r2, [pc, #336]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b52      	ldr	r3, [pc, #328]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	4b4e      	ldr	r3, [pc, #312]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a4d      	ldr	r2, [pc, #308]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PINA_IC_FREQ3;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4842      	ldr	r0, [pc, #264]	; (8001fc8 <HAL_TIM_IC_MspInit+0x180>)
 8001ebe:	f002 fc07 	bl	80046d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	201c      	movs	r0, #28
 8001ec8:	f002 fba3 	bl	8004612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ecc:	201c      	movs	r0, #28
 8001ece:	f002 fbbc 	bl	800464a <HAL_NVIC_EnableIRQ>
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  }

}
 8001ed2:	e072      	b.n	8001fba <HAL_TIM_IC_MspInit+0x172>
  else if(htim_ic->Instance==TIM5)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a3c      	ldr	r2, [pc, #240]	; (8001fcc <HAL_TIM_IC_MspInit+0x184>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d134      	bne.n	8001f48 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a37      	ldr	r2, [pc, #220]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a30      	ldr	r2, [pc, #192]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PINA_IC_FREQ2;
 8001f16:	2302      	movs	r3, #2
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f26:	2302      	movs	r3, #2
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4825      	ldr	r0, [pc, #148]	; (8001fc8 <HAL_TIM_IC_MspInit+0x180>)
 8001f32:	f002 fbcd 	bl	80046d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2103      	movs	r1, #3
 8001f3a:	2032      	movs	r0, #50	; 0x32
 8001f3c:	f002 fb69 	bl	8004612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f40:	2032      	movs	r0, #50	; 0x32
 8001f42:	f002 fb82 	bl	800464a <HAL_NVIC_EnableIRQ>
}
 8001f46:	e038      	b.n	8001fba <HAL_TIM_IC_MspInit+0x172>
  else if(htim_ic->Instance==TIM9)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a20      	ldr	r2, [pc, #128]	; (8001fd0 <HAL_TIM_IC_MspInit+0x188>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d133      	bne.n	8001fba <HAL_TIM_IC_MspInit+0x172>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_TIM_IC_MspInit+0x17c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINA_IC_FREQ1;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4808      	ldr	r0, [pc, #32]	; (8001fc8 <HAL_TIM_IC_MspInit+0x180>)
 8001fa6:	f002 fb93 	bl	80046d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2103      	movs	r1, #3
 8001fae:	2018      	movs	r0, #24
 8001fb0:	f002 fb2f 	bl	8004612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001fb4:	2018      	movs	r0, #24
 8001fb6:	f002 fb48 	bl	800464a <HAL_NVIC_EnableIRQ>
}
 8001fba:	bf00      	nop
 8001fbc:	3738      	adds	r7, #56	; 0x38
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40000c00 	.word	0x40000c00
 8001fd0:	40014000 	.word	0x40014000

08001fd4 <HAL_ADC_MspInit>:
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  }
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <HAL_ADC_MspInit+0x8c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d12f      	bne.n	8002056 <HAL_ADC_MspInit+0x82>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_ADC_MspInit+0x90>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a19      	ldr	r2, [pc, #100]	; (8002064 <HAL_ADC_MspInit+0x90>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_ADC_MspInit+0x90>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <HAL_ADC_MspInit+0x90>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_ADC_MspInit+0x90>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_ADC_MspInit+0x90>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = PINA_ADC_VMON;
 800202e:	2308      	movs	r3, #8
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002032:	2303      	movs	r3, #3
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <HAL_ADC_MspInit+0x94>)
 8002042:	f002 fb45 	bl	80046d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2102      	movs	r1, #2
 800204a:	2012      	movs	r0, #18
 800204c:	f002 fae1 	bl	8004612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002050:	2012      	movs	r0, #18
 8002052:	f002 fafa 	bl	800464a <HAL_NVIC_EnableIRQ>
  }

}
 8002056:	bf00      	nop
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40012000 	.word	0x40012000
 8002064:	40023800 	.word	0x40023800
 8002068:	40020000 	.word	0x40020000

0800206c <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <HAL_CAN_MspInit+0xc4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d14c      	bne.n	8002128 <HAL_CAN_MspInit+0xbc>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_CAN_MspInit+0xc8>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a27      	ldr	r2, [pc, #156]	; (8002134 <HAL_CAN_MspInit+0xc8>)
 8002098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_CAN_MspInit+0xc8>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_CAN_MspInit+0xc8>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_CAN_MspInit+0xc8>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_CAN_MspInit+0xc8>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PINB_CAN_RX|PINB_CAN_TX;
 80020c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020d8:	2309      	movs	r3, #9
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	4815      	ldr	r0, [pc, #84]	; (8002138 <HAL_CAN_MspInit+0xcc>)
 80020e4:	f002 faf4 	bl	80046d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2102      	movs	r1, #2
 80020ec:	2013      	movs	r0, #19
 80020ee:	f002 fa90 	bl	8004612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80020f2:	2013      	movs	r0, #19
 80020f4:	f002 faa9 	bl	800464a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2102      	movs	r1, #2
 80020fc:	2014      	movs	r0, #20
 80020fe:	f002 fa88 	bl	8004612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002102:	2014      	movs	r0, #20
 8002104:	f002 faa1 	bl	800464a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2102      	movs	r1, #2
 800210c:	2015      	movs	r0, #21
 800210e:	f002 fa80 	bl	8004612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002112:	2015      	movs	r0, #21
 8002114:	f002 fa99 	bl	800464a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2102      	movs	r1, #2
 800211c:	2016      	movs	r0, #22
 800211e:	f002 fa78 	bl	8004612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002122:	2016      	movs	r0, #22
 8002124:	f002 fa91 	bl	800464a <HAL_NVIC_EnableIRQ>
  }

}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	; 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40006400 	.word	0x40006400
 8002134:	40023800 	.word	0x40023800
 8002138:	40020400 	.word	0x40020400

0800213c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_I2C_MspInit+0x84>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d12c      	bne.n	80021b8 <HAL_I2C_MspInit+0x7c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_I2C_MspInit+0x88>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <HAL_I2C_MspInit+0x88>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_I2C_MspInit+0x88>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = PINB_I2C_SCL|PINB_12C_SDA;
 800217a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800217e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002180:	2312      	movs	r3, #18
 8002182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800218c:	2304      	movs	r3, #4
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4619      	mov	r1, r3
 8002196:	480c      	ldr	r0, [pc, #48]	; (80021c8 <HAL_I2C_MspInit+0x8c>)
 8002198:	f002 fa9a 	bl	80046d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_I2C_MspInit+0x88>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_I2C_MspInit+0x88>)
 80021a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_I2C_MspInit+0x88>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
//    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
//    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 2, 0);
//    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  }

}
 80021b8:	bf00      	nop
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40005800 	.word	0x40005800
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020400 	.word	0x40020400

080021cc <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <HAL_SPI_MspInit+0x94>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d133      	bne.n	8002256 <HAL_SPI_MspInit+0x8a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_SPI_MspInit+0x98>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_SPI_MspInit+0x98>)
 80021f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021fc:	6453      	str	r3, [r2, #68]	; 0x44
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_SPI_MspInit+0x98>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_SPI_MspInit+0x98>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_SPI_MspInit+0x98>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_SPI_MspInit+0x98>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PINA_SPI_SCK|PINA_SPI_MISO|PINA_SPI_MOSI;
 8002226:	23e0      	movs	r3, #224	; 0xe0
 8002228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002232:	2302      	movs	r3, #2
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002236:	2305      	movs	r3, #5
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	4809      	ldr	r0, [pc, #36]	; (8002268 <HAL_SPI_MspInit+0x9c>)
 8002242:	f002 fa45 	bl	80046d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2102      	movs	r1, #2
 800224a:	2023      	movs	r0, #35	; 0x23
 800224c:	f002 f9e1 	bl	8004612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002250:	2023      	movs	r0, #35	; 0x23
 8002252:	f002 f9fa 	bl	800464a <HAL_NVIC_EnableIRQ>
  }

}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40013000 	.word	0x40013000
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000

0800226c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a32      	ldr	r2, [pc, #200]	; (8002354 <HAL_UART_MspInit+0xe8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d12c      	bne.n	80022e8 <HAL_UART_MspInit+0x7c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_UART_MspInit+0xec>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a30      	ldr	r2, [pc, #192]	; (8002358 <HAL_UART_MspInit+0xec>)
 8002298:	f043 0310 	orr.w	r3, r3, #16
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_UART_MspInit+0xec>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_UART_MspInit+0xec>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a29      	ldr	r2, [pc, #164]	; (8002358 <HAL_UART_MspInit+0xec>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_UART_MspInit+0xec>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PINB_UART1_TX|PINB_UART1_RX;
 80022c6:	23c0      	movs	r3, #192	; 0xc0
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022d6:	2307      	movs	r3, #7
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	481e      	ldr	r0, [pc, #120]	; (800235c <HAL_UART_MspInit+0xf0>)
 80022e2:	f002 f9f5 	bl	80046d0 <HAL_GPIO_Init>
    /* USART3 interrupt Init */
//    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
//    HAL_NVIC_EnableIRQ(USART3_IRQn);
  }

}
 80022e6:	e031      	b.n	800234c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_UART_MspInit+0xf4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d12c      	bne.n	800234c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_UART_MspInit+0xec>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a17      	ldr	r2, [pc, #92]	; (8002358 <HAL_UART_MspInit+0xec>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_UART_MspInit+0xec>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_UART_MspInit+0xec>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a10      	ldr	r2, [pc, #64]	; (8002358 <HAL_UART_MspInit+0xec>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_UART_MspInit+0xec>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINC_UART2_RX|PINC_UART2_TX;
 800232a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800233c:	2307      	movs	r3, #7
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	4807      	ldr	r0, [pc, #28]	; (8002364 <HAL_UART_MspInit+0xf8>)
 8002348:	f002 f9c2 	bl	80046d0 <HAL_GPIO_Init>
}
 800234c:	bf00      	nop
 800234e:	3730      	adds	r7, #48	; 0x30
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40011000 	.word	0x40011000
 8002358:	40023800 	.word	0x40023800
 800235c:	40020400 	.word	0x40020400
 8002360:	40004800 	.word	0x40004800
 8002364:	40020800 	.word	0x40020800

08002368 <NMI_Handler>:
extern TIM_HandleTypeDef htim9;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;

void NMI_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  while (1)
 800236c:	e7fe      	b.n	800236c <NMI_Handler+0x4>

0800236e <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  while (1)
 8002372:	e7fe      	b.n	8002372 <HardFault_Handler+0x4>

08002374 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  while (1)
 8002378:	e7fe      	b.n	8002378 <MemManage_Handler+0x4>

0800237a <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  while (1)
 800237e:	e7fe      	b.n	800237e <BusFault_Handler+0x4>

08002380 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  while (1)
 8002384:	e7fe      	b.n	8002384 <UsageFault_Handler+0x4>

08002386 <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <PendSV_Handler>:

void PendSV_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80023b4:	f000 fe92 	bl	80030dc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80023b8:	f002 f961 	bl	800467e <HAL_SYSTICK_IRQHandler>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <TIM1_BRK_TIM9_IRQHandler>:

void TIM1_BRK_TIM9_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim9);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80023c6:	f005 fda3 	bl	8007f10 <HAL_TIM_IRQHandler>
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000042c 	.word	0x2000042c

080023d4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <TIM2_IRQHandler+0x10>)
 80023da:	f005 fd99 	bl	8007f10 <HAL_TIM_IRQHandler>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000039c 	.word	0x2000039c

080023e8 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim5);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM5_IRQHandler+0x10>)
 80023ee:	f005 fd8f 	bl	8007f10 <HAL_TIM_IRQHandler>
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200003e4 	.word	0x200003e4

080023fc <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc1);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <ADC_IRQHandler+0x10>)
 8002402:	f000 ffd1 	bl	80033a8 <HAL_ADC_IRQHandler>
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200001f8 	.word	0x200001f8

08002410 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <CAN1_TX_IRQHandler+0x10>)
 8002416:	f001 fe0f 	bl	8004038 <HAL_CAN_IRQHandler>
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000240 	.word	0x20000240

08002424 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <CAN1_RX0_IRQHandler+0x10>)
 800242a:	f001 fe05 	bl	8004038 <HAL_CAN_IRQHandler>
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000240 	.word	0x20000240

08002438 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <CAN1_RX1_IRQHandler+0x10>)
 800243e:	f001 fdfb 	bl	8004038 <HAL_CAN_IRQHandler>
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000240 	.word	0x20000240

0800244c <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <CAN1_SCE_IRQHandler+0x10>)
 8002452:	f001 fdf1 	bl	8004038 <HAL_CAN_IRQHandler>
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000240 	.word	0x20000240

08002460 <SPI1_IRQHandler>:
//{
//  HAL_I2C_ER_IRQHandler(&hi2c2);
//}

void SPI1_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <SPI1_IRQHandler+0x10>)
 8002466:	f005 f98d 	bl	8007784 <HAL_SPI_IRQHandler>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200002bc 	.word	0x200002bc

08002474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
	return 1;
 8002478:	2301      	movs	r3, #1
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_kill>:

int _kill(int pid, int sig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800248e:	f006 fe67 	bl	8009160 <__errno>
 8002492:	4603      	mov	r3, r0
 8002494:	2216      	movs	r2, #22
 8002496:	601a      	str	r2, [r3, #0]
	return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_exit>:

void _exit (int status)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ffe7 	bl	8002484 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024b6:	e7fe      	b.n	80024b6 <_exit+0x12>

080024b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e00a      	b.n	80024e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ca:	f3af 8000 	nop.w
 80024ce:	4601      	mov	r1, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	60ba      	str	r2, [r7, #8]
 80024d6:	b2ca      	uxtb	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dbf0      	blt.n	80024ca <_read+0x12>
	}

return len;
 80024e8:	687b      	ldr	r3, [r7, #4]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e009      	b.n	8002518 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	60ba      	str	r2, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf1      	blt.n	8002504 <_write+0x12>
	}
	return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_close>:

int _close(int file)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	return -1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002552:	605a      	str	r2, [r3, #4]
	return 0;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <_isatty>:

int _isatty(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
	return 1;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
	return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f006 fdcc 	bl	8009160 <__errno>
 80025c8:	4603      	mov	r3, r0
 80025ca:	220c      	movs	r2, #12
 80025cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <_sbrk+0x64>)
 80025e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20020000 	.word	0x20020000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	20000500 	.word	0x20000500
 80025fc:	20000528 	.word	0x20000528

08002600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <SystemInit+0x20>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <SystemInit+0x20>)
 800260c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800265c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002628:	480d      	ldr	r0, [pc, #52]	; (8002660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800262a:	490e      	ldr	r1, [pc, #56]	; (8002664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800262c:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002640:	4c0b      	ldr	r4, [pc, #44]	; (8002670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800264e:	f7ff ffd7 	bl	8002600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002652:	f006 fd8b 	bl	800916c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002656:	f7fe fc49 	bl	8000eec <main>
  bx  lr    
 800265a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800265c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002668:	0800c524 	.word	0x0800c524
  ldr r2, =_sbss
 800266c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002670:	20000528 	.word	0x20000528

08002674 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <CAN2_RX0_IRQHandler>

08002676 <AD7193_Init>:

#include "AD7193.h"


void AD7193_Init(AD7193_t *ad7193, SPI_HandleTypeDef *spi, GPIO_TypeDef* SS_GPIO,uint16_t SS_pin) {
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	807b      	strh	r3, [r7, #2]
	ad7193->AD7193_hspi = spi;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	601a      	str	r2, [r3, #0]
	ad7193->SS_GPIO = SS_GPIO;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	605a      	str	r2, [r3, #4]
	ad7193->SS_pin = SS_pin;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	811a      	strh	r2, [r3, #8]
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <AD7193_Reset>:

void AD7193_Reset(AD7193_t *ad7193) {
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
	uint8_t bytes[5]={0};
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	2300      	movs	r3, #0
 80026b0:	733b      	strb	r3, [r7, #12]
	memset(bytes,0xFF,sizeof(bytes));
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	2205      	movs	r2, #5
 80026b8:	21ff      	movs	r1, #255	; 0xff
 80026ba:	4618      	mov	r0, r3
 80026bc:	f006 fd90 	bl	80091e0 <memset>
	HAL_GPIO_WritePin(ad7193->SS_GPIO, ad7193->SS_pin, GPIO_PIN_RESET);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6858      	ldr	r0, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	891b      	ldrh	r3, [r3, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	4619      	mov	r1, r3
 80026cc:	f002 f9b4 	bl	8004a38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ad7193->AD7193_hspi, bytes, 5, AD7193_TIMEOUT);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	f107 0108 	add.w	r1, r7, #8
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
 80026dc:	2205      	movs	r2, #5
 80026de:	f004 fc62 	bl	8006fa6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ad7193->SS_GPIO, ad7193->SS_pin, GPIO_PIN_SET);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6858      	ldr	r0, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	891b      	ldrh	r3, [r3, #8]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4619      	mov	r1, r3
 80026ee:	f002 f9a3 	bl	8004a38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f000 fd12 	bl	800311c <HAL_Delay>
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <AD7193_GetRegValue>:
		HAL_SPI_Transmit(ad7193->AD7193_hspi,&bytes[i], 1, AD7193_TIMEOUT);
	}
	HAL_GPIO_WritePin(ad7193->SS_GPIO, ad7193->SS_pin, GPIO_PIN_SET);
}

uint32_t AD7193_GetRegValue(AD7193_t *ad7193,uint8_t regAddr, uint8_t data_length) {
 8002700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002704:	b089      	sub	sp, #36	; 0x24
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	70fb      	strb	r3, [r7, #3]
 800270e:	4613      	mov	r3, r2
 8002710:	70bb      	strb	r3, [r7, #2]
 8002712:	466b      	mov	r3, sp
 8002714:	461e      	mov	r6, r3
	uint32_t val=0;
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
	uint8_t buffer[data_length];
 800271a:	78b9      	ldrb	r1, [r7, #2]
 800271c:	460b      	mov	r3, r1
 800271e:	3b01      	subs	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	b2cb      	uxtb	r3, r1
 8002724:	2200      	movs	r2, #0
 8002726:	4698      	mov	r8, r3
 8002728:	4691      	mov	r9, r2
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800273a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800273e:	b2cb      	uxtb	r3, r1
 8002740:	2200      	movs	r2, #0
 8002742:	461c      	mov	r4, r3
 8002744:	4615      	mov	r5, r2
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	00eb      	lsls	r3, r5, #3
 8002750:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002754:	00e2      	lsls	r2, r4, #3
 8002756:	460b      	mov	r3, r1
 8002758:	3307      	adds	r3, #7
 800275a:	08db      	lsrs	r3, r3, #3
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	ebad 0d03 	sub.w	sp, sp, r3
 8002762:	466b      	mov	r3, sp
 8002764:	3300      	adds	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
	uint8_t command= AD7193_COMM_READ | AD7193_COMM_ADDR(regAddr);
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	b25b      	sxtb	r3, r3
 800276e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002772:	b25b      	sxtb	r3, r3
 8002774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002778:	b25b      	sxtb	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ad7193->SS_GPIO, ad7193->SS_pin, GPIO_PIN_RESET);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6858      	ldr	r0, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	891b      	ldrh	r3, [r3, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	4619      	mov	r1, r3
 800278a:	f002 f955 	bl	8004a38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ad7193->AD7193_hspi, &command, 1, AD7193_TIMEOUT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	f107 010f 	add.w	r1, r7, #15
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	2201      	movs	r2, #1
 800279c:	f004 fc03 	bl	8006fa6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ad7193->AD7193_hspi,buffer, data_length, AD7193_TIMEOUT);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	78bb      	ldrb	r3, [r7, #2]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	6939      	ldr	r1, [r7, #16]
 80027ae:	f004 fd36 	bl	800721e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ad7193->SS_GPIO, ad7193->SS_pin, GPIO_PIN_SET);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6858      	ldr	r0, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	891b      	ldrh	r3, [r3, #8]
 80027ba:	2201      	movs	r2, #1
 80027bc:	4619      	mov	r1, r3
 80027be:	f002 f93b 	bl	8004a38 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < data_length; i++) {
 80027c2:	2300      	movs	r3, #0
 80027c4:	77fb      	strb	r3, [r7, #31]
 80027c6:	e00c      	b.n	80027e2 <AD7193_GetRegValue+0xe2>
		val = val <<8;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	61bb      	str	r3, [r7, #24]
		val += buffer[i];
 80027ce:	7ffb      	ldrb	r3, [r7, #31]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	461a      	mov	r2, r3
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4413      	add	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < data_length; i++) {
 80027dc:	7ffb      	ldrb	r3, [r7, #31]
 80027de:	3301      	adds	r3, #1
 80027e0:	77fb      	strb	r3, [r7, #31]
 80027e2:	7ffa      	ldrb	r2, [r7, #31]
 80027e4:	78bb      	ldrb	r3, [r7, #2]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d3ee      	bcc.n	80027c8 <AD7193_GetRegValue+0xc8>
	}
	return val;
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	46b5      	mov	sp, r6
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	; 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080027f8 <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af04      	add	r7, sp, #16
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	b29a      	uxth	r2, r3
 800280c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002810:	9302      	str	r3, [sp, #8]
 8002812:	2302      	movs	r3, #2
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2301      	movs	r3, #1
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	f002 fea0 	bl	8005564 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8002824:	7b3b      	ldrb	r3, [r7, #12]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	b21a      	sxth	r2, r3
 800282a:	7b7b      	ldrb	r3, [r7, #13]
 800282c:	b21b      	sxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	b21b      	sxth	r3, r3
 8002832:	b29b      	uxth	r3, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af04      	add	r7, sp, #16
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	70fb      	strb	r3, [r7, #3]
 8002848:	4613      	mov	r3, r2
 800284a:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 800284c:	883b      	ldrh	r3, [r7, #0]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	b29b      	uxth	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8002856:	883b      	ldrh	r3, [r7, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	b29a      	uxth	r2, r3
 8002864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002868:	9302      	str	r3, [sp, #8]
 800286a:	2302      	movs	r3, #2
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2301      	movs	r3, #1
 8002876:	2180      	movs	r1, #128	; 0x80
 8002878:	f002 fd7a 	bl	8005370 <HAL_I2C_Mem_Write>
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 800288c:	2102      	movs	r1, #2
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ffb2 	bl	80027f8 <Read16>
 8002894:	4603      	mov	r3, r0
 8002896:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	08db      	lsrs	r3, r3, #3
 800289c:	b29b      	uxth	r3, r3
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	b29b      	uxth	r3, r3

}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 80028b2:	2104      	movs	r1, #4
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff9f 	bl	80027f8 <Read16>
 80028ba:	4603      	mov	r3, r0
 80028bc:	81fb      	strh	r3, [r7, #14]

	return (result );
 80028be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ffe8 	bl	80028aa <INA219_ReadCurrent_raw>
 80028da:	4603      	mov	r3, r0
 80028dc:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 80028de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <INA219_ReadCurrent+0x2c>)
 80028e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80028ec:	b21b      	sxth	r3, r3
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000506 	.word	0x20000506
 80028fc:	00000000 	.word	0x00000000

08002900 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8002908:	2101      	movs	r1, #1
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ff74 	bl	80027f8 <Read16>
 8002910:	4603      	mov	r3, r0
 8002912:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8002914:	89fb      	ldrh	r3, [r7, #14]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe04 	bl	8000524 <__aeabi_i2d>
 800291c:	a308      	add	r3, pc, #32	; (adr r3, 8002940 <INA219_ReadShuntVolage+0x40>)
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f7fd fe69 	bl	80005f8 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	f7fe f93b 	bl	8000ba8 <__aeabi_d2uiz>
 8002932:	4603      	mov	r3, r0
 8002934:	b29b      	uxth	r3, r3
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	47ae147b 	.word	0x47ae147b
 8002944:	3f847ae1 	.word	0x3f847ae1

08002948 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8002950:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002954:	2100      	movs	r1, #0
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ff70 	bl	800283c <Write16>
	HAL_Delay(1);
 800295c:	2001      	movs	r0, #1
 800295e:	f000 fbdd 	bl	800311c <HAL_Delay>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	461a      	mov	r2, r3
 800297a:	2105      	movs	r1, #5
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff5d 	bl	800283c <Write16>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	461a      	mov	r2, r3
 800299a:	2100      	movs	r1, #0
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff4d 	bl	800283c <Write16>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 80029b4:	f643 139f 	movw	r3, #14751	; 0x399f
 80029b8:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <INA219_setCalibration_32V_2A+0x40>)
 80029bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029c0:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <INA219_setCalibration_32V_2A+0x44>)
 80029c4:	220a      	movs	r2, #10
 80029c6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <INA219_setCalibration_32V_2A+0x48>)
 80029ca:	2202      	movs	r2, #2
 80029cc:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <INA219_setCalibration_32V_2A+0x40>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	4619      	mov	r1, r3
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ffc8 	bl	800296a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80029da:	89fb      	ldrh	r3, [r7, #14]
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ffd3 	bl	800298a <INA219_setConfig>
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000504 	.word	0x20000504
 80029f0:	20000506 	.word	0x20000506
 80029f4:	20000508 	.word	0x20000508

080029f8 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	79fa      	ldrb	r2, [r7, #7]
 8002a10:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <INA219_Init+0x5c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <INA219_Init+0x60>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	b299      	uxth	r1, r3
 8002a26:	2302      	movs	r3, #2
 8002a28:	2203      	movs	r2, #3
 8002a2a:	68b8      	ldr	r0, [r7, #8]
 8002a2c:	f002 ffc0 	bl	80059b0 <HAL_I2C_IsDeviceReady>
 8002a30:	4603      	mov	r3, r0
 8002a32:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff ff84 	bl	8002948 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff ffb3 	bl	80029ac <INA219_setCalibration_32V_2A>

		return 1;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8002a4a:	2300      	movs	r3, #0
	}
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000506 	.word	0x20000506
 8002a58:	20000508 	.word	0x20000508

08002a5c <MAX6675_Init>:
#include "MAX6675.h"

void MAX6675_Init(MAX6675_t *dev, SPI_HandleTypeDef *spi, GPIO_TypeDef* SS_GPIO,uint16_t SS_pin)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	807b      	strh	r3, [r7, #2]
	dev->MAX6675_hspi = spi;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	601a      	str	r2, [r3, #0]
	dev->SS_GPIO = SS_GPIO;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	605a      	str	r2, [r3, #4]
	dev->SS_pin = SS_pin;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	811a      	strh	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <MAX6675_getReg>:

uint16_t MAX6675_getReg(MAX6675_t *dev)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	uint16_t val =0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	81fb      	strh	r3, [r7, #14]
	uint8_t buffer[2]={0};
 8002a94:	2300      	movs	r3, #0
 8002a96:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(dev->SS_GPIO, dev->SS_pin, GPIO_PIN_RESET);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6858      	ldr	r0, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	891b      	ldrh	r3, [r3, #8]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f001 ffc8 	bl	8004a38 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(dev->MAX6675_hspi, buffer, 2, MAX6675_TIMEOUT);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	f107 0108 	add.w	r1, r7, #8
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f004 fbb2 	bl	800721e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->SS_GPIO, dev->SS_pin, GPIO_PIN_SET);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6858      	ldr	r0, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	891b      	ldrh	r3, [r3, #8]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f001 ffb7 	bl	8004a38 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 2; i++) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	737b      	strb	r3, [r7, #13]
 8002ace:	e00e      	b.n	8002aee <MAX6675_getReg+0x66>
		val = val <<8;
 8002ad0:	89fb      	ldrh	r3, [r7, #14]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	81fb      	strh	r3, [r7, #14]
		val += buffer[i];
 8002ad6:	7b7b      	ldrb	r3, [r7, #13]
 8002ad8:	3310      	adds	r3, #16
 8002ada:	443b      	add	r3, r7
 8002adc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < 2; i++) {
 8002ae8:	7b7b      	ldrb	r3, [r7, #13]
 8002aea:	3301      	adds	r3, #1
 8002aec:	737b      	strb	r3, [r7, #13]
 8002aee:	7b7b      	ldrb	r3, [r7, #13]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d9ed      	bls.n	8002ad0 <MAX6675_getReg+0x48>
	}

	return val;
 8002af4:	89fb      	ldrh	r3, [r7, #14]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <MAX6675_isOpen>:

	return temp;
}

uint8_t MAX6675_isOpen(MAX6675_t *dev)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	uint16_t val=0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	81fb      	strh	r3, [r7, #14]
	val = MAX6675_getReg(dev) >> 2;
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ffbc 	bl	8002a88 <MAX6675_getReg>
 8002b10:	4603      	mov	r3, r0
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	81fb      	strh	r3, [r7, #14]
	val = (uint8_t) val & 0x1;
 8002b16:	89fb      	ldrh	r3, [r7, #14]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	81fb      	strh	r3, [r7, #14]
	return val;
 8002b22:	89fb      	ldrh	r3, [r7, #14]
 8002b24:	b2db      	uxtb	r3, r3
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002b38:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <DS3231_Init+0x30>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f000 f8a9 	bl	8002c96 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f000 f86d 	bl	8002c24 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002b4a:	f000 f8c6 	bl	8002cda <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002b4e:	f000 f88c 	bl	8002c6a <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f000 f846 	bl	8002be4 <DS3231_SetInterruptMode>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	2000050c 	.word	0x2000050c

08002b64 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	460a      	mov	r2, r1
 8002b6e:	71fb      	strb	r3, [r7, #7]
 8002b70:	4613      	mov	r3, r2
 8002b72:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	733b      	strb	r3, [r7, #12]
 8002b78:	79bb      	ldrb	r3, [r7, #6]
 8002b7a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <DS3231_SetRegByte+0x38>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	f107 020c 	add.w	r2, r7, #12
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	21d0      	movs	r1, #208	; 0xd0
 8002b8e:	f002 f8cb 	bl	8004d28 <HAL_I2C_Master_Transmit>
}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	2000050c 	.word	0x2000050c

08002ba0 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <DS3231_GetRegByte+0x40>)
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	1dfa      	adds	r2, r7, #7
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	21d0      	movs	r1, #208	; 0xd0
 8002bba:	f002 f8b5 	bl	8004d28 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <DS3231_GetRegByte+0x40>)
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	f107 020f 	add.w	r2, r7, #15
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	21d0      	movs	r1, #208	; 0xd0
 8002bd0:	f002 f9a8 	bl	8004f24 <HAL_I2C_Master_Receive>
	return val;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000050c 	.word	0x2000050c

08002be4 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002bee:	200e      	movs	r0, #14
 8002bf0:	f7ff ffd6 	bl	8002ba0 <DS3231_GetRegByte>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8002bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	b25a      	sxtb	r2, r3
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	b25b      	sxtb	r3, r3
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	4619      	mov	r1, r3
 8002c16:	200e      	movs	r0, #14
 8002c18:	f7ff ffa4 	bl	8002b64 <DS3231_SetRegByte>
}
 8002c1c:	bf00      	nop
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002c2e:	200e      	movs	r0, #14
 8002c30:	f7ff ffb6 	bl	8002ba0 <DS3231_GetRegByte>
 8002c34:	4603      	mov	r3, r0
 8002c36:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8002c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3c:	f023 0302 	bic.w	r3, r3, #2
 8002c40:	b25a      	sxtb	r2, r3
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4619      	mov	r1, r3
 8002c56:	200e      	movs	r0, #14
 8002c58:	f7ff ff84 	bl	8002b64 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	f7ff ffc1 	bl	8002be4 <DS3231_SetInterruptMode>
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8002c70:	200f      	movs	r0, #15
 8002c72:	f7ff ff95 	bl	8002ba0 <DS3231_GetRegByte>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f023 0302 	bic.w	r3, r3, #2
 8002c7c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	f023 0302 	bic.w	r3, r3, #2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	4619      	mov	r1, r3
 8002c88:	200f      	movs	r0, #15
 8002c8a:	f7ff ff6b 	bl	8002b64 <DS3231_SetRegByte>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002ca0:	200e      	movs	r0, #14
 8002ca2:	f7ff ff7d 	bl	8002ba0 <DS3231_GetRegByte>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	b25a      	sxtb	r2, r3
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	200e      	movs	r0, #14
 8002cc8:	f7ff ff4c 	bl	8002b64 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f7ff ff89 	bl	8002be4 <DS3231_SetInterruptMode>
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002ce0:	200f      	movs	r0, #15
 8002ce2:	f7ff ff5d 	bl	8002ba0 <DS3231_GetRegByte>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	200f      	movs	r0, #15
 8002cfa:	f7ff ff33 	bl	8002b64 <DS3231_SetRegByte>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8002d0c:	2006      	movs	r0, #6
 8002d0e:	f7ff ff47 	bl	8002ba0 <DS3231_GetRegByte>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 f91a 	bl	8002f4e <DS3231_DecodeBCD>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8002d1e:	2005      	movs	r0, #5
 8002d20:	f7ff ff3e 	bl	8002ba0 <DS3231_GetRegByte>
 8002d24:	4603      	mov	r3, r0
 8002d26:	09db      	lsrs	r3, r3, #7
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	461a      	mov	r2, r3
 8002d34:	0091      	lsls	r1, r2, #2
 8002d36:	461a      	mov	r2, r3
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002d44:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	88bb      	ldrh	r3, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b29b      	uxth	r3, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 f90b 	bl	8002f80 <DS3231_EncodeBCD>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	2003      	movs	r0, #3
 8002d70:	f7ff fef8 	bl	8002b64 <DS3231_SetRegByte>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <DS3231_SetDate>:

/**
 * @brief Set the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS3231_SetDate(uint8_t date) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DATE, DS3231_EncodeBCD(date));
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f8f9 	bl	8002f80 <DS3231_EncodeBCD>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4619      	mov	r1, r3
 8002d92:	2004      	movs	r0, #4
 8002d94:	f7ff fee6 	bl	8002b64 <DS3231_SetRegByte>
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <DS3231_SetMonth>:

/**
 * @brief Set the current month.
 * @param month Month, 1 to 12.
 */
void DS3231_SetMonth(uint8_t month) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8002daa:	2005      	movs	r0, #5
 8002dac:	f7ff fef8 	bl	8002ba0 <DS3231_GetRegByte>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002db6:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f8e0 	bl	8002f80 <DS3231_EncodeBCD>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	4619      	mov	r1, r3
 8002dcc:	2005      	movs	r0, #5
 8002dce:	f7ff fec9 	bl	8002b64 <DS3231_SetRegByte>
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <DS3231_SetYear>:

/**
 * @brief Set the current year.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetYear(uint16_t year) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
	uint8_t century = (year / 100) % 20;
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <DS3231_SetYear+0x80>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <DS3231_SetYear+0x84>)
 8002df4:	fba3 1302 	umull	r1, r3, r3, r2
 8002df8:	0919      	lsrs	r1, r3, #4
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	73fb      	strb	r3, [r7, #15]
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 8002e08:	2005      	movs	r0, #5
 8002e0a:	f7ff fec9 	bl	8002ba0 <DS3231_GetRegByte>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	b25b      	sxtb	r3, r3
 8002e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e16:	b25a      	sxtb	r2, r3
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	01db      	lsls	r3, r3, #7
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_REG_MONTH, monthReg);
 8002e24:	7bbb      	ldrb	r3, [r7, #14]
 8002e26:	4619      	mov	r1, r3
 8002e28:	2005      	movs	r0, #5
 8002e2a:	f7ff fe9b 	bl	8002b64 <DS3231_SetRegByte>
	DS3231_SetRegByte(DS3231_REG_YEAR, DS3231_EncodeBCD(year % 100));
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <DS3231_SetYear+0x80>)
 8002e32:	fba2 1203 	umull	r1, r2, r2, r3
 8002e36:	0952      	lsrs	r2, r2, #5
 8002e38:	2164      	movs	r1, #100	; 0x64
 8002e3a:	fb01 f202 	mul.w	r2, r1, r2
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f89b 	bl	8002f80 <DS3231_EncodeBCD>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	2006      	movs	r0, #6
 8002e50:	f7ff fe88 	bl	8002b64 <DS3231_SetRegByte>
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	51eb851f 	.word	0x51eb851f
 8002e60:	cccccccd 	.word	0xcccccccd

08002e64 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f882 	bl	8002f80 <DS3231_EncodeBCD>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4619      	mov	r1, r3
 8002e80:	2002      	movs	r0, #2
 8002e82:	f7ff fe6f 	bl	8002b64 <DS3231_SetRegByte>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f870 	bl	8002f80 <DS3231_EncodeBCD>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f7ff fe5d 	bl	8002b64 <DS3231_SetRegByte>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f85e 	bl	8002f80 <DS3231_EncodeBCD>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7ff fe4b 	bl	8002b64 <DS3231_SetRegByte>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	71bb      	strb	r3, [r7, #6]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	717b      	strb	r3, [r7, #5]
	DS3231_SetHour(hour_24mode);
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ffba 	bl	8002e64 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8002ef0:	79bb      	ldrb	r3, [r7, #6]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ffcb 	bl	8002e8e <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8002ef8:	797b      	ldrb	r3, [r7, #5]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ffd9 	bl	8002eb2 <DS3231_SetSecond>
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <DS3231_SetFullDate>:
 * @param date Date, 0 to 31.
 * @param month Month, 1 to 12.
 * @param dow Days since last Sunday, 1 to 7.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetFullDate(uint8_t date, uint8_t month, uint8_t dow, uint16_t year){
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4608      	mov	r0, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	461a      	mov	r2, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	71fb      	strb	r3, [r7, #7]
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71bb      	strb	r3, [r7, #6]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	717b      	strb	r3, [r7, #5]
 8002f22:	4613      	mov	r3, r2
 8002f24:	807b      	strh	r3, [r7, #2]
	DS3231_SetDate(date);
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff27 	bl	8002d7c <DS3231_SetDate>
	DS3231_SetMonth(month);
 8002f2e:	79bb      	ldrb	r3, [r7, #6]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff35 	bl	8002da0 <DS3231_SetMonth>
	DS3231_SetDayOfWeek(dow);
 8002f36:	797b      	ldrb	r3, [r7, #5]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff0d 	bl	8002d58 <DS3231_SetDayOfWeek>
	DS3231_SetYear(year);
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff4b 	bl	8002ddc <DS3231_SetYear>
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd90      	pop	{r4, r7, pc}

08002f4e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	0092      	lsls	r2, r2, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	b2db      	uxtb	r3, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002f8a:	79fa      	ldrb	r2, [r7, #7]
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <DS3231_EncodeBCD+0x40>)
 8002f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f92:	08d9      	lsrs	r1, r3, #3
 8002f94:	460b      	mov	r3, r1
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	4907      	ldr	r1, [pc, #28]	; (8002fc0 <DS3231_EncodeBCD+0x40>)
 8002fa4:	fba1 1303 	umull	r1, r3, r1, r3
 8002fa8:	08db      	lsrs	r3, r3, #3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	b2db      	uxtb	r3, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	cccccccd 	.word	0xcccccccd

08002fc4 <M24C32_Init>:
#include "M24C32.h"


I2C_HandleTypeDef *_M24C32_ui2c;

void M24C32_Init(I2C_HandleTypeDef *hi2c) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	_M24C32_ui2c = hi2c;
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <M24C32_Init+0x1c>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6013      	str	r3, [r2, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000510 	.word	0x20000510

08002fe4 <M24C32_ReadRandomAddr>:
	uint8_t val;
	HAL_I2C_Master_Receive(_M24C32_ui2c, M24C32_I2C_ADDR, &val, 1, M24C32_TIMEOUT);
	return val;
}

uint8_t M24C32_ReadRandomAddr(uint16_t regAddr) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
	uint8_t val;
	uint8_t bytes[2] = { regAddr>>8, regAddr&0xFF};
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	733b      	strb	r3, [r7, #12]
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_M24C32_ui2c, M24C32_I2C_ADDR, bytes, 2, M24C32_TIMEOUT);
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <M24C32_ReadRandomAddr+0x50>)
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	f107 020c 	add.w	r2, r7, #12
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2302      	movs	r3, #2
 800300e:	21ae      	movs	r1, #174	; 0xae
 8003010:	f001 fe8a 	bl	8004d28 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_M24C32_ui2c, M24C32_I2C_ADDR, &val, 1, M24C32_TIMEOUT);
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <M24C32_ReadRandomAddr+0x50>)
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	f107 020f 	add.w	r2, r7, #15
 800301c:	f04f 33ff 	mov.w	r3, #4294967295
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2301      	movs	r3, #1
 8003024:	21ae      	movs	r1, #174	; 0xae
 8003026:	f001 ff7d 	bl	8004f24 <HAL_I2C_Master_Receive>
	return val;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000510 	.word	0x20000510

08003038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_Init+0x40>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <HAL_Init+0x40>)
 8003042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_Init+0x40>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_Init+0x40>)
 800304e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a07      	ldr	r2, [pc, #28]	; (8003078 <HAL_Init+0x40>)
 800305a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003060:	2003      	movs	r0, #3
 8003062:	f001 facb 	bl	80045fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003066:	2001      	movs	r0, #1
 8003068:	f000 f808 	bl	800307c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800306c:	f7fe fec4 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023c00 	.word	0x40023c00

0800307c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_InitTick+0x54>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_InitTick+0x58>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003092:	fbb3 f3f1 	udiv	r3, r3, r1
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fae3 	bl	8004666 <HAL_SYSTICK_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00e      	b.n	80030c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b0f      	cmp	r3, #15
 80030ae:	d80a      	bhi.n	80030c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b0:	2200      	movs	r2, #0
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	f001 faab 	bl	8004612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <HAL_InitTick+0x5c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000000 	.word	0x20000000
 80030d4:	20000008 	.word	0x20000008
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x20>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_IncTick+0x24>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_IncTick+0x24>)
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000008 	.word	0x20000008
 8003100:	20000514 	.word	0x20000514

08003104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return uwTick;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_GetTick+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20000514 	.word	0x20000514

0800311c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003124:	f7ff ffee 	bl	8003104 <HAL_GetTick>
 8003128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d005      	beq.n	8003142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_Delay+0x44>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003142:	bf00      	nop
 8003144:	f7ff ffde 	bl	8003104 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d8f7      	bhi.n	8003144 <HAL_Delay+0x28>
  {
  }
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000008 	.word	0x20000008

08003164 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e033      	b.n	80031e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe ff26 	bl	8001fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d118      	bne.n	80031d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031aa:	f023 0302 	bic.w	r3, r3, #2
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fb4a 	bl	8003850 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f023 0303 	bic.w	r3, r3, #3
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
 80031d2:	e001      	b.n	80031d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_ADC_Start_IT+0x1a>
 8003202:	2302      	movs	r3, #2
 8003204:	e0bd      	b.n	8003382 <HAL_ADC_Start_IT+0x196>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d018      	beq.n	800324e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800322c:	4b58      	ldr	r3, [pc, #352]	; (8003390 <HAL_ADC_Start_IT+0x1a4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a58      	ldr	r2, [pc, #352]	; (8003394 <HAL_ADC_Start_IT+0x1a8>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9a      	lsrs	r2, r3, #18
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003240:	e002      	b.n	8003248 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3b01      	subs	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f9      	bne.n	8003242 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	f040 8085 	bne.w	8003368 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003288:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d106      	bne.n	80032ac <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f023 0206 	bic.w	r2, r3, #6
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
 80032aa:	e002      	b.n	80032b2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_ADC_Start_IT+0x1ac>)
 80032bc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032c6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032d6:	f043 0320 	orr.w	r3, r3, #32
 80032da:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d12a      	bne.n	800333e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2b      	ldr	r2, [pc, #172]	; (800339c <HAL_ADC_Start_IT+0x1b0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d015      	beq.n	800331e <HAL_ADC_Start_IT+0x132>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2a      	ldr	r2, [pc, #168]	; (80033a0 <HAL_ADC_Start_IT+0x1b4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_Start_IT+0x11c>
 80032fc:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_ADC_Start_IT+0x1ac>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <HAL_ADC_Start_IT+0x1b8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d136      	bne.n	8003380 <HAL_ADC_Start_IT+0x194>
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <HAL_ADC_Start_IT+0x1ac>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d130      	bne.n	8003380 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d129      	bne.n	8003380 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	e020      	b.n	8003380 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a16      	ldr	r2, [pc, #88]	; (800339c <HAL_ADC_Start_IT+0x1b0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d11b      	bne.n	8003380 <HAL_ADC_Start_IT+0x194>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d114      	bne.n	8003380 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	e00b      	b.n	8003380 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f043 0210 	orr.w	r2, r3, #16
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000000 	.word	0x20000000
 8003394:	431bde83 	.word	0x431bde83
 8003398:	40012300 	.word	0x40012300
 800339c:	40012000 	.word	0x40012000
 80033a0:	40012100 	.word	0x40012100
 80033a4:	40012200 	.word	0x40012200

080033a8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d049      	beq.n	8003472 <HAL_ADC_IRQHandler+0xca>
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d046      	beq.n	8003472 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d12b      	bne.n	8003462 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d127      	bne.n	8003462 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800342a:	2b00      	cmp	r3, #0
 800342c:	d119      	bne.n	8003462 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0220 	bic.w	r2, r2, #32
 800343c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0201 	orr.w	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fe f850 	bl	8001508 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0212 	mvn.w	r2, #18
 8003470:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d057      	beq.n	8003538 <HAL_ADC_IRQHandler+0x190>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d054      	beq.n	8003538 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d139      	bne.n	8003528 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d12b      	bne.n	8003528 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d124      	bne.n	8003528 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11d      	bne.n	8003528 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d119      	bne.n	8003528 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003502:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fa8d 	bl	8003a48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 020c 	mvn.w	r2, #12
 8003536:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d017      	beq.n	800357e <HAL_ADC_IRQHandler+0x1d6>
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d014      	beq.n	800357e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10d      	bne.n	800357e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f837 	bl	80035e2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0201 	mvn.w	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800358c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d015      	beq.n	80035c0 <HAL_ADC_IRQHandler+0x218>
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d012      	beq.n	80035c0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f043 0202 	orr.w	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0220 	mvn.w	r2, #32
 80035ae:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f820 	bl	80035f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f06f 0220 	mvn.w	r2, #32
 80035be:	601a      	str	r2, [r3, #0]
  }
}
 80035c0:	bf00      	nop
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1c>
 8003624:	2302      	movs	r3, #2
 8003626:	e105      	b.n	8003834 <HAL_ADC_ConfigChannel+0x228>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b09      	cmp	r3, #9
 8003636:	d925      	bls.n	8003684 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68d9      	ldr	r1, [r3, #12]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	3b1e      	subs	r3, #30
 800364e:	2207      	movs	r2, #7
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43da      	mvns	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	400a      	ands	r2, r1
 800365c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68d9      	ldr	r1, [r3, #12]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	b29b      	uxth	r3, r3
 800366e:	4618      	mov	r0, r3
 8003670:	4603      	mov	r3, r0
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4403      	add	r3, r0
 8003676:	3b1e      	subs	r3, #30
 8003678:	409a      	lsls	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	e022      	b.n	80036ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6919      	ldr	r1, [r3, #16]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	4613      	mov	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4413      	add	r3, r2
 8003698:	2207      	movs	r2, #7
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43da      	mvns	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	400a      	ands	r2, r1
 80036a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6919      	ldr	r1, [r3, #16]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4618      	mov	r0, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4403      	add	r3, r0
 80036c0:	409a      	lsls	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d824      	bhi.n	800371c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	3b05      	subs	r3, #5
 80036e4:	221f      	movs	r2, #31
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43da      	mvns	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	400a      	ands	r2, r1
 80036f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	4618      	mov	r0, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	3b05      	subs	r3, #5
 800370e:	fa00 f203 	lsl.w	r2, r0, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	635a      	str	r2, [r3, #52]	; 0x34
 800371a:	e04c      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d824      	bhi.n	800376e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	3b23      	subs	r3, #35	; 0x23
 8003736:	221f      	movs	r2, #31
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43da      	mvns	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	400a      	ands	r2, r1
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	4618      	mov	r0, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	3b23      	subs	r3, #35	; 0x23
 8003760:	fa00 f203 	lsl.w	r2, r0, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
 800376c:	e023      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	3b41      	subs	r3, #65	; 0x41
 8003780:	221f      	movs	r2, #31
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43da      	mvns	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	400a      	ands	r2, r1
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	4618      	mov	r0, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	3b41      	subs	r3, #65	; 0x41
 80037aa:	fa00 f203 	lsl.w	r2, r0, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037b6:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_ADC_ConfigChannel+0x234>)
 80037b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a21      	ldr	r2, [pc, #132]	; (8003844 <HAL_ADC_ConfigChannel+0x238>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d109      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x1cc>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b12      	cmp	r3, #18
 80037ca:	d105      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_ADC_ConfigChannel+0x238>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d123      	bne.n	800382a <HAL_ADC_ConfigChannel+0x21e>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d003      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x1e6>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b11      	cmp	r3, #17
 80037f0:	d11b      	bne.n	800382a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b10      	cmp	r3, #16
 8003804:	d111      	bne.n	800382a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_ADC_ConfigChannel+0x23c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a10      	ldr	r2, [pc, #64]	; (800384c <HAL_ADC_ConfigChannel+0x240>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	0c9a      	lsrs	r2, r3, #18
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800381c:	e002      	b.n	8003824 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	3b01      	subs	r3, #1
 8003822:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f9      	bne.n	800381e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	40012300 	.word	0x40012300
 8003844:	40012000 	.word	0x40012000
 8003848:	20000000 	.word	0x20000000
 800384c:	431bde83 	.word	0x431bde83

08003850 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003858:	4b79      	ldr	r3, [pc, #484]	; (8003a40 <ADC_Init+0x1f0>)
 800385a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	431a      	orrs	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	021a      	lsls	r2, r3, #8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6899      	ldr	r1, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	4a58      	ldr	r2, [pc, #352]	; (8003a44 <ADC_Init+0x1f4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d022      	beq.n	800392e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6899      	ldr	r1, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6899      	ldr	r1, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	e00f      	b.n	800394e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800393c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800394c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0202 	bic.w	r2, r2, #2
 800395c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6899      	ldr	r1, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	7e1b      	ldrb	r3, [r3, #24]
 8003968:	005a      	lsls	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01b      	beq.n	80039b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800398a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800399a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	3b01      	subs	r3, #1
 80039a8:	035a      	lsls	r2, r3, #13
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	e007      	b.n	80039c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	3b01      	subs	r3, #1
 80039e0:	051a      	lsls	r2, r3, #20
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6899      	ldr	r1, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a06:	025a      	lsls	r2, r3, #9
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6899      	ldr	r1, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	029a      	lsls	r2, r3, #10
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40012300 	.word	0x40012300
 8003a44:	0f000001 	.word	0x0f000001

08003a48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0ed      	b.n	8003c4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fe faf6 	bl	800206c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a90:	f7ff fb38 	bl	8003104 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a96:	e012      	b.n	8003abe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a98:	f7ff fb34 	bl	8003104 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b0a      	cmp	r3, #10
 8003aa4:	d90b      	bls.n	8003abe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2205      	movs	r2, #5
 8003ab6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0c5      	b.n	8003c4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0e5      	beq.n	8003a98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0202 	bic.w	r2, r2, #2
 8003ada:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003adc:	f7ff fb12 	bl	8003104 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ae2:	e012      	b.n	8003b0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ae4:	f7ff fb0e 	bl	8003104 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b0a      	cmp	r3, #10
 8003af0:	d90b      	bls.n	8003b0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2205      	movs	r2, #5
 8003b02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e09f      	b.n	8003c4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	7e1b      	ldrb	r3, [r3, #24]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d108      	bne.n	8003b32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e007      	b.n	8003b42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7e5b      	ldrb	r3, [r3, #25]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d108      	bne.n	8003b5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e007      	b.n	8003b6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	7e9b      	ldrb	r3, [r3, #26]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d108      	bne.n	8003b86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0220 	orr.w	r2, r2, #32
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e007      	b.n	8003b96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0220 	bic.w	r2, r2, #32
 8003b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7edb      	ldrb	r3, [r3, #27]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d108      	bne.n	8003bb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0210 	bic.w	r2, r2, #16
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e007      	b.n	8003bc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0210 	orr.w	r2, r2, #16
 8003bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7f1b      	ldrb	r3, [r3, #28]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d108      	bne.n	8003bda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0208 	orr.w	r2, r2, #8
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e007      	b.n	8003bea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0208 	bic.w	r2, r2, #8
 8003be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	7f5b      	ldrb	r3, [r3, #29]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d108      	bne.n	8003c04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0204 	orr.w	r2, r2, #4
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e007      	b.n	8003c14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	ea42 0103 	orr.w	r1, r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	1e5a      	subs	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c6a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d003      	beq.n	8003c7a <HAL_CAN_ConfigFilter+0x26>
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	f040 80be 	bne.w	8003df6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003c7a:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_CAN_ConfigFilter+0x1bc>)
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c84:	f043 0201 	orr.w	r2, r3, #1
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	431a      	orrs	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2201      	movs	r2, #1
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	401a      	ands	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d123      	bne.n	8003d24 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cfe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	3248      	adds	r2, #72	; 0x48
 8003d04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d1a:	6979      	ldr	r1, [r7, #20]
 8003d1c:	3348      	adds	r3, #72	; 0x48
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	440b      	add	r3, r1
 8003d22:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d122      	bne.n	8003d72 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	3248      	adds	r2, #72	; 0x48
 8003d52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d68:	6979      	ldr	r1, [r7, #20]
 8003d6a:	3348      	adds	r3, #72	; 0x48
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	440b      	add	r3, r1
 8003d70:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	401a      	ands	r2, r3
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003d8c:	e007      	b.n	8003d9e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43db      	mvns	r3, r3
 8003db0:	401a      	ands	r2, r3
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003db8:	e007      	b.n	8003dca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003de8:	f023 0201 	bic.w	r2, r3, #1
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e006      	b.n	8003e04 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40006400 	.word	0x40006400

08003e14 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e28:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d003      	beq.n	8003e38 <HAL_CAN_GetRxMessage+0x24>
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	f040 80f3 	bne.w	800401e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10e      	bne.n	8003e5c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d116      	bne.n	8003e7a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0e7      	b.n	800402c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d107      	bne.n	8003e7a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0d8      	b.n	800402c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	331b      	adds	r3, #27
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	4413      	add	r3, r2
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0204 	and.w	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10c      	bne.n	8003eb2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	331b      	adds	r3, #27
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	4413      	add	r3, r2
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	0d5b      	lsrs	r3, r3, #21
 8003ea8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e00b      	b.n	8003eca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	331b      	adds	r3, #27
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	4413      	add	r3, r2
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	08db      	lsrs	r3, r3, #3
 8003ec2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	331b      	adds	r3, #27
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	4413      	add	r3, r2
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0202 	and.w	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	331b      	adds	r3, #27
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	4413      	add	r3, r2
 8003eec:	3304      	adds	r3, #4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	331b      	adds	r3, #27
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	4413      	add	r3, r2
 8003f04:	3304      	adds	r3, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	331b      	adds	r3, #27
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	0a1a      	lsrs	r2, r3, #8
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	0c1a      	lsrs	r2, r3, #16
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	0e1a      	lsrs	r2, r3, #24
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	3303      	adds	r3, #3
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	0a1a      	lsrs	r2, r3, #8
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	3305      	adds	r3, #5
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	0c1a      	lsrs	r2, r3, #16
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	3306      	adds	r3, #6
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	0e1a      	lsrs	r2, r3, #24
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	3307      	adds	r3, #7
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d108      	bne.n	800400a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0220 	orr.w	r2, r2, #32
 8004006:	60da      	str	r2, [r3, #12]
 8004008:	e007      	b.n	800401a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0220 	orr.w	r2, r2, #32
 8004018:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e006      	b.n	800402c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
  }
}
 800402c:	4618      	mov	r0, r3
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004040:	2300      	movs	r3, #0
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d07c      	beq.n	8004178 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d023      	beq.n	80040d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2201      	movs	r2, #1
 800408e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd f9f2 	bl	8001484 <HAL_CAN_TxMailbox0CompleteCallback>
 80040a0:	e016      	b.n	80040d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
 80040b4:	e00c      	b.n	80040d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
 80040c8:	e002      	b.n	80040d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f96b 	bl	80043a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d024      	beq.n	8004124 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd f9d6 	bl	80014a0 <HAL_CAN_TxMailbox1CompleteCallback>
 80040f4:	e016      	b.n	8004124 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
 8004108:	e00c      	b.n	8004124 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004110:	2b00      	cmp	r3, #0
 8004112:	d004      	beq.n	800411e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
 800411c:	e002      	b.n	8004124 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f94b 	bl	80043ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d024      	beq.n	8004178 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004136:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd f9ba 	bl	80014bc <HAL_CAN_TxMailbox2CompleteCallback>
 8004148:	e016      	b.n	8004178 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d004      	beq.n	800415e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
 800415c:	e00c      	b.n	8004178 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
 8004170:	e002      	b.n	8004178 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f92b 	bl	80043ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004192:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2210      	movs	r2, #16
 800419a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2208      	movs	r2, #8
 80041b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f912 	bl	80043e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd f97e 	bl	80014d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00c      	beq.n	8004200 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d007      	beq.n	8004200 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2210      	movs	r2, #16
 80041fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d006      	beq.n	8004222 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2208      	movs	r2, #8
 800421a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f8f4 	bl	800440a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f8db 	bl	80043f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b00      	cmp	r3, #0
 8004252:	d006      	beq.n	8004262 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2210      	movs	r2, #16
 800425a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f8de 	bl	800441e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00b      	beq.n	8004284 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d006      	beq.n	8004284 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2208      	movs	r2, #8
 800427c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f8d7 	bl	8004432 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d07b      	beq.n	8004386 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d072      	beq.n	800437e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	f043 0302 	orr.w	r3, r3, #2
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	f043 0304 	orr.w	r3, r3, #4
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d043      	beq.n	800437e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d03e      	beq.n	800437e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004306:	2b60      	cmp	r3, #96	; 0x60
 8004308:	d02b      	beq.n	8004362 <HAL_CAN_IRQHandler+0x32a>
 800430a:	2b60      	cmp	r3, #96	; 0x60
 800430c:	d82e      	bhi.n	800436c <HAL_CAN_IRQHandler+0x334>
 800430e:	2b50      	cmp	r3, #80	; 0x50
 8004310:	d022      	beq.n	8004358 <HAL_CAN_IRQHandler+0x320>
 8004312:	2b50      	cmp	r3, #80	; 0x50
 8004314:	d82a      	bhi.n	800436c <HAL_CAN_IRQHandler+0x334>
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d019      	beq.n	800434e <HAL_CAN_IRQHandler+0x316>
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d826      	bhi.n	800436c <HAL_CAN_IRQHandler+0x334>
 800431e:	2b30      	cmp	r3, #48	; 0x30
 8004320:	d010      	beq.n	8004344 <HAL_CAN_IRQHandler+0x30c>
 8004322:	2b30      	cmp	r3, #48	; 0x30
 8004324:	d822      	bhi.n	800436c <HAL_CAN_IRQHandler+0x334>
 8004326:	2b10      	cmp	r3, #16
 8004328:	d002      	beq.n	8004330 <HAL_CAN_IRQHandler+0x2f8>
 800432a:	2b20      	cmp	r3, #32
 800432c:	d005      	beq.n	800433a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800432e:	e01d      	b.n	800436c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	f043 0308 	orr.w	r3, r3, #8
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004338:	e019      	b.n	800436e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	f043 0310 	orr.w	r3, r3, #16
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004342:	e014      	b.n	800436e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	f043 0320 	orr.w	r3, r3, #32
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800434c:	e00f      	b.n	800436e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004356:	e00a      	b.n	800436e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004360:	e005      	b.n	800436e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800436a:	e000      	b.n	800436e <HAL_CAN_IRQHandler+0x336>
            break;
 800436c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800437c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2204      	movs	r2, #4
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f854 	bl	8004446 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800439e:	bf00      	nop
 80043a0:	3728      	adds	r7, #40	; 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004478:	4013      	ands	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800448e:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	60d3      	str	r3, [r2, #12]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <__NVIC_GetPriorityGrouping+0x18>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	f003 0307 	and.w	r3, r3, #7
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db0b      	blt.n	80044ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	f003 021f 	and.w	r2, r3, #31
 80044d8:	4907      	ldr	r1, [pc, #28]	; (80044f8 <__NVIC_EnableIRQ+0x38>)
 80044da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2001      	movs	r0, #1
 80044e2:	fa00 f202 	lsl.w	r2, r0, r2
 80044e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	e000e100 	.word	0xe000e100

080044fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	6039      	str	r1, [r7, #0]
 8004506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450c:	2b00      	cmp	r3, #0
 800450e:	db0a      	blt.n	8004526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	b2da      	uxtb	r2, r3
 8004514:	490c      	ldr	r1, [pc, #48]	; (8004548 <__NVIC_SetPriority+0x4c>)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	0112      	lsls	r2, r2, #4
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	440b      	add	r3, r1
 8004520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004524:	e00a      	b.n	800453c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	b2da      	uxtb	r2, r3
 800452a:	4908      	ldr	r1, [pc, #32]	; (800454c <__NVIC_SetPriority+0x50>)
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	3b04      	subs	r3, #4
 8004534:	0112      	lsls	r2, r2, #4
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	440b      	add	r3, r1
 800453a:	761a      	strb	r2, [r3, #24]
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000e100 	.word	0xe000e100
 800454c:	e000ed00 	.word	0xe000ed00

08004550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f1c3 0307 	rsb	r3, r3, #7
 800456a:	2b04      	cmp	r3, #4
 800456c:	bf28      	it	cs
 800456e:	2304      	movcs	r3, #4
 8004570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3304      	adds	r3, #4
 8004576:	2b06      	cmp	r3, #6
 8004578:	d902      	bls.n	8004580 <NVIC_EncodePriority+0x30>
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	3b03      	subs	r3, #3
 800457e:	e000      	b.n	8004582 <NVIC_EncodePriority+0x32>
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004584:	f04f 32ff 	mov.w	r2, #4294967295
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43da      	mvns	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	401a      	ands	r2, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004598:	f04f 31ff 	mov.w	r1, #4294967295
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	fa01 f303 	lsl.w	r3, r1, r3
 80045a2:	43d9      	mvns	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a8:	4313      	orrs	r3, r2
         );
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c8:	d301      	bcc.n	80045ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ca:	2301      	movs	r3, #1
 80045cc:	e00f      	b.n	80045ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ce:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <SysTick_Config+0x40>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045d6:	210f      	movs	r1, #15
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	f7ff ff8e 	bl	80044fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <SysTick_Config+0x40>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045e6:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <SysTick_Config+0x40>)
 80045e8:	2207      	movs	r2, #7
 80045ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	e000e010 	.word	0xe000e010

080045fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff29 	bl	800445c <__NVIC_SetPriorityGrouping>
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004612:	b580      	push	{r7, lr}
 8004614:	b086      	sub	sp, #24
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
 800461e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004624:	f7ff ff3e 	bl	80044a4 <__NVIC_GetPriorityGrouping>
 8004628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	6978      	ldr	r0, [r7, #20]
 8004630:	f7ff ff8e 	bl	8004550 <NVIC_EncodePriority>
 8004634:	4602      	mov	r2, r0
 8004636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff5d 	bl	80044fc <__NVIC_SetPriority>
}
 8004642:	bf00      	nop
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	4603      	mov	r3, r0
 8004652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ff31 	bl	80044c0 <__NVIC_EnableIRQ>
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff ffa2 	bl	80045b8 <SysTick_Config>
 8004674:	4603      	mov	r3, r0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004682:	f7fc ffbd 	bl	8001600 <HAL_SYSTICK_Callback>
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d004      	beq.n	80046a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2280      	movs	r2, #128	; 0x80
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e00c      	b.n	80046c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2205      	movs	r2, #5
 80046ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b089      	sub	sp, #36	; 0x24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e16b      	b.n	80049c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046ec:	2201      	movs	r2, #1
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	429a      	cmp	r2, r3
 8004706:	f040 815a 	bne.w	80049be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b01      	cmp	r3, #1
 8004714:	d005      	beq.n	8004722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800471e:	2b02      	cmp	r3, #2
 8004720:	d130      	bne.n	8004784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	2203      	movs	r2, #3
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004758:	2201      	movs	r2, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 0201 	and.w	r2, r3, #1
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b03      	cmp	r3, #3
 800478e:	d017      	beq.n	80047c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	2203      	movs	r2, #3
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d123      	bne.n	8004814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	08da      	lsrs	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3208      	adds	r2, #8
 80047d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	220f      	movs	r2, #15
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	08da      	lsrs	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3208      	adds	r2, #8
 800480e:	69b9      	ldr	r1, [r7, #24]
 8004810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	2203      	movs	r2, #3
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 0203 	and.w	r2, r3, #3
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4313      	orrs	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80b4 	beq.w	80049be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	4b60      	ldr	r3, [pc, #384]	; (80049dc <HAL_GPIO_Init+0x30c>)
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	4a5f      	ldr	r2, [pc, #380]	; (80049dc <HAL_GPIO_Init+0x30c>)
 8004860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004864:	6453      	str	r3, [r2, #68]	; 0x44
 8004866:	4b5d      	ldr	r3, [pc, #372]	; (80049dc <HAL_GPIO_Init+0x30c>)
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004872:	4a5b      	ldr	r2, [pc, #364]	; (80049e0 <HAL_GPIO_Init+0x310>)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	3302      	adds	r3, #2
 800487a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	220f      	movs	r2, #15
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a52      	ldr	r2, [pc, #328]	; (80049e4 <HAL_GPIO_Init+0x314>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02b      	beq.n	80048f6 <HAL_GPIO_Init+0x226>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a51      	ldr	r2, [pc, #324]	; (80049e8 <HAL_GPIO_Init+0x318>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d025      	beq.n	80048f2 <HAL_GPIO_Init+0x222>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a50      	ldr	r2, [pc, #320]	; (80049ec <HAL_GPIO_Init+0x31c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01f      	beq.n	80048ee <HAL_GPIO_Init+0x21e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a4f      	ldr	r2, [pc, #316]	; (80049f0 <HAL_GPIO_Init+0x320>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d019      	beq.n	80048ea <HAL_GPIO_Init+0x21a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4e      	ldr	r2, [pc, #312]	; (80049f4 <HAL_GPIO_Init+0x324>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_GPIO_Init+0x216>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a4d      	ldr	r2, [pc, #308]	; (80049f8 <HAL_GPIO_Init+0x328>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00d      	beq.n	80048e2 <HAL_GPIO_Init+0x212>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a4c      	ldr	r2, [pc, #304]	; (80049fc <HAL_GPIO_Init+0x32c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <HAL_GPIO_Init+0x20e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a4b      	ldr	r2, [pc, #300]	; (8004a00 <HAL_GPIO_Init+0x330>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <HAL_GPIO_Init+0x20a>
 80048d6:	2307      	movs	r3, #7
 80048d8:	e00e      	b.n	80048f8 <HAL_GPIO_Init+0x228>
 80048da:	2308      	movs	r3, #8
 80048dc:	e00c      	b.n	80048f8 <HAL_GPIO_Init+0x228>
 80048de:	2306      	movs	r3, #6
 80048e0:	e00a      	b.n	80048f8 <HAL_GPIO_Init+0x228>
 80048e2:	2305      	movs	r3, #5
 80048e4:	e008      	b.n	80048f8 <HAL_GPIO_Init+0x228>
 80048e6:	2304      	movs	r3, #4
 80048e8:	e006      	b.n	80048f8 <HAL_GPIO_Init+0x228>
 80048ea:	2303      	movs	r3, #3
 80048ec:	e004      	b.n	80048f8 <HAL_GPIO_Init+0x228>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e002      	b.n	80048f8 <HAL_GPIO_Init+0x228>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <HAL_GPIO_Init+0x228>
 80048f6:	2300      	movs	r3, #0
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	f002 0203 	and.w	r2, r2, #3
 80048fe:	0092      	lsls	r2, r2, #2
 8004900:	4093      	lsls	r3, r2
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004908:	4935      	ldr	r1, [pc, #212]	; (80049e0 <HAL_GPIO_Init+0x310>)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	3302      	adds	r3, #2
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004916:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <HAL_GPIO_Init+0x334>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800493a:	4a32      	ldr	r2, [pc, #200]	; (8004a04 <HAL_GPIO_Init+0x334>)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004940:	4b30      	ldr	r3, [pc, #192]	; (8004a04 <HAL_GPIO_Init+0x334>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004964:	4a27      	ldr	r2, [pc, #156]	; (8004a04 <HAL_GPIO_Init+0x334>)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800496a:	4b26      	ldr	r3, [pc, #152]	; (8004a04 <HAL_GPIO_Init+0x334>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800498e:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <HAL_GPIO_Init+0x334>)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_GPIO_Init+0x334>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049b8:	4a12      	ldr	r2, [pc, #72]	; (8004a04 <HAL_GPIO_Init+0x334>)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3301      	adds	r3, #1
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	f67f ae90 	bls.w	80046ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	3724      	adds	r7, #36	; 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
 80049e0:	40013800 	.word	0x40013800
 80049e4:	40020000 	.word	0x40020000
 80049e8:	40020400 	.word	0x40020400
 80049ec:	40020800 	.word	0x40020800
 80049f0:	40020c00 	.word	0x40020c00
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40021400 	.word	0x40021400
 80049fc:	40021800 	.word	0x40021800
 8004a00:	40021c00 	.word	0x40021c00
 8004a04:	40013c00 	.word	0x40013c00

08004a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	887b      	ldrh	r3, [r7, #2]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
 8004a24:	e001      	b.n	8004a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	807b      	strh	r3, [r7, #2]
 8004a44:	4613      	mov	r3, r2
 8004a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a48:	787b      	ldrb	r3, [r7, #1]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a4e:	887a      	ldrh	r2, [r7, #2]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a54:	e003      	b.n	8004a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a56:	887b      	ldrh	r3, [r7, #2]
 8004a58:	041a      	lsls	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	619a      	str	r2, [r3, #24]
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	460b      	mov	r3, r1
 8004a74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a7c:	887a      	ldrh	r2, [r7, #2]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4013      	ands	r3, r2
 8004a82:	041a      	lsls	r2, r3, #16
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	43d9      	mvns	r1, r3
 8004a88:	887b      	ldrh	r3, [r7, #2]
 8004a8a:	400b      	ands	r3, r1
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	619a      	str	r2, [r3, #24]
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e12b      	b.n	8004d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fd fb38 	bl	800213c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2224      	movs	r2, #36	; 0x24
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0201 	bic.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b04:	f002 f99e 	bl	8006e44 <HAL_RCC_GetPCLK1Freq>
 8004b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4a81      	ldr	r2, [pc, #516]	; (8004d14 <HAL_I2C_Init+0x274>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d807      	bhi.n	8004b24 <HAL_I2C_Init+0x84>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a80      	ldr	r2, [pc, #512]	; (8004d18 <HAL_I2C_Init+0x278>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bf94      	ite	ls
 8004b1c:	2301      	movls	r3, #1
 8004b1e:	2300      	movhi	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	e006      	b.n	8004b32 <HAL_I2C_Init+0x92>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a7d      	ldr	r2, [pc, #500]	; (8004d1c <HAL_I2C_Init+0x27c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	bf94      	ite	ls
 8004b2c:	2301      	movls	r3, #1
 8004b2e:	2300      	movhi	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e0e7      	b.n	8004d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a78      	ldr	r2, [pc, #480]	; (8004d20 <HAL_I2C_Init+0x280>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	0c9b      	lsrs	r3, r3, #18
 8004b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4a6a      	ldr	r2, [pc, #424]	; (8004d14 <HAL_I2C_Init+0x274>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d802      	bhi.n	8004b74 <HAL_I2C_Init+0xd4>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	3301      	adds	r3, #1
 8004b72:	e009      	b.n	8004b88 <HAL_I2C_Init+0xe8>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	4a69      	ldr	r2, [pc, #420]	; (8004d24 <HAL_I2C_Init+0x284>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	3301      	adds	r3, #1
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	495c      	ldr	r1, [pc, #368]	; (8004d14 <HAL_I2C_Init+0x274>)
 8004ba4:	428b      	cmp	r3, r1
 8004ba6:	d819      	bhi.n	8004bdc <HAL_I2C_Init+0x13c>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1e59      	subs	r1, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bb6:	1c59      	adds	r1, r3, #1
 8004bb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bbc:	400b      	ands	r3, r1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_I2C_Init+0x138>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1e59      	subs	r1, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd6:	e051      	b.n	8004c7c <HAL_I2C_Init+0x1dc>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	e04f      	b.n	8004c7c <HAL_I2C_Init+0x1dc>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d111      	bne.n	8004c08 <HAL_I2C_Init+0x168>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1e58      	subs	r0, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6859      	ldr	r1, [r3, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	440b      	add	r3, r1
 8004bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bf0c      	ite	eq
 8004c00:	2301      	moveq	r3, #1
 8004c02:	2300      	movne	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e012      	b.n	8004c2e <HAL_I2C_Init+0x18e>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1e58      	subs	r0, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6859      	ldr	r1, [r3, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	0099      	lsls	r1, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_I2C_Init+0x196>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e022      	b.n	8004c7c <HAL_I2C_Init+0x1dc>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10e      	bne.n	8004c5c <HAL_I2C_Init+0x1bc>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1e58      	subs	r0, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6859      	ldr	r1, [r3, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	440b      	add	r3, r1
 8004c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c50:	3301      	adds	r3, #1
 8004c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5a:	e00f      	b.n	8004c7c <HAL_I2C_Init+0x1dc>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1e58      	subs	r0, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	0099      	lsls	r1, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c72:	3301      	adds	r3, #1
 8004c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	6809      	ldr	r1, [r1, #0]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6911      	ldr	r1, [r2, #16]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68d2      	ldr	r2, [r2, #12]
 8004cb6:	4311      	orrs	r1, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6812      	ldr	r2, [r2, #0]
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	000186a0 	.word	0x000186a0
 8004d18:	001e847f 	.word	0x001e847f
 8004d1c:	003d08ff 	.word	0x003d08ff
 8004d20:	431bde83 	.word	0x431bde83
 8004d24:	10624dd3 	.word	0x10624dd3

08004d28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	461a      	mov	r2, r3
 8004d34:	460b      	mov	r3, r1
 8004d36:	817b      	strh	r3, [r7, #10]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d3c:	f7fe f9e2 	bl	8003104 <HAL_GetTick>
 8004d40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	f040 80e0 	bne.w	8004f10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2319      	movs	r3, #25
 8004d56:	2201      	movs	r2, #1
 8004d58:	4970      	ldr	r1, [pc, #448]	; (8004f1c <HAL_I2C_Master_Transmit+0x1f4>)
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f001 fa24 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
 8004d68:	e0d3      	b.n	8004f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_I2C_Master_Transmit+0x50>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e0cc      	b.n	8004f12 <HAL_I2C_Master_Transmit+0x1ea>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d007      	beq.n	8004d9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0201 	orr.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2221      	movs	r2, #33	; 0x21
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2210      	movs	r2, #16
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	893a      	ldrh	r2, [r7, #8]
 8004dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a50      	ldr	r2, [pc, #320]	; (8004f20 <HAL_I2C_Master_Transmit+0x1f8>)
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004de0:	8979      	ldrh	r1, [r7, #10]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 ff10 	bl	8005c0c <I2C_MasterRequestWrite>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e08d      	b.n	8004f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df6:	2300      	movs	r3, #0
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e0c:	e066      	b.n	8004edc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	6a39      	ldr	r1, [r7, #32]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f001 fa9e 	bl	8006354 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d107      	bne.n	8004e36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e06b      	b.n	8004f12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	781a      	ldrb	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d11b      	bne.n	8004eb0 <HAL_I2C_Master_Transmit+0x188>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d017      	beq.n	8004eb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	781a      	ldrb	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	6a39      	ldr	r1, [r7, #32]
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f001 fa8e 	bl	80063d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00d      	beq.n	8004edc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d107      	bne.n	8004ed8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e01a      	b.n	8004f12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d194      	bne.n	8004e0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	00100002 	.word	0x00100002
 8004f20:	ffff0000 	.word	0xffff0000

08004f24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	; 0x30
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	460b      	mov	r3, r1
 8004f32:	817b      	strh	r3, [r7, #10]
 8004f34:	4613      	mov	r3, r2
 8004f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f38:	f7fe f8e4 	bl	8003104 <HAL_GetTick>
 8004f3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	f040 820b 	bne.w	8005362 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2319      	movs	r3, #25
 8004f52:	2201      	movs	r2, #1
 8004f54:	497c      	ldr	r1, [pc, #496]	; (8005148 <HAL_I2C_Master_Receive+0x224>)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f001 f926 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
 8004f64:	e1fe      	b.n	8005364 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_I2C_Master_Receive+0x50>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e1f7      	b.n	8005364 <HAL_I2C_Master_Receive+0x440>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d007      	beq.n	8004f9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2222      	movs	r2, #34	; 0x22
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	893a      	ldrh	r2, [r7, #8]
 8004fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a5c      	ldr	r2, [pc, #368]	; (800514c <HAL_I2C_Master_Receive+0x228>)
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fdc:	8979      	ldrh	r1, [r7, #10]
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fe94 	bl	8005d10 <I2C_MasterRequestRead>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e1b8      	b.n	8005364 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d113      	bne.n	8005022 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	623b      	str	r3, [r7, #32]
 800500e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e18c      	b.n	800533c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005026:	2b01      	cmp	r3, #1
 8005028:	d11b      	bne.n	8005062 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e16c      	b.n	800533c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005066:	2b02      	cmp	r3, #2
 8005068:	d11b      	bne.n	80050a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005078:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508a:	2300      	movs	r3, #0
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	e14c      	b.n	800533c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050c8:	e138      	b.n	800533c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	f200 80f1 	bhi.w	80052b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d123      	bne.n	8005124 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f001 f9b9 	bl	8006458 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e139      	b.n	8005364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005122:	e10b      	b.n	800533c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005128:	2b02      	cmp	r3, #2
 800512a:	d14e      	bne.n	80051ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	2200      	movs	r2, #0
 8005134:	4906      	ldr	r1, [pc, #24]	; (8005150 <HAL_I2C_Master_Receive+0x22c>)
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f001 f836 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e10e      	b.n	8005364 <HAL_I2C_Master_Receive+0x440>
 8005146:	bf00      	nop
 8005148:	00100002 	.word	0x00100002
 800514c:	ffff0000 	.word	0xffff0000
 8005150:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051c8:	e0b8      	b.n	800533c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	2200      	movs	r2, #0
 80051d2:	4966      	ldr	r1, [pc, #408]	; (800536c <HAL_I2C_Master_Receive+0x448>)
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 ffe7 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0bf      	b.n	8005364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	2200      	movs	r2, #0
 800522e:	494f      	ldr	r1, [pc, #316]	; (800536c <HAL_I2C_Master_Receive+0x448>)
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 ffb9 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e091      	b.n	8005364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052b4:	e042      	b.n	800533c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f001 f8cc 	bl	8006458 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e04c      	b.n	8005364 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b04      	cmp	r3, #4
 8005308:	d118      	bne.n	800533c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f aec2 	bne.w	80050ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3728      	adds	r7, #40	; 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	00010004 	.word	0x00010004

08005370 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	4608      	mov	r0, r1
 800537a:	4611      	mov	r1, r2
 800537c:	461a      	mov	r2, r3
 800537e:	4603      	mov	r3, r0
 8005380:	817b      	strh	r3, [r7, #10]
 8005382:	460b      	mov	r3, r1
 8005384:	813b      	strh	r3, [r7, #8]
 8005386:	4613      	mov	r3, r2
 8005388:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800538a:	f7fd febb 	bl	8003104 <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b20      	cmp	r3, #32
 800539a:	f040 80d9 	bne.w	8005550 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	2319      	movs	r3, #25
 80053a4:	2201      	movs	r2, #1
 80053a6:	496d      	ldr	r1, [pc, #436]	; (800555c <HAL_I2C_Mem_Write+0x1ec>)
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fefd 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053b4:	2302      	movs	r3, #2
 80053b6:	e0cc      	b.n	8005552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_I2C_Mem_Write+0x56>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e0c5      	b.n	8005552 <HAL_I2C_Mem_Write+0x1e2>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d007      	beq.n	80053ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2221      	movs	r2, #33	; 0x21
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2240      	movs	r2, #64	; 0x40
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a3a      	ldr	r2, [r7, #32]
 8005416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800541c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a4d      	ldr	r2, [pc, #308]	; (8005560 <HAL_I2C_Mem_Write+0x1f0>)
 800542c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800542e:	88f8      	ldrh	r0, [r7, #6]
 8005430:	893a      	ldrh	r2, [r7, #8]
 8005432:	8979      	ldrh	r1, [r7, #10]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	4603      	mov	r3, r0
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fd34 	bl	8005eac <I2C_RequestMemoryWrite>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d052      	beq.n	80054f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e081      	b.n	8005552 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 ff7e 	bl	8006354 <I2C_WaitOnTXEFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00d      	beq.n	800547a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	2b04      	cmp	r3, #4
 8005464:	d107      	bne.n	8005476 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e06b      	b.n	8005552 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	781a      	ldrb	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d11b      	bne.n	80054f0 <HAL_I2C_Mem_Write+0x180>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d017      	beq.n	80054f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1aa      	bne.n	800544e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 ff6a 	bl	80063d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00d      	beq.n	8005524 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	2b04      	cmp	r3, #4
 800550e:	d107      	bne.n	8005520 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e016      	b.n	8005552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	e000      	b.n	8005552 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005550:	2302      	movs	r3, #2
  }
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	00100002 	.word	0x00100002
 8005560:	ffff0000 	.word	0xffff0000

08005564 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08c      	sub	sp, #48	; 0x30
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4603      	mov	r3, r0
 8005574:	817b      	strh	r3, [r7, #10]
 8005576:	460b      	mov	r3, r1
 8005578:	813b      	strh	r3, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800557e:	f7fd fdc1 	bl	8003104 <HAL_GetTick>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b20      	cmp	r3, #32
 800558e:	f040 8208 	bne.w	80059a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	2319      	movs	r3, #25
 8005598:	2201      	movs	r2, #1
 800559a:	497b      	ldr	r1, [pc, #492]	; (8005788 <HAL_I2C_Mem_Read+0x224>)
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fe03 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055a8:	2302      	movs	r3, #2
 80055aa:	e1fb      	b.n	80059a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_I2C_Mem_Read+0x56>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e1f4      	b.n	80059a4 <HAL_I2C_Mem_Read+0x440>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d007      	beq.n	80055e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2222      	movs	r2, #34	; 0x22
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2240      	movs	r2, #64	; 0x40
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800560a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4a5b      	ldr	r2, [pc, #364]	; (800578c <HAL_I2C_Mem_Read+0x228>)
 8005620:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005622:	88f8      	ldrh	r0, [r7, #6]
 8005624:	893a      	ldrh	r2, [r7, #8]
 8005626:	8979      	ldrh	r1, [r7, #10]
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	4603      	mov	r3, r0
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fcd0 	bl	8005fd8 <I2C_RequestMemoryRead>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e1b0      	b.n	80059a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d113      	bne.n	8005672 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800564a:	2300      	movs	r3, #0
 800564c:	623b      	str	r3, [r7, #32]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	623b      	str	r3, [r7, #32]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e184      	b.n	800597c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005676:	2b01      	cmp	r3, #1
 8005678:	d11b      	bne.n	80056b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	61fb      	str	r3, [r7, #28]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	61fb      	str	r3, [r7, #28]
 800569e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e164      	b.n	800597c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d11b      	bne.n	80056f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056da:	2300      	movs	r3, #0
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	e144      	b.n	800597c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005708:	e138      	b.n	800597c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570e:	2b03      	cmp	r3, #3
 8005710:	f200 80f1 	bhi.w	80058f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005718:	2b01      	cmp	r3, #1
 800571a:	d123      	bne.n	8005764 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800571c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fe99 	bl	8006458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e139      	b.n	80059a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005762:	e10b      	b.n	800597c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005768:	2b02      	cmp	r3, #2
 800576a:	d14e      	bne.n	800580a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	2200      	movs	r2, #0
 8005774:	4906      	ldr	r1, [pc, #24]	; (8005790 <HAL_I2C_Mem_Read+0x22c>)
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fd16 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e10e      	b.n	80059a4 <HAL_I2C_Mem_Read+0x440>
 8005786:	bf00      	nop
 8005788:	00100002 	.word	0x00100002
 800578c:	ffff0000 	.word	0xffff0000
 8005790:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005808:	e0b8      	b.n	800597c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	2200      	movs	r2, #0
 8005812:	4966      	ldr	r1, [pc, #408]	; (80059ac <HAL_I2C_Mem_Read+0x448>)
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fcc7 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0bf      	b.n	80059a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	2200      	movs	r2, #0
 800586e:	494f      	ldr	r1, [pc, #316]	; (80059ac <HAL_I2C_Mem_Read+0x448>)
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fc99 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e091      	b.n	80059a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058f4:	e042      	b.n	800597c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 fdac 	bl	8006458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e04c      	b.n	80059a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b04      	cmp	r3, #4
 8005948:	d118      	bne.n	800597c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005980:	2b00      	cmp	r3, #0
 8005982:	f47f aec2 	bne.w	800570a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	e000      	b.n	80059a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059a2:	2302      	movs	r3, #2
  }
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3728      	adds	r7, #40	; 0x28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	00010004 	.word	0x00010004

080059b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08a      	sub	sp, #40	; 0x28
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	460b      	mov	r3, r1
 80059be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80059c0:	f7fd fba0 	bl	8003104 <HAL_GetTick>
 80059c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	f040 8111 	bne.w	8005bfa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2319      	movs	r3, #25
 80059de:	2201      	movs	r2, #1
 80059e0:	4988      	ldr	r1, [pc, #544]	; (8005c04 <HAL_I2C_IsDeviceReady+0x254>)
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fbe0 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
 80059f0:	e104      	b.n	8005bfc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_I2C_IsDeviceReady+0x50>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e0fd      	b.n	8005bfc <HAL_I2C_IsDeviceReady+0x24c>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d007      	beq.n	8005a26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2224      	movs	r2, #36	; 0x24
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4a70      	ldr	r2, [pc, #448]	; (8005c08 <HAL_I2C_IsDeviceReady+0x258>)
 8005a48:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fb9e 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a80:	d103      	bne.n	8005a8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e0b6      	b.n	8005bfc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a8e:	897b      	ldrh	r3, [r7, #10]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005a9e:	f7fd fb31 	bl	8003104 <HAL_GetTick>
 8005aa2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	bf0c      	ite	eq
 8005ab2:	2301      	moveq	r3, #1
 8005ab4:	2300      	movne	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac8:	bf0c      	ite	eq
 8005aca:	2301      	moveq	r3, #1
 8005acc:	2300      	movne	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ad2:	e025      	b.n	8005b20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ad4:	f7fd fb16 	bl	8003104 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d302      	bcc.n	8005aea <HAL_I2C_IsDeviceReady+0x13a>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	22a0      	movs	r2, #160	; 0xa0
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	bf0c      	ite	eq
 8005b00:	2301      	moveq	r3, #1
 8005b02:	2300      	movne	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b16:	bf0c      	ite	eq
 8005b18:	2301      	moveq	r3, #1
 8005b1a:	2300      	movne	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2ba0      	cmp	r3, #160	; 0xa0
 8005b2a:	d005      	beq.n	8005b38 <HAL_I2C_IsDeviceReady+0x188>
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <HAL_I2C_IsDeviceReady+0x188>
 8005b32:	7dbb      	ldrb	r3, [r7, #22]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0cd      	beq.n	8005ad4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d129      	bne.n	8005ba2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5e:	2300      	movs	r3, #0
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	2319      	movs	r3, #25
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	4921      	ldr	r1, [pc, #132]	; (8005c04 <HAL_I2C_IsDeviceReady+0x254>)
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 fb12 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e036      	b.n	8005bfc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e02c      	b.n	8005bfc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	2319      	movs	r3, #25
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	490f      	ldr	r1, [pc, #60]	; (8005c04 <HAL_I2C_IsDeviceReady+0x254>)
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 faee 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e012      	b.n	8005bfc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	f4ff af32 	bcc.w	8005a4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005bfa:	2302      	movs	r3, #2
  }
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3720      	adds	r7, #32
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	00100002 	.word	0x00100002
 8005c08:	ffff0000 	.word	0xffff0000

08005c0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d006      	beq.n	8005c36 <I2C_MasterRequestWrite+0x2a>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d003      	beq.n	8005c36 <I2C_MasterRequestWrite+0x2a>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c34:	d108      	bne.n	8005c48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	e00b      	b.n	8005c60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	2b12      	cmp	r3, #18
 8005c4e:	d107      	bne.n	8005c60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fa9b 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00d      	beq.n	8005c94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c86:	d103      	bne.n	8005c90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e035      	b.n	8005d00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c9c:	d108      	bne.n	8005cb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c9e:	897b      	ldrh	r3, [r7, #10]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cac:	611a      	str	r2, [r3, #16]
 8005cae:	e01b      	b.n	8005ce8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cb0:	897b      	ldrh	r3, [r7, #10]
 8005cb2:	11db      	asrs	r3, r3, #7
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	f003 0306 	and.w	r3, r3, #6
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f063 030f 	orn	r3, r3, #15
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	490e      	ldr	r1, [pc, #56]	; (8005d08 <I2C_MasterRequestWrite+0xfc>)
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 fac1 	bl	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e010      	b.n	8005d00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cde:	897b      	ldrh	r3, [r7, #10]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	4907      	ldr	r1, [pc, #28]	; (8005d0c <I2C_MasterRequestWrite+0x100>)
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fab1 	bl	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	00010008 	.word	0x00010008
 8005d0c:	00010002 	.word	0x00010002

08005d10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d006      	beq.n	8005d4a <I2C_MasterRequestRead+0x3a>
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d003      	beq.n	8005d4a <I2C_MasterRequestRead+0x3a>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d48:	d108      	bne.n	8005d5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e00b      	b.n	8005d74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	2b11      	cmp	r3, #17
 8005d62:	d107      	bne.n	8005d74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fa11 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00d      	beq.n	8005da8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9a:	d103      	bne.n	8005da4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e079      	b.n	8005e9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005db0:	d108      	bne.n	8005dc4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005db2:	897b      	ldrh	r3, [r7, #10]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	611a      	str	r2, [r3, #16]
 8005dc2:	e05f      	b.n	8005e84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dc4:	897b      	ldrh	r3, [r7, #10]
 8005dc6:	11db      	asrs	r3, r3, #7
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	f003 0306 	and.w	r3, r3, #6
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f063 030f 	orn	r3, r3, #15
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4930      	ldr	r1, [pc, #192]	; (8005ea4 <I2C_MasterRequestRead+0x194>)
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fa37 	bl	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e054      	b.n	8005e9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005df2:	897b      	ldrh	r3, [r7, #10]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4929      	ldr	r1, [pc, #164]	; (8005ea8 <I2C_MasterRequestRead+0x198>)
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fa27 	bl	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e044      	b.n	8005e9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f9af 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00d      	beq.n	8005e6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5e:	d103      	bne.n	8005e68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e017      	b.n	8005e9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e6c:	897b      	ldrh	r3, [r7, #10]
 8005e6e:	11db      	asrs	r3, r3, #7
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	f003 0306 	and.w	r3, r3, #6
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	f063 030e 	orn	r3, r3, #14
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4907      	ldr	r1, [pc, #28]	; (8005ea8 <I2C_MasterRequestRead+0x198>)
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 f9e3 	bl	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	00010008 	.word	0x00010008
 8005ea8:	00010002 	.word	0x00010002

08005eac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	817b      	strh	r3, [r7, #10]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	813b      	strh	r3, [r7, #8]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f960 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00d      	beq.n	8005f0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efc:	d103      	bne.n	8005f06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e05f      	b.n	8005fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f0a:	897b      	ldrh	r3, [r7, #10]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	6a3a      	ldr	r2, [r7, #32]
 8005f1e:	492d      	ldr	r1, [pc, #180]	; (8005fd4 <I2C_RequestMemoryWrite+0x128>)
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f998 	bl	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e04c      	b.n	8005fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f48:	6a39      	ldr	r1, [r7, #32]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fa02 	bl	8006354 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00d      	beq.n	8005f72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d107      	bne.n	8005f6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e02b      	b.n	8005fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d105      	bne.n	8005f84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f78:	893b      	ldrh	r3, [r7, #8]
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	611a      	str	r2, [r3, #16]
 8005f82:	e021      	b.n	8005fc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f84:	893b      	ldrh	r3, [r7, #8]
 8005f86:	0a1b      	lsrs	r3, r3, #8
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f94:	6a39      	ldr	r1, [r7, #32]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f9dc 	bl	8006354 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00d      	beq.n	8005fbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d107      	bne.n	8005fba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e005      	b.n	8005fca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fbe:	893b      	ldrh	r3, [r7, #8]
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	00010002 	.word	0x00010002

08005fd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af02      	add	r7, sp, #8
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	817b      	strh	r3, [r7, #10]
 8005fea:	460b      	mov	r3, r1
 8005fec:	813b      	strh	r3, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006000:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	2200      	movs	r2, #0
 800601a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f8c2 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00d      	beq.n	8006046 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006038:	d103      	bne.n	8006042 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e0aa      	b.n	800619c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	6a3a      	ldr	r2, [r7, #32]
 800605a:	4952      	ldr	r1, [pc, #328]	; (80061a4 <I2C_RequestMemoryRead+0x1cc>)
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f8fa 	bl	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e097      	b.n	800619c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006084:	6a39      	ldr	r1, [r7, #32]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f964 	bl	8006354 <I2C_WaitOnTXEFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00d      	beq.n	80060ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	2b04      	cmp	r3, #4
 8006098:	d107      	bne.n	80060aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e076      	b.n	800619c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d105      	bne.n	80060c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060b4:	893b      	ldrh	r3, [r7, #8]
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	611a      	str	r2, [r3, #16]
 80060be:	e021      	b.n	8006104 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060c0:	893b      	ldrh	r3, [r7, #8]
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d0:	6a39      	ldr	r1, [r7, #32]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f93e 	bl	8006354 <I2C_WaitOnTXEFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00d      	beq.n	80060fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d107      	bne.n	80060f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e050      	b.n	800619c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060fa:	893b      	ldrh	r3, [r7, #8]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006106:	6a39      	ldr	r1, [r7, #32]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f923 	bl	8006354 <I2C_WaitOnTXEFlagUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00d      	beq.n	8006130 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	2b04      	cmp	r3, #4
 800611a:	d107      	bne.n	800612c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e035      	b.n	800619c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800613e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	2200      	movs	r2, #0
 8006148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f82b 	bl	80061a8 <I2C_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00d      	beq.n	8006174 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006166:	d103      	bne.n	8006170 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800616e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e013      	b.n	800619c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006174:	897b      	ldrh	r3, [r7, #10]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	6a3a      	ldr	r2, [r7, #32]
 8006188:	4906      	ldr	r1, [pc, #24]	; (80061a4 <I2C_RequestMemoryRead+0x1cc>)
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f863 	bl	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	00010002 	.word	0x00010002

080061a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	4613      	mov	r3, r2
 80061b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061b8:	e025      	b.n	8006206 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d021      	beq.n	8006206 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c2:	f7fc ff9f 	bl	8003104 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d116      	bne.n	8006206 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e023      	b.n	800624e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10d      	bne.n	800622c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	43da      	mvns	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4013      	ands	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	bf0c      	ite	eq
 8006222:	2301      	moveq	r3, #1
 8006224:	2300      	movne	r3, #0
 8006226:	b2db      	uxtb	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	e00c      	b.n	8006246 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	43da      	mvns	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4013      	ands	r3, r2
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	bf0c      	ite	eq
 800623e:	2301      	moveq	r3, #1
 8006240:	2300      	movne	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	429a      	cmp	r2, r3
 800624a:	d0b6      	beq.n	80061ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
 8006262:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006264:	e051      	b.n	800630a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006274:	d123      	bne.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006284:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800628e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f043 0204 	orr.w	r2, r3, #4
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e046      	b.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d021      	beq.n	800630a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c6:	f7fc ff1d 	bl	8003104 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d302      	bcc.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d116      	bne.n	800630a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	f043 0220 	orr.w	r2, r3, #32
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e020      	b.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	0c1b      	lsrs	r3, r3, #16
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b01      	cmp	r3, #1
 8006312:	d10c      	bne.n	800632e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	43da      	mvns	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4013      	ands	r3, r2
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	bf14      	ite	ne
 8006326:	2301      	movne	r3, #1
 8006328:	2300      	moveq	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	e00b      	b.n	8006346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	43da      	mvns	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4013      	ands	r3, r2
 800633a:	b29b      	uxth	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	bf14      	ite	ne
 8006340:	2301      	movne	r3, #1
 8006342:	2300      	moveq	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d18d      	bne.n	8006266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006360:	e02d      	b.n	80063be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 f8ce 	bl	8006504 <I2C_IsAcknowledgeFailed>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e02d      	b.n	80063ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006378:	d021      	beq.n	80063be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637a:	f7fc fec3 	bl	8003104 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	429a      	cmp	r2, r3
 8006388:	d302      	bcc.n	8006390 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d116      	bne.n	80063be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f043 0220 	orr.w	r2, r3, #32
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e007      	b.n	80063ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c8:	2b80      	cmp	r3, #128	; 0x80
 80063ca:	d1ca      	bne.n	8006362 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063e2:	e02d      	b.n	8006440 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f88d 	bl	8006504 <I2C_IsAcknowledgeFailed>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e02d      	b.n	8006450 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d021      	beq.n	8006440 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fc:	f7fc fe82 	bl	8003104 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d116      	bne.n	8006440 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	f043 0220 	orr.w	r2, r3, #32
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e007      	b.n	8006450 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d1ca      	bne.n	80063e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006464:	e042      	b.n	80064ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b10      	cmp	r3, #16
 8006472:	d119      	bne.n	80064a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0210 	mvn.w	r2, #16
 800647c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e029      	b.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a8:	f7fc fe2c 	bl	8003104 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d302      	bcc.n	80064be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d116      	bne.n	80064ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	f043 0220 	orr.w	r2, r3, #32
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e007      	b.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d1b5      	bne.n	8006466 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651a:	d11b      	bne.n	8006554 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006524:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	f043 0204 	orr.w	r2, r3, #4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e267      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d075      	beq.n	800666e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006582:	4b88      	ldr	r3, [pc, #544]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 030c 	and.w	r3, r3, #12
 800658a:	2b04      	cmp	r3, #4
 800658c:	d00c      	beq.n	80065a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800658e:	4b85      	ldr	r3, [pc, #532]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006596:	2b08      	cmp	r3, #8
 8006598:	d112      	bne.n	80065c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800659a:	4b82      	ldr	r3, [pc, #520]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065a6:	d10b      	bne.n	80065c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a8:	4b7e      	ldr	r3, [pc, #504]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d05b      	beq.n	800666c <HAL_RCC_OscConfig+0x108>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d157      	bne.n	800666c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e242      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c8:	d106      	bne.n	80065d8 <HAL_RCC_OscConfig+0x74>
 80065ca:	4b76      	ldr	r3, [pc, #472]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a75      	ldr	r2, [pc, #468]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80065d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	e01d      	b.n	8006614 <HAL_RCC_OscConfig+0xb0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065e0:	d10c      	bne.n	80065fc <HAL_RCC_OscConfig+0x98>
 80065e2:	4b70      	ldr	r3, [pc, #448]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a6f      	ldr	r2, [pc, #444]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80065e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	4b6d      	ldr	r3, [pc, #436]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a6c      	ldr	r2, [pc, #432]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80065f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	e00b      	b.n	8006614 <HAL_RCC_OscConfig+0xb0>
 80065fc:	4b69      	ldr	r3, [pc, #420]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a68      	ldr	r2, [pc, #416]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	4b66      	ldr	r3, [pc, #408]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a65      	ldr	r2, [pc, #404]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 800660e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d013      	beq.n	8006644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800661c:	f7fc fd72 	bl	8003104 <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006624:	f7fc fd6e 	bl	8003104 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b64      	cmp	r3, #100	; 0x64
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e207      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006636:	4b5b      	ldr	r3, [pc, #364]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0f0      	beq.n	8006624 <HAL_RCC_OscConfig+0xc0>
 8006642:	e014      	b.n	800666e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006644:	f7fc fd5e 	bl	8003104 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800664c:	f7fc fd5a 	bl	8003104 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b64      	cmp	r3, #100	; 0x64
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e1f3      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800665e:	4b51      	ldr	r3, [pc, #324]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0xe8>
 800666a:	e000      	b.n	800666e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800666c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d063      	beq.n	8006742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800667a:	4b4a      	ldr	r3, [pc, #296]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00b      	beq.n	800669e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006686:	4b47      	ldr	r3, [pc, #284]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800668e:	2b08      	cmp	r3, #8
 8006690:	d11c      	bne.n	80066cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006692:	4b44      	ldr	r3, [pc, #272]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d116      	bne.n	80066cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800669e:	4b41      	ldr	r3, [pc, #260]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <HAL_RCC_OscConfig+0x152>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d001      	beq.n	80066b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e1c7      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b6:	4b3b      	ldr	r3, [pc, #236]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	4937      	ldr	r1, [pc, #220]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ca:	e03a      	b.n	8006742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d020      	beq.n	8006716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066d4:	4b34      	ldr	r3, [pc, #208]	; (80067a8 <HAL_RCC_OscConfig+0x244>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066da:	f7fc fd13 	bl	8003104 <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066e2:	f7fc fd0f 	bl	8003104 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e1a8      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f4:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006700:	4b28      	ldr	r3, [pc, #160]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	4925      	ldr	r1, [pc, #148]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006710:	4313      	orrs	r3, r2
 8006712:	600b      	str	r3, [r1, #0]
 8006714:	e015      	b.n	8006742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <HAL_RCC_OscConfig+0x244>)
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fc fcf2 	bl	8003104 <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006724:	f7fc fcee 	bl	8003104 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e187      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006736:	4b1b      	ldr	r3, [pc, #108]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d036      	beq.n	80067bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d016      	beq.n	8006784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006756:	4b15      	ldr	r3, [pc, #84]	; (80067ac <HAL_RCC_OscConfig+0x248>)
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675c:	f7fc fcd2 	bl	8003104 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006764:	f7fc fcce 	bl	8003104 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e167      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006776:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <HAL_RCC_OscConfig+0x240>)
 8006778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0f0      	beq.n	8006764 <HAL_RCC_OscConfig+0x200>
 8006782:	e01b      	b.n	80067bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <HAL_RCC_OscConfig+0x248>)
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800678a:	f7fc fcbb 	bl	8003104 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006790:	e00e      	b.n	80067b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006792:	f7fc fcb7 	bl	8003104 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d907      	bls.n	80067b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e150      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
 80067a4:	40023800 	.word	0x40023800
 80067a8:	42470000 	.word	0x42470000
 80067ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b0:	4b88      	ldr	r3, [pc, #544]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 80067b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1ea      	bne.n	8006792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8097 	beq.w	80068f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ca:	2300      	movs	r3, #0
 80067cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ce:	4b81      	ldr	r3, [pc, #516]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10f      	bne.n	80067fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067da:	2300      	movs	r3, #0
 80067dc:	60bb      	str	r3, [r7, #8]
 80067de:	4b7d      	ldr	r3, [pc, #500]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	4a7c      	ldr	r2, [pc, #496]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 80067e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e8:	6413      	str	r3, [r2, #64]	; 0x40
 80067ea:	4b7a      	ldr	r3, [pc, #488]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f2:	60bb      	str	r3, [r7, #8]
 80067f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067fa:	4b77      	ldr	r3, [pc, #476]	; (80069d8 <HAL_RCC_OscConfig+0x474>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006802:	2b00      	cmp	r3, #0
 8006804:	d118      	bne.n	8006838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006806:	4b74      	ldr	r3, [pc, #464]	; (80069d8 <HAL_RCC_OscConfig+0x474>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a73      	ldr	r2, [pc, #460]	; (80069d8 <HAL_RCC_OscConfig+0x474>)
 800680c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006812:	f7fc fc77 	bl	8003104 <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800681a:	f7fc fc73 	bl	8003104 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e10c      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800682c:	4b6a      	ldr	r3, [pc, #424]	; (80069d8 <HAL_RCC_OscConfig+0x474>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0f0      	beq.n	800681a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d106      	bne.n	800684e <HAL_RCC_OscConfig+0x2ea>
 8006840:	4b64      	ldr	r3, [pc, #400]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006844:	4a63      	ldr	r2, [pc, #396]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006846:	f043 0301 	orr.w	r3, r3, #1
 800684a:	6713      	str	r3, [r2, #112]	; 0x70
 800684c:	e01c      	b.n	8006888 <HAL_RCC_OscConfig+0x324>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	2b05      	cmp	r3, #5
 8006854:	d10c      	bne.n	8006870 <HAL_RCC_OscConfig+0x30c>
 8006856:	4b5f      	ldr	r3, [pc, #380]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685a:	4a5e      	ldr	r2, [pc, #376]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 800685c:	f043 0304 	orr.w	r3, r3, #4
 8006860:	6713      	str	r3, [r2, #112]	; 0x70
 8006862:	4b5c      	ldr	r3, [pc, #368]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	4a5b      	ldr	r2, [pc, #364]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006868:	f043 0301 	orr.w	r3, r3, #1
 800686c:	6713      	str	r3, [r2, #112]	; 0x70
 800686e:	e00b      	b.n	8006888 <HAL_RCC_OscConfig+0x324>
 8006870:	4b58      	ldr	r3, [pc, #352]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006874:	4a57      	ldr	r2, [pc, #348]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	6713      	str	r3, [r2, #112]	; 0x70
 800687c:	4b55      	ldr	r3, [pc, #340]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 800687e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006880:	4a54      	ldr	r2, [pc, #336]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006882:	f023 0304 	bic.w	r3, r3, #4
 8006886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d015      	beq.n	80068bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006890:	f7fc fc38 	bl	8003104 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006896:	e00a      	b.n	80068ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006898:	f7fc fc34 	bl	8003104 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e0cb      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ae:	4b49      	ldr	r3, [pc, #292]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0ee      	beq.n	8006898 <HAL_RCC_OscConfig+0x334>
 80068ba:	e014      	b.n	80068e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068bc:	f7fc fc22 	bl	8003104 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068c2:	e00a      	b.n	80068da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068c4:	f7fc fc1e 	bl	8003104 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e0b5      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068da:	4b3e      	ldr	r3, [pc, #248]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 80068dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1ee      	bne.n	80068c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d105      	bne.n	80068f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068ec:	4b39      	ldr	r3, [pc, #228]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	4a38      	ldr	r2, [pc, #224]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 80068f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80a1 	beq.w	8006a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006902:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
 800690a:	2b08      	cmp	r3, #8
 800690c:	d05c      	beq.n	80069c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d141      	bne.n	800699a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006916:	4b31      	ldr	r3, [pc, #196]	; (80069dc <HAL_RCC_OscConfig+0x478>)
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691c:	f7fc fbf2 	bl	8003104 <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006924:	f7fc fbee 	bl	8003104 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e087      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006936:	4b27      	ldr	r3, [pc, #156]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f0      	bne.n	8006924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69da      	ldr	r2, [r3, #28]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	019b      	lsls	r3, r3, #6
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	085b      	lsrs	r3, r3, #1
 800695a:	3b01      	subs	r3, #1
 800695c:	041b      	lsls	r3, r3, #16
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	061b      	lsls	r3, r3, #24
 8006966:	491b      	ldr	r1, [pc, #108]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 8006968:	4313      	orrs	r3, r2
 800696a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800696c:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <HAL_RCC_OscConfig+0x478>)
 800696e:	2201      	movs	r2, #1
 8006970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006972:	f7fc fbc7 	bl	8003104 <HAL_GetTick>
 8006976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800697a:	f7fc fbc3 	bl	8003104 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e05c      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800698c:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0f0      	beq.n	800697a <HAL_RCC_OscConfig+0x416>
 8006998:	e054      	b.n	8006a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <HAL_RCC_OscConfig+0x478>)
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a0:	f7fc fbb0 	bl	8003104 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a8:	f7fc fbac 	bl	8003104 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e045      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ba:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <HAL_RCC_OscConfig+0x470>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f0      	bne.n	80069a8 <HAL_RCC_OscConfig+0x444>
 80069c6:	e03d      	b.n	8006a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d107      	bne.n	80069e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e038      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
 80069d4:	40023800 	.word	0x40023800
 80069d8:	40007000 	.word	0x40007000
 80069dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069e0:	4b1b      	ldr	r3, [pc, #108]	; (8006a50 <HAL_RCC_OscConfig+0x4ec>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d028      	beq.n	8006a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d121      	bne.n	8006a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d11a      	bne.n	8006a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a10:	4013      	ands	r3, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d111      	bne.n	8006a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d107      	bne.n	8006a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d001      	beq.n	8006a44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	40023800 	.word	0x40023800

08006a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e0cc      	b.n	8006c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a68:	4b68      	ldr	r3, [pc, #416]	; (8006c0c <HAL_RCC_ClockConfig+0x1b8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d90c      	bls.n	8006a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a76:	4b65      	ldr	r3, [pc, #404]	; (8006c0c <HAL_RCC_ClockConfig+0x1b8>)
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7e:	4b63      	ldr	r3, [pc, #396]	; (8006c0c <HAL_RCC_ClockConfig+0x1b8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0b8      	b.n	8006c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d020      	beq.n	8006ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006aa8:	4b59      	ldr	r3, [pc, #356]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	4a58      	ldr	r2, [pc, #352]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ac0:	4b53      	ldr	r3, [pc, #332]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	4a52      	ldr	r2, [pc, #328]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006acc:	4b50      	ldr	r3, [pc, #320]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	494d      	ldr	r1, [pc, #308]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d044      	beq.n	8006b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d107      	bne.n	8006b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af2:	4b47      	ldr	r3, [pc, #284]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d119      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e07f      	b.n	8006c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d003      	beq.n	8006b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d107      	bne.n	8006b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b12:	4b3f      	ldr	r3, [pc, #252]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e06f      	b.n	8006c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b22:	4b3b      	ldr	r3, [pc, #236]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e067      	b.n	8006c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b32:	4b37      	ldr	r3, [pc, #220]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f023 0203 	bic.w	r2, r3, #3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4934      	ldr	r1, [pc, #208]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b44:	f7fc fade 	bl	8003104 <HAL_GetTick>
 8006b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b4c:	f7fc fada 	bl	8003104 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e04f      	b.n	8006c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b62:	4b2b      	ldr	r3, [pc, #172]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 020c 	and.w	r2, r3, #12
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d1eb      	bne.n	8006b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b74:	4b25      	ldr	r3, [pc, #148]	; (8006c0c <HAL_RCC_ClockConfig+0x1b8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d20c      	bcs.n	8006b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b82:	4b22      	ldr	r3, [pc, #136]	; (8006c0c <HAL_RCC_ClockConfig+0x1b8>)
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8a:	4b20      	ldr	r3, [pc, #128]	; (8006c0c <HAL_RCC_ClockConfig+0x1b8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d001      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e032      	b.n	8006c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d008      	beq.n	8006bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ba8:	4b19      	ldr	r3, [pc, #100]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4916      	ldr	r1, [pc, #88]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bc6:	4b12      	ldr	r3, [pc, #72]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	490e      	ldr	r1, [pc, #56]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bda:	f000 f821 	bl	8006c20 <HAL_RCC_GetSysClockFreq>
 8006bde:	4602      	mov	r2, r0
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	091b      	lsrs	r3, r3, #4
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	490a      	ldr	r1, [pc, #40]	; (8006c14 <HAL_RCC_ClockConfig+0x1c0>)
 8006bec:	5ccb      	ldrb	r3, [r1, r3]
 8006bee:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf2:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bf6:	4b09      	ldr	r3, [pc, #36]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fc fa3e 	bl	800307c <HAL_InitTick>

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40023c00 	.word	0x40023c00
 8006c10:	40023800 	.word	0x40023800
 8006c14:	0800c124 	.word	0x0800c124
 8006c18:	20000000 	.word	0x20000000
 8006c1c:	20000004 	.word	0x20000004

08006c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c24:	b094      	sub	sp, #80	; 0x50
 8006c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c30:	2300      	movs	r3, #0
 8006c32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c38:	4b79      	ldr	r3, [pc, #484]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 030c 	and.w	r3, r3, #12
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d00d      	beq.n	8006c60 <HAL_RCC_GetSysClockFreq+0x40>
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	f200 80e1 	bhi.w	8006e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <HAL_RCC_GetSysClockFreq+0x34>
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d003      	beq.n	8006c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c52:	e0db      	b.n	8006e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c54:	4b73      	ldr	r3, [pc, #460]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c58:	e0db      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c5a:	4b73      	ldr	r3, [pc, #460]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c5e:	e0d8      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c60:	4b6f      	ldr	r3, [pc, #444]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c6a:	4b6d      	ldr	r3, [pc, #436]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d063      	beq.n	8006d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c76:	4b6a      	ldr	r3, [pc, #424]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	099b      	lsrs	r3, r3, #6
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c88:	633b      	str	r3, [r7, #48]	; 0x30
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c92:	4622      	mov	r2, r4
 8006c94:	462b      	mov	r3, r5
 8006c96:	f04f 0000 	mov.w	r0, #0
 8006c9a:	f04f 0100 	mov.w	r1, #0
 8006c9e:	0159      	lsls	r1, r3, #5
 8006ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ca4:	0150      	lsls	r0, r2, #5
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4621      	mov	r1, r4
 8006cac:	1a51      	subs	r1, r2, r1
 8006cae:	6139      	str	r1, [r7, #16]
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cc4:	4659      	mov	r1, fp
 8006cc6:	018b      	lsls	r3, r1, #6
 8006cc8:	4651      	mov	r1, sl
 8006cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cce:	4651      	mov	r1, sl
 8006cd0:	018a      	lsls	r2, r1, #6
 8006cd2:	4651      	mov	r1, sl
 8006cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8006cd8:	4659      	mov	r1, fp
 8006cda:	eb63 0901 	sbc.w	r9, r3, r1
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cf2:	4690      	mov	r8, r2
 8006cf4:	4699      	mov	r9, r3
 8006cf6:	4623      	mov	r3, r4
 8006cf8:	eb18 0303 	adds.w	r3, r8, r3
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	462b      	mov	r3, r5
 8006d00:	eb49 0303 	adc.w	r3, r9, r3
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d12:	4629      	mov	r1, r5
 8006d14:	024b      	lsls	r3, r1, #9
 8006d16:	4621      	mov	r1, r4
 8006d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	024a      	lsls	r2, r1, #9
 8006d20:	4610      	mov	r0, r2
 8006d22:	4619      	mov	r1, r3
 8006d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d26:	2200      	movs	r2, #0
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d30:	f7f9 ff5a 	bl	8000be8 <__aeabi_uldivmod>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4613      	mov	r3, r2
 8006d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d3c:	e058      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d3e:	4b38      	ldr	r3, [pc, #224]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	099b      	lsrs	r3, r3, #6
 8006d44:	2200      	movs	r2, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	4611      	mov	r1, r2
 8006d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d4e:	623b      	str	r3, [r7, #32]
 8006d50:	2300      	movs	r3, #0
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
 8006d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d58:	4642      	mov	r2, r8
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	f04f 0000 	mov.w	r0, #0
 8006d60:	f04f 0100 	mov.w	r1, #0
 8006d64:	0159      	lsls	r1, r3, #5
 8006d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d6a:	0150      	lsls	r0, r2, #5
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4641      	mov	r1, r8
 8006d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d76:	4649      	mov	r1, r9
 8006d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d90:	ebb2 040a 	subs.w	r4, r2, sl
 8006d94:	eb63 050b 	sbc.w	r5, r3, fp
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	00eb      	lsls	r3, r5, #3
 8006da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006da6:	00e2      	lsls	r2, r4, #3
 8006da8:	4614      	mov	r4, r2
 8006daa:	461d      	mov	r5, r3
 8006dac:	4643      	mov	r3, r8
 8006dae:	18e3      	adds	r3, r4, r3
 8006db0:	603b      	str	r3, [r7, #0]
 8006db2:	464b      	mov	r3, r9
 8006db4:	eb45 0303 	adc.w	r3, r5, r3
 8006db8:	607b      	str	r3, [r7, #4]
 8006dba:	f04f 0200 	mov.w	r2, #0
 8006dbe:	f04f 0300 	mov.w	r3, #0
 8006dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	028b      	lsls	r3, r1, #10
 8006dca:	4621      	mov	r1, r4
 8006dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	028a      	lsls	r2, r1, #10
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dda:	2200      	movs	r2, #0
 8006ddc:	61bb      	str	r3, [r7, #24]
 8006dde:	61fa      	str	r2, [r7, #28]
 8006de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006de4:	f7f9 ff00 	bl	8000be8 <__aeabi_uldivmod>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4613      	mov	r3, r2
 8006dee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e0a:	e002      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3750      	adds	r7, #80	; 0x50
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e1e:	bf00      	nop
 8006e20:	40023800 	.word	0x40023800
 8006e24:	00f42400 	.word	0x00f42400
 8006e28:	007a1200 	.word	0x007a1200

08006e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e30:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e32:	681b      	ldr	r3, [r3, #0]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20000000 	.word	0x20000000

08006e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e48:	f7ff fff0 	bl	8006e2c <HAL_RCC_GetHCLKFreq>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	0a9b      	lsrs	r3, r3, #10
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	4903      	ldr	r1, [pc, #12]	; (8006e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e5a:	5ccb      	ldrb	r3, [r1, r3]
 8006e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40023800 	.word	0x40023800
 8006e68:	0800c134 	.word	0x0800c134

08006e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e70:	f7ff ffdc 	bl	8006e2c <HAL_RCC_GetHCLKFreq>
 8006e74:	4602      	mov	r2, r0
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	0b5b      	lsrs	r3, r3, #13
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	4903      	ldr	r1, [pc, #12]	; (8006e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e82:	5ccb      	ldrb	r3, [r1, r3]
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40023800 	.word	0x40023800
 8006e90:	0800c134 	.word	0x0800c134

08006e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e07b      	b.n	8006f9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d108      	bne.n	8006ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eb6:	d009      	beq.n	8006ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	61da      	str	r2, [r3, #28]
 8006ebe:	e005      	b.n	8006ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fb f970 	bl	80021cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f50:	ea42 0103 	orr.w	r1, r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	f003 0104 	and.w	r1, r3, #4
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	f003 0210 	and.w	r2, r3, #16
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69da      	ldr	r2, [r3, #28]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b088      	sub	sp, #32
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	603b      	str	r3, [r7, #0]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_SPI_Transmit+0x22>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e126      	b.n	8007216 <HAL_SPI_Transmit+0x270>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fd0:	f7fc f898 	bl	8003104 <HAL_GetTick>
 8006fd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d002      	beq.n	8006fec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fea:	e10b      	b.n	8007204 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_SPI_Transmit+0x52>
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ffc:	e102      	b.n	8007204 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2203      	movs	r2, #3
 8007002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	88fa      	ldrh	r2, [r7, #6]
 8007016:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	88fa      	ldrh	r2, [r7, #6]
 800701c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007044:	d10f      	bne.n	8007066 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007064:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d007      	beq.n	8007084 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708c:	d14b      	bne.n	8007126 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_SPI_Transmit+0xf6>
 8007096:	8afb      	ldrh	r3, [r7, #22]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d13e      	bne.n	800711a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a0:	881a      	ldrh	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	1c9a      	adds	r2, r3, #2
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070c0:	e02b      	b.n	800711a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d112      	bne.n	80070f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	881a      	ldrh	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	1c9a      	adds	r2, r3, #2
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80070f4:	e011      	b.n	800711a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070f6:	f7fc f805 	bl	8003104 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d803      	bhi.n	800710e <HAL_SPI_Transmit+0x168>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d102      	bne.n	8007114 <HAL_SPI_Transmit+0x16e>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007118:	e074      	b.n	8007204 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1ce      	bne.n	80070c2 <HAL_SPI_Transmit+0x11c>
 8007124:	e04c      	b.n	80071c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_SPI_Transmit+0x18e>
 800712e:	8afb      	ldrh	r3, [r7, #22]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d140      	bne.n	80071b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	330c      	adds	r3, #12
 800713e:	7812      	ldrb	r2, [r2, #0]
 8007140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800715a:	e02c      	b.n	80071b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b02      	cmp	r3, #2
 8007168:	d113      	bne.n	8007192 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	7812      	ldrb	r2, [r2, #0]
 8007176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007190:	e011      	b.n	80071b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007192:	f7fb ffb7 	bl	8003104 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d803      	bhi.n	80071aa <HAL_SPI_Transmit+0x204>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d102      	bne.n	80071b0 <HAL_SPI_Transmit+0x20a>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071b4:	e026      	b.n	8007204 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1cd      	bne.n	800715c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 fce9 	bl	8007b9c <SPI_EndRxTxTransaction>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2220      	movs	r2, #32
 80071d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	77fb      	strb	r3, [r7, #31]
 8007200:	e000      	b.n	8007204 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007202:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007214:	7ffb      	ldrb	r3, [r7, #31]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b088      	sub	sp, #32
 8007222:	af02      	add	r7, sp, #8
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	603b      	str	r3, [r7, #0]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800723a:	d112      	bne.n	8007262 <HAL_SPI_Receive+0x44>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10e      	bne.n	8007262 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2204      	movs	r2, #4
 8007248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800724c:	88fa      	ldrh	r2, [r7, #6]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	4613      	mov	r3, r2
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	68b9      	ldr	r1, [r7, #8]
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 f8f1 	bl	8007440 <HAL_SPI_TransmitReceive>
 800725e:	4603      	mov	r3, r0
 8007260:	e0ea      	b.n	8007438 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_SPI_Receive+0x52>
 800726c:	2302      	movs	r3, #2
 800726e:	e0e3      	b.n	8007438 <HAL_SPI_Receive+0x21a>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007278:	f7fb ff44 	bl	8003104 <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	d002      	beq.n	8007290 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800728a:	2302      	movs	r3, #2
 800728c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800728e:	e0ca      	b.n	8007426 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_SPI_Receive+0x7e>
 8007296:	88fb      	ldrh	r3, [r7, #6]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072a0:	e0c1      	b.n	8007426 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2204      	movs	r2, #4
 80072a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e8:	d10f      	bne.n	800730a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007308:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	d007      	beq.n	8007328 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007326:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d162      	bne.n	80073f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007330:	e02e      	b.n	8007390 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b01      	cmp	r3, #1
 800733e:	d115      	bne.n	800736c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f103 020c 	add.w	r2, r3, #12
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	7812      	ldrb	r2, [r2, #0]
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007360:	b29b      	uxth	r3, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	87da      	strh	r2, [r3, #62]	; 0x3e
 800736a:	e011      	b.n	8007390 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800736c:	f7fb feca 	bl	8003104 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d803      	bhi.n	8007384 <HAL_SPI_Receive+0x166>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d102      	bne.n	800738a <HAL_SPI_Receive+0x16c>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d102      	bne.n	8007390 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800738e:	e04a      	b.n	8007426 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1cb      	bne.n	8007332 <HAL_SPI_Receive+0x114>
 800739a:	e031      	b.n	8007400 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d113      	bne.n	80073d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	b292      	uxth	r2, r2
 80073b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	1c9a      	adds	r2, r3, #2
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073d0:	e011      	b.n	80073f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073d2:	f7fb fe97 	bl	8003104 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d803      	bhi.n	80073ea <HAL_SPI_Receive+0x1cc>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d102      	bne.n	80073f0 <HAL_SPI_Receive+0x1d2>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073f4:	e017      	b.n	8007426 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1cd      	bne.n	800739c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fb63 	bl	8007ad0 <SPI_EndRxTransaction>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	75fb      	strb	r3, [r7, #23]
 8007422:	e000      	b.n	8007426 <HAL_SPI_Receive+0x208>
  }

error :
 8007424:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007436:	7dfb      	ldrb	r3, [r7, #23]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08c      	sub	sp, #48	; 0x30
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800744e:	2301      	movs	r3, #1
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x26>
 8007462:	2302      	movs	r3, #2
 8007464:	e18a      	b.n	800777c <HAL_SPI_TransmitReceive+0x33c>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800746e:	f7fb fe49 	bl	8003104 <HAL_GetTick>
 8007472:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800747a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007484:	887b      	ldrh	r3, [r7, #2]
 8007486:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800748c:	2b01      	cmp	r3, #1
 800748e:	d00f      	beq.n	80074b0 <HAL_SPI_TransmitReceive+0x70>
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007496:	d107      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d103      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x68>
 80074a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d003      	beq.n	80074b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074ae:	e15b      	b.n	8007768 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <HAL_SPI_TransmitReceive+0x82>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <HAL_SPI_TransmitReceive+0x82>
 80074bc:	887b      	ldrh	r3, [r7, #2]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d103      	bne.n	80074ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074c8:	e14e      	b.n	8007768 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d003      	beq.n	80074de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2205      	movs	r2, #5
 80074da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	887a      	ldrh	r2, [r7, #2]
 80074ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	887a      	ldrh	r2, [r7, #2]
 80074f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	887a      	ldrh	r2, [r7, #2]
 8007500:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	887a      	ldrh	r2, [r7, #2]
 8007506:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	d007      	beq.n	8007532 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007530:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753a:	d178      	bne.n	800762e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_SPI_TransmitReceive+0x10a>
 8007544:	8b7b      	ldrh	r3, [r7, #26]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d166      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	881a      	ldrh	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	1c9a      	adds	r2, r3, #2
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007564:	b29b      	uxth	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	b29a      	uxth	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800756e:	e053      	b.n	8007618 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b02      	cmp	r3, #2
 800757c:	d11b      	bne.n	80075b6 <HAL_SPI_TransmitReceive+0x176>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d016      	beq.n	80075b6 <HAL_SPI_TransmitReceive+0x176>
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d113      	bne.n	80075b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	881a      	ldrh	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	1c9a      	adds	r2, r3, #2
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d119      	bne.n	80075f8 <HAL_SPI_TransmitReceive+0x1b8>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d014      	beq.n	80075f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	b292      	uxth	r2, r2
 80075da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	1c9a      	adds	r2, r3, #2
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075f4:	2301      	movs	r3, #1
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075f8:	f7fb fd84 	bl	8003104 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007604:	429a      	cmp	r2, r3
 8007606:	d807      	bhi.n	8007618 <HAL_SPI_TransmitReceive+0x1d8>
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d003      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007616:	e0a7      	b.n	8007768 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1a6      	bne.n	8007570 <HAL_SPI_TransmitReceive+0x130>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1a1      	bne.n	8007570 <HAL_SPI_TransmitReceive+0x130>
 800762c:	e07c      	b.n	8007728 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <HAL_SPI_TransmitReceive+0x1fc>
 8007636:	8b7b      	ldrh	r3, [r7, #26]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d16b      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	7812      	ldrb	r2, [r2, #0]
 8007648:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007662:	e057      	b.n	8007714 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b02      	cmp	r3, #2
 8007670:	d11c      	bne.n	80076ac <HAL_SPI_TransmitReceive+0x26c>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d017      	beq.n	80076ac <HAL_SPI_TransmitReceive+0x26c>
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	2b01      	cmp	r3, #1
 8007680:	d114      	bne.n	80076ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	330c      	adds	r3, #12
 800768c:	7812      	ldrb	r2, [r2, #0]
 800768e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d119      	bne.n	80076ee <HAL_SPI_TransmitReceive+0x2ae>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d014      	beq.n	80076ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076ea:	2301      	movs	r3, #1
 80076ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076ee:	f7fb fd09 	bl	8003104 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d803      	bhi.n	8007706 <HAL_SPI_TransmitReceive+0x2c6>
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d102      	bne.n	800770c <HAL_SPI_TransmitReceive+0x2cc>
 8007706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007708:	2b00      	cmp	r3, #0
 800770a:	d103      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007712:	e029      	b.n	8007768 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1a2      	bne.n	8007664 <HAL_SPI_TransmitReceive+0x224>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d19d      	bne.n	8007664 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 fa35 	bl	8007b9c <SPI_EndRxTxTransaction>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d006      	beq.n	8007746 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2220      	movs	r2, #32
 8007742:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007744:	e010      	b.n	8007768 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10b      	bne.n	8007766 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	e000      	b.n	8007768 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007766:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007778:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800777c:	4618      	mov	r0, r3
 800777e:	3730      	adds	r7, #48	; 0x30
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	099b      	lsrs	r3, r3, #6
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10f      	bne.n	80077c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	099b      	lsrs	r3, r3, #6
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d004      	beq.n	80077c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
    return;
 80077c6:	e0d7      	b.n	8007978 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00a      	beq.n	80077ea <HAL_SPI_IRQHandler+0x66>
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	09db      	lsrs	r3, r3, #7
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4798      	blx	r3
    return;
 80077e8:	e0c6      	b.n	8007978 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10c      	bne.n	8007810 <HAL_SPI_IRQHandler+0x8c>
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	099b      	lsrs	r3, r3, #6
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	0a1b      	lsrs	r3, r3, #8
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 80b4 	beq.w	8007978 <HAL_SPI_IRQHandler+0x1f4>
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80ad 	beq.w	8007978 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	099b      	lsrs	r3, r3, #6
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d023      	beq.n	8007872 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b03      	cmp	r3, #3
 8007834:	d011      	beq.n	800785a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783a:	f043 0204 	orr.w	r2, r3, #4
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	e00b      	b.n	8007872 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	693b      	ldr	r3, [r7, #16]
        return;
 8007870:	e082      	b.n	8007978 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	095b      	lsrs	r3, r3, #5
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	d014      	beq.n	80078a8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	f043 0201 	orr.w	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00c      	beq.n	80078ce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b8:	f043 0208 	orr.w	r2, r3, #8
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80078c0:	2300      	movs	r3, #0
 80078c2:	60bb      	str	r3, [r7, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	60bb      	str	r3, [r7, #8]
 80078cc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d04f      	beq.n	8007976 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <HAL_SPI_IRQHandler+0x17e>
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d034      	beq.n	800796c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0203 	bic.w	r2, r2, #3
 8007910:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d011      	beq.n	800793e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791e:	4a18      	ldr	r2, [pc, #96]	; (8007980 <HAL_SPI_IRQHandler+0x1fc>)
 8007920:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007926:	4618      	mov	r0, r3
 8007928:	f7fc feaf 	bl	800468a <HAL_DMA_Abort_IT>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007942:	2b00      	cmp	r3, #0
 8007944:	d016      	beq.n	8007974 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794a:	4a0d      	ldr	r2, [pc, #52]	; (8007980 <HAL_SPI_IRQHandler+0x1fc>)
 800794c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007952:	4618      	mov	r0, r3
 8007954:	f7fc fe99 	bl	800468a <HAL_DMA_Abort_IT>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007962:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800796a:	e003      	b.n	8007974 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f809 	bl	8007984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007972:	e000      	b.n	8007976 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007974:	bf00      	nop
    return;
 8007976:	bf00      	nop
  }
}
 8007978:	3720      	adds	r7, #32
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	08007999 	.word	0x08007999

08007984 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f7ff ffe6 	bl	8007984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079d0:	f7fb fb98 	bl	8003104 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4413      	add	r3, r2
 80079de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079e0:	f7fb fb90 	bl	8003104 <HAL_GetTick>
 80079e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079e6:	4b39      	ldr	r3, [pc, #228]	; (8007acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	015b      	lsls	r3, r3, #5
 80079ec:	0d1b      	lsrs	r3, r3, #20
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079f6:	e054      	b.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d050      	beq.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a00:	f7fb fb80 	bl	8003104 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d902      	bls.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d13d      	bne.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a2e:	d111      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a38:	d004      	beq.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a42:	d107      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5c:	d10f      	bne.n	8007a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e017      	b.n	8007ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	2300      	movne	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d19b      	bne.n	80079f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000000 	.word	0x20000000

08007ad0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ae4:	d111      	bne.n	8007b0a <SPI_EndRxTransaction+0x3a>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aee:	d004      	beq.n	8007afa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af8:	d107      	bne.n	8007b0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b12:	d12a      	bne.n	8007b6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1c:	d012      	beq.n	8007b44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2200      	movs	r2, #0
 8007b26:	2180      	movs	r1, #128	; 0x80
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7ff ff49 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d02d      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b38:	f043 0220 	orr.w	r2, r3, #32
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e026      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff ff36 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01a      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e013      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2200      	movs	r2, #0
 8007b72:	2101      	movs	r1, #1
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff ff23 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b84:	f043 0220 	orr.w	r2, r3, #32
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e000      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <SPI_EndRxTxTransaction+0x7c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1b      	ldr	r2, [pc, #108]	; (8007c1c <SPI_EndRxTxTransaction+0x80>)
 8007bae:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb2:	0d5b      	lsrs	r3, r3, #21
 8007bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bb8:	fb02 f303 	mul.w	r3, r2, r3
 8007bbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bc6:	d112      	bne.n	8007bee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2180      	movs	r1, #128	; 0x80
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff fef4 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d016      	beq.n	8007c0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	f043 0220 	orr.w	r2, r3, #32
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e00f      	b.n	8007c0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c04:	2b80      	cmp	r3, #128	; 0x80
 8007c06:	d0f2      	beq.n	8007bee <SPI_EndRxTxTransaction+0x52>
 8007c08:	e000      	b.n	8007c0c <SPI_EndRxTxTransaction+0x70>
        break;
 8007c0a:	bf00      	nop
  }

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000000 	.word	0x20000000
 8007c1c:	165e9f81 	.word	0x165e9f81

08007c20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e041      	b.n	8007cb6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fa f8fe 	bl	8001e48 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f000 fba8 	bl	80083b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <HAL_TIM_IC_Start_IT+0x1e>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	e013      	b.n	8007d06 <HAL_TIM_IC_Start_IT+0x46>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d104      	bne.n	8007cee <HAL_TIM_IC_Start_IT+0x2e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	e00b      	b.n	8007d06 <HAL_TIM_IC_Start_IT+0x46>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d104      	bne.n	8007cfe <HAL_TIM_IC_Start_IT+0x3e>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	e003      	b.n	8007d06 <HAL_TIM_IC_Start_IT+0x46>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d104      	bne.n	8007d18 <HAL_TIM_IC_Start_IT+0x58>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	e013      	b.n	8007d40 <HAL_TIM_IC_Start_IT+0x80>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	d104      	bne.n	8007d28 <HAL_TIM_IC_Start_IT+0x68>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	e00b      	b.n	8007d40 <HAL_TIM_IC_Start_IT+0x80>
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b08      	cmp	r3, #8
 8007d2c:	d104      	bne.n	8007d38 <HAL_TIM_IC_Start_IT+0x78>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	e003      	b.n	8007d40 <HAL_TIM_IC_Start_IT+0x80>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d102      	bne.n	8007d4e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d48:	7b7b      	ldrb	r3, [r7, #13]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d001      	beq.n	8007d52 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e0cc      	b.n	8007eec <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <HAL_TIM_IC_Start_IT+0xa2>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d60:	e013      	b.n	8007d8a <HAL_TIM_IC_Start_IT+0xca>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d104      	bne.n	8007d72 <HAL_TIM_IC_Start_IT+0xb2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d70:	e00b      	b.n	8007d8a <HAL_TIM_IC_Start_IT+0xca>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d104      	bne.n	8007d82 <HAL_TIM_IC_Start_IT+0xc2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d80:	e003      	b.n	8007d8a <HAL_TIM_IC_Start_IT+0xca>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2202      	movs	r2, #2
 8007d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d104      	bne.n	8007d9a <HAL_TIM_IC_Start_IT+0xda>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d98:	e013      	b.n	8007dc2 <HAL_TIM_IC_Start_IT+0x102>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d104      	bne.n	8007daa <HAL_TIM_IC_Start_IT+0xea>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007da8:	e00b      	b.n	8007dc2 <HAL_TIM_IC_Start_IT+0x102>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d104      	bne.n	8007dba <HAL_TIM_IC_Start_IT+0xfa>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007db8:	e003      	b.n	8007dc2 <HAL_TIM_IC_Start_IT+0x102>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b0c      	cmp	r3, #12
 8007dc6:	d841      	bhi.n	8007e4c <HAL_TIM_IC_Start_IT+0x18c>
 8007dc8:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <HAL_TIM_IC_Start_IT+0x110>)
 8007dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dce:	bf00      	nop
 8007dd0:	08007e05 	.word	0x08007e05
 8007dd4:	08007e4d 	.word	0x08007e4d
 8007dd8:	08007e4d 	.word	0x08007e4d
 8007ddc:	08007e4d 	.word	0x08007e4d
 8007de0:	08007e17 	.word	0x08007e17
 8007de4:	08007e4d 	.word	0x08007e4d
 8007de8:	08007e4d 	.word	0x08007e4d
 8007dec:	08007e4d 	.word	0x08007e4d
 8007df0:	08007e29 	.word	0x08007e29
 8007df4:	08007e4d 	.word	0x08007e4d
 8007df8:	08007e4d 	.word	0x08007e4d
 8007dfc:	08007e4d 	.word	0x08007e4d
 8007e00:	08007e3b 	.word	0x08007e3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0202 	orr.w	r2, r2, #2
 8007e12:	60da      	str	r2, [r3, #12]
      break;
 8007e14:	e01d      	b.n	8007e52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f042 0204 	orr.w	r2, r2, #4
 8007e24:	60da      	str	r2, [r3, #12]
      break;
 8007e26:	e014      	b.n	8007e52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0208 	orr.w	r2, r2, #8
 8007e36:	60da      	str	r2, [r3, #12]
      break;
 8007e38:	e00b      	b.n	8007e52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0210 	orr.w	r2, r2, #16
 8007e48:	60da      	str	r2, [r3, #12]
      break;
 8007e4a:	e002      	b.n	8007e52 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e50:	bf00      	nop
  }

  if (status == HAL_OK)
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d148      	bne.n	8007eea <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fd82 	bl	800896a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a22      	ldr	r2, [pc, #136]	; (8007ef4 <HAL_TIM_IC_Start_IT+0x234>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d022      	beq.n	8007eb6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e78:	d01d      	beq.n	8007eb6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ef8 <HAL_TIM_IC_Start_IT+0x238>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d018      	beq.n	8007eb6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a1c      	ldr	r2, [pc, #112]	; (8007efc <HAL_TIM_IC_Start_IT+0x23c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d013      	beq.n	8007eb6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1b      	ldr	r2, [pc, #108]	; (8007f00 <HAL_TIM_IC_Start_IT+0x240>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d00e      	beq.n	8007eb6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a19      	ldr	r2, [pc, #100]	; (8007f04 <HAL_TIM_IC_Start_IT+0x244>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d009      	beq.n	8007eb6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <HAL_TIM_IC_Start_IT+0x248>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d004      	beq.n	8007eb6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a16      	ldr	r2, [pc, #88]	; (8007f0c <HAL_TIM_IC_Start_IT+0x24c>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d111      	bne.n	8007eda <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b06      	cmp	r3, #6
 8007ec6:	d010      	beq.n	8007eea <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0201 	orr.w	r2, r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed8:	e007      	b.n	8007eea <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0201 	orr.w	r2, r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	40010000 	.word	0x40010000
 8007ef8:	40000400 	.word	0x40000400
 8007efc:	40000800 	.word	0x40000800
 8007f00:	40000c00 	.word	0x40000c00
 8007f04:	40010400 	.word	0x40010400
 8007f08:	40014000 	.word	0x40014000
 8007f0c:	40001800 	.word	0x40001800

08007f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d122      	bne.n	8007f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d11b      	bne.n	8007f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f06f 0202 	mvn.w	r2, #2
 8007f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7f9 fae8 	bl	8001528 <HAL_TIM_IC_CaptureCallback>
 8007f58:	e005      	b.n	8007f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fa0c 	bl	8008378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fa13 	bl	800838c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f003 0304 	and.w	r3, r3, #4
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	d122      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d11b      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f06f 0204 	mvn.w	r2, #4
 8007f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7f9 fabe 	bl	8001528 <HAL_TIM_IC_CaptureCallback>
 8007fac:	e005      	b.n	8007fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f9e2 	bl	8008378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f9e9 	bl	800838c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	f003 0308 	and.w	r3, r3, #8
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d122      	bne.n	8008014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f003 0308 	and.w	r3, r3, #8
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d11b      	bne.n	8008014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f06f 0208 	mvn.w	r2, #8
 8007fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2204      	movs	r2, #4
 8007fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7f9 fa94 	bl	8001528 <HAL_TIM_IC_CaptureCallback>
 8008000:	e005      	b.n	800800e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f9b8 	bl	8008378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f9bf 	bl	800838c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	f003 0310 	and.w	r3, r3, #16
 800801e:	2b10      	cmp	r3, #16
 8008020:	d122      	bne.n	8008068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f003 0310 	and.w	r3, r3, #16
 800802c:	2b10      	cmp	r3, #16
 800802e:	d11b      	bne.n	8008068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0210 	mvn.w	r2, #16
 8008038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2208      	movs	r2, #8
 800803e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7f9 fa6a 	bl	8001528 <HAL_TIM_IC_CaptureCallback>
 8008054:	e005      	b.n	8008062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f98e 	bl	8008378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f995 	bl	800838c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b01      	cmp	r3, #1
 8008074:	d10e      	bne.n	8008094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b01      	cmp	r3, #1
 8008082:	d107      	bne.n	8008094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0201 	mvn.w	r2, #1
 800808c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f968 	bl	8008364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809e:	2b80      	cmp	r3, #128	; 0x80
 80080a0:	d10e      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ac:	2b80      	cmp	r3, #128	; 0x80
 80080ae:	d107      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fc84 	bl	80089c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ca:	2b40      	cmp	r3, #64	; 0x40
 80080cc:	d10e      	bne.n	80080ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d8:	2b40      	cmp	r3, #64	; 0x40
 80080da:	d107      	bne.n	80080ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f95a 	bl	80083a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f003 0320 	and.w	r3, r3, #32
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d10e      	bne.n	8008118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f003 0320 	and.w	r3, r3, #32
 8008104:	2b20      	cmp	r3, #32
 8008106:	d107      	bne.n	8008118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0220 	mvn.w	r2, #32
 8008110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fc4e 	bl	80089b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <HAL_TIM_IC_ConfigChannel+0x1e>
 800813a:	2302      	movs	r3, #2
 800813c:	e088      	b.n	8008250 <HAL_TIM_IC_ConfigChannel+0x130>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d11b      	bne.n	8008184 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	6819      	ldr	r1, [r3, #0]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f000 fa5c 	bl	8008618 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 020c 	bic.w	r2, r2, #12
 800816e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6999      	ldr	r1, [r3, #24]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	619a      	str	r2, [r3, #24]
 8008182:	e060      	b.n	8008246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b04      	cmp	r3, #4
 8008188:	d11c      	bne.n	80081c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6819      	ldr	r1, [r3, #0]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f000 fae0 	bl	800875e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80081ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6999      	ldr	r1, [r3, #24]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	021a      	lsls	r2, r3, #8
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	619a      	str	r2, [r3, #24]
 80081c2:	e040      	b.n	8008246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b08      	cmp	r3, #8
 80081c8:	d11b      	bne.n	8008202 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6819      	ldr	r1, [r3, #0]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f000 fb2d 	bl	8008838 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69da      	ldr	r2, [r3, #28]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 020c 	bic.w	r2, r2, #12
 80081ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69d9      	ldr	r1, [r3, #28]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	61da      	str	r2, [r3, #28]
 8008200:	e021      	b.n	8008246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b0c      	cmp	r3, #12
 8008206:	d11c      	bne.n	8008242 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6818      	ldr	r0, [r3, #0]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	6819      	ldr	r1, [r3, #0]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f000 fb4a 	bl	80088b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69da      	ldr	r2, [r3, #28]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800822a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	69d9      	ldr	r1, [r3, #28]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	021a      	lsls	r2, r3, #8
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	61da      	str	r2, [r3, #28]
 8008240:	e001      	b.n	8008246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800824e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_TIM_SlaveConfigSynchro+0x18>
 800826c:	2302      	movs	r3, #2
 800826e:	e031      	b.n	80082d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f936 	bl	80084f4 <TIM_SlaveTimer_SetConfig>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e018      	b.n	80082d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68da      	ldr	r2, [r3, #12]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082c0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b0c      	cmp	r3, #12
 80082ee:	d831      	bhi.n	8008354 <HAL_TIM_ReadCapturedValue+0x78>
 80082f0:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	0800832d 	.word	0x0800832d
 80082fc:	08008355 	.word	0x08008355
 8008300:	08008355 	.word	0x08008355
 8008304:	08008355 	.word	0x08008355
 8008308:	08008337 	.word	0x08008337
 800830c:	08008355 	.word	0x08008355
 8008310:	08008355 	.word	0x08008355
 8008314:	08008355 	.word	0x08008355
 8008318:	08008341 	.word	0x08008341
 800831c:	08008355 	.word	0x08008355
 8008320:	08008355 	.word	0x08008355
 8008324:	08008355 	.word	0x08008355
 8008328:	0800834b 	.word	0x0800834b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008332:	60fb      	str	r3, [r7, #12]

      break;
 8008334:	e00f      	b.n	8008356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	60fb      	str	r3, [r7, #12]

      break;
 800833e:	e00a      	b.n	8008356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008346:	60fb      	str	r3, [r7, #12]

      break;
 8008348:	e005      	b.n	8008356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008350:	60fb      	str	r3, [r7, #12]

      break;
 8008352:	e000      	b.n	8008356 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008354:	bf00      	nop
  }

  return tmpreg;
 8008356:	68fb      	ldr	r3, [r7, #12]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a40      	ldr	r2, [pc, #256]	; (80084c8 <TIM_Base_SetConfig+0x114>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d013      	beq.n	80083f4 <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d2:	d00f      	beq.n	80083f4 <TIM_Base_SetConfig+0x40>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a3d      	ldr	r2, [pc, #244]	; (80084cc <TIM_Base_SetConfig+0x118>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00b      	beq.n	80083f4 <TIM_Base_SetConfig+0x40>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a3c      	ldr	r2, [pc, #240]	; (80084d0 <TIM_Base_SetConfig+0x11c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d007      	beq.n	80083f4 <TIM_Base_SetConfig+0x40>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a3b      	ldr	r2, [pc, #236]	; (80084d4 <TIM_Base_SetConfig+0x120>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d003      	beq.n	80083f4 <TIM_Base_SetConfig+0x40>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a3a      	ldr	r2, [pc, #232]	; (80084d8 <TIM_Base_SetConfig+0x124>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d108      	bne.n	8008406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a2f      	ldr	r2, [pc, #188]	; (80084c8 <TIM_Base_SetConfig+0x114>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d02b      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008414:	d027      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a2c      	ldr	r2, [pc, #176]	; (80084cc <TIM_Base_SetConfig+0x118>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d023      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a2b      	ldr	r2, [pc, #172]	; (80084d0 <TIM_Base_SetConfig+0x11c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d01f      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a2a      	ldr	r2, [pc, #168]	; (80084d4 <TIM_Base_SetConfig+0x120>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d01b      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <TIM_Base_SetConfig+0x124>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d017      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a28      	ldr	r2, [pc, #160]	; (80084dc <TIM_Base_SetConfig+0x128>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d013      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a27      	ldr	r2, [pc, #156]	; (80084e0 <TIM_Base_SetConfig+0x12c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00f      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a26      	ldr	r2, [pc, #152]	; (80084e4 <TIM_Base_SetConfig+0x130>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00b      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a25      	ldr	r2, [pc, #148]	; (80084e8 <TIM_Base_SetConfig+0x134>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d007      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a24      	ldr	r2, [pc, #144]	; (80084ec <TIM_Base_SetConfig+0x138>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d003      	beq.n	8008466 <TIM_Base_SetConfig+0xb2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a23      	ldr	r2, [pc, #140]	; (80084f0 <TIM_Base_SetConfig+0x13c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d108      	bne.n	8008478 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800846c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	4313      	orrs	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a0a      	ldr	r2, [pc, #40]	; (80084c8 <TIM_Base_SetConfig+0x114>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d003      	beq.n	80084ac <TIM_Base_SetConfig+0xf8>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a0c      	ldr	r2, [pc, #48]	; (80084d8 <TIM_Base_SetConfig+0x124>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d103      	bne.n	80084b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	691a      	ldr	r2, [r3, #16]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	615a      	str	r2, [r3, #20]
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	40010000 	.word	0x40010000
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800
 80084d4:	40000c00 	.word	0x40000c00
 80084d8:	40010400 	.word	0x40010400
 80084dc:	40014000 	.word	0x40014000
 80084e0:	40014400 	.word	0x40014400
 80084e4:	40014800 	.word	0x40014800
 80084e8:	40001800 	.word	0x40001800
 80084ec:	40001c00 	.word	0x40001c00
 80084f0:	40002000 	.word	0x40002000

080084f4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008510:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b70      	cmp	r3, #112	; 0x70
 800853c:	d01a      	beq.n	8008574 <TIM_SlaveTimer_SetConfig+0x80>
 800853e:	2b70      	cmp	r3, #112	; 0x70
 8008540:	d860      	bhi.n	8008604 <TIM_SlaveTimer_SetConfig+0x110>
 8008542:	2b60      	cmp	r3, #96	; 0x60
 8008544:	d054      	beq.n	80085f0 <TIM_SlaveTimer_SetConfig+0xfc>
 8008546:	2b60      	cmp	r3, #96	; 0x60
 8008548:	d85c      	bhi.n	8008604 <TIM_SlaveTimer_SetConfig+0x110>
 800854a:	2b50      	cmp	r3, #80	; 0x50
 800854c:	d046      	beq.n	80085dc <TIM_SlaveTimer_SetConfig+0xe8>
 800854e:	2b50      	cmp	r3, #80	; 0x50
 8008550:	d858      	bhi.n	8008604 <TIM_SlaveTimer_SetConfig+0x110>
 8008552:	2b40      	cmp	r3, #64	; 0x40
 8008554:	d019      	beq.n	800858a <TIM_SlaveTimer_SetConfig+0x96>
 8008556:	2b40      	cmp	r3, #64	; 0x40
 8008558:	d854      	bhi.n	8008604 <TIM_SlaveTimer_SetConfig+0x110>
 800855a:	2b30      	cmp	r3, #48	; 0x30
 800855c:	d055      	beq.n	800860a <TIM_SlaveTimer_SetConfig+0x116>
 800855e:	2b30      	cmp	r3, #48	; 0x30
 8008560:	d850      	bhi.n	8008604 <TIM_SlaveTimer_SetConfig+0x110>
 8008562:	2b20      	cmp	r3, #32
 8008564:	d051      	beq.n	800860a <TIM_SlaveTimer_SetConfig+0x116>
 8008566:	2b20      	cmp	r3, #32
 8008568:	d84c      	bhi.n	8008604 <TIM_SlaveTimer_SetConfig+0x110>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d04d      	beq.n	800860a <TIM_SlaveTimer_SetConfig+0x116>
 800856e:	2b10      	cmp	r3, #16
 8008570:	d04b      	beq.n	800860a <TIM_SlaveTimer_SetConfig+0x116>
 8008572:	e047      	b.n	8008604 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6818      	ldr	r0, [r3, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	68d9      	ldr	r1, [r3, #12]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	f000 f9d1 	bl	800892a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008588:	e040      	b.n	800860c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b05      	cmp	r3, #5
 8008590:	d101      	bne.n	8008596 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e03b      	b.n	800860e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6a1a      	ldr	r2, [r3, #32]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0201 	bic.w	r2, r2, #1
 80085ac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085bc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
      break;
 80085da:	e017      	b.n	800860c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	6899      	ldr	r1, [r3, #8]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	461a      	mov	r2, r3
 80085ea:	f000 f889 	bl	8008700 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80085ee:	e00d      	b.n	800860c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6818      	ldr	r0, [r3, #0]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	6899      	ldr	r1, [r3, #8]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	461a      	mov	r2, r3
 80085fe:	f000 f8eb 	bl	80087d8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008602:	e003      	b.n	800860c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	75fb      	strb	r3, [r7, #23]
      break;
 8008608:	e000      	b.n	800860c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800860a:	bf00      	nop
  }

  return status;
 800860c:	7dfb      	ldrb	r3, [r7, #23]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f023 0201 	bic.w	r2, r3, #1
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	4a28      	ldr	r2, [pc, #160]	; (80086e4 <TIM_TI1_SetConfig+0xcc>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d01b      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864c:	d017      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <TIM_TI1_SetConfig+0xd0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d013      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4a24      	ldr	r2, [pc, #144]	; (80086ec <TIM_TI1_SetConfig+0xd4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d00f      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4a23      	ldr	r2, [pc, #140]	; (80086f0 <TIM_TI1_SetConfig+0xd8>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00b      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	4a22      	ldr	r2, [pc, #136]	; (80086f4 <TIM_TI1_SetConfig+0xdc>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d007      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	4a21      	ldr	r2, [pc, #132]	; (80086f8 <TIM_TI1_SetConfig+0xe0>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d003      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4a20      	ldr	r2, [pc, #128]	; (80086fc <TIM_TI1_SetConfig+0xe4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d101      	bne.n	8008682 <TIM_TI1_SetConfig+0x6a>
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <TIM_TI1_SetConfig+0x6c>
 8008682:	2300      	movs	r3, #0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f023 0303 	bic.w	r3, r3, #3
 800868e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	e003      	b.n	80086a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f043 0301 	orr.w	r3, r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f023 030a 	bic.w	r3, r3, #10
 80086bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f003 030a 	and.w	r3, r3, #10
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	621a      	str	r2, [r3, #32]
}
 80086d6:	bf00      	nop
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	40010000 	.word	0x40010000
 80086e8:	40000400 	.word	0x40000400
 80086ec:	40000800 	.word	0x40000800
 80086f0:	40000c00 	.word	0x40000c00
 80086f4:	40010400 	.word	0x40010400
 80086f8:	40014000 	.word	0x40014000
 80086fc:	40001800 	.word	0x40001800

08008700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	f023 0201 	bic.w	r2, r3, #1
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800872a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	4313      	orrs	r3, r2
 8008734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f023 030a 	bic.w	r3, r3, #10
 800873c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	621a      	str	r2, [r3, #32]
}
 8008752:	bf00      	nop
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800875e:	b480      	push	{r7}
 8008760:	b087      	sub	sp, #28
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
 800876a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	f023 0210 	bic.w	r2, r3, #16
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800879c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	031b      	lsls	r3, r3, #12
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	621a      	str	r2, [r3, #32]
}
 80087cc:	bf00      	nop
 80087ce:	371c      	adds	r7, #28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	f023 0210 	bic.w	r2, r3, #16
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008802:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	031b      	lsls	r3, r3, #12
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008814:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	621a      	str	r2, [r3, #32]
}
 800882c:	bf00      	nop
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a1b      	ldr	r3, [r3, #32]
 800885c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f023 0303 	bic.w	r3, r3, #3
 8008864:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008874:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	b2db      	uxtb	r3, r3
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	4313      	orrs	r3, r2
 8008880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008888:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	621a      	str	r2, [r3, #32]
}
 80088a4:	bf00      	nop
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	021b      	lsls	r3, r3, #8
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	031b      	lsls	r3, r3, #12
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008902:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	031b      	lsls	r3, r3, #12
 8008908:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	621a      	str	r2, [r3, #32]
}
 800891e:	bf00      	nop
 8008920:	371c      	adds	r7, #28
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800892a:	b480      	push	{r7}
 800892c:	b087      	sub	sp, #28
 800892e:	af00      	add	r7, sp, #0
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	60b9      	str	r1, [r7, #8]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	021a      	lsls	r2, r3, #8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	431a      	orrs	r2, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4313      	orrs	r3, r2
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	609a      	str	r2, [r3, #8]
}
 800895e:	bf00      	nop
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800896a:	b480      	push	{r7}
 800896c:	b087      	sub	sp, #28
 800896e:	af00      	add	r7, sp, #0
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f003 031f 	and.w	r3, r3, #31
 800897c:	2201      	movs	r2, #1
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6a1a      	ldr	r2, [r3, #32]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	43db      	mvns	r3, r3
 800898c:	401a      	ands	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a1a      	ldr	r2, [r3, #32]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f003 031f 	and.w	r3, r3, #31
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	fa01 f303 	lsl.w	r3, r1, r3
 80089a2:	431a      	orrs	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	621a      	str	r2, [r3, #32]
}
 80089a8:	bf00      	nop
 80089aa:	371c      	adds	r7, #28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e03f      	b.n	8008a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d106      	bne.n	8008a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7f9 fc32 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2224      	movs	r2, #36	; 0x24
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f929 	bl	8008c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	695a      	ldr	r2, [r3, #20]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b08a      	sub	sp, #40	; 0x28
 8008a7a:	af02      	add	r7, sp, #8
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	603b      	str	r3, [r7, #0]
 8008a82:	4613      	mov	r3, r2
 8008a84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b20      	cmp	r3, #32
 8008a94:	d17c      	bne.n	8008b90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <HAL_UART_Transmit+0x2c>
 8008a9c:	88fb      	ldrh	r3, [r7, #6]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e075      	b.n	8008b92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d101      	bne.n	8008ab4 <HAL_UART_Transmit+0x3e>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e06e      	b.n	8008b92 <HAL_UART_Transmit+0x11c>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2221      	movs	r2, #33	; 0x21
 8008ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aca:	f7fa fb1b 	bl	8003104 <HAL_GetTick>
 8008ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	88fa      	ldrh	r2, [r7, #6]
 8008ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	88fa      	ldrh	r2, [r7, #6]
 8008ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae4:	d108      	bne.n	8008af8 <HAL_UART_Transmit+0x82>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d104      	bne.n	8008af8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	61bb      	str	r3, [r7, #24]
 8008af6:	e003      	b.n	8008b00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008b08:	e02a      	b.n	8008b60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2200      	movs	r2, #0
 8008b12:	2180      	movs	r1, #128	; 0x80
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 f840 	bl	8008b9a <UART_WaitOnFlagUntilTimeout>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e036      	b.n	8008b92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10b      	bne.n	8008b42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	61bb      	str	r3, [r7, #24]
 8008b40:	e007      	b.n	8008b52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1cf      	bne.n	8008b0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2200      	movs	r2, #0
 8008b72:	2140      	movs	r1, #64	; 0x40
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 f810 	bl	8008b9a <UART_WaitOnFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e006      	b.n	8008b92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e000      	b.n	8008b92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b90:	2302      	movs	r3, #2
  }
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3720      	adds	r7, #32
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b090      	sub	sp, #64	; 0x40
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	603b      	str	r3, [r7, #0]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008baa:	e050      	b.n	8008c4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb2:	d04c      	beq.n	8008c4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <UART_WaitOnFlagUntilTimeout+0x30>
 8008bba:	f7fa faa3 	bl	8003104 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d241      	bcs.n	8008c4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	330c      	adds	r3, #12
 8008bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	e853 3f00 	ldrex	r3, [r3]
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	330c      	adds	r3, #12
 8008be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bea:	637a      	str	r2, [r7, #52]	; 0x34
 8008bec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf2:	e841 2300 	strex	r3, r2, [r1]
 8008bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1e5      	bne.n	8008bca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3314      	adds	r3, #20
 8008c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f023 0301 	bic.w	r3, r3, #1
 8008c14:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3314      	adds	r3, #20
 8008c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c1e:	623a      	str	r2, [r7, #32]
 8008c20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c22:	69f9      	ldr	r1, [r7, #28]
 8008c24:	6a3a      	ldr	r2, [r7, #32]
 8008c26:	e841 2300 	strex	r3, r2, [r1]
 8008c2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1e5      	bne.n	8008bfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e00f      	b.n	8008c6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	4013      	ands	r3, r2
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	bf0c      	ite	eq
 8008c5e:	2301      	moveq	r3, #1
 8008c60:	2300      	movne	r3, #0
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	461a      	mov	r2, r3
 8008c66:	79fb      	ldrb	r3, [r7, #7]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d09f      	beq.n	8008bac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3740      	adds	r7, #64	; 0x40
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c7c:	b0c0      	sub	sp, #256	; 0x100
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c94:	68d9      	ldr	r1, [r3, #12]
 8008c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	ea40 0301 	orr.w	r3, r0, r1
 8008ca0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008cd0:	f021 010c 	bic.w	r1, r1, #12
 8008cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cde:	430b      	orrs	r3, r1
 8008ce0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf2:	6999      	ldr	r1, [r3, #24]
 8008cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	ea40 0301 	orr.w	r3, r0, r1
 8008cfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	4b8f      	ldr	r3, [pc, #572]	; (8008f44 <UART_SetConfig+0x2cc>)
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d005      	beq.n	8008d18 <UART_SetConfig+0xa0>
 8008d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4b8d      	ldr	r3, [pc, #564]	; (8008f48 <UART_SetConfig+0x2d0>)
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d104      	bne.n	8008d22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d18:	f7fe f8a8 	bl	8006e6c <HAL_RCC_GetPCLK2Freq>
 8008d1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d20:	e003      	b.n	8008d2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d22:	f7fe f88f 	bl	8006e44 <HAL_RCC_GetPCLK1Freq>
 8008d26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d34:	f040 810c 	bne.w	8008f50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	1891      	adds	r1, r2, r2
 8008d50:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d52:	415b      	adcs	r3, r3
 8008d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	eb12 0801 	adds.w	r8, r2, r1
 8008d60:	4629      	mov	r1, r5
 8008d62:	eb43 0901 	adc.w	r9, r3, r1
 8008d66:	f04f 0200 	mov.w	r2, #0
 8008d6a:	f04f 0300 	mov.w	r3, #0
 8008d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d7a:	4690      	mov	r8, r2
 8008d7c:	4699      	mov	r9, r3
 8008d7e:	4623      	mov	r3, r4
 8008d80:	eb18 0303 	adds.w	r3, r8, r3
 8008d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d88:	462b      	mov	r3, r5
 8008d8a:	eb49 0303 	adc.w	r3, r9, r3
 8008d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008da2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008da6:	460b      	mov	r3, r1
 8008da8:	18db      	adds	r3, r3, r3
 8008daa:	653b      	str	r3, [r7, #80]	; 0x50
 8008dac:	4613      	mov	r3, r2
 8008dae:	eb42 0303 	adc.w	r3, r2, r3
 8008db2:	657b      	str	r3, [r7, #84]	; 0x54
 8008db4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008db8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008dbc:	f7f7 ff14 	bl	8000be8 <__aeabi_uldivmod>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4b61      	ldr	r3, [pc, #388]	; (8008f4c <UART_SetConfig+0x2d4>)
 8008dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8008dca:	095b      	lsrs	r3, r3, #5
 8008dcc:	011c      	lsls	r4, r3, #4
 8008dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008dd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ddc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008de0:	4642      	mov	r2, r8
 8008de2:	464b      	mov	r3, r9
 8008de4:	1891      	adds	r1, r2, r2
 8008de6:	64b9      	str	r1, [r7, #72]	; 0x48
 8008de8:	415b      	adcs	r3, r3
 8008dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008df0:	4641      	mov	r1, r8
 8008df2:	eb12 0a01 	adds.w	sl, r2, r1
 8008df6:	4649      	mov	r1, r9
 8008df8:	eb43 0b01 	adc.w	fp, r3, r1
 8008dfc:	f04f 0200 	mov.w	r2, #0
 8008e00:	f04f 0300 	mov.w	r3, #0
 8008e04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e10:	4692      	mov	sl, r2
 8008e12:	469b      	mov	fp, r3
 8008e14:	4643      	mov	r3, r8
 8008e16:	eb1a 0303 	adds.w	r3, sl, r3
 8008e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e1e:	464b      	mov	r3, r9
 8008e20:	eb4b 0303 	adc.w	r3, fp, r3
 8008e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	18db      	adds	r3, r3, r3
 8008e40:	643b      	str	r3, [r7, #64]	; 0x40
 8008e42:	4613      	mov	r3, r2
 8008e44:	eb42 0303 	adc.w	r3, r2, r3
 8008e48:	647b      	str	r3, [r7, #68]	; 0x44
 8008e4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e52:	f7f7 fec9 	bl	8000be8 <__aeabi_uldivmod>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4b3b      	ldr	r3, [pc, #236]	; (8008f4c <UART_SetConfig+0x2d4>)
 8008e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8008e62:	095b      	lsrs	r3, r3, #5
 8008e64:	2264      	movs	r2, #100	; 0x64
 8008e66:	fb02 f303 	mul.w	r3, r2, r3
 8008e6a:	1acb      	subs	r3, r1, r3
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e72:	4b36      	ldr	r3, [pc, #216]	; (8008f4c <UART_SetConfig+0x2d4>)
 8008e74:	fba3 2302 	umull	r2, r3, r3, r2
 8008e78:	095b      	lsrs	r3, r3, #5
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e80:	441c      	add	r4, r3
 8008e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e94:	4642      	mov	r2, r8
 8008e96:	464b      	mov	r3, r9
 8008e98:	1891      	adds	r1, r2, r2
 8008e9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e9c:	415b      	adcs	r3, r3
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ea4:	4641      	mov	r1, r8
 8008ea6:	1851      	adds	r1, r2, r1
 8008ea8:	6339      	str	r1, [r7, #48]	; 0x30
 8008eaa:	4649      	mov	r1, r9
 8008eac:	414b      	adcs	r3, r1
 8008eae:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ebc:	4659      	mov	r1, fp
 8008ebe:	00cb      	lsls	r3, r1, #3
 8008ec0:	4651      	mov	r1, sl
 8008ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ec6:	4651      	mov	r1, sl
 8008ec8:	00ca      	lsls	r2, r1, #3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4603      	mov	r3, r0
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	189b      	adds	r3, r3, r2
 8008ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ed8:	464b      	mov	r3, r9
 8008eda:	460a      	mov	r2, r1
 8008edc:	eb42 0303 	adc.w	r3, r2, r3
 8008ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ef0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ef4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ef8:	460b      	mov	r3, r1
 8008efa:	18db      	adds	r3, r3, r3
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008efe:	4613      	mov	r3, r2
 8008f00:	eb42 0303 	adc.w	r3, r2, r3
 8008f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f0e:	f7f7 fe6b 	bl	8000be8 <__aeabi_uldivmod>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <UART_SetConfig+0x2d4>)
 8008f18:	fba3 1302 	umull	r1, r3, r3, r2
 8008f1c:	095b      	lsrs	r3, r3, #5
 8008f1e:	2164      	movs	r1, #100	; 0x64
 8008f20:	fb01 f303 	mul.w	r3, r1, r3
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	3332      	adds	r3, #50	; 0x32
 8008f2a:	4a08      	ldr	r2, [pc, #32]	; (8008f4c <UART_SetConfig+0x2d4>)
 8008f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f30:	095b      	lsrs	r3, r3, #5
 8008f32:	f003 0207 	and.w	r2, r3, #7
 8008f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4422      	add	r2, r4
 8008f3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f40:	e105      	b.n	800914e <UART_SetConfig+0x4d6>
 8008f42:	bf00      	nop
 8008f44:	40011000 	.word	0x40011000
 8008f48:	40011400 	.word	0x40011400
 8008f4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f54:	2200      	movs	r2, #0
 8008f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f62:	4642      	mov	r2, r8
 8008f64:	464b      	mov	r3, r9
 8008f66:	1891      	adds	r1, r2, r2
 8008f68:	6239      	str	r1, [r7, #32]
 8008f6a:	415b      	adcs	r3, r3
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f72:	4641      	mov	r1, r8
 8008f74:	1854      	adds	r4, r2, r1
 8008f76:	4649      	mov	r1, r9
 8008f78:	eb43 0501 	adc.w	r5, r3, r1
 8008f7c:	f04f 0200 	mov.w	r2, #0
 8008f80:	f04f 0300 	mov.w	r3, #0
 8008f84:	00eb      	lsls	r3, r5, #3
 8008f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f8a:	00e2      	lsls	r2, r4, #3
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	461d      	mov	r5, r3
 8008f90:	4643      	mov	r3, r8
 8008f92:	18e3      	adds	r3, r4, r3
 8008f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f98:	464b      	mov	r3, r9
 8008f9a:	eb45 0303 	adc.w	r3, r5, r3
 8008f9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008fb2:	f04f 0200 	mov.w	r2, #0
 8008fb6:	f04f 0300 	mov.w	r3, #0
 8008fba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	008b      	lsls	r3, r1, #2
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fc8:	4621      	mov	r1, r4
 8008fca:	008a      	lsls	r2, r1, #2
 8008fcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008fd0:	f7f7 fe0a 	bl	8000be8 <__aeabi_uldivmod>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4b60      	ldr	r3, [pc, #384]	; (800915c <UART_SetConfig+0x4e4>)
 8008fda:	fba3 2302 	umull	r2, r3, r3, r2
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	011c      	lsls	r4, r3, #4
 8008fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ff0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ff4:	4642      	mov	r2, r8
 8008ff6:	464b      	mov	r3, r9
 8008ff8:	1891      	adds	r1, r2, r2
 8008ffa:	61b9      	str	r1, [r7, #24]
 8008ffc:	415b      	adcs	r3, r3
 8008ffe:	61fb      	str	r3, [r7, #28]
 8009000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009004:	4641      	mov	r1, r8
 8009006:	1851      	adds	r1, r2, r1
 8009008:	6139      	str	r1, [r7, #16]
 800900a:	4649      	mov	r1, r9
 800900c:	414b      	adcs	r3, r1
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	f04f 0200 	mov.w	r2, #0
 8009014:	f04f 0300 	mov.w	r3, #0
 8009018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800901c:	4659      	mov	r1, fp
 800901e:	00cb      	lsls	r3, r1, #3
 8009020:	4651      	mov	r1, sl
 8009022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009026:	4651      	mov	r1, sl
 8009028:	00ca      	lsls	r2, r1, #3
 800902a:	4610      	mov	r0, r2
 800902c:	4619      	mov	r1, r3
 800902e:	4603      	mov	r3, r0
 8009030:	4642      	mov	r2, r8
 8009032:	189b      	adds	r3, r3, r2
 8009034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009038:	464b      	mov	r3, r9
 800903a:	460a      	mov	r2, r1
 800903c:	eb42 0303 	adc.w	r3, r2, r3
 8009040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	67bb      	str	r3, [r7, #120]	; 0x78
 800904e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009050:	f04f 0200 	mov.w	r2, #0
 8009054:	f04f 0300 	mov.w	r3, #0
 8009058:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800905c:	4649      	mov	r1, r9
 800905e:	008b      	lsls	r3, r1, #2
 8009060:	4641      	mov	r1, r8
 8009062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009066:	4641      	mov	r1, r8
 8009068:	008a      	lsls	r2, r1, #2
 800906a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800906e:	f7f7 fdbb 	bl	8000be8 <__aeabi_uldivmod>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4b39      	ldr	r3, [pc, #228]	; (800915c <UART_SetConfig+0x4e4>)
 8009078:	fba3 1302 	umull	r1, r3, r3, r2
 800907c:	095b      	lsrs	r3, r3, #5
 800907e:	2164      	movs	r1, #100	; 0x64
 8009080:	fb01 f303 	mul.w	r3, r1, r3
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	3332      	adds	r3, #50	; 0x32
 800908a:	4a34      	ldr	r2, [pc, #208]	; (800915c <UART_SetConfig+0x4e4>)
 800908c:	fba2 2303 	umull	r2, r3, r2, r3
 8009090:	095b      	lsrs	r3, r3, #5
 8009092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009096:	441c      	add	r4, r3
 8009098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800909c:	2200      	movs	r2, #0
 800909e:	673b      	str	r3, [r7, #112]	; 0x70
 80090a0:	677a      	str	r2, [r7, #116]	; 0x74
 80090a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80090a6:	4642      	mov	r2, r8
 80090a8:	464b      	mov	r3, r9
 80090aa:	1891      	adds	r1, r2, r2
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	415b      	adcs	r3, r3
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090b6:	4641      	mov	r1, r8
 80090b8:	1851      	adds	r1, r2, r1
 80090ba:	6039      	str	r1, [r7, #0]
 80090bc:	4649      	mov	r1, r9
 80090be:	414b      	adcs	r3, r1
 80090c0:	607b      	str	r3, [r7, #4]
 80090c2:	f04f 0200 	mov.w	r2, #0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80090ce:	4659      	mov	r1, fp
 80090d0:	00cb      	lsls	r3, r1, #3
 80090d2:	4651      	mov	r1, sl
 80090d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090d8:	4651      	mov	r1, sl
 80090da:	00ca      	lsls	r2, r1, #3
 80090dc:	4610      	mov	r0, r2
 80090de:	4619      	mov	r1, r3
 80090e0:	4603      	mov	r3, r0
 80090e2:	4642      	mov	r2, r8
 80090e4:	189b      	adds	r3, r3, r2
 80090e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80090e8:	464b      	mov	r3, r9
 80090ea:	460a      	mov	r2, r1
 80090ec:	eb42 0303 	adc.w	r3, r2, r3
 80090f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	663b      	str	r3, [r7, #96]	; 0x60
 80090fc:	667a      	str	r2, [r7, #100]	; 0x64
 80090fe:	f04f 0200 	mov.w	r2, #0
 8009102:	f04f 0300 	mov.w	r3, #0
 8009106:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800910a:	4649      	mov	r1, r9
 800910c:	008b      	lsls	r3, r1, #2
 800910e:	4641      	mov	r1, r8
 8009110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009114:	4641      	mov	r1, r8
 8009116:	008a      	lsls	r2, r1, #2
 8009118:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800911c:	f7f7 fd64 	bl	8000be8 <__aeabi_uldivmod>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4b0d      	ldr	r3, [pc, #52]	; (800915c <UART_SetConfig+0x4e4>)
 8009126:	fba3 1302 	umull	r1, r3, r3, r2
 800912a:	095b      	lsrs	r3, r3, #5
 800912c:	2164      	movs	r1, #100	; 0x64
 800912e:	fb01 f303 	mul.w	r3, r1, r3
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	011b      	lsls	r3, r3, #4
 8009136:	3332      	adds	r3, #50	; 0x32
 8009138:	4a08      	ldr	r2, [pc, #32]	; (800915c <UART_SetConfig+0x4e4>)
 800913a:	fba2 2303 	umull	r2, r3, r2, r3
 800913e:	095b      	lsrs	r3, r3, #5
 8009140:	f003 020f 	and.w	r2, r3, #15
 8009144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4422      	add	r2, r4
 800914c:	609a      	str	r2, [r3, #8]
}
 800914e:	bf00      	nop
 8009150:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009154:	46bd      	mov	sp, r7
 8009156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800915a:	bf00      	nop
 800915c:	51eb851f 	.word	0x51eb851f

08009160 <__errno>:
 8009160:	4b01      	ldr	r3, [pc, #4]	; (8009168 <__errno+0x8>)
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	2000000c 	.word	0x2000000c

0800916c <__libc_init_array>:
 800916c:	b570      	push	{r4, r5, r6, lr}
 800916e:	4d0d      	ldr	r5, [pc, #52]	; (80091a4 <__libc_init_array+0x38>)
 8009170:	4c0d      	ldr	r4, [pc, #52]	; (80091a8 <__libc_init_array+0x3c>)
 8009172:	1b64      	subs	r4, r4, r5
 8009174:	10a4      	asrs	r4, r4, #2
 8009176:	2600      	movs	r6, #0
 8009178:	42a6      	cmp	r6, r4
 800917a:	d109      	bne.n	8009190 <__libc_init_array+0x24>
 800917c:	4d0b      	ldr	r5, [pc, #44]	; (80091ac <__libc_init_array+0x40>)
 800917e:	4c0c      	ldr	r4, [pc, #48]	; (80091b0 <__libc_init_array+0x44>)
 8009180:	f002 ff0c 	bl	800bf9c <_init>
 8009184:	1b64      	subs	r4, r4, r5
 8009186:	10a4      	asrs	r4, r4, #2
 8009188:	2600      	movs	r6, #0
 800918a:	42a6      	cmp	r6, r4
 800918c:	d105      	bne.n	800919a <__libc_init_array+0x2e>
 800918e:	bd70      	pop	{r4, r5, r6, pc}
 8009190:	f855 3b04 	ldr.w	r3, [r5], #4
 8009194:	4798      	blx	r3
 8009196:	3601      	adds	r6, #1
 8009198:	e7ee      	b.n	8009178 <__libc_init_array+0xc>
 800919a:	f855 3b04 	ldr.w	r3, [r5], #4
 800919e:	4798      	blx	r3
 80091a0:	3601      	adds	r6, #1
 80091a2:	e7f2      	b.n	800918a <__libc_init_array+0x1e>
 80091a4:	0800c51c 	.word	0x0800c51c
 80091a8:	0800c51c 	.word	0x0800c51c
 80091ac:	0800c51c 	.word	0x0800c51c
 80091b0:	0800c520 	.word	0x0800c520

080091b4 <malloc>:
 80091b4:	4b02      	ldr	r3, [pc, #8]	; (80091c0 <malloc+0xc>)
 80091b6:	4601      	mov	r1, r0
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	f000 b885 	b.w	80092c8 <_malloc_r>
 80091be:	bf00      	nop
 80091c0:	2000000c 	.word	0x2000000c

080091c4 <memcpy>:
 80091c4:	440a      	add	r2, r1
 80091c6:	4291      	cmp	r1, r2
 80091c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091cc:	d100      	bne.n	80091d0 <memcpy+0xc>
 80091ce:	4770      	bx	lr
 80091d0:	b510      	push	{r4, lr}
 80091d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091da:	4291      	cmp	r1, r2
 80091dc:	d1f9      	bne.n	80091d2 <memcpy+0xe>
 80091de:	bd10      	pop	{r4, pc}

080091e0 <memset>:
 80091e0:	4402      	add	r2, r0
 80091e2:	4603      	mov	r3, r0
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d100      	bne.n	80091ea <memset+0xa>
 80091e8:	4770      	bx	lr
 80091ea:	f803 1b01 	strb.w	r1, [r3], #1
 80091ee:	e7f9      	b.n	80091e4 <memset+0x4>

080091f0 <_free_r>:
 80091f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091f2:	2900      	cmp	r1, #0
 80091f4:	d044      	beq.n	8009280 <_free_r+0x90>
 80091f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091fa:	9001      	str	r0, [sp, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009202:	bfb8      	it	lt
 8009204:	18e4      	addlt	r4, r4, r3
 8009206:	f001 fbf5 	bl	800a9f4 <__malloc_lock>
 800920a:	4a1e      	ldr	r2, [pc, #120]	; (8009284 <_free_r+0x94>)
 800920c:	9801      	ldr	r0, [sp, #4]
 800920e:	6813      	ldr	r3, [r2, #0]
 8009210:	b933      	cbnz	r3, 8009220 <_free_r+0x30>
 8009212:	6063      	str	r3, [r4, #4]
 8009214:	6014      	str	r4, [r2, #0]
 8009216:	b003      	add	sp, #12
 8009218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800921c:	f001 bbf0 	b.w	800aa00 <__malloc_unlock>
 8009220:	42a3      	cmp	r3, r4
 8009222:	d908      	bls.n	8009236 <_free_r+0x46>
 8009224:	6825      	ldr	r5, [r4, #0]
 8009226:	1961      	adds	r1, r4, r5
 8009228:	428b      	cmp	r3, r1
 800922a:	bf01      	itttt	eq
 800922c:	6819      	ldreq	r1, [r3, #0]
 800922e:	685b      	ldreq	r3, [r3, #4]
 8009230:	1949      	addeq	r1, r1, r5
 8009232:	6021      	streq	r1, [r4, #0]
 8009234:	e7ed      	b.n	8009212 <_free_r+0x22>
 8009236:	461a      	mov	r2, r3
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	b10b      	cbz	r3, 8009240 <_free_r+0x50>
 800923c:	42a3      	cmp	r3, r4
 800923e:	d9fa      	bls.n	8009236 <_free_r+0x46>
 8009240:	6811      	ldr	r1, [r2, #0]
 8009242:	1855      	adds	r5, r2, r1
 8009244:	42a5      	cmp	r5, r4
 8009246:	d10b      	bne.n	8009260 <_free_r+0x70>
 8009248:	6824      	ldr	r4, [r4, #0]
 800924a:	4421      	add	r1, r4
 800924c:	1854      	adds	r4, r2, r1
 800924e:	42a3      	cmp	r3, r4
 8009250:	6011      	str	r1, [r2, #0]
 8009252:	d1e0      	bne.n	8009216 <_free_r+0x26>
 8009254:	681c      	ldr	r4, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	6053      	str	r3, [r2, #4]
 800925a:	4421      	add	r1, r4
 800925c:	6011      	str	r1, [r2, #0]
 800925e:	e7da      	b.n	8009216 <_free_r+0x26>
 8009260:	d902      	bls.n	8009268 <_free_r+0x78>
 8009262:	230c      	movs	r3, #12
 8009264:	6003      	str	r3, [r0, #0]
 8009266:	e7d6      	b.n	8009216 <_free_r+0x26>
 8009268:	6825      	ldr	r5, [r4, #0]
 800926a:	1961      	adds	r1, r4, r5
 800926c:	428b      	cmp	r3, r1
 800926e:	bf04      	itt	eq
 8009270:	6819      	ldreq	r1, [r3, #0]
 8009272:	685b      	ldreq	r3, [r3, #4]
 8009274:	6063      	str	r3, [r4, #4]
 8009276:	bf04      	itt	eq
 8009278:	1949      	addeq	r1, r1, r5
 800927a:	6021      	streq	r1, [r4, #0]
 800927c:	6054      	str	r4, [r2, #4]
 800927e:	e7ca      	b.n	8009216 <_free_r+0x26>
 8009280:	b003      	add	sp, #12
 8009282:	bd30      	pop	{r4, r5, pc}
 8009284:	20000518 	.word	0x20000518

08009288 <sbrk_aligned>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	4e0e      	ldr	r6, [pc, #56]	; (80092c4 <sbrk_aligned+0x3c>)
 800928c:	460c      	mov	r4, r1
 800928e:	6831      	ldr	r1, [r6, #0]
 8009290:	4605      	mov	r5, r0
 8009292:	b911      	cbnz	r1, 800929a <sbrk_aligned+0x12>
 8009294:	f000 fcf6 	bl	8009c84 <_sbrk_r>
 8009298:	6030      	str	r0, [r6, #0]
 800929a:	4621      	mov	r1, r4
 800929c:	4628      	mov	r0, r5
 800929e:	f000 fcf1 	bl	8009c84 <_sbrk_r>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	d00a      	beq.n	80092bc <sbrk_aligned+0x34>
 80092a6:	1cc4      	adds	r4, r0, #3
 80092a8:	f024 0403 	bic.w	r4, r4, #3
 80092ac:	42a0      	cmp	r0, r4
 80092ae:	d007      	beq.n	80092c0 <sbrk_aligned+0x38>
 80092b0:	1a21      	subs	r1, r4, r0
 80092b2:	4628      	mov	r0, r5
 80092b4:	f000 fce6 	bl	8009c84 <_sbrk_r>
 80092b8:	3001      	adds	r0, #1
 80092ba:	d101      	bne.n	80092c0 <sbrk_aligned+0x38>
 80092bc:	f04f 34ff 	mov.w	r4, #4294967295
 80092c0:	4620      	mov	r0, r4
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	2000051c 	.word	0x2000051c

080092c8 <_malloc_r>:
 80092c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092cc:	1ccd      	adds	r5, r1, #3
 80092ce:	f025 0503 	bic.w	r5, r5, #3
 80092d2:	3508      	adds	r5, #8
 80092d4:	2d0c      	cmp	r5, #12
 80092d6:	bf38      	it	cc
 80092d8:	250c      	movcc	r5, #12
 80092da:	2d00      	cmp	r5, #0
 80092dc:	4607      	mov	r7, r0
 80092de:	db01      	blt.n	80092e4 <_malloc_r+0x1c>
 80092e0:	42a9      	cmp	r1, r5
 80092e2:	d905      	bls.n	80092f0 <_malloc_r+0x28>
 80092e4:	230c      	movs	r3, #12
 80092e6:	603b      	str	r3, [r7, #0]
 80092e8:	2600      	movs	r6, #0
 80092ea:	4630      	mov	r0, r6
 80092ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f0:	4e2e      	ldr	r6, [pc, #184]	; (80093ac <_malloc_r+0xe4>)
 80092f2:	f001 fb7f 	bl	800a9f4 <__malloc_lock>
 80092f6:	6833      	ldr	r3, [r6, #0]
 80092f8:	461c      	mov	r4, r3
 80092fa:	bb34      	cbnz	r4, 800934a <_malloc_r+0x82>
 80092fc:	4629      	mov	r1, r5
 80092fe:	4638      	mov	r0, r7
 8009300:	f7ff ffc2 	bl	8009288 <sbrk_aligned>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	4604      	mov	r4, r0
 8009308:	d14d      	bne.n	80093a6 <_malloc_r+0xde>
 800930a:	6834      	ldr	r4, [r6, #0]
 800930c:	4626      	mov	r6, r4
 800930e:	2e00      	cmp	r6, #0
 8009310:	d140      	bne.n	8009394 <_malloc_r+0xcc>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	4631      	mov	r1, r6
 8009316:	4638      	mov	r0, r7
 8009318:	eb04 0803 	add.w	r8, r4, r3
 800931c:	f000 fcb2 	bl	8009c84 <_sbrk_r>
 8009320:	4580      	cmp	r8, r0
 8009322:	d13a      	bne.n	800939a <_malloc_r+0xd2>
 8009324:	6821      	ldr	r1, [r4, #0]
 8009326:	3503      	adds	r5, #3
 8009328:	1a6d      	subs	r5, r5, r1
 800932a:	f025 0503 	bic.w	r5, r5, #3
 800932e:	3508      	adds	r5, #8
 8009330:	2d0c      	cmp	r5, #12
 8009332:	bf38      	it	cc
 8009334:	250c      	movcc	r5, #12
 8009336:	4629      	mov	r1, r5
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff ffa5 	bl	8009288 <sbrk_aligned>
 800933e:	3001      	adds	r0, #1
 8009340:	d02b      	beq.n	800939a <_malloc_r+0xd2>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	442b      	add	r3, r5
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	e00e      	b.n	8009368 <_malloc_r+0xa0>
 800934a:	6822      	ldr	r2, [r4, #0]
 800934c:	1b52      	subs	r2, r2, r5
 800934e:	d41e      	bmi.n	800938e <_malloc_r+0xc6>
 8009350:	2a0b      	cmp	r2, #11
 8009352:	d916      	bls.n	8009382 <_malloc_r+0xba>
 8009354:	1961      	adds	r1, r4, r5
 8009356:	42a3      	cmp	r3, r4
 8009358:	6025      	str	r5, [r4, #0]
 800935a:	bf18      	it	ne
 800935c:	6059      	strne	r1, [r3, #4]
 800935e:	6863      	ldr	r3, [r4, #4]
 8009360:	bf08      	it	eq
 8009362:	6031      	streq	r1, [r6, #0]
 8009364:	5162      	str	r2, [r4, r5]
 8009366:	604b      	str	r3, [r1, #4]
 8009368:	4638      	mov	r0, r7
 800936a:	f104 060b 	add.w	r6, r4, #11
 800936e:	f001 fb47 	bl	800aa00 <__malloc_unlock>
 8009372:	f026 0607 	bic.w	r6, r6, #7
 8009376:	1d23      	adds	r3, r4, #4
 8009378:	1af2      	subs	r2, r6, r3
 800937a:	d0b6      	beq.n	80092ea <_malloc_r+0x22>
 800937c:	1b9b      	subs	r3, r3, r6
 800937e:	50a3      	str	r3, [r4, r2]
 8009380:	e7b3      	b.n	80092ea <_malloc_r+0x22>
 8009382:	6862      	ldr	r2, [r4, #4]
 8009384:	42a3      	cmp	r3, r4
 8009386:	bf0c      	ite	eq
 8009388:	6032      	streq	r2, [r6, #0]
 800938a:	605a      	strne	r2, [r3, #4]
 800938c:	e7ec      	b.n	8009368 <_malloc_r+0xa0>
 800938e:	4623      	mov	r3, r4
 8009390:	6864      	ldr	r4, [r4, #4]
 8009392:	e7b2      	b.n	80092fa <_malloc_r+0x32>
 8009394:	4634      	mov	r4, r6
 8009396:	6876      	ldr	r6, [r6, #4]
 8009398:	e7b9      	b.n	800930e <_malloc_r+0x46>
 800939a:	230c      	movs	r3, #12
 800939c:	603b      	str	r3, [r7, #0]
 800939e:	4638      	mov	r0, r7
 80093a0:	f001 fb2e 	bl	800aa00 <__malloc_unlock>
 80093a4:	e7a1      	b.n	80092ea <_malloc_r+0x22>
 80093a6:	6025      	str	r5, [r4, #0]
 80093a8:	e7de      	b.n	8009368 <_malloc_r+0xa0>
 80093aa:	bf00      	nop
 80093ac:	20000518 	.word	0x20000518

080093b0 <__cvt>:
 80093b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093b4:	ec55 4b10 	vmov	r4, r5, d0
 80093b8:	2d00      	cmp	r5, #0
 80093ba:	460e      	mov	r6, r1
 80093bc:	4619      	mov	r1, r3
 80093be:	462b      	mov	r3, r5
 80093c0:	bfbb      	ittet	lt
 80093c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80093c6:	461d      	movlt	r5, r3
 80093c8:	2300      	movge	r3, #0
 80093ca:	232d      	movlt	r3, #45	; 0x2d
 80093cc:	700b      	strb	r3, [r1, #0]
 80093ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093d4:	4691      	mov	r9, r2
 80093d6:	f023 0820 	bic.w	r8, r3, #32
 80093da:	bfbc      	itt	lt
 80093dc:	4622      	movlt	r2, r4
 80093de:	4614      	movlt	r4, r2
 80093e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093e4:	d005      	beq.n	80093f2 <__cvt+0x42>
 80093e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80093ea:	d100      	bne.n	80093ee <__cvt+0x3e>
 80093ec:	3601      	adds	r6, #1
 80093ee:	2102      	movs	r1, #2
 80093f0:	e000      	b.n	80093f4 <__cvt+0x44>
 80093f2:	2103      	movs	r1, #3
 80093f4:	ab03      	add	r3, sp, #12
 80093f6:	9301      	str	r3, [sp, #4]
 80093f8:	ab02      	add	r3, sp, #8
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	ec45 4b10 	vmov	d0, r4, r5
 8009400:	4653      	mov	r3, sl
 8009402:	4632      	mov	r2, r6
 8009404:	f000 fd04 	bl	8009e10 <_dtoa_r>
 8009408:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800940c:	4607      	mov	r7, r0
 800940e:	d102      	bne.n	8009416 <__cvt+0x66>
 8009410:	f019 0f01 	tst.w	r9, #1
 8009414:	d022      	beq.n	800945c <__cvt+0xac>
 8009416:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800941a:	eb07 0906 	add.w	r9, r7, r6
 800941e:	d110      	bne.n	8009442 <__cvt+0x92>
 8009420:	783b      	ldrb	r3, [r7, #0]
 8009422:	2b30      	cmp	r3, #48	; 0x30
 8009424:	d10a      	bne.n	800943c <__cvt+0x8c>
 8009426:	2200      	movs	r2, #0
 8009428:	2300      	movs	r3, #0
 800942a:	4620      	mov	r0, r4
 800942c:	4629      	mov	r1, r5
 800942e:	f7f7 fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009432:	b918      	cbnz	r0, 800943c <__cvt+0x8c>
 8009434:	f1c6 0601 	rsb	r6, r6, #1
 8009438:	f8ca 6000 	str.w	r6, [sl]
 800943c:	f8da 3000 	ldr.w	r3, [sl]
 8009440:	4499      	add	r9, r3
 8009442:	2200      	movs	r2, #0
 8009444:	2300      	movs	r3, #0
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f7 fb3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800944e:	b108      	cbz	r0, 8009454 <__cvt+0xa4>
 8009450:	f8cd 900c 	str.w	r9, [sp, #12]
 8009454:	2230      	movs	r2, #48	; 0x30
 8009456:	9b03      	ldr	r3, [sp, #12]
 8009458:	454b      	cmp	r3, r9
 800945a:	d307      	bcc.n	800946c <__cvt+0xbc>
 800945c:	9b03      	ldr	r3, [sp, #12]
 800945e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009460:	1bdb      	subs	r3, r3, r7
 8009462:	4638      	mov	r0, r7
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	b004      	add	sp, #16
 8009468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800946c:	1c59      	adds	r1, r3, #1
 800946e:	9103      	str	r1, [sp, #12]
 8009470:	701a      	strb	r2, [r3, #0]
 8009472:	e7f0      	b.n	8009456 <__cvt+0xa6>

08009474 <__exponent>:
 8009474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009476:	4603      	mov	r3, r0
 8009478:	2900      	cmp	r1, #0
 800947a:	bfb8      	it	lt
 800947c:	4249      	neglt	r1, r1
 800947e:	f803 2b02 	strb.w	r2, [r3], #2
 8009482:	bfb4      	ite	lt
 8009484:	222d      	movlt	r2, #45	; 0x2d
 8009486:	222b      	movge	r2, #43	; 0x2b
 8009488:	2909      	cmp	r1, #9
 800948a:	7042      	strb	r2, [r0, #1]
 800948c:	dd2a      	ble.n	80094e4 <__exponent+0x70>
 800948e:	f10d 0407 	add.w	r4, sp, #7
 8009492:	46a4      	mov	ip, r4
 8009494:	270a      	movs	r7, #10
 8009496:	46a6      	mov	lr, r4
 8009498:	460a      	mov	r2, r1
 800949a:	fb91 f6f7 	sdiv	r6, r1, r7
 800949e:	fb07 1516 	mls	r5, r7, r6, r1
 80094a2:	3530      	adds	r5, #48	; 0x30
 80094a4:	2a63      	cmp	r2, #99	; 0x63
 80094a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80094aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80094ae:	4631      	mov	r1, r6
 80094b0:	dcf1      	bgt.n	8009496 <__exponent+0x22>
 80094b2:	3130      	adds	r1, #48	; 0x30
 80094b4:	f1ae 0502 	sub.w	r5, lr, #2
 80094b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80094bc:	1c44      	adds	r4, r0, #1
 80094be:	4629      	mov	r1, r5
 80094c0:	4561      	cmp	r1, ip
 80094c2:	d30a      	bcc.n	80094da <__exponent+0x66>
 80094c4:	f10d 0209 	add.w	r2, sp, #9
 80094c8:	eba2 020e 	sub.w	r2, r2, lr
 80094cc:	4565      	cmp	r5, ip
 80094ce:	bf88      	it	hi
 80094d0:	2200      	movhi	r2, #0
 80094d2:	4413      	add	r3, r2
 80094d4:	1a18      	subs	r0, r3, r0
 80094d6:	b003      	add	sp, #12
 80094d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80094e2:	e7ed      	b.n	80094c0 <__exponent+0x4c>
 80094e4:	2330      	movs	r3, #48	; 0x30
 80094e6:	3130      	adds	r1, #48	; 0x30
 80094e8:	7083      	strb	r3, [r0, #2]
 80094ea:	70c1      	strb	r1, [r0, #3]
 80094ec:	1d03      	adds	r3, r0, #4
 80094ee:	e7f1      	b.n	80094d4 <__exponent+0x60>

080094f0 <_printf_float>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	ed2d 8b02 	vpush	{d8}
 80094f8:	b08d      	sub	sp, #52	; 0x34
 80094fa:	460c      	mov	r4, r1
 80094fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009500:	4616      	mov	r6, r2
 8009502:	461f      	mov	r7, r3
 8009504:	4605      	mov	r5, r0
 8009506:	f001 fa71 	bl	800a9ec <_localeconv_r>
 800950a:	f8d0 a000 	ldr.w	sl, [r0]
 800950e:	4650      	mov	r0, sl
 8009510:	f7f6 fe5e 	bl	80001d0 <strlen>
 8009514:	2300      	movs	r3, #0
 8009516:	930a      	str	r3, [sp, #40]	; 0x28
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	9305      	str	r3, [sp, #20]
 800951c:	f8d8 3000 	ldr.w	r3, [r8]
 8009520:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009524:	3307      	adds	r3, #7
 8009526:	f023 0307 	bic.w	r3, r3, #7
 800952a:	f103 0208 	add.w	r2, r3, #8
 800952e:	f8c8 2000 	str.w	r2, [r8]
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800953a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800953e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009542:	9307      	str	r3, [sp, #28]
 8009544:	f8cd 8018 	str.w	r8, [sp, #24]
 8009548:	ee08 0a10 	vmov	s16, r0
 800954c:	4b9f      	ldr	r3, [pc, #636]	; (80097cc <_printf_float+0x2dc>)
 800954e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009552:	f04f 32ff 	mov.w	r2, #4294967295
 8009556:	f7f7 fae9 	bl	8000b2c <__aeabi_dcmpun>
 800955a:	bb88      	cbnz	r0, 80095c0 <_printf_float+0xd0>
 800955c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009560:	4b9a      	ldr	r3, [pc, #616]	; (80097cc <_printf_float+0x2dc>)
 8009562:	f04f 32ff 	mov.w	r2, #4294967295
 8009566:	f7f7 fac3 	bl	8000af0 <__aeabi_dcmple>
 800956a:	bb48      	cbnz	r0, 80095c0 <_printf_float+0xd0>
 800956c:	2200      	movs	r2, #0
 800956e:	2300      	movs	r3, #0
 8009570:	4640      	mov	r0, r8
 8009572:	4649      	mov	r1, r9
 8009574:	f7f7 fab2 	bl	8000adc <__aeabi_dcmplt>
 8009578:	b110      	cbz	r0, 8009580 <_printf_float+0x90>
 800957a:	232d      	movs	r3, #45	; 0x2d
 800957c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009580:	4b93      	ldr	r3, [pc, #588]	; (80097d0 <_printf_float+0x2e0>)
 8009582:	4894      	ldr	r0, [pc, #592]	; (80097d4 <_printf_float+0x2e4>)
 8009584:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009588:	bf94      	ite	ls
 800958a:	4698      	movls	r8, r3
 800958c:	4680      	movhi	r8, r0
 800958e:	2303      	movs	r3, #3
 8009590:	6123      	str	r3, [r4, #16]
 8009592:	9b05      	ldr	r3, [sp, #20]
 8009594:	f023 0204 	bic.w	r2, r3, #4
 8009598:	6022      	str	r2, [r4, #0]
 800959a:	f04f 0900 	mov.w	r9, #0
 800959e:	9700      	str	r7, [sp, #0]
 80095a0:	4633      	mov	r3, r6
 80095a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80095a4:	4621      	mov	r1, r4
 80095a6:	4628      	mov	r0, r5
 80095a8:	f000 f9d8 	bl	800995c <_printf_common>
 80095ac:	3001      	adds	r0, #1
 80095ae:	f040 8090 	bne.w	80096d2 <_printf_float+0x1e2>
 80095b2:	f04f 30ff 	mov.w	r0, #4294967295
 80095b6:	b00d      	add	sp, #52	; 0x34
 80095b8:	ecbd 8b02 	vpop	{d8}
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	4642      	mov	r2, r8
 80095c2:	464b      	mov	r3, r9
 80095c4:	4640      	mov	r0, r8
 80095c6:	4649      	mov	r1, r9
 80095c8:	f7f7 fab0 	bl	8000b2c <__aeabi_dcmpun>
 80095cc:	b140      	cbz	r0, 80095e0 <_printf_float+0xf0>
 80095ce:	464b      	mov	r3, r9
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	bfbc      	itt	lt
 80095d4:	232d      	movlt	r3, #45	; 0x2d
 80095d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80095da:	487f      	ldr	r0, [pc, #508]	; (80097d8 <_printf_float+0x2e8>)
 80095dc:	4b7f      	ldr	r3, [pc, #508]	; (80097dc <_printf_float+0x2ec>)
 80095de:	e7d1      	b.n	8009584 <_printf_float+0x94>
 80095e0:	6863      	ldr	r3, [r4, #4]
 80095e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80095e6:	9206      	str	r2, [sp, #24]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	d13f      	bne.n	800966c <_printf_float+0x17c>
 80095ec:	2306      	movs	r3, #6
 80095ee:	6063      	str	r3, [r4, #4]
 80095f0:	9b05      	ldr	r3, [sp, #20]
 80095f2:	6861      	ldr	r1, [r4, #4]
 80095f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80095f8:	2300      	movs	r3, #0
 80095fa:	9303      	str	r3, [sp, #12]
 80095fc:	ab0a      	add	r3, sp, #40	; 0x28
 80095fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009602:	ab09      	add	r3, sp, #36	; 0x24
 8009604:	ec49 8b10 	vmov	d0, r8, r9
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	6022      	str	r2, [r4, #0]
 800960c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009610:	4628      	mov	r0, r5
 8009612:	f7ff fecd 	bl	80093b0 <__cvt>
 8009616:	9b06      	ldr	r3, [sp, #24]
 8009618:	9909      	ldr	r1, [sp, #36]	; 0x24
 800961a:	2b47      	cmp	r3, #71	; 0x47
 800961c:	4680      	mov	r8, r0
 800961e:	d108      	bne.n	8009632 <_printf_float+0x142>
 8009620:	1cc8      	adds	r0, r1, #3
 8009622:	db02      	blt.n	800962a <_printf_float+0x13a>
 8009624:	6863      	ldr	r3, [r4, #4]
 8009626:	4299      	cmp	r1, r3
 8009628:	dd41      	ble.n	80096ae <_printf_float+0x1be>
 800962a:	f1ab 0b02 	sub.w	fp, fp, #2
 800962e:	fa5f fb8b 	uxtb.w	fp, fp
 8009632:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009636:	d820      	bhi.n	800967a <_printf_float+0x18a>
 8009638:	3901      	subs	r1, #1
 800963a:	465a      	mov	r2, fp
 800963c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009640:	9109      	str	r1, [sp, #36]	; 0x24
 8009642:	f7ff ff17 	bl	8009474 <__exponent>
 8009646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009648:	1813      	adds	r3, r2, r0
 800964a:	2a01      	cmp	r2, #1
 800964c:	4681      	mov	r9, r0
 800964e:	6123      	str	r3, [r4, #16]
 8009650:	dc02      	bgt.n	8009658 <_printf_float+0x168>
 8009652:	6822      	ldr	r2, [r4, #0]
 8009654:	07d2      	lsls	r2, r2, #31
 8009656:	d501      	bpl.n	800965c <_printf_float+0x16c>
 8009658:	3301      	adds	r3, #1
 800965a:	6123      	str	r3, [r4, #16]
 800965c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009660:	2b00      	cmp	r3, #0
 8009662:	d09c      	beq.n	800959e <_printf_float+0xae>
 8009664:	232d      	movs	r3, #45	; 0x2d
 8009666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800966a:	e798      	b.n	800959e <_printf_float+0xae>
 800966c:	9a06      	ldr	r2, [sp, #24]
 800966e:	2a47      	cmp	r2, #71	; 0x47
 8009670:	d1be      	bne.n	80095f0 <_printf_float+0x100>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1bc      	bne.n	80095f0 <_printf_float+0x100>
 8009676:	2301      	movs	r3, #1
 8009678:	e7b9      	b.n	80095ee <_printf_float+0xfe>
 800967a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800967e:	d118      	bne.n	80096b2 <_printf_float+0x1c2>
 8009680:	2900      	cmp	r1, #0
 8009682:	6863      	ldr	r3, [r4, #4]
 8009684:	dd0b      	ble.n	800969e <_printf_float+0x1ae>
 8009686:	6121      	str	r1, [r4, #16]
 8009688:	b913      	cbnz	r3, 8009690 <_printf_float+0x1a0>
 800968a:	6822      	ldr	r2, [r4, #0]
 800968c:	07d0      	lsls	r0, r2, #31
 800968e:	d502      	bpl.n	8009696 <_printf_float+0x1a6>
 8009690:	3301      	adds	r3, #1
 8009692:	440b      	add	r3, r1
 8009694:	6123      	str	r3, [r4, #16]
 8009696:	65a1      	str	r1, [r4, #88]	; 0x58
 8009698:	f04f 0900 	mov.w	r9, #0
 800969c:	e7de      	b.n	800965c <_printf_float+0x16c>
 800969e:	b913      	cbnz	r3, 80096a6 <_printf_float+0x1b6>
 80096a0:	6822      	ldr	r2, [r4, #0]
 80096a2:	07d2      	lsls	r2, r2, #31
 80096a4:	d501      	bpl.n	80096aa <_printf_float+0x1ba>
 80096a6:	3302      	adds	r3, #2
 80096a8:	e7f4      	b.n	8009694 <_printf_float+0x1a4>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e7f2      	b.n	8009694 <_printf_float+0x1a4>
 80096ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80096b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b4:	4299      	cmp	r1, r3
 80096b6:	db05      	blt.n	80096c4 <_printf_float+0x1d4>
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	6121      	str	r1, [r4, #16]
 80096bc:	07d8      	lsls	r0, r3, #31
 80096be:	d5ea      	bpl.n	8009696 <_printf_float+0x1a6>
 80096c0:	1c4b      	adds	r3, r1, #1
 80096c2:	e7e7      	b.n	8009694 <_printf_float+0x1a4>
 80096c4:	2900      	cmp	r1, #0
 80096c6:	bfd4      	ite	le
 80096c8:	f1c1 0202 	rsble	r2, r1, #2
 80096cc:	2201      	movgt	r2, #1
 80096ce:	4413      	add	r3, r2
 80096d0:	e7e0      	b.n	8009694 <_printf_float+0x1a4>
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	055a      	lsls	r2, r3, #21
 80096d6:	d407      	bmi.n	80096e8 <_printf_float+0x1f8>
 80096d8:	6923      	ldr	r3, [r4, #16]
 80096da:	4642      	mov	r2, r8
 80096dc:	4631      	mov	r1, r6
 80096de:	4628      	mov	r0, r5
 80096e0:	47b8      	blx	r7
 80096e2:	3001      	adds	r0, #1
 80096e4:	d12c      	bne.n	8009740 <_printf_float+0x250>
 80096e6:	e764      	b.n	80095b2 <_printf_float+0xc2>
 80096e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096ec:	f240 80e0 	bls.w	80098b0 <_printf_float+0x3c0>
 80096f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096f4:	2200      	movs	r2, #0
 80096f6:	2300      	movs	r3, #0
 80096f8:	f7f7 f9e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d034      	beq.n	800976a <_printf_float+0x27a>
 8009700:	4a37      	ldr	r2, [pc, #220]	; (80097e0 <_printf_float+0x2f0>)
 8009702:	2301      	movs	r3, #1
 8009704:	4631      	mov	r1, r6
 8009706:	4628      	mov	r0, r5
 8009708:	47b8      	blx	r7
 800970a:	3001      	adds	r0, #1
 800970c:	f43f af51 	beq.w	80095b2 <_printf_float+0xc2>
 8009710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009714:	429a      	cmp	r2, r3
 8009716:	db02      	blt.n	800971e <_printf_float+0x22e>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	07d8      	lsls	r0, r3, #31
 800971c:	d510      	bpl.n	8009740 <_printf_float+0x250>
 800971e:	ee18 3a10 	vmov	r3, s16
 8009722:	4652      	mov	r2, sl
 8009724:	4631      	mov	r1, r6
 8009726:	4628      	mov	r0, r5
 8009728:	47b8      	blx	r7
 800972a:	3001      	adds	r0, #1
 800972c:	f43f af41 	beq.w	80095b2 <_printf_float+0xc2>
 8009730:	f04f 0800 	mov.w	r8, #0
 8009734:	f104 091a 	add.w	r9, r4, #26
 8009738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800973a:	3b01      	subs	r3, #1
 800973c:	4543      	cmp	r3, r8
 800973e:	dc09      	bgt.n	8009754 <_printf_float+0x264>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	079b      	lsls	r3, r3, #30
 8009744:	f100 8105 	bmi.w	8009952 <_printf_float+0x462>
 8009748:	68e0      	ldr	r0, [r4, #12]
 800974a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800974c:	4298      	cmp	r0, r3
 800974e:	bfb8      	it	lt
 8009750:	4618      	movlt	r0, r3
 8009752:	e730      	b.n	80095b6 <_printf_float+0xc6>
 8009754:	2301      	movs	r3, #1
 8009756:	464a      	mov	r2, r9
 8009758:	4631      	mov	r1, r6
 800975a:	4628      	mov	r0, r5
 800975c:	47b8      	blx	r7
 800975e:	3001      	adds	r0, #1
 8009760:	f43f af27 	beq.w	80095b2 <_printf_float+0xc2>
 8009764:	f108 0801 	add.w	r8, r8, #1
 8009768:	e7e6      	b.n	8009738 <_printf_float+0x248>
 800976a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800976c:	2b00      	cmp	r3, #0
 800976e:	dc39      	bgt.n	80097e4 <_printf_float+0x2f4>
 8009770:	4a1b      	ldr	r2, [pc, #108]	; (80097e0 <_printf_float+0x2f0>)
 8009772:	2301      	movs	r3, #1
 8009774:	4631      	mov	r1, r6
 8009776:	4628      	mov	r0, r5
 8009778:	47b8      	blx	r7
 800977a:	3001      	adds	r0, #1
 800977c:	f43f af19 	beq.w	80095b2 <_printf_float+0xc2>
 8009780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009784:	4313      	orrs	r3, r2
 8009786:	d102      	bne.n	800978e <_printf_float+0x29e>
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	07d9      	lsls	r1, r3, #31
 800978c:	d5d8      	bpl.n	8009740 <_printf_float+0x250>
 800978e:	ee18 3a10 	vmov	r3, s16
 8009792:	4652      	mov	r2, sl
 8009794:	4631      	mov	r1, r6
 8009796:	4628      	mov	r0, r5
 8009798:	47b8      	blx	r7
 800979a:	3001      	adds	r0, #1
 800979c:	f43f af09 	beq.w	80095b2 <_printf_float+0xc2>
 80097a0:	f04f 0900 	mov.w	r9, #0
 80097a4:	f104 0a1a 	add.w	sl, r4, #26
 80097a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097aa:	425b      	negs	r3, r3
 80097ac:	454b      	cmp	r3, r9
 80097ae:	dc01      	bgt.n	80097b4 <_printf_float+0x2c4>
 80097b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b2:	e792      	b.n	80096da <_printf_float+0x1ea>
 80097b4:	2301      	movs	r3, #1
 80097b6:	4652      	mov	r2, sl
 80097b8:	4631      	mov	r1, r6
 80097ba:	4628      	mov	r0, r5
 80097bc:	47b8      	blx	r7
 80097be:	3001      	adds	r0, #1
 80097c0:	f43f aef7 	beq.w	80095b2 <_printf_float+0xc2>
 80097c4:	f109 0901 	add.w	r9, r9, #1
 80097c8:	e7ee      	b.n	80097a8 <_printf_float+0x2b8>
 80097ca:	bf00      	nop
 80097cc:	7fefffff 	.word	0x7fefffff
 80097d0:	0800c140 	.word	0x0800c140
 80097d4:	0800c144 	.word	0x0800c144
 80097d8:	0800c14c 	.word	0x0800c14c
 80097dc:	0800c148 	.word	0x0800c148
 80097e0:	0800c150 	.word	0x0800c150
 80097e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097e8:	429a      	cmp	r2, r3
 80097ea:	bfa8      	it	ge
 80097ec:	461a      	movge	r2, r3
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	4691      	mov	r9, r2
 80097f2:	dc37      	bgt.n	8009864 <_printf_float+0x374>
 80097f4:	f04f 0b00 	mov.w	fp, #0
 80097f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097fc:	f104 021a 	add.w	r2, r4, #26
 8009800:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009802:	9305      	str	r3, [sp, #20]
 8009804:	eba3 0309 	sub.w	r3, r3, r9
 8009808:	455b      	cmp	r3, fp
 800980a:	dc33      	bgt.n	8009874 <_printf_float+0x384>
 800980c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009810:	429a      	cmp	r2, r3
 8009812:	db3b      	blt.n	800988c <_printf_float+0x39c>
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	07da      	lsls	r2, r3, #31
 8009818:	d438      	bmi.n	800988c <_printf_float+0x39c>
 800981a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800981c:	9a05      	ldr	r2, [sp, #20]
 800981e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009820:	1a9a      	subs	r2, r3, r2
 8009822:	eba3 0901 	sub.w	r9, r3, r1
 8009826:	4591      	cmp	r9, r2
 8009828:	bfa8      	it	ge
 800982a:	4691      	movge	r9, r2
 800982c:	f1b9 0f00 	cmp.w	r9, #0
 8009830:	dc35      	bgt.n	800989e <_printf_float+0x3ae>
 8009832:	f04f 0800 	mov.w	r8, #0
 8009836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800983a:	f104 0a1a 	add.w	sl, r4, #26
 800983e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009842:	1a9b      	subs	r3, r3, r2
 8009844:	eba3 0309 	sub.w	r3, r3, r9
 8009848:	4543      	cmp	r3, r8
 800984a:	f77f af79 	ble.w	8009740 <_printf_float+0x250>
 800984e:	2301      	movs	r3, #1
 8009850:	4652      	mov	r2, sl
 8009852:	4631      	mov	r1, r6
 8009854:	4628      	mov	r0, r5
 8009856:	47b8      	blx	r7
 8009858:	3001      	adds	r0, #1
 800985a:	f43f aeaa 	beq.w	80095b2 <_printf_float+0xc2>
 800985e:	f108 0801 	add.w	r8, r8, #1
 8009862:	e7ec      	b.n	800983e <_printf_float+0x34e>
 8009864:	4613      	mov	r3, r2
 8009866:	4631      	mov	r1, r6
 8009868:	4642      	mov	r2, r8
 800986a:	4628      	mov	r0, r5
 800986c:	47b8      	blx	r7
 800986e:	3001      	adds	r0, #1
 8009870:	d1c0      	bne.n	80097f4 <_printf_float+0x304>
 8009872:	e69e      	b.n	80095b2 <_printf_float+0xc2>
 8009874:	2301      	movs	r3, #1
 8009876:	4631      	mov	r1, r6
 8009878:	4628      	mov	r0, r5
 800987a:	9205      	str	r2, [sp, #20]
 800987c:	47b8      	blx	r7
 800987e:	3001      	adds	r0, #1
 8009880:	f43f ae97 	beq.w	80095b2 <_printf_float+0xc2>
 8009884:	9a05      	ldr	r2, [sp, #20]
 8009886:	f10b 0b01 	add.w	fp, fp, #1
 800988a:	e7b9      	b.n	8009800 <_printf_float+0x310>
 800988c:	ee18 3a10 	vmov	r3, s16
 8009890:	4652      	mov	r2, sl
 8009892:	4631      	mov	r1, r6
 8009894:	4628      	mov	r0, r5
 8009896:	47b8      	blx	r7
 8009898:	3001      	adds	r0, #1
 800989a:	d1be      	bne.n	800981a <_printf_float+0x32a>
 800989c:	e689      	b.n	80095b2 <_printf_float+0xc2>
 800989e:	9a05      	ldr	r2, [sp, #20]
 80098a0:	464b      	mov	r3, r9
 80098a2:	4442      	add	r2, r8
 80098a4:	4631      	mov	r1, r6
 80098a6:	4628      	mov	r0, r5
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	d1c1      	bne.n	8009832 <_printf_float+0x342>
 80098ae:	e680      	b.n	80095b2 <_printf_float+0xc2>
 80098b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098b2:	2a01      	cmp	r2, #1
 80098b4:	dc01      	bgt.n	80098ba <_printf_float+0x3ca>
 80098b6:	07db      	lsls	r3, r3, #31
 80098b8:	d538      	bpl.n	800992c <_printf_float+0x43c>
 80098ba:	2301      	movs	r3, #1
 80098bc:	4642      	mov	r2, r8
 80098be:	4631      	mov	r1, r6
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b8      	blx	r7
 80098c4:	3001      	adds	r0, #1
 80098c6:	f43f ae74 	beq.w	80095b2 <_printf_float+0xc2>
 80098ca:	ee18 3a10 	vmov	r3, s16
 80098ce:	4652      	mov	r2, sl
 80098d0:	4631      	mov	r1, r6
 80098d2:	4628      	mov	r0, r5
 80098d4:	47b8      	blx	r7
 80098d6:	3001      	adds	r0, #1
 80098d8:	f43f ae6b 	beq.w	80095b2 <_printf_float+0xc2>
 80098dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098e0:	2200      	movs	r2, #0
 80098e2:	2300      	movs	r3, #0
 80098e4:	f7f7 f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80098e8:	b9d8      	cbnz	r0, 8009922 <_printf_float+0x432>
 80098ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ec:	f108 0201 	add.w	r2, r8, #1
 80098f0:	3b01      	subs	r3, #1
 80098f2:	4631      	mov	r1, r6
 80098f4:	4628      	mov	r0, r5
 80098f6:	47b8      	blx	r7
 80098f8:	3001      	adds	r0, #1
 80098fa:	d10e      	bne.n	800991a <_printf_float+0x42a>
 80098fc:	e659      	b.n	80095b2 <_printf_float+0xc2>
 80098fe:	2301      	movs	r3, #1
 8009900:	4652      	mov	r2, sl
 8009902:	4631      	mov	r1, r6
 8009904:	4628      	mov	r0, r5
 8009906:	47b8      	blx	r7
 8009908:	3001      	adds	r0, #1
 800990a:	f43f ae52 	beq.w	80095b2 <_printf_float+0xc2>
 800990e:	f108 0801 	add.w	r8, r8, #1
 8009912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009914:	3b01      	subs	r3, #1
 8009916:	4543      	cmp	r3, r8
 8009918:	dcf1      	bgt.n	80098fe <_printf_float+0x40e>
 800991a:	464b      	mov	r3, r9
 800991c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009920:	e6dc      	b.n	80096dc <_printf_float+0x1ec>
 8009922:	f04f 0800 	mov.w	r8, #0
 8009926:	f104 0a1a 	add.w	sl, r4, #26
 800992a:	e7f2      	b.n	8009912 <_printf_float+0x422>
 800992c:	2301      	movs	r3, #1
 800992e:	4642      	mov	r2, r8
 8009930:	e7df      	b.n	80098f2 <_printf_float+0x402>
 8009932:	2301      	movs	r3, #1
 8009934:	464a      	mov	r2, r9
 8009936:	4631      	mov	r1, r6
 8009938:	4628      	mov	r0, r5
 800993a:	47b8      	blx	r7
 800993c:	3001      	adds	r0, #1
 800993e:	f43f ae38 	beq.w	80095b2 <_printf_float+0xc2>
 8009942:	f108 0801 	add.w	r8, r8, #1
 8009946:	68e3      	ldr	r3, [r4, #12]
 8009948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800994a:	1a5b      	subs	r3, r3, r1
 800994c:	4543      	cmp	r3, r8
 800994e:	dcf0      	bgt.n	8009932 <_printf_float+0x442>
 8009950:	e6fa      	b.n	8009748 <_printf_float+0x258>
 8009952:	f04f 0800 	mov.w	r8, #0
 8009956:	f104 0919 	add.w	r9, r4, #25
 800995a:	e7f4      	b.n	8009946 <_printf_float+0x456>

0800995c <_printf_common>:
 800995c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009960:	4616      	mov	r6, r2
 8009962:	4699      	mov	r9, r3
 8009964:	688a      	ldr	r2, [r1, #8]
 8009966:	690b      	ldr	r3, [r1, #16]
 8009968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800996c:	4293      	cmp	r3, r2
 800996e:	bfb8      	it	lt
 8009970:	4613      	movlt	r3, r2
 8009972:	6033      	str	r3, [r6, #0]
 8009974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009978:	4607      	mov	r7, r0
 800997a:	460c      	mov	r4, r1
 800997c:	b10a      	cbz	r2, 8009982 <_printf_common+0x26>
 800997e:	3301      	adds	r3, #1
 8009980:	6033      	str	r3, [r6, #0]
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	0699      	lsls	r1, r3, #26
 8009986:	bf42      	ittt	mi
 8009988:	6833      	ldrmi	r3, [r6, #0]
 800998a:	3302      	addmi	r3, #2
 800998c:	6033      	strmi	r3, [r6, #0]
 800998e:	6825      	ldr	r5, [r4, #0]
 8009990:	f015 0506 	ands.w	r5, r5, #6
 8009994:	d106      	bne.n	80099a4 <_printf_common+0x48>
 8009996:	f104 0a19 	add.w	sl, r4, #25
 800999a:	68e3      	ldr	r3, [r4, #12]
 800999c:	6832      	ldr	r2, [r6, #0]
 800999e:	1a9b      	subs	r3, r3, r2
 80099a0:	42ab      	cmp	r3, r5
 80099a2:	dc26      	bgt.n	80099f2 <_printf_common+0x96>
 80099a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099a8:	1e13      	subs	r3, r2, #0
 80099aa:	6822      	ldr	r2, [r4, #0]
 80099ac:	bf18      	it	ne
 80099ae:	2301      	movne	r3, #1
 80099b0:	0692      	lsls	r2, r2, #26
 80099b2:	d42b      	bmi.n	8009a0c <_printf_common+0xb0>
 80099b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099b8:	4649      	mov	r1, r9
 80099ba:	4638      	mov	r0, r7
 80099bc:	47c0      	blx	r8
 80099be:	3001      	adds	r0, #1
 80099c0:	d01e      	beq.n	8009a00 <_printf_common+0xa4>
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	68e5      	ldr	r5, [r4, #12]
 80099c6:	6832      	ldr	r2, [r6, #0]
 80099c8:	f003 0306 	and.w	r3, r3, #6
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	bf08      	it	eq
 80099d0:	1aad      	subeq	r5, r5, r2
 80099d2:	68a3      	ldr	r3, [r4, #8]
 80099d4:	6922      	ldr	r2, [r4, #16]
 80099d6:	bf0c      	ite	eq
 80099d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099dc:	2500      	movne	r5, #0
 80099de:	4293      	cmp	r3, r2
 80099e0:	bfc4      	itt	gt
 80099e2:	1a9b      	subgt	r3, r3, r2
 80099e4:	18ed      	addgt	r5, r5, r3
 80099e6:	2600      	movs	r6, #0
 80099e8:	341a      	adds	r4, #26
 80099ea:	42b5      	cmp	r5, r6
 80099ec:	d11a      	bne.n	8009a24 <_printf_common+0xc8>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e008      	b.n	8009a04 <_printf_common+0xa8>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4652      	mov	r2, sl
 80099f6:	4649      	mov	r1, r9
 80099f8:	4638      	mov	r0, r7
 80099fa:	47c0      	blx	r8
 80099fc:	3001      	adds	r0, #1
 80099fe:	d103      	bne.n	8009a08 <_printf_common+0xac>
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a08:	3501      	adds	r5, #1
 8009a0a:	e7c6      	b.n	800999a <_printf_common+0x3e>
 8009a0c:	18e1      	adds	r1, r4, r3
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	2030      	movs	r0, #48	; 0x30
 8009a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a16:	4422      	add	r2, r4
 8009a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a20:	3302      	adds	r3, #2
 8009a22:	e7c7      	b.n	80099b4 <_printf_common+0x58>
 8009a24:	2301      	movs	r3, #1
 8009a26:	4622      	mov	r2, r4
 8009a28:	4649      	mov	r1, r9
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	47c0      	blx	r8
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d0e6      	beq.n	8009a00 <_printf_common+0xa4>
 8009a32:	3601      	adds	r6, #1
 8009a34:	e7d9      	b.n	80099ea <_printf_common+0x8e>
	...

08009a38 <_printf_i>:
 8009a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3c:	7e0f      	ldrb	r7, [r1, #24]
 8009a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a40:	2f78      	cmp	r7, #120	; 0x78
 8009a42:	4691      	mov	r9, r2
 8009a44:	4680      	mov	r8, r0
 8009a46:	460c      	mov	r4, r1
 8009a48:	469a      	mov	sl, r3
 8009a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a4e:	d807      	bhi.n	8009a60 <_printf_i+0x28>
 8009a50:	2f62      	cmp	r7, #98	; 0x62
 8009a52:	d80a      	bhi.n	8009a6a <_printf_i+0x32>
 8009a54:	2f00      	cmp	r7, #0
 8009a56:	f000 80d8 	beq.w	8009c0a <_printf_i+0x1d2>
 8009a5a:	2f58      	cmp	r7, #88	; 0x58
 8009a5c:	f000 80a3 	beq.w	8009ba6 <_printf_i+0x16e>
 8009a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a68:	e03a      	b.n	8009ae0 <_printf_i+0xa8>
 8009a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a6e:	2b15      	cmp	r3, #21
 8009a70:	d8f6      	bhi.n	8009a60 <_printf_i+0x28>
 8009a72:	a101      	add	r1, pc, #4	; (adr r1, 8009a78 <_printf_i+0x40>)
 8009a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a78:	08009ad1 	.word	0x08009ad1
 8009a7c:	08009ae5 	.word	0x08009ae5
 8009a80:	08009a61 	.word	0x08009a61
 8009a84:	08009a61 	.word	0x08009a61
 8009a88:	08009a61 	.word	0x08009a61
 8009a8c:	08009a61 	.word	0x08009a61
 8009a90:	08009ae5 	.word	0x08009ae5
 8009a94:	08009a61 	.word	0x08009a61
 8009a98:	08009a61 	.word	0x08009a61
 8009a9c:	08009a61 	.word	0x08009a61
 8009aa0:	08009a61 	.word	0x08009a61
 8009aa4:	08009bf1 	.word	0x08009bf1
 8009aa8:	08009b15 	.word	0x08009b15
 8009aac:	08009bd3 	.word	0x08009bd3
 8009ab0:	08009a61 	.word	0x08009a61
 8009ab4:	08009a61 	.word	0x08009a61
 8009ab8:	08009c13 	.word	0x08009c13
 8009abc:	08009a61 	.word	0x08009a61
 8009ac0:	08009b15 	.word	0x08009b15
 8009ac4:	08009a61 	.word	0x08009a61
 8009ac8:	08009a61 	.word	0x08009a61
 8009acc:	08009bdb 	.word	0x08009bdb
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	1d1a      	adds	r2, r3, #4
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	602a      	str	r2, [r5, #0]
 8009ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e0a3      	b.n	8009c2c <_printf_i+0x1f4>
 8009ae4:	6820      	ldr	r0, [r4, #0]
 8009ae6:	6829      	ldr	r1, [r5, #0]
 8009ae8:	0606      	lsls	r6, r0, #24
 8009aea:	f101 0304 	add.w	r3, r1, #4
 8009aee:	d50a      	bpl.n	8009b06 <_printf_i+0xce>
 8009af0:	680e      	ldr	r6, [r1, #0]
 8009af2:	602b      	str	r3, [r5, #0]
 8009af4:	2e00      	cmp	r6, #0
 8009af6:	da03      	bge.n	8009b00 <_printf_i+0xc8>
 8009af8:	232d      	movs	r3, #45	; 0x2d
 8009afa:	4276      	negs	r6, r6
 8009afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b00:	485e      	ldr	r0, [pc, #376]	; (8009c7c <_printf_i+0x244>)
 8009b02:	230a      	movs	r3, #10
 8009b04:	e019      	b.n	8009b3a <_printf_i+0x102>
 8009b06:	680e      	ldr	r6, [r1, #0]
 8009b08:	602b      	str	r3, [r5, #0]
 8009b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b0e:	bf18      	it	ne
 8009b10:	b236      	sxthne	r6, r6
 8009b12:	e7ef      	b.n	8009af4 <_printf_i+0xbc>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	6820      	ldr	r0, [r4, #0]
 8009b18:	1d19      	adds	r1, r3, #4
 8009b1a:	6029      	str	r1, [r5, #0]
 8009b1c:	0601      	lsls	r1, r0, #24
 8009b1e:	d501      	bpl.n	8009b24 <_printf_i+0xec>
 8009b20:	681e      	ldr	r6, [r3, #0]
 8009b22:	e002      	b.n	8009b2a <_printf_i+0xf2>
 8009b24:	0646      	lsls	r6, r0, #25
 8009b26:	d5fb      	bpl.n	8009b20 <_printf_i+0xe8>
 8009b28:	881e      	ldrh	r6, [r3, #0]
 8009b2a:	4854      	ldr	r0, [pc, #336]	; (8009c7c <_printf_i+0x244>)
 8009b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8009b2e:	bf0c      	ite	eq
 8009b30:	2308      	moveq	r3, #8
 8009b32:	230a      	movne	r3, #10
 8009b34:	2100      	movs	r1, #0
 8009b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b3a:	6865      	ldr	r5, [r4, #4]
 8009b3c:	60a5      	str	r5, [r4, #8]
 8009b3e:	2d00      	cmp	r5, #0
 8009b40:	bfa2      	ittt	ge
 8009b42:	6821      	ldrge	r1, [r4, #0]
 8009b44:	f021 0104 	bicge.w	r1, r1, #4
 8009b48:	6021      	strge	r1, [r4, #0]
 8009b4a:	b90e      	cbnz	r6, 8009b50 <_printf_i+0x118>
 8009b4c:	2d00      	cmp	r5, #0
 8009b4e:	d04d      	beq.n	8009bec <_printf_i+0x1b4>
 8009b50:	4615      	mov	r5, r2
 8009b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b56:	fb03 6711 	mls	r7, r3, r1, r6
 8009b5a:	5dc7      	ldrb	r7, [r0, r7]
 8009b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b60:	4637      	mov	r7, r6
 8009b62:	42bb      	cmp	r3, r7
 8009b64:	460e      	mov	r6, r1
 8009b66:	d9f4      	bls.n	8009b52 <_printf_i+0x11a>
 8009b68:	2b08      	cmp	r3, #8
 8009b6a:	d10b      	bne.n	8009b84 <_printf_i+0x14c>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	07de      	lsls	r6, r3, #31
 8009b70:	d508      	bpl.n	8009b84 <_printf_i+0x14c>
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	6861      	ldr	r1, [r4, #4]
 8009b76:	4299      	cmp	r1, r3
 8009b78:	bfde      	ittt	le
 8009b7a:	2330      	movle	r3, #48	; 0x30
 8009b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b84:	1b52      	subs	r2, r2, r5
 8009b86:	6122      	str	r2, [r4, #16]
 8009b88:	f8cd a000 	str.w	sl, [sp]
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	aa03      	add	r2, sp, #12
 8009b90:	4621      	mov	r1, r4
 8009b92:	4640      	mov	r0, r8
 8009b94:	f7ff fee2 	bl	800995c <_printf_common>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d14c      	bne.n	8009c36 <_printf_i+0x1fe>
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba0:	b004      	add	sp, #16
 8009ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba6:	4835      	ldr	r0, [pc, #212]	; (8009c7c <_printf_i+0x244>)
 8009ba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009bac:	6829      	ldr	r1, [r5, #0]
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bb4:	6029      	str	r1, [r5, #0]
 8009bb6:	061d      	lsls	r5, r3, #24
 8009bb8:	d514      	bpl.n	8009be4 <_printf_i+0x1ac>
 8009bba:	07df      	lsls	r7, r3, #31
 8009bbc:	bf44      	itt	mi
 8009bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8009bc2:	6023      	strmi	r3, [r4, #0]
 8009bc4:	b91e      	cbnz	r6, 8009bce <_printf_i+0x196>
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	f023 0320 	bic.w	r3, r3, #32
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	2310      	movs	r3, #16
 8009bd0:	e7b0      	b.n	8009b34 <_printf_i+0xfc>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	f043 0320 	orr.w	r3, r3, #32
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	2378      	movs	r3, #120	; 0x78
 8009bdc:	4828      	ldr	r0, [pc, #160]	; (8009c80 <_printf_i+0x248>)
 8009bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009be2:	e7e3      	b.n	8009bac <_printf_i+0x174>
 8009be4:	0659      	lsls	r1, r3, #25
 8009be6:	bf48      	it	mi
 8009be8:	b2b6      	uxthmi	r6, r6
 8009bea:	e7e6      	b.n	8009bba <_printf_i+0x182>
 8009bec:	4615      	mov	r5, r2
 8009bee:	e7bb      	b.n	8009b68 <_printf_i+0x130>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	6826      	ldr	r6, [r4, #0]
 8009bf4:	6961      	ldr	r1, [r4, #20]
 8009bf6:	1d18      	adds	r0, r3, #4
 8009bf8:	6028      	str	r0, [r5, #0]
 8009bfa:	0635      	lsls	r5, r6, #24
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	d501      	bpl.n	8009c04 <_printf_i+0x1cc>
 8009c00:	6019      	str	r1, [r3, #0]
 8009c02:	e002      	b.n	8009c0a <_printf_i+0x1d2>
 8009c04:	0670      	lsls	r0, r6, #25
 8009c06:	d5fb      	bpl.n	8009c00 <_printf_i+0x1c8>
 8009c08:	8019      	strh	r1, [r3, #0]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	6123      	str	r3, [r4, #16]
 8009c0e:	4615      	mov	r5, r2
 8009c10:	e7ba      	b.n	8009b88 <_printf_i+0x150>
 8009c12:	682b      	ldr	r3, [r5, #0]
 8009c14:	1d1a      	adds	r2, r3, #4
 8009c16:	602a      	str	r2, [r5, #0]
 8009c18:	681d      	ldr	r5, [r3, #0]
 8009c1a:	6862      	ldr	r2, [r4, #4]
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f7f6 fade 	bl	80001e0 <memchr>
 8009c24:	b108      	cbz	r0, 8009c2a <_printf_i+0x1f2>
 8009c26:	1b40      	subs	r0, r0, r5
 8009c28:	6060      	str	r0, [r4, #4]
 8009c2a:	6863      	ldr	r3, [r4, #4]
 8009c2c:	6123      	str	r3, [r4, #16]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c34:	e7a8      	b.n	8009b88 <_printf_i+0x150>
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	462a      	mov	r2, r5
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	4640      	mov	r0, r8
 8009c3e:	47d0      	blx	sl
 8009c40:	3001      	adds	r0, #1
 8009c42:	d0ab      	beq.n	8009b9c <_printf_i+0x164>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	079b      	lsls	r3, r3, #30
 8009c48:	d413      	bmi.n	8009c72 <_printf_i+0x23a>
 8009c4a:	68e0      	ldr	r0, [r4, #12]
 8009c4c:	9b03      	ldr	r3, [sp, #12]
 8009c4e:	4298      	cmp	r0, r3
 8009c50:	bfb8      	it	lt
 8009c52:	4618      	movlt	r0, r3
 8009c54:	e7a4      	b.n	8009ba0 <_printf_i+0x168>
 8009c56:	2301      	movs	r3, #1
 8009c58:	4632      	mov	r2, r6
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	47d0      	blx	sl
 8009c60:	3001      	adds	r0, #1
 8009c62:	d09b      	beq.n	8009b9c <_printf_i+0x164>
 8009c64:	3501      	adds	r5, #1
 8009c66:	68e3      	ldr	r3, [r4, #12]
 8009c68:	9903      	ldr	r1, [sp, #12]
 8009c6a:	1a5b      	subs	r3, r3, r1
 8009c6c:	42ab      	cmp	r3, r5
 8009c6e:	dcf2      	bgt.n	8009c56 <_printf_i+0x21e>
 8009c70:	e7eb      	b.n	8009c4a <_printf_i+0x212>
 8009c72:	2500      	movs	r5, #0
 8009c74:	f104 0619 	add.w	r6, r4, #25
 8009c78:	e7f5      	b.n	8009c66 <_printf_i+0x22e>
 8009c7a:	bf00      	nop
 8009c7c:	0800c152 	.word	0x0800c152
 8009c80:	0800c163 	.word	0x0800c163

08009c84 <_sbrk_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4d06      	ldr	r5, [pc, #24]	; (8009ca0 <_sbrk_r+0x1c>)
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	602b      	str	r3, [r5, #0]
 8009c90:	f7f8 fc80 	bl	8002594 <_sbrk>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_sbrk_r+0x1a>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_sbrk_r+0x1a>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	20000520 	.word	0x20000520

08009ca4 <siprintf>:
 8009ca4:	b40e      	push	{r1, r2, r3}
 8009ca6:	b500      	push	{lr}
 8009ca8:	b09c      	sub	sp, #112	; 0x70
 8009caa:	ab1d      	add	r3, sp, #116	; 0x74
 8009cac:	9002      	str	r0, [sp, #8]
 8009cae:	9006      	str	r0, [sp, #24]
 8009cb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009cb4:	4809      	ldr	r0, [pc, #36]	; (8009cdc <siprintf+0x38>)
 8009cb6:	9107      	str	r1, [sp, #28]
 8009cb8:	9104      	str	r1, [sp, #16]
 8009cba:	4909      	ldr	r1, [pc, #36]	; (8009ce0 <siprintf+0x3c>)
 8009cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc0:	9105      	str	r1, [sp, #20]
 8009cc2:	6800      	ldr	r0, [r0, #0]
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	a902      	add	r1, sp, #8
 8009cc8:	f001 fa96 	bl	800b1f8 <_svfiprintf_r>
 8009ccc:	9b02      	ldr	r3, [sp, #8]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	701a      	strb	r2, [r3, #0]
 8009cd2:	b01c      	add	sp, #112	; 0x70
 8009cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cd8:	b003      	add	sp, #12
 8009cda:	4770      	bx	lr
 8009cdc:	2000000c 	.word	0x2000000c
 8009ce0:	ffff0208 	.word	0xffff0208

08009ce4 <strcpy>:
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cea:	f803 2b01 	strb.w	r2, [r3], #1
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	d1f9      	bne.n	8009ce6 <strcpy+0x2>
 8009cf2:	4770      	bx	lr

08009cf4 <quorem>:
 8009cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf8:	6903      	ldr	r3, [r0, #16]
 8009cfa:	690c      	ldr	r4, [r1, #16]
 8009cfc:	42a3      	cmp	r3, r4
 8009cfe:	4607      	mov	r7, r0
 8009d00:	f2c0 8081 	blt.w	8009e06 <quorem+0x112>
 8009d04:	3c01      	subs	r4, #1
 8009d06:	f101 0814 	add.w	r8, r1, #20
 8009d0a:	f100 0514 	add.w	r5, r0, #20
 8009d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d12:	9301      	str	r3, [sp, #4]
 8009d14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d28:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d2c:	d331      	bcc.n	8009d92 <quorem+0x9e>
 8009d2e:	f04f 0e00 	mov.w	lr, #0
 8009d32:	4640      	mov	r0, r8
 8009d34:	46ac      	mov	ip, r5
 8009d36:	46f2      	mov	sl, lr
 8009d38:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d3c:	b293      	uxth	r3, r2
 8009d3e:	fb06 e303 	mla	r3, r6, r3, lr
 8009d42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	ebaa 0303 	sub.w	r3, sl, r3
 8009d4c:	f8dc a000 	ldr.w	sl, [ip]
 8009d50:	0c12      	lsrs	r2, r2, #16
 8009d52:	fa13 f38a 	uxtah	r3, r3, sl
 8009d56:	fb06 e202 	mla	r2, r6, r2, lr
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	9b00      	ldr	r3, [sp, #0]
 8009d5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d62:	b292      	uxth	r2, r2
 8009d64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009d70:	4581      	cmp	r9, r0
 8009d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d76:	f84c 3b04 	str.w	r3, [ip], #4
 8009d7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d7e:	d2db      	bcs.n	8009d38 <quorem+0x44>
 8009d80:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d84:	b92b      	cbnz	r3, 8009d92 <quorem+0x9e>
 8009d86:	9b01      	ldr	r3, [sp, #4]
 8009d88:	3b04      	subs	r3, #4
 8009d8a:	429d      	cmp	r5, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	d32e      	bcc.n	8009dee <quorem+0xfa>
 8009d90:	613c      	str	r4, [r7, #16]
 8009d92:	4638      	mov	r0, r7
 8009d94:	f001 f8bc 	bl	800af10 <__mcmp>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	db24      	blt.n	8009de6 <quorem+0xf2>
 8009d9c:	3601      	adds	r6, #1
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f04f 0c00 	mov.w	ip, #0
 8009da4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009da8:	f8d0 e000 	ldr.w	lr, [r0]
 8009dac:	b293      	uxth	r3, r2
 8009dae:	ebac 0303 	sub.w	r3, ip, r3
 8009db2:	0c12      	lsrs	r2, r2, #16
 8009db4:	fa13 f38e 	uxtah	r3, r3, lr
 8009db8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009dbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dc6:	45c1      	cmp	r9, r8
 8009dc8:	f840 3b04 	str.w	r3, [r0], #4
 8009dcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009dd0:	d2e8      	bcs.n	8009da4 <quorem+0xb0>
 8009dd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dda:	b922      	cbnz	r2, 8009de6 <quorem+0xf2>
 8009ddc:	3b04      	subs	r3, #4
 8009dde:	429d      	cmp	r5, r3
 8009de0:	461a      	mov	r2, r3
 8009de2:	d30a      	bcc.n	8009dfa <quorem+0x106>
 8009de4:	613c      	str	r4, [r7, #16]
 8009de6:	4630      	mov	r0, r6
 8009de8:	b003      	add	sp, #12
 8009dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	3b04      	subs	r3, #4
 8009df2:	2a00      	cmp	r2, #0
 8009df4:	d1cc      	bne.n	8009d90 <quorem+0x9c>
 8009df6:	3c01      	subs	r4, #1
 8009df8:	e7c7      	b.n	8009d8a <quorem+0x96>
 8009dfa:	6812      	ldr	r2, [r2, #0]
 8009dfc:	3b04      	subs	r3, #4
 8009dfe:	2a00      	cmp	r2, #0
 8009e00:	d1f0      	bne.n	8009de4 <quorem+0xf0>
 8009e02:	3c01      	subs	r4, #1
 8009e04:	e7eb      	b.n	8009dde <quorem+0xea>
 8009e06:	2000      	movs	r0, #0
 8009e08:	e7ee      	b.n	8009de8 <quorem+0xf4>
 8009e0a:	0000      	movs	r0, r0
 8009e0c:	0000      	movs	r0, r0
	...

08009e10 <_dtoa_r>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	ed2d 8b04 	vpush	{d8-d9}
 8009e18:	ec57 6b10 	vmov	r6, r7, d0
 8009e1c:	b093      	sub	sp, #76	; 0x4c
 8009e1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e24:	9106      	str	r1, [sp, #24]
 8009e26:	ee10 aa10 	vmov	sl, s0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009e30:	46bb      	mov	fp, r7
 8009e32:	b975      	cbnz	r5, 8009e52 <_dtoa_r+0x42>
 8009e34:	2010      	movs	r0, #16
 8009e36:	f7ff f9bd 	bl	80091b4 <malloc>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	6260      	str	r0, [r4, #36]	; 0x24
 8009e3e:	b920      	cbnz	r0, 8009e4a <_dtoa_r+0x3a>
 8009e40:	4ba7      	ldr	r3, [pc, #668]	; (800a0e0 <_dtoa_r+0x2d0>)
 8009e42:	21ea      	movs	r1, #234	; 0xea
 8009e44:	48a7      	ldr	r0, [pc, #668]	; (800a0e4 <_dtoa_r+0x2d4>)
 8009e46:	f001 fad7 	bl	800b3f8 <__assert_func>
 8009e4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e4e:	6005      	str	r5, [r0, #0]
 8009e50:	60c5      	str	r5, [r0, #12]
 8009e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e54:	6819      	ldr	r1, [r3, #0]
 8009e56:	b151      	cbz	r1, 8009e6e <_dtoa_r+0x5e>
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	604a      	str	r2, [r1, #4]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	4093      	lsls	r3, r2
 8009e60:	608b      	str	r3, [r1, #8]
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 fe12 	bl	800aa8c <_Bfree>
 8009e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	1e3b      	subs	r3, r7, #0
 8009e70:	bfaa      	itet	ge
 8009e72:	2300      	movge	r3, #0
 8009e74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009e78:	f8c8 3000 	strge.w	r3, [r8]
 8009e7c:	4b9a      	ldr	r3, [pc, #616]	; (800a0e8 <_dtoa_r+0x2d8>)
 8009e7e:	bfbc      	itt	lt
 8009e80:	2201      	movlt	r2, #1
 8009e82:	f8c8 2000 	strlt.w	r2, [r8]
 8009e86:	ea33 030b 	bics.w	r3, r3, fp
 8009e8a:	d11b      	bne.n	8009ec4 <_dtoa_r+0xb4>
 8009e8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e98:	4333      	orrs	r3, r6
 8009e9a:	f000 8592 	beq.w	800a9c2 <_dtoa_r+0xbb2>
 8009e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ea0:	b963      	cbnz	r3, 8009ebc <_dtoa_r+0xac>
 8009ea2:	4b92      	ldr	r3, [pc, #584]	; (800a0ec <_dtoa_r+0x2dc>)
 8009ea4:	e022      	b.n	8009eec <_dtoa_r+0xdc>
 8009ea6:	4b92      	ldr	r3, [pc, #584]	; (800a0f0 <_dtoa_r+0x2e0>)
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	3308      	adds	r3, #8
 8009eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009eae:	6013      	str	r3, [r2, #0]
 8009eb0:	9801      	ldr	r0, [sp, #4]
 8009eb2:	b013      	add	sp, #76	; 0x4c
 8009eb4:	ecbd 8b04 	vpop	{d8-d9}
 8009eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebc:	4b8b      	ldr	r3, [pc, #556]	; (800a0ec <_dtoa_r+0x2dc>)
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	3303      	adds	r3, #3
 8009ec2:	e7f3      	b.n	8009eac <_dtoa_r+0x9c>
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4650      	mov	r0, sl
 8009eca:	4659      	mov	r1, fp
 8009ecc:	f7f6 fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ed0:	ec4b ab19 	vmov	d9, sl, fp
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	b158      	cbz	r0, 8009ef0 <_dtoa_r+0xe0>
 8009ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009eda:	2301      	movs	r3, #1
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 856b 	beq.w	800a9bc <_dtoa_r+0xbac>
 8009ee6:	4883      	ldr	r0, [pc, #524]	; (800a0f4 <_dtoa_r+0x2e4>)
 8009ee8:	6018      	str	r0, [r3, #0]
 8009eea:	1e43      	subs	r3, r0, #1
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	e7df      	b.n	8009eb0 <_dtoa_r+0xa0>
 8009ef0:	ec4b ab10 	vmov	d0, sl, fp
 8009ef4:	aa10      	add	r2, sp, #64	; 0x40
 8009ef6:	a911      	add	r1, sp, #68	; 0x44
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f001 f8af 	bl	800b05c <__d2b>
 8009efe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009f02:	ee08 0a10 	vmov	s16, r0
 8009f06:	2d00      	cmp	r5, #0
 8009f08:	f000 8084 	beq.w	800a014 <_dtoa_r+0x204>
 8009f0c:	ee19 3a90 	vmov	r3, s19
 8009f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009f18:	4656      	mov	r6, sl
 8009f1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009f1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009f26:	4b74      	ldr	r3, [pc, #464]	; (800a0f8 <_dtoa_r+0x2e8>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	f7f6 f9ab 	bl	8000288 <__aeabi_dsub>
 8009f32:	a365      	add	r3, pc, #404	; (adr r3, 800a0c8 <_dtoa_r+0x2b8>)
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	f7f6 fb5e 	bl	80005f8 <__aeabi_dmul>
 8009f3c:	a364      	add	r3, pc, #400	; (adr r3, 800a0d0 <_dtoa_r+0x2c0>)
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f7f6 f9a3 	bl	800028c <__adddf3>
 8009f46:	4606      	mov	r6, r0
 8009f48:	4628      	mov	r0, r5
 8009f4a:	460f      	mov	r7, r1
 8009f4c:	f7f6 faea 	bl	8000524 <__aeabi_i2d>
 8009f50:	a361      	add	r3, pc, #388	; (adr r3, 800a0d8 <_dtoa_r+0x2c8>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 fb4f 	bl	80005f8 <__aeabi_dmul>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4630      	mov	r0, r6
 8009f60:	4639      	mov	r1, r7
 8009f62:	f7f6 f993 	bl	800028c <__adddf3>
 8009f66:	4606      	mov	r6, r0
 8009f68:	460f      	mov	r7, r1
 8009f6a:	f7f6 fdf5 	bl	8000b58 <__aeabi_d2iz>
 8009f6e:	2200      	movs	r2, #0
 8009f70:	9000      	str	r0, [sp, #0]
 8009f72:	2300      	movs	r3, #0
 8009f74:	4630      	mov	r0, r6
 8009f76:	4639      	mov	r1, r7
 8009f78:	f7f6 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8009f7c:	b150      	cbz	r0, 8009f94 <_dtoa_r+0x184>
 8009f7e:	9800      	ldr	r0, [sp, #0]
 8009f80:	f7f6 fad0 	bl	8000524 <__aeabi_i2d>
 8009f84:	4632      	mov	r2, r6
 8009f86:	463b      	mov	r3, r7
 8009f88:	f7f6 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f8c:	b910      	cbnz	r0, 8009f94 <_dtoa_r+0x184>
 8009f8e:	9b00      	ldr	r3, [sp, #0]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	9b00      	ldr	r3, [sp, #0]
 8009f96:	2b16      	cmp	r3, #22
 8009f98:	d85a      	bhi.n	800a050 <_dtoa_r+0x240>
 8009f9a:	9a00      	ldr	r2, [sp, #0]
 8009f9c:	4b57      	ldr	r3, [pc, #348]	; (800a0fc <_dtoa_r+0x2ec>)
 8009f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	ec51 0b19 	vmov	r0, r1, d9
 8009faa:	f7f6 fd97 	bl	8000adc <__aeabi_dcmplt>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d050      	beq.n	800a054 <_dtoa_r+0x244>
 8009fb2:	9b00      	ldr	r3, [sp, #0]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fbe:	1b5d      	subs	r5, r3, r5
 8009fc0:	1e6b      	subs	r3, r5, #1
 8009fc2:	9305      	str	r3, [sp, #20]
 8009fc4:	bf45      	ittet	mi
 8009fc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009fca:	9304      	strmi	r3, [sp, #16]
 8009fcc:	2300      	movpl	r3, #0
 8009fce:	2300      	movmi	r3, #0
 8009fd0:	bf4c      	ite	mi
 8009fd2:	9305      	strmi	r3, [sp, #20]
 8009fd4:	9304      	strpl	r3, [sp, #16]
 8009fd6:	9b00      	ldr	r3, [sp, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	db3d      	blt.n	800a058 <_dtoa_r+0x248>
 8009fdc:	9b05      	ldr	r3, [sp, #20]
 8009fde:	9a00      	ldr	r2, [sp, #0]
 8009fe0:	920a      	str	r2, [sp, #40]	; 0x28
 8009fe2:	4413      	add	r3, r2
 8009fe4:	9305      	str	r3, [sp, #20]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	9307      	str	r3, [sp, #28]
 8009fea:	9b06      	ldr	r3, [sp, #24]
 8009fec:	2b09      	cmp	r3, #9
 8009fee:	f200 8089 	bhi.w	800a104 <_dtoa_r+0x2f4>
 8009ff2:	2b05      	cmp	r3, #5
 8009ff4:	bfc4      	itt	gt
 8009ff6:	3b04      	subgt	r3, #4
 8009ff8:	9306      	strgt	r3, [sp, #24]
 8009ffa:	9b06      	ldr	r3, [sp, #24]
 8009ffc:	f1a3 0302 	sub.w	r3, r3, #2
 800a000:	bfcc      	ite	gt
 800a002:	2500      	movgt	r5, #0
 800a004:	2501      	movle	r5, #1
 800a006:	2b03      	cmp	r3, #3
 800a008:	f200 8087 	bhi.w	800a11a <_dtoa_r+0x30a>
 800a00c:	e8df f003 	tbb	[pc, r3]
 800a010:	59383a2d 	.word	0x59383a2d
 800a014:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a018:	441d      	add	r5, r3
 800a01a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a01e:	2b20      	cmp	r3, #32
 800a020:	bfc1      	itttt	gt
 800a022:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a026:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a02a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a02e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a032:	bfda      	itte	le
 800a034:	f1c3 0320 	rsble	r3, r3, #32
 800a038:	fa06 f003 	lslle.w	r0, r6, r3
 800a03c:	4318      	orrgt	r0, r3
 800a03e:	f7f6 fa61 	bl	8000504 <__aeabi_ui2d>
 800a042:	2301      	movs	r3, #1
 800a044:	4606      	mov	r6, r0
 800a046:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a04a:	3d01      	subs	r5, #1
 800a04c:	930e      	str	r3, [sp, #56]	; 0x38
 800a04e:	e76a      	b.n	8009f26 <_dtoa_r+0x116>
 800a050:	2301      	movs	r3, #1
 800a052:	e7b2      	b.n	8009fba <_dtoa_r+0x1aa>
 800a054:	900b      	str	r0, [sp, #44]	; 0x2c
 800a056:	e7b1      	b.n	8009fbc <_dtoa_r+0x1ac>
 800a058:	9b04      	ldr	r3, [sp, #16]
 800a05a:	9a00      	ldr	r2, [sp, #0]
 800a05c:	1a9b      	subs	r3, r3, r2
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	4253      	negs	r3, r2
 800a062:	9307      	str	r3, [sp, #28]
 800a064:	2300      	movs	r3, #0
 800a066:	930a      	str	r3, [sp, #40]	; 0x28
 800a068:	e7bf      	b.n	8009fea <_dtoa_r+0x1da>
 800a06a:	2300      	movs	r3, #0
 800a06c:	9308      	str	r3, [sp, #32]
 800a06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	dc55      	bgt.n	800a120 <_dtoa_r+0x310>
 800a074:	2301      	movs	r3, #1
 800a076:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a07a:	461a      	mov	r2, r3
 800a07c:	9209      	str	r2, [sp, #36]	; 0x24
 800a07e:	e00c      	b.n	800a09a <_dtoa_r+0x28a>
 800a080:	2301      	movs	r3, #1
 800a082:	e7f3      	b.n	800a06c <_dtoa_r+0x25c>
 800a084:	2300      	movs	r3, #0
 800a086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a088:	9308      	str	r3, [sp, #32]
 800a08a:	9b00      	ldr	r3, [sp, #0]
 800a08c:	4413      	add	r3, r2
 800a08e:	9302      	str	r3, [sp, #8]
 800a090:	3301      	adds	r3, #1
 800a092:	2b01      	cmp	r3, #1
 800a094:	9303      	str	r3, [sp, #12]
 800a096:	bfb8      	it	lt
 800a098:	2301      	movlt	r3, #1
 800a09a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a09c:	2200      	movs	r2, #0
 800a09e:	6042      	str	r2, [r0, #4]
 800a0a0:	2204      	movs	r2, #4
 800a0a2:	f102 0614 	add.w	r6, r2, #20
 800a0a6:	429e      	cmp	r6, r3
 800a0a8:	6841      	ldr	r1, [r0, #4]
 800a0aa:	d93d      	bls.n	800a128 <_dtoa_r+0x318>
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fcad 	bl	800aa0c <_Balloc>
 800a0b2:	9001      	str	r0, [sp, #4]
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d13b      	bne.n	800a130 <_dtoa_r+0x320>
 800a0b8:	4b11      	ldr	r3, [pc, #68]	; (800a100 <_dtoa_r+0x2f0>)
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a0c0:	e6c0      	b.n	8009e44 <_dtoa_r+0x34>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e7df      	b.n	800a086 <_dtoa_r+0x276>
 800a0c6:	bf00      	nop
 800a0c8:	636f4361 	.word	0x636f4361
 800a0cc:	3fd287a7 	.word	0x3fd287a7
 800a0d0:	8b60c8b3 	.word	0x8b60c8b3
 800a0d4:	3fc68a28 	.word	0x3fc68a28
 800a0d8:	509f79fb 	.word	0x509f79fb
 800a0dc:	3fd34413 	.word	0x3fd34413
 800a0e0:	0800c181 	.word	0x0800c181
 800a0e4:	0800c198 	.word	0x0800c198
 800a0e8:	7ff00000 	.word	0x7ff00000
 800a0ec:	0800c17d 	.word	0x0800c17d
 800a0f0:	0800c174 	.word	0x0800c174
 800a0f4:	0800c151 	.word	0x0800c151
 800a0f8:	3ff80000 	.word	0x3ff80000
 800a0fc:	0800c288 	.word	0x0800c288
 800a100:	0800c1f3 	.word	0x0800c1f3
 800a104:	2501      	movs	r5, #1
 800a106:	2300      	movs	r3, #0
 800a108:	9306      	str	r3, [sp, #24]
 800a10a:	9508      	str	r5, [sp, #32]
 800a10c:	f04f 33ff 	mov.w	r3, #4294967295
 800a110:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a114:	2200      	movs	r2, #0
 800a116:	2312      	movs	r3, #18
 800a118:	e7b0      	b.n	800a07c <_dtoa_r+0x26c>
 800a11a:	2301      	movs	r3, #1
 800a11c:	9308      	str	r3, [sp, #32]
 800a11e:	e7f5      	b.n	800a10c <_dtoa_r+0x2fc>
 800a120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a122:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a126:	e7b8      	b.n	800a09a <_dtoa_r+0x28a>
 800a128:	3101      	adds	r1, #1
 800a12a:	6041      	str	r1, [r0, #4]
 800a12c:	0052      	lsls	r2, r2, #1
 800a12e:	e7b8      	b.n	800a0a2 <_dtoa_r+0x292>
 800a130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a132:	9a01      	ldr	r2, [sp, #4]
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	9b03      	ldr	r3, [sp, #12]
 800a138:	2b0e      	cmp	r3, #14
 800a13a:	f200 809d 	bhi.w	800a278 <_dtoa_r+0x468>
 800a13e:	2d00      	cmp	r5, #0
 800a140:	f000 809a 	beq.w	800a278 <_dtoa_r+0x468>
 800a144:	9b00      	ldr	r3, [sp, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	dd32      	ble.n	800a1b0 <_dtoa_r+0x3a0>
 800a14a:	4ab7      	ldr	r2, [pc, #732]	; (800a428 <_dtoa_r+0x618>)
 800a14c:	f003 030f 	and.w	r3, r3, #15
 800a150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a154:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a158:	9b00      	ldr	r3, [sp, #0]
 800a15a:	05d8      	lsls	r0, r3, #23
 800a15c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a160:	d516      	bpl.n	800a190 <_dtoa_r+0x380>
 800a162:	4bb2      	ldr	r3, [pc, #712]	; (800a42c <_dtoa_r+0x61c>)
 800a164:	ec51 0b19 	vmov	r0, r1, d9
 800a168:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a16c:	f7f6 fb6e 	bl	800084c <__aeabi_ddiv>
 800a170:	f007 070f 	and.w	r7, r7, #15
 800a174:	4682      	mov	sl, r0
 800a176:	468b      	mov	fp, r1
 800a178:	2503      	movs	r5, #3
 800a17a:	4eac      	ldr	r6, [pc, #688]	; (800a42c <_dtoa_r+0x61c>)
 800a17c:	b957      	cbnz	r7, 800a194 <_dtoa_r+0x384>
 800a17e:	4642      	mov	r2, r8
 800a180:	464b      	mov	r3, r9
 800a182:	4650      	mov	r0, sl
 800a184:	4659      	mov	r1, fp
 800a186:	f7f6 fb61 	bl	800084c <__aeabi_ddiv>
 800a18a:	4682      	mov	sl, r0
 800a18c:	468b      	mov	fp, r1
 800a18e:	e028      	b.n	800a1e2 <_dtoa_r+0x3d2>
 800a190:	2502      	movs	r5, #2
 800a192:	e7f2      	b.n	800a17a <_dtoa_r+0x36a>
 800a194:	07f9      	lsls	r1, r7, #31
 800a196:	d508      	bpl.n	800a1aa <_dtoa_r+0x39a>
 800a198:	4640      	mov	r0, r8
 800a19a:	4649      	mov	r1, r9
 800a19c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1a0:	f7f6 fa2a 	bl	80005f8 <__aeabi_dmul>
 800a1a4:	3501      	adds	r5, #1
 800a1a6:	4680      	mov	r8, r0
 800a1a8:	4689      	mov	r9, r1
 800a1aa:	107f      	asrs	r7, r7, #1
 800a1ac:	3608      	adds	r6, #8
 800a1ae:	e7e5      	b.n	800a17c <_dtoa_r+0x36c>
 800a1b0:	f000 809b 	beq.w	800a2ea <_dtoa_r+0x4da>
 800a1b4:	9b00      	ldr	r3, [sp, #0]
 800a1b6:	4f9d      	ldr	r7, [pc, #628]	; (800a42c <_dtoa_r+0x61c>)
 800a1b8:	425e      	negs	r6, r3
 800a1ba:	4b9b      	ldr	r3, [pc, #620]	; (800a428 <_dtoa_r+0x618>)
 800a1bc:	f006 020f 	and.w	r2, r6, #15
 800a1c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	ec51 0b19 	vmov	r0, r1, d9
 800a1cc:	f7f6 fa14 	bl	80005f8 <__aeabi_dmul>
 800a1d0:	1136      	asrs	r6, r6, #4
 800a1d2:	4682      	mov	sl, r0
 800a1d4:	468b      	mov	fp, r1
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	2502      	movs	r5, #2
 800a1da:	2e00      	cmp	r6, #0
 800a1dc:	d17a      	bne.n	800a2d4 <_dtoa_r+0x4c4>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1d3      	bne.n	800a18a <_dtoa_r+0x37a>
 800a1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 8082 	beq.w	800a2ee <_dtoa_r+0x4de>
 800a1ea:	4b91      	ldr	r3, [pc, #580]	; (800a430 <_dtoa_r+0x620>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	4650      	mov	r0, sl
 800a1f0:	4659      	mov	r1, fp
 800a1f2:	f7f6 fc73 	bl	8000adc <__aeabi_dcmplt>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d079      	beq.n	800a2ee <_dtoa_r+0x4de>
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d076      	beq.n	800a2ee <_dtoa_r+0x4de>
 800a200:	9b02      	ldr	r3, [sp, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	dd36      	ble.n	800a274 <_dtoa_r+0x464>
 800a206:	9b00      	ldr	r3, [sp, #0]
 800a208:	4650      	mov	r0, sl
 800a20a:	4659      	mov	r1, fp
 800a20c:	1e5f      	subs	r7, r3, #1
 800a20e:	2200      	movs	r2, #0
 800a210:	4b88      	ldr	r3, [pc, #544]	; (800a434 <_dtoa_r+0x624>)
 800a212:	f7f6 f9f1 	bl	80005f8 <__aeabi_dmul>
 800a216:	9e02      	ldr	r6, [sp, #8]
 800a218:	4682      	mov	sl, r0
 800a21a:	468b      	mov	fp, r1
 800a21c:	3501      	adds	r5, #1
 800a21e:	4628      	mov	r0, r5
 800a220:	f7f6 f980 	bl	8000524 <__aeabi_i2d>
 800a224:	4652      	mov	r2, sl
 800a226:	465b      	mov	r3, fp
 800a228:	f7f6 f9e6 	bl	80005f8 <__aeabi_dmul>
 800a22c:	4b82      	ldr	r3, [pc, #520]	; (800a438 <_dtoa_r+0x628>)
 800a22e:	2200      	movs	r2, #0
 800a230:	f7f6 f82c 	bl	800028c <__adddf3>
 800a234:	46d0      	mov	r8, sl
 800a236:	46d9      	mov	r9, fp
 800a238:	4682      	mov	sl, r0
 800a23a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a23e:	2e00      	cmp	r6, #0
 800a240:	d158      	bne.n	800a2f4 <_dtoa_r+0x4e4>
 800a242:	4b7e      	ldr	r3, [pc, #504]	; (800a43c <_dtoa_r+0x62c>)
 800a244:	2200      	movs	r2, #0
 800a246:	4640      	mov	r0, r8
 800a248:	4649      	mov	r1, r9
 800a24a:	f7f6 f81d 	bl	8000288 <__aeabi_dsub>
 800a24e:	4652      	mov	r2, sl
 800a250:	465b      	mov	r3, fp
 800a252:	4680      	mov	r8, r0
 800a254:	4689      	mov	r9, r1
 800a256:	f7f6 fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	f040 8295 	bne.w	800a78a <_dtoa_r+0x97a>
 800a260:	4652      	mov	r2, sl
 800a262:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a266:	4640      	mov	r0, r8
 800a268:	4649      	mov	r1, r9
 800a26a:	f7f6 fc37 	bl	8000adc <__aeabi_dcmplt>
 800a26e:	2800      	cmp	r0, #0
 800a270:	f040 8289 	bne.w	800a786 <_dtoa_r+0x976>
 800a274:	ec5b ab19 	vmov	sl, fp, d9
 800a278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f2c0 8148 	blt.w	800a510 <_dtoa_r+0x700>
 800a280:	9a00      	ldr	r2, [sp, #0]
 800a282:	2a0e      	cmp	r2, #14
 800a284:	f300 8144 	bgt.w	800a510 <_dtoa_r+0x700>
 800a288:	4b67      	ldr	r3, [pc, #412]	; (800a428 <_dtoa_r+0x618>)
 800a28a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a28e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a294:	2b00      	cmp	r3, #0
 800a296:	f280 80d5 	bge.w	800a444 <_dtoa_r+0x634>
 800a29a:	9b03      	ldr	r3, [sp, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f300 80d1 	bgt.w	800a444 <_dtoa_r+0x634>
 800a2a2:	f040 826f 	bne.w	800a784 <_dtoa_r+0x974>
 800a2a6:	4b65      	ldr	r3, [pc, #404]	; (800a43c <_dtoa_r+0x62c>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	f7f6 f9a3 	bl	80005f8 <__aeabi_dmul>
 800a2b2:	4652      	mov	r2, sl
 800a2b4:	465b      	mov	r3, fp
 800a2b6:	f7f6 fc25 	bl	8000b04 <__aeabi_dcmpge>
 800a2ba:	9e03      	ldr	r6, [sp, #12]
 800a2bc:	4637      	mov	r7, r6
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f040 8245 	bne.w	800a74e <_dtoa_r+0x93e>
 800a2c4:	9d01      	ldr	r5, [sp, #4]
 800a2c6:	2331      	movs	r3, #49	; 0x31
 800a2c8:	f805 3b01 	strb.w	r3, [r5], #1
 800a2cc:	9b00      	ldr	r3, [sp, #0]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	e240      	b.n	800a756 <_dtoa_r+0x946>
 800a2d4:	07f2      	lsls	r2, r6, #31
 800a2d6:	d505      	bpl.n	800a2e4 <_dtoa_r+0x4d4>
 800a2d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2dc:	f7f6 f98c 	bl	80005f8 <__aeabi_dmul>
 800a2e0:	3501      	adds	r5, #1
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	1076      	asrs	r6, r6, #1
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	e777      	b.n	800a1da <_dtoa_r+0x3ca>
 800a2ea:	2502      	movs	r5, #2
 800a2ec:	e779      	b.n	800a1e2 <_dtoa_r+0x3d2>
 800a2ee:	9f00      	ldr	r7, [sp, #0]
 800a2f0:	9e03      	ldr	r6, [sp, #12]
 800a2f2:	e794      	b.n	800a21e <_dtoa_r+0x40e>
 800a2f4:	9901      	ldr	r1, [sp, #4]
 800a2f6:	4b4c      	ldr	r3, [pc, #304]	; (800a428 <_dtoa_r+0x618>)
 800a2f8:	4431      	add	r1, r6
 800a2fa:	910d      	str	r1, [sp, #52]	; 0x34
 800a2fc:	9908      	ldr	r1, [sp, #32]
 800a2fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a302:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a306:	2900      	cmp	r1, #0
 800a308:	d043      	beq.n	800a392 <_dtoa_r+0x582>
 800a30a:	494d      	ldr	r1, [pc, #308]	; (800a440 <_dtoa_r+0x630>)
 800a30c:	2000      	movs	r0, #0
 800a30e:	f7f6 fa9d 	bl	800084c <__aeabi_ddiv>
 800a312:	4652      	mov	r2, sl
 800a314:	465b      	mov	r3, fp
 800a316:	f7f5 ffb7 	bl	8000288 <__aeabi_dsub>
 800a31a:	9d01      	ldr	r5, [sp, #4]
 800a31c:	4682      	mov	sl, r0
 800a31e:	468b      	mov	fp, r1
 800a320:	4649      	mov	r1, r9
 800a322:	4640      	mov	r0, r8
 800a324:	f7f6 fc18 	bl	8000b58 <__aeabi_d2iz>
 800a328:	4606      	mov	r6, r0
 800a32a:	f7f6 f8fb 	bl	8000524 <__aeabi_i2d>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	4640      	mov	r0, r8
 800a334:	4649      	mov	r1, r9
 800a336:	f7f5 ffa7 	bl	8000288 <__aeabi_dsub>
 800a33a:	3630      	adds	r6, #48	; 0x30
 800a33c:	f805 6b01 	strb.w	r6, [r5], #1
 800a340:	4652      	mov	r2, sl
 800a342:	465b      	mov	r3, fp
 800a344:	4680      	mov	r8, r0
 800a346:	4689      	mov	r9, r1
 800a348:	f7f6 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d163      	bne.n	800a418 <_dtoa_r+0x608>
 800a350:	4642      	mov	r2, r8
 800a352:	464b      	mov	r3, r9
 800a354:	4936      	ldr	r1, [pc, #216]	; (800a430 <_dtoa_r+0x620>)
 800a356:	2000      	movs	r0, #0
 800a358:	f7f5 ff96 	bl	8000288 <__aeabi_dsub>
 800a35c:	4652      	mov	r2, sl
 800a35e:	465b      	mov	r3, fp
 800a360:	f7f6 fbbc 	bl	8000adc <__aeabi_dcmplt>
 800a364:	2800      	cmp	r0, #0
 800a366:	f040 80b5 	bne.w	800a4d4 <_dtoa_r+0x6c4>
 800a36a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a36c:	429d      	cmp	r5, r3
 800a36e:	d081      	beq.n	800a274 <_dtoa_r+0x464>
 800a370:	4b30      	ldr	r3, [pc, #192]	; (800a434 <_dtoa_r+0x624>)
 800a372:	2200      	movs	r2, #0
 800a374:	4650      	mov	r0, sl
 800a376:	4659      	mov	r1, fp
 800a378:	f7f6 f93e 	bl	80005f8 <__aeabi_dmul>
 800a37c:	4b2d      	ldr	r3, [pc, #180]	; (800a434 <_dtoa_r+0x624>)
 800a37e:	4682      	mov	sl, r0
 800a380:	468b      	mov	fp, r1
 800a382:	4640      	mov	r0, r8
 800a384:	4649      	mov	r1, r9
 800a386:	2200      	movs	r2, #0
 800a388:	f7f6 f936 	bl	80005f8 <__aeabi_dmul>
 800a38c:	4680      	mov	r8, r0
 800a38e:	4689      	mov	r9, r1
 800a390:	e7c6      	b.n	800a320 <_dtoa_r+0x510>
 800a392:	4650      	mov	r0, sl
 800a394:	4659      	mov	r1, fp
 800a396:	f7f6 f92f 	bl	80005f8 <__aeabi_dmul>
 800a39a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a39c:	9d01      	ldr	r5, [sp, #4]
 800a39e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	468b      	mov	fp, r1
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	f7f6 fbd6 	bl	8000b58 <__aeabi_d2iz>
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	f7f6 f8b9 	bl	8000524 <__aeabi_i2d>
 800a3b2:	3630      	adds	r6, #48	; 0x30
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	f7f5 ff64 	bl	8000288 <__aeabi_dsub>
 800a3c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a3c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3c6:	429d      	cmp	r5, r3
 800a3c8:	4680      	mov	r8, r0
 800a3ca:	4689      	mov	r9, r1
 800a3cc:	f04f 0200 	mov.w	r2, #0
 800a3d0:	d124      	bne.n	800a41c <_dtoa_r+0x60c>
 800a3d2:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <_dtoa_r+0x630>)
 800a3d4:	4650      	mov	r0, sl
 800a3d6:	4659      	mov	r1, fp
 800a3d8:	f7f5 ff58 	bl	800028c <__adddf3>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7f6 fb98 	bl	8000b18 <__aeabi_dcmpgt>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d173      	bne.n	800a4d4 <_dtoa_r+0x6c4>
 800a3ec:	4652      	mov	r2, sl
 800a3ee:	465b      	mov	r3, fp
 800a3f0:	4913      	ldr	r1, [pc, #76]	; (800a440 <_dtoa_r+0x630>)
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	f7f5 ff48 	bl	8000288 <__aeabi_dsub>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	4649      	mov	r1, r9
 800a400:	f7f6 fb6c 	bl	8000adc <__aeabi_dcmplt>
 800a404:	2800      	cmp	r0, #0
 800a406:	f43f af35 	beq.w	800a274 <_dtoa_r+0x464>
 800a40a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a40c:	1e6b      	subs	r3, r5, #1
 800a40e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a410:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a414:	2b30      	cmp	r3, #48	; 0x30
 800a416:	d0f8      	beq.n	800a40a <_dtoa_r+0x5fa>
 800a418:	9700      	str	r7, [sp, #0]
 800a41a:	e049      	b.n	800a4b0 <_dtoa_r+0x6a0>
 800a41c:	4b05      	ldr	r3, [pc, #20]	; (800a434 <_dtoa_r+0x624>)
 800a41e:	f7f6 f8eb 	bl	80005f8 <__aeabi_dmul>
 800a422:	4680      	mov	r8, r0
 800a424:	4689      	mov	r9, r1
 800a426:	e7bd      	b.n	800a3a4 <_dtoa_r+0x594>
 800a428:	0800c288 	.word	0x0800c288
 800a42c:	0800c260 	.word	0x0800c260
 800a430:	3ff00000 	.word	0x3ff00000
 800a434:	40240000 	.word	0x40240000
 800a438:	401c0000 	.word	0x401c0000
 800a43c:	40140000 	.word	0x40140000
 800a440:	3fe00000 	.word	0x3fe00000
 800a444:	9d01      	ldr	r5, [sp, #4]
 800a446:	4656      	mov	r6, sl
 800a448:	465f      	mov	r7, fp
 800a44a:	4642      	mov	r2, r8
 800a44c:	464b      	mov	r3, r9
 800a44e:	4630      	mov	r0, r6
 800a450:	4639      	mov	r1, r7
 800a452:	f7f6 f9fb 	bl	800084c <__aeabi_ddiv>
 800a456:	f7f6 fb7f 	bl	8000b58 <__aeabi_d2iz>
 800a45a:	4682      	mov	sl, r0
 800a45c:	f7f6 f862 	bl	8000524 <__aeabi_i2d>
 800a460:	4642      	mov	r2, r8
 800a462:	464b      	mov	r3, r9
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a474:	f7f5 ff08 	bl	8000288 <__aeabi_dsub>
 800a478:	f805 6b01 	strb.w	r6, [r5], #1
 800a47c:	9e01      	ldr	r6, [sp, #4]
 800a47e:	9f03      	ldr	r7, [sp, #12]
 800a480:	1bae      	subs	r6, r5, r6
 800a482:	42b7      	cmp	r7, r6
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	d135      	bne.n	800a4f6 <_dtoa_r+0x6e6>
 800a48a:	f7f5 feff 	bl	800028c <__adddf3>
 800a48e:	4642      	mov	r2, r8
 800a490:	464b      	mov	r3, r9
 800a492:	4606      	mov	r6, r0
 800a494:	460f      	mov	r7, r1
 800a496:	f7f6 fb3f 	bl	8000b18 <__aeabi_dcmpgt>
 800a49a:	b9d0      	cbnz	r0, 800a4d2 <_dtoa_r+0x6c2>
 800a49c:	4642      	mov	r2, r8
 800a49e:	464b      	mov	r3, r9
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f6 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4a8:	b110      	cbz	r0, 800a4b0 <_dtoa_r+0x6a0>
 800a4aa:	f01a 0f01 	tst.w	sl, #1
 800a4ae:	d110      	bne.n	800a4d2 <_dtoa_r+0x6c2>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	ee18 1a10 	vmov	r1, s16
 800a4b6:	f000 fae9 	bl	800aa8c <_Bfree>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	9800      	ldr	r0, [sp, #0]
 800a4be:	702b      	strb	r3, [r5, #0]
 800a4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	6018      	str	r0, [r3, #0]
 800a4c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f43f acf1 	beq.w	8009eb0 <_dtoa_r+0xa0>
 800a4ce:	601d      	str	r5, [r3, #0]
 800a4d0:	e4ee      	b.n	8009eb0 <_dtoa_r+0xa0>
 800a4d2:	9f00      	ldr	r7, [sp, #0]
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	461d      	mov	r5, r3
 800a4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4dc:	2a39      	cmp	r2, #57	; 0x39
 800a4de:	d106      	bne.n	800a4ee <_dtoa_r+0x6de>
 800a4e0:	9a01      	ldr	r2, [sp, #4]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d1f7      	bne.n	800a4d6 <_dtoa_r+0x6c6>
 800a4e6:	9901      	ldr	r1, [sp, #4]
 800a4e8:	2230      	movs	r2, #48	; 0x30
 800a4ea:	3701      	adds	r7, #1
 800a4ec:	700a      	strb	r2, [r1, #0]
 800a4ee:	781a      	ldrb	r2, [r3, #0]
 800a4f0:	3201      	adds	r2, #1
 800a4f2:	701a      	strb	r2, [r3, #0]
 800a4f4:	e790      	b.n	800a418 <_dtoa_r+0x608>
 800a4f6:	4ba6      	ldr	r3, [pc, #664]	; (800a790 <_dtoa_r+0x980>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f7f6 f87d 	bl	80005f8 <__aeabi_dmul>
 800a4fe:	2200      	movs	r2, #0
 800a500:	2300      	movs	r3, #0
 800a502:	4606      	mov	r6, r0
 800a504:	460f      	mov	r7, r1
 800a506:	f7f6 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d09d      	beq.n	800a44a <_dtoa_r+0x63a>
 800a50e:	e7cf      	b.n	800a4b0 <_dtoa_r+0x6a0>
 800a510:	9a08      	ldr	r2, [sp, #32]
 800a512:	2a00      	cmp	r2, #0
 800a514:	f000 80d7 	beq.w	800a6c6 <_dtoa_r+0x8b6>
 800a518:	9a06      	ldr	r2, [sp, #24]
 800a51a:	2a01      	cmp	r2, #1
 800a51c:	f300 80ba 	bgt.w	800a694 <_dtoa_r+0x884>
 800a520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a522:	2a00      	cmp	r2, #0
 800a524:	f000 80b2 	beq.w	800a68c <_dtoa_r+0x87c>
 800a528:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a52c:	9e07      	ldr	r6, [sp, #28]
 800a52e:	9d04      	ldr	r5, [sp, #16]
 800a530:	9a04      	ldr	r2, [sp, #16]
 800a532:	441a      	add	r2, r3
 800a534:	9204      	str	r2, [sp, #16]
 800a536:	9a05      	ldr	r2, [sp, #20]
 800a538:	2101      	movs	r1, #1
 800a53a:	441a      	add	r2, r3
 800a53c:	4620      	mov	r0, r4
 800a53e:	9205      	str	r2, [sp, #20]
 800a540:	f000 fb5c 	bl	800abfc <__i2b>
 800a544:	4607      	mov	r7, r0
 800a546:	2d00      	cmp	r5, #0
 800a548:	dd0c      	ble.n	800a564 <_dtoa_r+0x754>
 800a54a:	9b05      	ldr	r3, [sp, #20]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dd09      	ble.n	800a564 <_dtoa_r+0x754>
 800a550:	42ab      	cmp	r3, r5
 800a552:	9a04      	ldr	r2, [sp, #16]
 800a554:	bfa8      	it	ge
 800a556:	462b      	movge	r3, r5
 800a558:	1ad2      	subs	r2, r2, r3
 800a55a:	9204      	str	r2, [sp, #16]
 800a55c:	9a05      	ldr	r2, [sp, #20]
 800a55e:	1aed      	subs	r5, r5, r3
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	9305      	str	r3, [sp, #20]
 800a564:	9b07      	ldr	r3, [sp, #28]
 800a566:	b31b      	cbz	r3, 800a5b0 <_dtoa_r+0x7a0>
 800a568:	9b08      	ldr	r3, [sp, #32]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 80af 	beq.w	800a6ce <_dtoa_r+0x8be>
 800a570:	2e00      	cmp	r6, #0
 800a572:	dd13      	ble.n	800a59c <_dtoa_r+0x78c>
 800a574:	4639      	mov	r1, r7
 800a576:	4632      	mov	r2, r6
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 fbff 	bl	800ad7c <__pow5mult>
 800a57e:	ee18 2a10 	vmov	r2, s16
 800a582:	4601      	mov	r1, r0
 800a584:	4607      	mov	r7, r0
 800a586:	4620      	mov	r0, r4
 800a588:	f000 fb4e 	bl	800ac28 <__multiply>
 800a58c:	ee18 1a10 	vmov	r1, s16
 800a590:	4680      	mov	r8, r0
 800a592:	4620      	mov	r0, r4
 800a594:	f000 fa7a 	bl	800aa8c <_Bfree>
 800a598:	ee08 8a10 	vmov	s16, r8
 800a59c:	9b07      	ldr	r3, [sp, #28]
 800a59e:	1b9a      	subs	r2, r3, r6
 800a5a0:	d006      	beq.n	800a5b0 <_dtoa_r+0x7a0>
 800a5a2:	ee18 1a10 	vmov	r1, s16
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f000 fbe8 	bl	800ad7c <__pow5mult>
 800a5ac:	ee08 0a10 	vmov	s16, r0
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 fb22 	bl	800abfc <__i2b>
 800a5b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	4606      	mov	r6, r0
 800a5be:	f340 8088 	ble.w	800a6d2 <_dtoa_r+0x8c2>
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	4601      	mov	r1, r0
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 fbd8 	bl	800ad7c <__pow5mult>
 800a5cc:	9b06      	ldr	r3, [sp, #24]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	f340 8081 	ble.w	800a6d8 <_dtoa_r+0x8c8>
 800a5d6:	f04f 0800 	mov.w	r8, #0
 800a5da:	6933      	ldr	r3, [r6, #16]
 800a5dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a5e0:	6918      	ldr	r0, [r3, #16]
 800a5e2:	f000 fabb 	bl	800ab5c <__hi0bits>
 800a5e6:	f1c0 0020 	rsb	r0, r0, #32
 800a5ea:	9b05      	ldr	r3, [sp, #20]
 800a5ec:	4418      	add	r0, r3
 800a5ee:	f010 001f 	ands.w	r0, r0, #31
 800a5f2:	f000 8092 	beq.w	800a71a <_dtoa_r+0x90a>
 800a5f6:	f1c0 0320 	rsb	r3, r0, #32
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	f340 808a 	ble.w	800a714 <_dtoa_r+0x904>
 800a600:	f1c0 001c 	rsb	r0, r0, #28
 800a604:	9b04      	ldr	r3, [sp, #16]
 800a606:	4403      	add	r3, r0
 800a608:	9304      	str	r3, [sp, #16]
 800a60a:	9b05      	ldr	r3, [sp, #20]
 800a60c:	4403      	add	r3, r0
 800a60e:	4405      	add	r5, r0
 800a610:	9305      	str	r3, [sp, #20]
 800a612:	9b04      	ldr	r3, [sp, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	dd07      	ble.n	800a628 <_dtoa_r+0x818>
 800a618:	ee18 1a10 	vmov	r1, s16
 800a61c:	461a      	mov	r2, r3
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 fc06 	bl	800ae30 <__lshift>
 800a624:	ee08 0a10 	vmov	s16, r0
 800a628:	9b05      	ldr	r3, [sp, #20]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	dd05      	ble.n	800a63a <_dtoa_r+0x82a>
 800a62e:	4631      	mov	r1, r6
 800a630:	461a      	mov	r2, r3
 800a632:	4620      	mov	r0, r4
 800a634:	f000 fbfc 	bl	800ae30 <__lshift>
 800a638:	4606      	mov	r6, r0
 800a63a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d06e      	beq.n	800a71e <_dtoa_r+0x90e>
 800a640:	ee18 0a10 	vmov	r0, s16
 800a644:	4631      	mov	r1, r6
 800a646:	f000 fc63 	bl	800af10 <__mcmp>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	da67      	bge.n	800a71e <_dtoa_r+0x90e>
 800a64e:	9b00      	ldr	r3, [sp, #0]
 800a650:	3b01      	subs	r3, #1
 800a652:	ee18 1a10 	vmov	r1, s16
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	220a      	movs	r2, #10
 800a65a:	2300      	movs	r3, #0
 800a65c:	4620      	mov	r0, r4
 800a65e:	f000 fa37 	bl	800aad0 <__multadd>
 800a662:	9b08      	ldr	r3, [sp, #32]
 800a664:	ee08 0a10 	vmov	s16, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 81b1 	beq.w	800a9d0 <_dtoa_r+0xbc0>
 800a66e:	2300      	movs	r3, #0
 800a670:	4639      	mov	r1, r7
 800a672:	220a      	movs	r2, #10
 800a674:	4620      	mov	r0, r4
 800a676:	f000 fa2b 	bl	800aad0 <__multadd>
 800a67a:	9b02      	ldr	r3, [sp, #8]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	4607      	mov	r7, r0
 800a680:	f300 808e 	bgt.w	800a7a0 <_dtoa_r+0x990>
 800a684:	9b06      	ldr	r3, [sp, #24]
 800a686:	2b02      	cmp	r3, #2
 800a688:	dc51      	bgt.n	800a72e <_dtoa_r+0x91e>
 800a68a:	e089      	b.n	800a7a0 <_dtoa_r+0x990>
 800a68c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a68e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a692:	e74b      	b.n	800a52c <_dtoa_r+0x71c>
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	1e5e      	subs	r6, r3, #1
 800a698:	9b07      	ldr	r3, [sp, #28]
 800a69a:	42b3      	cmp	r3, r6
 800a69c:	bfbf      	itttt	lt
 800a69e:	9b07      	ldrlt	r3, [sp, #28]
 800a6a0:	9607      	strlt	r6, [sp, #28]
 800a6a2:	1af2      	sublt	r2, r6, r3
 800a6a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a6a6:	bfb6      	itet	lt
 800a6a8:	189b      	addlt	r3, r3, r2
 800a6aa:	1b9e      	subge	r6, r3, r6
 800a6ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	bfb8      	it	lt
 800a6b2:	2600      	movlt	r6, #0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	bfb7      	itett	lt
 800a6b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a6bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a6c0:	1a9d      	sublt	r5, r3, r2
 800a6c2:	2300      	movlt	r3, #0
 800a6c4:	e734      	b.n	800a530 <_dtoa_r+0x720>
 800a6c6:	9e07      	ldr	r6, [sp, #28]
 800a6c8:	9d04      	ldr	r5, [sp, #16]
 800a6ca:	9f08      	ldr	r7, [sp, #32]
 800a6cc:	e73b      	b.n	800a546 <_dtoa_r+0x736>
 800a6ce:	9a07      	ldr	r2, [sp, #28]
 800a6d0:	e767      	b.n	800a5a2 <_dtoa_r+0x792>
 800a6d2:	9b06      	ldr	r3, [sp, #24]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	dc18      	bgt.n	800a70a <_dtoa_r+0x8fa>
 800a6d8:	f1ba 0f00 	cmp.w	sl, #0
 800a6dc:	d115      	bne.n	800a70a <_dtoa_r+0x8fa>
 800a6de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6e2:	b993      	cbnz	r3, 800a70a <_dtoa_r+0x8fa>
 800a6e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a6e8:	0d1b      	lsrs	r3, r3, #20
 800a6ea:	051b      	lsls	r3, r3, #20
 800a6ec:	b183      	cbz	r3, 800a710 <_dtoa_r+0x900>
 800a6ee:	9b04      	ldr	r3, [sp, #16]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	9304      	str	r3, [sp, #16]
 800a6f4:	9b05      	ldr	r3, [sp, #20]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	9305      	str	r3, [sp, #20]
 800a6fa:	f04f 0801 	mov.w	r8, #1
 800a6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a700:	2b00      	cmp	r3, #0
 800a702:	f47f af6a 	bne.w	800a5da <_dtoa_r+0x7ca>
 800a706:	2001      	movs	r0, #1
 800a708:	e76f      	b.n	800a5ea <_dtoa_r+0x7da>
 800a70a:	f04f 0800 	mov.w	r8, #0
 800a70e:	e7f6      	b.n	800a6fe <_dtoa_r+0x8ee>
 800a710:	4698      	mov	r8, r3
 800a712:	e7f4      	b.n	800a6fe <_dtoa_r+0x8ee>
 800a714:	f43f af7d 	beq.w	800a612 <_dtoa_r+0x802>
 800a718:	4618      	mov	r0, r3
 800a71a:	301c      	adds	r0, #28
 800a71c:	e772      	b.n	800a604 <_dtoa_r+0x7f4>
 800a71e:	9b03      	ldr	r3, [sp, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	dc37      	bgt.n	800a794 <_dtoa_r+0x984>
 800a724:	9b06      	ldr	r3, [sp, #24]
 800a726:	2b02      	cmp	r3, #2
 800a728:	dd34      	ble.n	800a794 <_dtoa_r+0x984>
 800a72a:	9b03      	ldr	r3, [sp, #12]
 800a72c:	9302      	str	r3, [sp, #8]
 800a72e:	9b02      	ldr	r3, [sp, #8]
 800a730:	b96b      	cbnz	r3, 800a74e <_dtoa_r+0x93e>
 800a732:	4631      	mov	r1, r6
 800a734:	2205      	movs	r2, #5
 800a736:	4620      	mov	r0, r4
 800a738:	f000 f9ca 	bl	800aad0 <__multadd>
 800a73c:	4601      	mov	r1, r0
 800a73e:	4606      	mov	r6, r0
 800a740:	ee18 0a10 	vmov	r0, s16
 800a744:	f000 fbe4 	bl	800af10 <__mcmp>
 800a748:	2800      	cmp	r0, #0
 800a74a:	f73f adbb 	bgt.w	800a2c4 <_dtoa_r+0x4b4>
 800a74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a750:	9d01      	ldr	r5, [sp, #4]
 800a752:	43db      	mvns	r3, r3
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	f04f 0800 	mov.w	r8, #0
 800a75a:	4631      	mov	r1, r6
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 f995 	bl	800aa8c <_Bfree>
 800a762:	2f00      	cmp	r7, #0
 800a764:	f43f aea4 	beq.w	800a4b0 <_dtoa_r+0x6a0>
 800a768:	f1b8 0f00 	cmp.w	r8, #0
 800a76c:	d005      	beq.n	800a77a <_dtoa_r+0x96a>
 800a76e:	45b8      	cmp	r8, r7
 800a770:	d003      	beq.n	800a77a <_dtoa_r+0x96a>
 800a772:	4641      	mov	r1, r8
 800a774:	4620      	mov	r0, r4
 800a776:	f000 f989 	bl	800aa8c <_Bfree>
 800a77a:	4639      	mov	r1, r7
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 f985 	bl	800aa8c <_Bfree>
 800a782:	e695      	b.n	800a4b0 <_dtoa_r+0x6a0>
 800a784:	2600      	movs	r6, #0
 800a786:	4637      	mov	r7, r6
 800a788:	e7e1      	b.n	800a74e <_dtoa_r+0x93e>
 800a78a:	9700      	str	r7, [sp, #0]
 800a78c:	4637      	mov	r7, r6
 800a78e:	e599      	b.n	800a2c4 <_dtoa_r+0x4b4>
 800a790:	40240000 	.word	0x40240000
 800a794:	9b08      	ldr	r3, [sp, #32]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 80ca 	beq.w	800a930 <_dtoa_r+0xb20>
 800a79c:	9b03      	ldr	r3, [sp, #12]
 800a79e:	9302      	str	r3, [sp, #8]
 800a7a0:	2d00      	cmp	r5, #0
 800a7a2:	dd05      	ble.n	800a7b0 <_dtoa_r+0x9a0>
 800a7a4:	4639      	mov	r1, r7
 800a7a6:	462a      	mov	r2, r5
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 fb41 	bl	800ae30 <__lshift>
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	f1b8 0f00 	cmp.w	r8, #0
 800a7b4:	d05b      	beq.n	800a86e <_dtoa_r+0xa5e>
 800a7b6:	6879      	ldr	r1, [r7, #4]
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 f927 	bl	800aa0c <_Balloc>
 800a7be:	4605      	mov	r5, r0
 800a7c0:	b928      	cbnz	r0, 800a7ce <_dtoa_r+0x9be>
 800a7c2:	4b87      	ldr	r3, [pc, #540]	; (800a9e0 <_dtoa_r+0xbd0>)
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a7ca:	f7ff bb3b 	b.w	8009e44 <_dtoa_r+0x34>
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	3202      	adds	r2, #2
 800a7d2:	0092      	lsls	r2, r2, #2
 800a7d4:	f107 010c 	add.w	r1, r7, #12
 800a7d8:	300c      	adds	r0, #12
 800a7da:	f7fe fcf3 	bl	80091c4 <memcpy>
 800a7de:	2201      	movs	r2, #1
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fb24 	bl	800ae30 <__lshift>
 800a7e8:	9b01      	ldr	r3, [sp, #4]
 800a7ea:	f103 0901 	add.w	r9, r3, #1
 800a7ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	9305      	str	r3, [sp, #20]
 800a7f6:	f00a 0301 	and.w	r3, sl, #1
 800a7fa:	46b8      	mov	r8, r7
 800a7fc:	9304      	str	r3, [sp, #16]
 800a7fe:	4607      	mov	r7, r0
 800a800:	4631      	mov	r1, r6
 800a802:	ee18 0a10 	vmov	r0, s16
 800a806:	f7ff fa75 	bl	8009cf4 <quorem>
 800a80a:	4641      	mov	r1, r8
 800a80c:	9002      	str	r0, [sp, #8]
 800a80e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a812:	ee18 0a10 	vmov	r0, s16
 800a816:	f000 fb7b 	bl	800af10 <__mcmp>
 800a81a:	463a      	mov	r2, r7
 800a81c:	9003      	str	r0, [sp, #12]
 800a81e:	4631      	mov	r1, r6
 800a820:	4620      	mov	r0, r4
 800a822:	f000 fb91 	bl	800af48 <__mdiff>
 800a826:	68c2      	ldr	r2, [r0, #12]
 800a828:	f109 3bff 	add.w	fp, r9, #4294967295
 800a82c:	4605      	mov	r5, r0
 800a82e:	bb02      	cbnz	r2, 800a872 <_dtoa_r+0xa62>
 800a830:	4601      	mov	r1, r0
 800a832:	ee18 0a10 	vmov	r0, s16
 800a836:	f000 fb6b 	bl	800af10 <__mcmp>
 800a83a:	4602      	mov	r2, r0
 800a83c:	4629      	mov	r1, r5
 800a83e:	4620      	mov	r0, r4
 800a840:	9207      	str	r2, [sp, #28]
 800a842:	f000 f923 	bl	800aa8c <_Bfree>
 800a846:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a84a:	ea43 0102 	orr.w	r1, r3, r2
 800a84e:	9b04      	ldr	r3, [sp, #16]
 800a850:	430b      	orrs	r3, r1
 800a852:	464d      	mov	r5, r9
 800a854:	d10f      	bne.n	800a876 <_dtoa_r+0xa66>
 800a856:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a85a:	d02a      	beq.n	800a8b2 <_dtoa_r+0xaa2>
 800a85c:	9b03      	ldr	r3, [sp, #12]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dd02      	ble.n	800a868 <_dtoa_r+0xa58>
 800a862:	9b02      	ldr	r3, [sp, #8]
 800a864:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a868:	f88b a000 	strb.w	sl, [fp]
 800a86c:	e775      	b.n	800a75a <_dtoa_r+0x94a>
 800a86e:	4638      	mov	r0, r7
 800a870:	e7ba      	b.n	800a7e8 <_dtoa_r+0x9d8>
 800a872:	2201      	movs	r2, #1
 800a874:	e7e2      	b.n	800a83c <_dtoa_r+0xa2c>
 800a876:	9b03      	ldr	r3, [sp, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	db04      	blt.n	800a886 <_dtoa_r+0xa76>
 800a87c:	9906      	ldr	r1, [sp, #24]
 800a87e:	430b      	orrs	r3, r1
 800a880:	9904      	ldr	r1, [sp, #16]
 800a882:	430b      	orrs	r3, r1
 800a884:	d122      	bne.n	800a8cc <_dtoa_r+0xabc>
 800a886:	2a00      	cmp	r2, #0
 800a888:	ddee      	ble.n	800a868 <_dtoa_r+0xa58>
 800a88a:	ee18 1a10 	vmov	r1, s16
 800a88e:	2201      	movs	r2, #1
 800a890:	4620      	mov	r0, r4
 800a892:	f000 facd 	bl	800ae30 <__lshift>
 800a896:	4631      	mov	r1, r6
 800a898:	ee08 0a10 	vmov	s16, r0
 800a89c:	f000 fb38 	bl	800af10 <__mcmp>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	dc03      	bgt.n	800a8ac <_dtoa_r+0xa9c>
 800a8a4:	d1e0      	bne.n	800a868 <_dtoa_r+0xa58>
 800a8a6:	f01a 0f01 	tst.w	sl, #1
 800a8aa:	d0dd      	beq.n	800a868 <_dtoa_r+0xa58>
 800a8ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a8b0:	d1d7      	bne.n	800a862 <_dtoa_r+0xa52>
 800a8b2:	2339      	movs	r3, #57	; 0x39
 800a8b4:	f88b 3000 	strb.w	r3, [fp]
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	461d      	mov	r5, r3
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a8c2:	2a39      	cmp	r2, #57	; 0x39
 800a8c4:	d071      	beq.n	800a9aa <_dtoa_r+0xb9a>
 800a8c6:	3201      	adds	r2, #1
 800a8c8:	701a      	strb	r2, [r3, #0]
 800a8ca:	e746      	b.n	800a75a <_dtoa_r+0x94a>
 800a8cc:	2a00      	cmp	r2, #0
 800a8ce:	dd07      	ble.n	800a8e0 <_dtoa_r+0xad0>
 800a8d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a8d4:	d0ed      	beq.n	800a8b2 <_dtoa_r+0xaa2>
 800a8d6:	f10a 0301 	add.w	r3, sl, #1
 800a8da:	f88b 3000 	strb.w	r3, [fp]
 800a8de:	e73c      	b.n	800a75a <_dtoa_r+0x94a>
 800a8e0:	9b05      	ldr	r3, [sp, #20]
 800a8e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a8e6:	4599      	cmp	r9, r3
 800a8e8:	d047      	beq.n	800a97a <_dtoa_r+0xb6a>
 800a8ea:	ee18 1a10 	vmov	r1, s16
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	220a      	movs	r2, #10
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 f8ec 	bl	800aad0 <__multadd>
 800a8f8:	45b8      	cmp	r8, r7
 800a8fa:	ee08 0a10 	vmov	s16, r0
 800a8fe:	f04f 0300 	mov.w	r3, #0
 800a902:	f04f 020a 	mov.w	r2, #10
 800a906:	4641      	mov	r1, r8
 800a908:	4620      	mov	r0, r4
 800a90a:	d106      	bne.n	800a91a <_dtoa_r+0xb0a>
 800a90c:	f000 f8e0 	bl	800aad0 <__multadd>
 800a910:	4680      	mov	r8, r0
 800a912:	4607      	mov	r7, r0
 800a914:	f109 0901 	add.w	r9, r9, #1
 800a918:	e772      	b.n	800a800 <_dtoa_r+0x9f0>
 800a91a:	f000 f8d9 	bl	800aad0 <__multadd>
 800a91e:	4639      	mov	r1, r7
 800a920:	4680      	mov	r8, r0
 800a922:	2300      	movs	r3, #0
 800a924:	220a      	movs	r2, #10
 800a926:	4620      	mov	r0, r4
 800a928:	f000 f8d2 	bl	800aad0 <__multadd>
 800a92c:	4607      	mov	r7, r0
 800a92e:	e7f1      	b.n	800a914 <_dtoa_r+0xb04>
 800a930:	9b03      	ldr	r3, [sp, #12]
 800a932:	9302      	str	r3, [sp, #8]
 800a934:	9d01      	ldr	r5, [sp, #4]
 800a936:	ee18 0a10 	vmov	r0, s16
 800a93a:	4631      	mov	r1, r6
 800a93c:	f7ff f9da 	bl	8009cf4 <quorem>
 800a940:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a944:	9b01      	ldr	r3, [sp, #4]
 800a946:	f805 ab01 	strb.w	sl, [r5], #1
 800a94a:	1aea      	subs	r2, r5, r3
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	4293      	cmp	r3, r2
 800a950:	dd09      	ble.n	800a966 <_dtoa_r+0xb56>
 800a952:	ee18 1a10 	vmov	r1, s16
 800a956:	2300      	movs	r3, #0
 800a958:	220a      	movs	r2, #10
 800a95a:	4620      	mov	r0, r4
 800a95c:	f000 f8b8 	bl	800aad0 <__multadd>
 800a960:	ee08 0a10 	vmov	s16, r0
 800a964:	e7e7      	b.n	800a936 <_dtoa_r+0xb26>
 800a966:	9b02      	ldr	r3, [sp, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	bfc8      	it	gt
 800a96c:	461d      	movgt	r5, r3
 800a96e:	9b01      	ldr	r3, [sp, #4]
 800a970:	bfd8      	it	le
 800a972:	2501      	movle	r5, #1
 800a974:	441d      	add	r5, r3
 800a976:	f04f 0800 	mov.w	r8, #0
 800a97a:	ee18 1a10 	vmov	r1, s16
 800a97e:	2201      	movs	r2, #1
 800a980:	4620      	mov	r0, r4
 800a982:	f000 fa55 	bl	800ae30 <__lshift>
 800a986:	4631      	mov	r1, r6
 800a988:	ee08 0a10 	vmov	s16, r0
 800a98c:	f000 fac0 	bl	800af10 <__mcmp>
 800a990:	2800      	cmp	r0, #0
 800a992:	dc91      	bgt.n	800a8b8 <_dtoa_r+0xaa8>
 800a994:	d102      	bne.n	800a99c <_dtoa_r+0xb8c>
 800a996:	f01a 0f01 	tst.w	sl, #1
 800a99a:	d18d      	bne.n	800a8b8 <_dtoa_r+0xaa8>
 800a99c:	462b      	mov	r3, r5
 800a99e:	461d      	mov	r5, r3
 800a9a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9a4:	2a30      	cmp	r2, #48	; 0x30
 800a9a6:	d0fa      	beq.n	800a99e <_dtoa_r+0xb8e>
 800a9a8:	e6d7      	b.n	800a75a <_dtoa_r+0x94a>
 800a9aa:	9a01      	ldr	r2, [sp, #4]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d184      	bne.n	800a8ba <_dtoa_r+0xaaa>
 800a9b0:	9b00      	ldr	r3, [sp, #0]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	2331      	movs	r3, #49	; 0x31
 800a9b8:	7013      	strb	r3, [r2, #0]
 800a9ba:	e6ce      	b.n	800a75a <_dtoa_r+0x94a>
 800a9bc:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <_dtoa_r+0xbd4>)
 800a9be:	f7ff ba95 	b.w	8009eec <_dtoa_r+0xdc>
 800a9c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f47f aa6e 	bne.w	8009ea6 <_dtoa_r+0x96>
 800a9ca:	4b07      	ldr	r3, [pc, #28]	; (800a9e8 <_dtoa_r+0xbd8>)
 800a9cc:	f7ff ba8e 	b.w	8009eec <_dtoa_r+0xdc>
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dcae      	bgt.n	800a934 <_dtoa_r+0xb24>
 800a9d6:	9b06      	ldr	r3, [sp, #24]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	f73f aea8 	bgt.w	800a72e <_dtoa_r+0x91e>
 800a9de:	e7a9      	b.n	800a934 <_dtoa_r+0xb24>
 800a9e0:	0800c1f3 	.word	0x0800c1f3
 800a9e4:	0800c150 	.word	0x0800c150
 800a9e8:	0800c174 	.word	0x0800c174

0800a9ec <_localeconv_r>:
 800a9ec:	4800      	ldr	r0, [pc, #0]	; (800a9f0 <_localeconv_r+0x4>)
 800a9ee:	4770      	bx	lr
 800a9f0:	20000160 	.word	0x20000160

0800a9f4 <__malloc_lock>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	; (800a9fc <__malloc_lock+0x8>)
 800a9f6:	f000 bd30 	b.w	800b45a <__retarget_lock_acquire_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	20000524 	.word	0x20000524

0800aa00 <__malloc_unlock>:
 800aa00:	4801      	ldr	r0, [pc, #4]	; (800aa08 <__malloc_unlock+0x8>)
 800aa02:	f000 bd2b 	b.w	800b45c <__retarget_lock_release_recursive>
 800aa06:	bf00      	nop
 800aa08:	20000524 	.word	0x20000524

0800aa0c <_Balloc>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa10:	4604      	mov	r4, r0
 800aa12:	460d      	mov	r5, r1
 800aa14:	b976      	cbnz	r6, 800aa34 <_Balloc+0x28>
 800aa16:	2010      	movs	r0, #16
 800aa18:	f7fe fbcc 	bl	80091b4 <malloc>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	6260      	str	r0, [r4, #36]	; 0x24
 800aa20:	b920      	cbnz	r0, 800aa2c <_Balloc+0x20>
 800aa22:	4b18      	ldr	r3, [pc, #96]	; (800aa84 <_Balloc+0x78>)
 800aa24:	4818      	ldr	r0, [pc, #96]	; (800aa88 <_Balloc+0x7c>)
 800aa26:	2166      	movs	r1, #102	; 0x66
 800aa28:	f000 fce6 	bl	800b3f8 <__assert_func>
 800aa2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa30:	6006      	str	r6, [r0, #0]
 800aa32:	60c6      	str	r6, [r0, #12]
 800aa34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa36:	68f3      	ldr	r3, [r6, #12]
 800aa38:	b183      	cbz	r3, 800aa5c <_Balloc+0x50>
 800aa3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa42:	b9b8      	cbnz	r0, 800aa74 <_Balloc+0x68>
 800aa44:	2101      	movs	r1, #1
 800aa46:	fa01 f605 	lsl.w	r6, r1, r5
 800aa4a:	1d72      	adds	r2, r6, #5
 800aa4c:	0092      	lsls	r2, r2, #2
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 fb60 	bl	800b114 <_calloc_r>
 800aa54:	b160      	cbz	r0, 800aa70 <_Balloc+0x64>
 800aa56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa5a:	e00e      	b.n	800aa7a <_Balloc+0x6e>
 800aa5c:	2221      	movs	r2, #33	; 0x21
 800aa5e:	2104      	movs	r1, #4
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 fb57 	bl	800b114 <_calloc_r>
 800aa66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa68:	60f0      	str	r0, [r6, #12]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e4      	bne.n	800aa3a <_Balloc+0x2e>
 800aa70:	2000      	movs	r0, #0
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	6802      	ldr	r2, [r0, #0]
 800aa76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa80:	e7f7      	b.n	800aa72 <_Balloc+0x66>
 800aa82:	bf00      	nop
 800aa84:	0800c181 	.word	0x0800c181
 800aa88:	0800c204 	.word	0x0800c204

0800aa8c <_Bfree>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa90:	4605      	mov	r5, r0
 800aa92:	460c      	mov	r4, r1
 800aa94:	b976      	cbnz	r6, 800aab4 <_Bfree+0x28>
 800aa96:	2010      	movs	r0, #16
 800aa98:	f7fe fb8c 	bl	80091b4 <malloc>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	6268      	str	r0, [r5, #36]	; 0x24
 800aaa0:	b920      	cbnz	r0, 800aaac <_Bfree+0x20>
 800aaa2:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <_Bfree+0x3c>)
 800aaa4:	4809      	ldr	r0, [pc, #36]	; (800aacc <_Bfree+0x40>)
 800aaa6:	218a      	movs	r1, #138	; 0x8a
 800aaa8:	f000 fca6 	bl	800b3f8 <__assert_func>
 800aaac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aab0:	6006      	str	r6, [r0, #0]
 800aab2:	60c6      	str	r6, [r0, #12]
 800aab4:	b13c      	cbz	r4, 800aac6 <_Bfree+0x3a>
 800aab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aab8:	6862      	ldr	r2, [r4, #4]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aac0:	6021      	str	r1, [r4, #0]
 800aac2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aac6:	bd70      	pop	{r4, r5, r6, pc}
 800aac8:	0800c181 	.word	0x0800c181
 800aacc:	0800c204 	.word	0x0800c204

0800aad0 <__multadd>:
 800aad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad4:	690d      	ldr	r5, [r1, #16]
 800aad6:	4607      	mov	r7, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	461e      	mov	r6, r3
 800aadc:	f101 0c14 	add.w	ip, r1, #20
 800aae0:	2000      	movs	r0, #0
 800aae2:	f8dc 3000 	ldr.w	r3, [ip]
 800aae6:	b299      	uxth	r1, r3
 800aae8:	fb02 6101 	mla	r1, r2, r1, r6
 800aaec:	0c1e      	lsrs	r6, r3, #16
 800aaee:	0c0b      	lsrs	r3, r1, #16
 800aaf0:	fb02 3306 	mla	r3, r2, r6, r3
 800aaf4:	b289      	uxth	r1, r1
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aafc:	4285      	cmp	r5, r0
 800aafe:	f84c 1b04 	str.w	r1, [ip], #4
 800ab02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab06:	dcec      	bgt.n	800aae2 <__multadd+0x12>
 800ab08:	b30e      	cbz	r6, 800ab4e <__multadd+0x7e>
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	42ab      	cmp	r3, r5
 800ab0e:	dc19      	bgt.n	800ab44 <__multadd+0x74>
 800ab10:	6861      	ldr	r1, [r4, #4]
 800ab12:	4638      	mov	r0, r7
 800ab14:	3101      	adds	r1, #1
 800ab16:	f7ff ff79 	bl	800aa0c <_Balloc>
 800ab1a:	4680      	mov	r8, r0
 800ab1c:	b928      	cbnz	r0, 800ab2a <__multadd+0x5a>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	4b0c      	ldr	r3, [pc, #48]	; (800ab54 <__multadd+0x84>)
 800ab22:	480d      	ldr	r0, [pc, #52]	; (800ab58 <__multadd+0x88>)
 800ab24:	21b5      	movs	r1, #181	; 0xb5
 800ab26:	f000 fc67 	bl	800b3f8 <__assert_func>
 800ab2a:	6922      	ldr	r2, [r4, #16]
 800ab2c:	3202      	adds	r2, #2
 800ab2e:	f104 010c 	add.w	r1, r4, #12
 800ab32:	0092      	lsls	r2, r2, #2
 800ab34:	300c      	adds	r0, #12
 800ab36:	f7fe fb45 	bl	80091c4 <memcpy>
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	f7ff ffa5 	bl	800aa8c <_Bfree>
 800ab42:	4644      	mov	r4, r8
 800ab44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab48:	3501      	adds	r5, #1
 800ab4a:	615e      	str	r6, [r3, #20]
 800ab4c:	6125      	str	r5, [r4, #16]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab54:	0800c1f3 	.word	0x0800c1f3
 800ab58:	0800c204 	.word	0x0800c204

0800ab5c <__hi0bits>:
 800ab5c:	0c03      	lsrs	r3, r0, #16
 800ab5e:	041b      	lsls	r3, r3, #16
 800ab60:	b9d3      	cbnz	r3, 800ab98 <__hi0bits+0x3c>
 800ab62:	0400      	lsls	r0, r0, #16
 800ab64:	2310      	movs	r3, #16
 800ab66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab6a:	bf04      	itt	eq
 800ab6c:	0200      	lsleq	r0, r0, #8
 800ab6e:	3308      	addeq	r3, #8
 800ab70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab74:	bf04      	itt	eq
 800ab76:	0100      	lsleq	r0, r0, #4
 800ab78:	3304      	addeq	r3, #4
 800ab7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab7e:	bf04      	itt	eq
 800ab80:	0080      	lsleq	r0, r0, #2
 800ab82:	3302      	addeq	r3, #2
 800ab84:	2800      	cmp	r0, #0
 800ab86:	db05      	blt.n	800ab94 <__hi0bits+0x38>
 800ab88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab8c:	f103 0301 	add.w	r3, r3, #1
 800ab90:	bf08      	it	eq
 800ab92:	2320      	moveq	r3, #32
 800ab94:	4618      	mov	r0, r3
 800ab96:	4770      	bx	lr
 800ab98:	2300      	movs	r3, #0
 800ab9a:	e7e4      	b.n	800ab66 <__hi0bits+0xa>

0800ab9c <__lo0bits>:
 800ab9c:	6803      	ldr	r3, [r0, #0]
 800ab9e:	f013 0207 	ands.w	r2, r3, #7
 800aba2:	4601      	mov	r1, r0
 800aba4:	d00b      	beq.n	800abbe <__lo0bits+0x22>
 800aba6:	07da      	lsls	r2, r3, #31
 800aba8:	d423      	bmi.n	800abf2 <__lo0bits+0x56>
 800abaa:	0798      	lsls	r0, r3, #30
 800abac:	bf49      	itett	mi
 800abae:	085b      	lsrmi	r3, r3, #1
 800abb0:	089b      	lsrpl	r3, r3, #2
 800abb2:	2001      	movmi	r0, #1
 800abb4:	600b      	strmi	r3, [r1, #0]
 800abb6:	bf5c      	itt	pl
 800abb8:	600b      	strpl	r3, [r1, #0]
 800abba:	2002      	movpl	r0, #2
 800abbc:	4770      	bx	lr
 800abbe:	b298      	uxth	r0, r3
 800abc0:	b9a8      	cbnz	r0, 800abee <__lo0bits+0x52>
 800abc2:	0c1b      	lsrs	r3, r3, #16
 800abc4:	2010      	movs	r0, #16
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	b90a      	cbnz	r2, 800abce <__lo0bits+0x32>
 800abca:	3008      	adds	r0, #8
 800abcc:	0a1b      	lsrs	r3, r3, #8
 800abce:	071a      	lsls	r2, r3, #28
 800abd0:	bf04      	itt	eq
 800abd2:	091b      	lsreq	r3, r3, #4
 800abd4:	3004      	addeq	r0, #4
 800abd6:	079a      	lsls	r2, r3, #30
 800abd8:	bf04      	itt	eq
 800abda:	089b      	lsreq	r3, r3, #2
 800abdc:	3002      	addeq	r0, #2
 800abde:	07da      	lsls	r2, r3, #31
 800abe0:	d403      	bmi.n	800abea <__lo0bits+0x4e>
 800abe2:	085b      	lsrs	r3, r3, #1
 800abe4:	f100 0001 	add.w	r0, r0, #1
 800abe8:	d005      	beq.n	800abf6 <__lo0bits+0x5a>
 800abea:	600b      	str	r3, [r1, #0]
 800abec:	4770      	bx	lr
 800abee:	4610      	mov	r0, r2
 800abf0:	e7e9      	b.n	800abc6 <__lo0bits+0x2a>
 800abf2:	2000      	movs	r0, #0
 800abf4:	4770      	bx	lr
 800abf6:	2020      	movs	r0, #32
 800abf8:	4770      	bx	lr
	...

0800abfc <__i2b>:
 800abfc:	b510      	push	{r4, lr}
 800abfe:	460c      	mov	r4, r1
 800ac00:	2101      	movs	r1, #1
 800ac02:	f7ff ff03 	bl	800aa0c <_Balloc>
 800ac06:	4602      	mov	r2, r0
 800ac08:	b928      	cbnz	r0, 800ac16 <__i2b+0x1a>
 800ac0a:	4b05      	ldr	r3, [pc, #20]	; (800ac20 <__i2b+0x24>)
 800ac0c:	4805      	ldr	r0, [pc, #20]	; (800ac24 <__i2b+0x28>)
 800ac0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac12:	f000 fbf1 	bl	800b3f8 <__assert_func>
 800ac16:	2301      	movs	r3, #1
 800ac18:	6144      	str	r4, [r0, #20]
 800ac1a:	6103      	str	r3, [r0, #16]
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	bf00      	nop
 800ac20:	0800c1f3 	.word	0x0800c1f3
 800ac24:	0800c204 	.word	0x0800c204

0800ac28 <__multiply>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	4691      	mov	r9, r2
 800ac2e:	690a      	ldr	r2, [r1, #16]
 800ac30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	bfb8      	it	lt
 800ac38:	460b      	movlt	r3, r1
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	bfbc      	itt	lt
 800ac3e:	464c      	movlt	r4, r9
 800ac40:	4699      	movlt	r9, r3
 800ac42:	6927      	ldr	r7, [r4, #16]
 800ac44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac48:	68a3      	ldr	r3, [r4, #8]
 800ac4a:	6861      	ldr	r1, [r4, #4]
 800ac4c:	eb07 060a 	add.w	r6, r7, sl
 800ac50:	42b3      	cmp	r3, r6
 800ac52:	b085      	sub	sp, #20
 800ac54:	bfb8      	it	lt
 800ac56:	3101      	addlt	r1, #1
 800ac58:	f7ff fed8 	bl	800aa0c <_Balloc>
 800ac5c:	b930      	cbnz	r0, 800ac6c <__multiply+0x44>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	4b44      	ldr	r3, [pc, #272]	; (800ad74 <__multiply+0x14c>)
 800ac62:	4845      	ldr	r0, [pc, #276]	; (800ad78 <__multiply+0x150>)
 800ac64:	f240 115d 	movw	r1, #349	; 0x15d
 800ac68:	f000 fbc6 	bl	800b3f8 <__assert_func>
 800ac6c:	f100 0514 	add.w	r5, r0, #20
 800ac70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac74:	462b      	mov	r3, r5
 800ac76:	2200      	movs	r2, #0
 800ac78:	4543      	cmp	r3, r8
 800ac7a:	d321      	bcc.n	800acc0 <__multiply+0x98>
 800ac7c:	f104 0314 	add.w	r3, r4, #20
 800ac80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac84:	f109 0314 	add.w	r3, r9, #20
 800ac88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac8c:	9202      	str	r2, [sp, #8]
 800ac8e:	1b3a      	subs	r2, r7, r4
 800ac90:	3a15      	subs	r2, #21
 800ac92:	f022 0203 	bic.w	r2, r2, #3
 800ac96:	3204      	adds	r2, #4
 800ac98:	f104 0115 	add.w	r1, r4, #21
 800ac9c:	428f      	cmp	r7, r1
 800ac9e:	bf38      	it	cc
 800aca0:	2204      	movcc	r2, #4
 800aca2:	9201      	str	r2, [sp, #4]
 800aca4:	9a02      	ldr	r2, [sp, #8]
 800aca6:	9303      	str	r3, [sp, #12]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d80c      	bhi.n	800acc6 <__multiply+0x9e>
 800acac:	2e00      	cmp	r6, #0
 800acae:	dd03      	ble.n	800acb8 <__multiply+0x90>
 800acb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d05a      	beq.n	800ad6e <__multiply+0x146>
 800acb8:	6106      	str	r6, [r0, #16]
 800acba:	b005      	add	sp, #20
 800acbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc0:	f843 2b04 	str.w	r2, [r3], #4
 800acc4:	e7d8      	b.n	800ac78 <__multiply+0x50>
 800acc6:	f8b3 a000 	ldrh.w	sl, [r3]
 800acca:	f1ba 0f00 	cmp.w	sl, #0
 800acce:	d024      	beq.n	800ad1a <__multiply+0xf2>
 800acd0:	f104 0e14 	add.w	lr, r4, #20
 800acd4:	46a9      	mov	r9, r5
 800acd6:	f04f 0c00 	mov.w	ip, #0
 800acda:	f85e 2b04 	ldr.w	r2, [lr], #4
 800acde:	f8d9 1000 	ldr.w	r1, [r9]
 800ace2:	fa1f fb82 	uxth.w	fp, r2
 800ace6:	b289      	uxth	r1, r1
 800ace8:	fb0a 110b 	mla	r1, sl, fp, r1
 800acec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800acf0:	f8d9 2000 	ldr.w	r2, [r9]
 800acf4:	4461      	add	r1, ip
 800acf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acfa:	fb0a c20b 	mla	r2, sl, fp, ip
 800acfe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad02:	b289      	uxth	r1, r1
 800ad04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad08:	4577      	cmp	r7, lr
 800ad0a:	f849 1b04 	str.w	r1, [r9], #4
 800ad0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad12:	d8e2      	bhi.n	800acda <__multiply+0xb2>
 800ad14:	9a01      	ldr	r2, [sp, #4]
 800ad16:	f845 c002 	str.w	ip, [r5, r2]
 800ad1a:	9a03      	ldr	r2, [sp, #12]
 800ad1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad20:	3304      	adds	r3, #4
 800ad22:	f1b9 0f00 	cmp.w	r9, #0
 800ad26:	d020      	beq.n	800ad6a <__multiply+0x142>
 800ad28:	6829      	ldr	r1, [r5, #0]
 800ad2a:	f104 0c14 	add.w	ip, r4, #20
 800ad2e:	46ae      	mov	lr, r5
 800ad30:	f04f 0a00 	mov.w	sl, #0
 800ad34:	f8bc b000 	ldrh.w	fp, [ip]
 800ad38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad3c:	fb09 220b 	mla	r2, r9, fp, r2
 800ad40:	4492      	add	sl, r2
 800ad42:	b289      	uxth	r1, r1
 800ad44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad48:	f84e 1b04 	str.w	r1, [lr], #4
 800ad4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad50:	f8be 1000 	ldrh.w	r1, [lr]
 800ad54:	0c12      	lsrs	r2, r2, #16
 800ad56:	fb09 1102 	mla	r1, r9, r2, r1
 800ad5a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad5e:	4567      	cmp	r7, ip
 800ad60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad64:	d8e6      	bhi.n	800ad34 <__multiply+0x10c>
 800ad66:	9a01      	ldr	r2, [sp, #4]
 800ad68:	50a9      	str	r1, [r5, r2]
 800ad6a:	3504      	adds	r5, #4
 800ad6c:	e79a      	b.n	800aca4 <__multiply+0x7c>
 800ad6e:	3e01      	subs	r6, #1
 800ad70:	e79c      	b.n	800acac <__multiply+0x84>
 800ad72:	bf00      	nop
 800ad74:	0800c1f3 	.word	0x0800c1f3
 800ad78:	0800c204 	.word	0x0800c204

0800ad7c <__pow5mult>:
 800ad7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad80:	4615      	mov	r5, r2
 800ad82:	f012 0203 	ands.w	r2, r2, #3
 800ad86:	4606      	mov	r6, r0
 800ad88:	460f      	mov	r7, r1
 800ad8a:	d007      	beq.n	800ad9c <__pow5mult+0x20>
 800ad8c:	4c25      	ldr	r4, [pc, #148]	; (800ae24 <__pow5mult+0xa8>)
 800ad8e:	3a01      	subs	r2, #1
 800ad90:	2300      	movs	r3, #0
 800ad92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad96:	f7ff fe9b 	bl	800aad0 <__multadd>
 800ad9a:	4607      	mov	r7, r0
 800ad9c:	10ad      	asrs	r5, r5, #2
 800ad9e:	d03d      	beq.n	800ae1c <__pow5mult+0xa0>
 800ada0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ada2:	b97c      	cbnz	r4, 800adc4 <__pow5mult+0x48>
 800ada4:	2010      	movs	r0, #16
 800ada6:	f7fe fa05 	bl	80091b4 <malloc>
 800adaa:	4602      	mov	r2, r0
 800adac:	6270      	str	r0, [r6, #36]	; 0x24
 800adae:	b928      	cbnz	r0, 800adbc <__pow5mult+0x40>
 800adb0:	4b1d      	ldr	r3, [pc, #116]	; (800ae28 <__pow5mult+0xac>)
 800adb2:	481e      	ldr	r0, [pc, #120]	; (800ae2c <__pow5mult+0xb0>)
 800adb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800adb8:	f000 fb1e 	bl	800b3f8 <__assert_func>
 800adbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adc0:	6004      	str	r4, [r0, #0]
 800adc2:	60c4      	str	r4, [r0, #12]
 800adc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800adc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adcc:	b94c      	cbnz	r4, 800ade2 <__pow5mult+0x66>
 800adce:	f240 2171 	movw	r1, #625	; 0x271
 800add2:	4630      	mov	r0, r6
 800add4:	f7ff ff12 	bl	800abfc <__i2b>
 800add8:	2300      	movs	r3, #0
 800adda:	f8c8 0008 	str.w	r0, [r8, #8]
 800adde:	4604      	mov	r4, r0
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	f04f 0900 	mov.w	r9, #0
 800ade6:	07eb      	lsls	r3, r5, #31
 800ade8:	d50a      	bpl.n	800ae00 <__pow5mult+0x84>
 800adea:	4639      	mov	r1, r7
 800adec:	4622      	mov	r2, r4
 800adee:	4630      	mov	r0, r6
 800adf0:	f7ff ff1a 	bl	800ac28 <__multiply>
 800adf4:	4639      	mov	r1, r7
 800adf6:	4680      	mov	r8, r0
 800adf8:	4630      	mov	r0, r6
 800adfa:	f7ff fe47 	bl	800aa8c <_Bfree>
 800adfe:	4647      	mov	r7, r8
 800ae00:	106d      	asrs	r5, r5, #1
 800ae02:	d00b      	beq.n	800ae1c <__pow5mult+0xa0>
 800ae04:	6820      	ldr	r0, [r4, #0]
 800ae06:	b938      	cbnz	r0, 800ae18 <__pow5mult+0x9c>
 800ae08:	4622      	mov	r2, r4
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f7ff ff0b 	bl	800ac28 <__multiply>
 800ae12:	6020      	str	r0, [r4, #0]
 800ae14:	f8c0 9000 	str.w	r9, [r0]
 800ae18:	4604      	mov	r4, r0
 800ae1a:	e7e4      	b.n	800ade6 <__pow5mult+0x6a>
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae22:	bf00      	nop
 800ae24:	0800c350 	.word	0x0800c350
 800ae28:	0800c181 	.word	0x0800c181
 800ae2c:	0800c204 	.word	0x0800c204

0800ae30 <__lshift>:
 800ae30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae34:	460c      	mov	r4, r1
 800ae36:	6849      	ldr	r1, [r1, #4]
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae3e:	68a3      	ldr	r3, [r4, #8]
 800ae40:	4607      	mov	r7, r0
 800ae42:	4691      	mov	r9, r2
 800ae44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae48:	f108 0601 	add.w	r6, r8, #1
 800ae4c:	42b3      	cmp	r3, r6
 800ae4e:	db0b      	blt.n	800ae68 <__lshift+0x38>
 800ae50:	4638      	mov	r0, r7
 800ae52:	f7ff fddb 	bl	800aa0c <_Balloc>
 800ae56:	4605      	mov	r5, r0
 800ae58:	b948      	cbnz	r0, 800ae6e <__lshift+0x3e>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	4b2a      	ldr	r3, [pc, #168]	; (800af08 <__lshift+0xd8>)
 800ae5e:	482b      	ldr	r0, [pc, #172]	; (800af0c <__lshift+0xdc>)
 800ae60:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae64:	f000 fac8 	bl	800b3f8 <__assert_func>
 800ae68:	3101      	adds	r1, #1
 800ae6a:	005b      	lsls	r3, r3, #1
 800ae6c:	e7ee      	b.n	800ae4c <__lshift+0x1c>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f100 0114 	add.w	r1, r0, #20
 800ae74:	f100 0210 	add.w	r2, r0, #16
 800ae78:	4618      	mov	r0, r3
 800ae7a:	4553      	cmp	r3, sl
 800ae7c:	db37      	blt.n	800aeee <__lshift+0xbe>
 800ae7e:	6920      	ldr	r0, [r4, #16]
 800ae80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae84:	f104 0314 	add.w	r3, r4, #20
 800ae88:	f019 091f 	ands.w	r9, r9, #31
 800ae8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae94:	d02f      	beq.n	800aef6 <__lshift+0xc6>
 800ae96:	f1c9 0e20 	rsb	lr, r9, #32
 800ae9a:	468a      	mov	sl, r1
 800ae9c:	f04f 0c00 	mov.w	ip, #0
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	fa02 f209 	lsl.w	r2, r2, r9
 800aea6:	ea42 020c 	orr.w	r2, r2, ip
 800aeaa:	f84a 2b04 	str.w	r2, [sl], #4
 800aeae:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb2:	4298      	cmp	r0, r3
 800aeb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aeb8:	d8f2      	bhi.n	800aea0 <__lshift+0x70>
 800aeba:	1b03      	subs	r3, r0, r4
 800aebc:	3b15      	subs	r3, #21
 800aebe:	f023 0303 	bic.w	r3, r3, #3
 800aec2:	3304      	adds	r3, #4
 800aec4:	f104 0215 	add.w	r2, r4, #21
 800aec8:	4290      	cmp	r0, r2
 800aeca:	bf38      	it	cc
 800aecc:	2304      	movcc	r3, #4
 800aece:	f841 c003 	str.w	ip, [r1, r3]
 800aed2:	f1bc 0f00 	cmp.w	ip, #0
 800aed6:	d001      	beq.n	800aedc <__lshift+0xac>
 800aed8:	f108 0602 	add.w	r6, r8, #2
 800aedc:	3e01      	subs	r6, #1
 800aede:	4638      	mov	r0, r7
 800aee0:	612e      	str	r6, [r5, #16]
 800aee2:	4621      	mov	r1, r4
 800aee4:	f7ff fdd2 	bl	800aa8c <_Bfree>
 800aee8:	4628      	mov	r0, r5
 800aeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeee:	f842 0f04 	str.w	r0, [r2, #4]!
 800aef2:	3301      	adds	r3, #1
 800aef4:	e7c1      	b.n	800ae7a <__lshift+0x4a>
 800aef6:	3904      	subs	r1, #4
 800aef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aefc:	f841 2f04 	str.w	r2, [r1, #4]!
 800af00:	4298      	cmp	r0, r3
 800af02:	d8f9      	bhi.n	800aef8 <__lshift+0xc8>
 800af04:	e7ea      	b.n	800aedc <__lshift+0xac>
 800af06:	bf00      	nop
 800af08:	0800c1f3 	.word	0x0800c1f3
 800af0c:	0800c204 	.word	0x0800c204

0800af10 <__mcmp>:
 800af10:	b530      	push	{r4, r5, lr}
 800af12:	6902      	ldr	r2, [r0, #16]
 800af14:	690c      	ldr	r4, [r1, #16]
 800af16:	1b12      	subs	r2, r2, r4
 800af18:	d10e      	bne.n	800af38 <__mcmp+0x28>
 800af1a:	f100 0314 	add.w	r3, r0, #20
 800af1e:	3114      	adds	r1, #20
 800af20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af30:	42a5      	cmp	r5, r4
 800af32:	d003      	beq.n	800af3c <__mcmp+0x2c>
 800af34:	d305      	bcc.n	800af42 <__mcmp+0x32>
 800af36:	2201      	movs	r2, #1
 800af38:	4610      	mov	r0, r2
 800af3a:	bd30      	pop	{r4, r5, pc}
 800af3c:	4283      	cmp	r3, r0
 800af3e:	d3f3      	bcc.n	800af28 <__mcmp+0x18>
 800af40:	e7fa      	b.n	800af38 <__mcmp+0x28>
 800af42:	f04f 32ff 	mov.w	r2, #4294967295
 800af46:	e7f7      	b.n	800af38 <__mcmp+0x28>

0800af48 <__mdiff>:
 800af48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	460c      	mov	r4, r1
 800af4e:	4606      	mov	r6, r0
 800af50:	4611      	mov	r1, r2
 800af52:	4620      	mov	r0, r4
 800af54:	4690      	mov	r8, r2
 800af56:	f7ff ffdb 	bl	800af10 <__mcmp>
 800af5a:	1e05      	subs	r5, r0, #0
 800af5c:	d110      	bne.n	800af80 <__mdiff+0x38>
 800af5e:	4629      	mov	r1, r5
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff fd53 	bl	800aa0c <_Balloc>
 800af66:	b930      	cbnz	r0, 800af76 <__mdiff+0x2e>
 800af68:	4b3a      	ldr	r3, [pc, #232]	; (800b054 <__mdiff+0x10c>)
 800af6a:	4602      	mov	r2, r0
 800af6c:	f240 2132 	movw	r1, #562	; 0x232
 800af70:	4839      	ldr	r0, [pc, #228]	; (800b058 <__mdiff+0x110>)
 800af72:	f000 fa41 	bl	800b3f8 <__assert_func>
 800af76:	2301      	movs	r3, #1
 800af78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af80:	bfa4      	itt	ge
 800af82:	4643      	movge	r3, r8
 800af84:	46a0      	movge	r8, r4
 800af86:	4630      	mov	r0, r6
 800af88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af8c:	bfa6      	itte	ge
 800af8e:	461c      	movge	r4, r3
 800af90:	2500      	movge	r5, #0
 800af92:	2501      	movlt	r5, #1
 800af94:	f7ff fd3a 	bl	800aa0c <_Balloc>
 800af98:	b920      	cbnz	r0, 800afa4 <__mdiff+0x5c>
 800af9a:	4b2e      	ldr	r3, [pc, #184]	; (800b054 <__mdiff+0x10c>)
 800af9c:	4602      	mov	r2, r0
 800af9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800afa2:	e7e5      	b.n	800af70 <__mdiff+0x28>
 800afa4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800afa8:	6926      	ldr	r6, [r4, #16]
 800afaa:	60c5      	str	r5, [r0, #12]
 800afac:	f104 0914 	add.w	r9, r4, #20
 800afb0:	f108 0514 	add.w	r5, r8, #20
 800afb4:	f100 0e14 	add.w	lr, r0, #20
 800afb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800afbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800afc0:	f108 0210 	add.w	r2, r8, #16
 800afc4:	46f2      	mov	sl, lr
 800afc6:	2100      	movs	r1, #0
 800afc8:	f859 3b04 	ldr.w	r3, [r9], #4
 800afcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800afd0:	fa1f f883 	uxth.w	r8, r3
 800afd4:	fa11 f18b 	uxtah	r1, r1, fp
 800afd8:	0c1b      	lsrs	r3, r3, #16
 800afda:	eba1 0808 	sub.w	r8, r1, r8
 800afde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800afe2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800afe6:	fa1f f888 	uxth.w	r8, r8
 800afea:	1419      	asrs	r1, r3, #16
 800afec:	454e      	cmp	r6, r9
 800afee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aff2:	f84a 3b04 	str.w	r3, [sl], #4
 800aff6:	d8e7      	bhi.n	800afc8 <__mdiff+0x80>
 800aff8:	1b33      	subs	r3, r6, r4
 800affa:	3b15      	subs	r3, #21
 800affc:	f023 0303 	bic.w	r3, r3, #3
 800b000:	3304      	adds	r3, #4
 800b002:	3415      	adds	r4, #21
 800b004:	42a6      	cmp	r6, r4
 800b006:	bf38      	it	cc
 800b008:	2304      	movcc	r3, #4
 800b00a:	441d      	add	r5, r3
 800b00c:	4473      	add	r3, lr
 800b00e:	469e      	mov	lr, r3
 800b010:	462e      	mov	r6, r5
 800b012:	4566      	cmp	r6, ip
 800b014:	d30e      	bcc.n	800b034 <__mdiff+0xec>
 800b016:	f10c 0203 	add.w	r2, ip, #3
 800b01a:	1b52      	subs	r2, r2, r5
 800b01c:	f022 0203 	bic.w	r2, r2, #3
 800b020:	3d03      	subs	r5, #3
 800b022:	45ac      	cmp	ip, r5
 800b024:	bf38      	it	cc
 800b026:	2200      	movcc	r2, #0
 800b028:	441a      	add	r2, r3
 800b02a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b02e:	b17b      	cbz	r3, 800b050 <__mdiff+0x108>
 800b030:	6107      	str	r7, [r0, #16]
 800b032:	e7a3      	b.n	800af7c <__mdiff+0x34>
 800b034:	f856 8b04 	ldr.w	r8, [r6], #4
 800b038:	fa11 f288 	uxtah	r2, r1, r8
 800b03c:	1414      	asrs	r4, r2, #16
 800b03e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b042:	b292      	uxth	r2, r2
 800b044:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b048:	f84e 2b04 	str.w	r2, [lr], #4
 800b04c:	1421      	asrs	r1, r4, #16
 800b04e:	e7e0      	b.n	800b012 <__mdiff+0xca>
 800b050:	3f01      	subs	r7, #1
 800b052:	e7ea      	b.n	800b02a <__mdiff+0xe2>
 800b054:	0800c1f3 	.word	0x0800c1f3
 800b058:	0800c204 	.word	0x0800c204

0800b05c <__d2b>:
 800b05c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b060:	4689      	mov	r9, r1
 800b062:	2101      	movs	r1, #1
 800b064:	ec57 6b10 	vmov	r6, r7, d0
 800b068:	4690      	mov	r8, r2
 800b06a:	f7ff fccf 	bl	800aa0c <_Balloc>
 800b06e:	4604      	mov	r4, r0
 800b070:	b930      	cbnz	r0, 800b080 <__d2b+0x24>
 800b072:	4602      	mov	r2, r0
 800b074:	4b25      	ldr	r3, [pc, #148]	; (800b10c <__d2b+0xb0>)
 800b076:	4826      	ldr	r0, [pc, #152]	; (800b110 <__d2b+0xb4>)
 800b078:	f240 310a 	movw	r1, #778	; 0x30a
 800b07c:	f000 f9bc 	bl	800b3f8 <__assert_func>
 800b080:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b084:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b088:	bb35      	cbnz	r5, 800b0d8 <__d2b+0x7c>
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	d028      	beq.n	800b0e2 <__d2b+0x86>
 800b090:	4668      	mov	r0, sp
 800b092:	9600      	str	r6, [sp, #0]
 800b094:	f7ff fd82 	bl	800ab9c <__lo0bits>
 800b098:	9900      	ldr	r1, [sp, #0]
 800b09a:	b300      	cbz	r0, 800b0de <__d2b+0x82>
 800b09c:	9a01      	ldr	r2, [sp, #4]
 800b09e:	f1c0 0320 	rsb	r3, r0, #32
 800b0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	40c2      	lsrs	r2, r0
 800b0aa:	6163      	str	r3, [r4, #20]
 800b0ac:	9201      	str	r2, [sp, #4]
 800b0ae:	9b01      	ldr	r3, [sp, #4]
 800b0b0:	61a3      	str	r3, [r4, #24]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	bf14      	ite	ne
 800b0b6:	2202      	movne	r2, #2
 800b0b8:	2201      	moveq	r2, #1
 800b0ba:	6122      	str	r2, [r4, #16]
 800b0bc:	b1d5      	cbz	r5, 800b0f4 <__d2b+0x98>
 800b0be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0c2:	4405      	add	r5, r0
 800b0c4:	f8c9 5000 	str.w	r5, [r9]
 800b0c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0cc:	f8c8 0000 	str.w	r0, [r8]
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	b003      	add	sp, #12
 800b0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0dc:	e7d5      	b.n	800b08a <__d2b+0x2e>
 800b0de:	6161      	str	r1, [r4, #20]
 800b0e0:	e7e5      	b.n	800b0ae <__d2b+0x52>
 800b0e2:	a801      	add	r0, sp, #4
 800b0e4:	f7ff fd5a 	bl	800ab9c <__lo0bits>
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	6163      	str	r3, [r4, #20]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	6122      	str	r2, [r4, #16]
 800b0f0:	3020      	adds	r0, #32
 800b0f2:	e7e3      	b.n	800b0bc <__d2b+0x60>
 800b0f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0fc:	f8c9 0000 	str.w	r0, [r9]
 800b100:	6918      	ldr	r0, [r3, #16]
 800b102:	f7ff fd2b 	bl	800ab5c <__hi0bits>
 800b106:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b10a:	e7df      	b.n	800b0cc <__d2b+0x70>
 800b10c:	0800c1f3 	.word	0x0800c1f3
 800b110:	0800c204 	.word	0x0800c204

0800b114 <_calloc_r>:
 800b114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b116:	fba1 2402 	umull	r2, r4, r1, r2
 800b11a:	b94c      	cbnz	r4, 800b130 <_calloc_r+0x1c>
 800b11c:	4611      	mov	r1, r2
 800b11e:	9201      	str	r2, [sp, #4]
 800b120:	f7fe f8d2 	bl	80092c8 <_malloc_r>
 800b124:	9a01      	ldr	r2, [sp, #4]
 800b126:	4605      	mov	r5, r0
 800b128:	b930      	cbnz	r0, 800b138 <_calloc_r+0x24>
 800b12a:	4628      	mov	r0, r5
 800b12c:	b003      	add	sp, #12
 800b12e:	bd30      	pop	{r4, r5, pc}
 800b130:	220c      	movs	r2, #12
 800b132:	6002      	str	r2, [r0, #0]
 800b134:	2500      	movs	r5, #0
 800b136:	e7f8      	b.n	800b12a <_calloc_r+0x16>
 800b138:	4621      	mov	r1, r4
 800b13a:	f7fe f851 	bl	80091e0 <memset>
 800b13e:	e7f4      	b.n	800b12a <_calloc_r+0x16>

0800b140 <__ssputs_r>:
 800b140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b144:	688e      	ldr	r6, [r1, #8]
 800b146:	429e      	cmp	r6, r3
 800b148:	4682      	mov	sl, r0
 800b14a:	460c      	mov	r4, r1
 800b14c:	4690      	mov	r8, r2
 800b14e:	461f      	mov	r7, r3
 800b150:	d838      	bhi.n	800b1c4 <__ssputs_r+0x84>
 800b152:	898a      	ldrh	r2, [r1, #12]
 800b154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b158:	d032      	beq.n	800b1c0 <__ssputs_r+0x80>
 800b15a:	6825      	ldr	r5, [r4, #0]
 800b15c:	6909      	ldr	r1, [r1, #16]
 800b15e:	eba5 0901 	sub.w	r9, r5, r1
 800b162:	6965      	ldr	r5, [r4, #20]
 800b164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b16c:	3301      	adds	r3, #1
 800b16e:	444b      	add	r3, r9
 800b170:	106d      	asrs	r5, r5, #1
 800b172:	429d      	cmp	r5, r3
 800b174:	bf38      	it	cc
 800b176:	461d      	movcc	r5, r3
 800b178:	0553      	lsls	r3, r2, #21
 800b17a:	d531      	bpl.n	800b1e0 <__ssputs_r+0xa0>
 800b17c:	4629      	mov	r1, r5
 800b17e:	f7fe f8a3 	bl	80092c8 <_malloc_r>
 800b182:	4606      	mov	r6, r0
 800b184:	b950      	cbnz	r0, 800b19c <__ssputs_r+0x5c>
 800b186:	230c      	movs	r3, #12
 800b188:	f8ca 3000 	str.w	r3, [sl]
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19c:	6921      	ldr	r1, [r4, #16]
 800b19e:	464a      	mov	r2, r9
 800b1a0:	f7fe f810 	bl	80091c4 <memcpy>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ae:	81a3      	strh	r3, [r4, #12]
 800b1b0:	6126      	str	r6, [r4, #16]
 800b1b2:	6165      	str	r5, [r4, #20]
 800b1b4:	444e      	add	r6, r9
 800b1b6:	eba5 0509 	sub.w	r5, r5, r9
 800b1ba:	6026      	str	r6, [r4, #0]
 800b1bc:	60a5      	str	r5, [r4, #8]
 800b1be:	463e      	mov	r6, r7
 800b1c0:	42be      	cmp	r6, r7
 800b1c2:	d900      	bls.n	800b1c6 <__ssputs_r+0x86>
 800b1c4:	463e      	mov	r6, r7
 800b1c6:	6820      	ldr	r0, [r4, #0]
 800b1c8:	4632      	mov	r2, r6
 800b1ca:	4641      	mov	r1, r8
 800b1cc:	f000 f959 	bl	800b482 <memmove>
 800b1d0:	68a3      	ldr	r3, [r4, #8]
 800b1d2:	1b9b      	subs	r3, r3, r6
 800b1d4:	60a3      	str	r3, [r4, #8]
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	4433      	add	r3, r6
 800b1da:	6023      	str	r3, [r4, #0]
 800b1dc:	2000      	movs	r0, #0
 800b1de:	e7db      	b.n	800b198 <__ssputs_r+0x58>
 800b1e0:	462a      	mov	r2, r5
 800b1e2:	f000 f968 	bl	800b4b6 <_realloc_r>
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d1e1      	bne.n	800b1b0 <__ssputs_r+0x70>
 800b1ec:	6921      	ldr	r1, [r4, #16]
 800b1ee:	4650      	mov	r0, sl
 800b1f0:	f7fd fffe 	bl	80091f0 <_free_r>
 800b1f4:	e7c7      	b.n	800b186 <__ssputs_r+0x46>
	...

0800b1f8 <_svfiprintf_r>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	4698      	mov	r8, r3
 800b1fe:	898b      	ldrh	r3, [r1, #12]
 800b200:	061b      	lsls	r3, r3, #24
 800b202:	b09d      	sub	sp, #116	; 0x74
 800b204:	4607      	mov	r7, r0
 800b206:	460d      	mov	r5, r1
 800b208:	4614      	mov	r4, r2
 800b20a:	d50e      	bpl.n	800b22a <_svfiprintf_r+0x32>
 800b20c:	690b      	ldr	r3, [r1, #16]
 800b20e:	b963      	cbnz	r3, 800b22a <_svfiprintf_r+0x32>
 800b210:	2140      	movs	r1, #64	; 0x40
 800b212:	f7fe f859 	bl	80092c8 <_malloc_r>
 800b216:	6028      	str	r0, [r5, #0]
 800b218:	6128      	str	r0, [r5, #16]
 800b21a:	b920      	cbnz	r0, 800b226 <_svfiprintf_r+0x2e>
 800b21c:	230c      	movs	r3, #12
 800b21e:	603b      	str	r3, [r7, #0]
 800b220:	f04f 30ff 	mov.w	r0, #4294967295
 800b224:	e0d1      	b.n	800b3ca <_svfiprintf_r+0x1d2>
 800b226:	2340      	movs	r3, #64	; 0x40
 800b228:	616b      	str	r3, [r5, #20]
 800b22a:	2300      	movs	r3, #0
 800b22c:	9309      	str	r3, [sp, #36]	; 0x24
 800b22e:	2320      	movs	r3, #32
 800b230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b234:	f8cd 800c 	str.w	r8, [sp, #12]
 800b238:	2330      	movs	r3, #48	; 0x30
 800b23a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b3e4 <_svfiprintf_r+0x1ec>
 800b23e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b242:	f04f 0901 	mov.w	r9, #1
 800b246:	4623      	mov	r3, r4
 800b248:	469a      	mov	sl, r3
 800b24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b24e:	b10a      	cbz	r2, 800b254 <_svfiprintf_r+0x5c>
 800b250:	2a25      	cmp	r2, #37	; 0x25
 800b252:	d1f9      	bne.n	800b248 <_svfiprintf_r+0x50>
 800b254:	ebba 0b04 	subs.w	fp, sl, r4
 800b258:	d00b      	beq.n	800b272 <_svfiprintf_r+0x7a>
 800b25a:	465b      	mov	r3, fp
 800b25c:	4622      	mov	r2, r4
 800b25e:	4629      	mov	r1, r5
 800b260:	4638      	mov	r0, r7
 800b262:	f7ff ff6d 	bl	800b140 <__ssputs_r>
 800b266:	3001      	adds	r0, #1
 800b268:	f000 80aa 	beq.w	800b3c0 <_svfiprintf_r+0x1c8>
 800b26c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b26e:	445a      	add	r2, fp
 800b270:	9209      	str	r2, [sp, #36]	; 0x24
 800b272:	f89a 3000 	ldrb.w	r3, [sl]
 800b276:	2b00      	cmp	r3, #0
 800b278:	f000 80a2 	beq.w	800b3c0 <_svfiprintf_r+0x1c8>
 800b27c:	2300      	movs	r3, #0
 800b27e:	f04f 32ff 	mov.w	r2, #4294967295
 800b282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b286:	f10a 0a01 	add.w	sl, sl, #1
 800b28a:	9304      	str	r3, [sp, #16]
 800b28c:	9307      	str	r3, [sp, #28]
 800b28e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b292:	931a      	str	r3, [sp, #104]	; 0x68
 800b294:	4654      	mov	r4, sl
 800b296:	2205      	movs	r2, #5
 800b298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b29c:	4851      	ldr	r0, [pc, #324]	; (800b3e4 <_svfiprintf_r+0x1ec>)
 800b29e:	f7f4 ff9f 	bl	80001e0 <memchr>
 800b2a2:	9a04      	ldr	r2, [sp, #16]
 800b2a4:	b9d8      	cbnz	r0, 800b2de <_svfiprintf_r+0xe6>
 800b2a6:	06d0      	lsls	r0, r2, #27
 800b2a8:	bf44      	itt	mi
 800b2aa:	2320      	movmi	r3, #32
 800b2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2b0:	0711      	lsls	r1, r2, #28
 800b2b2:	bf44      	itt	mi
 800b2b4:	232b      	movmi	r3, #43	; 0x2b
 800b2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b2be:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c0:	d015      	beq.n	800b2ee <_svfiprintf_r+0xf6>
 800b2c2:	9a07      	ldr	r2, [sp, #28]
 800b2c4:	4654      	mov	r4, sl
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	f04f 0c0a 	mov.w	ip, #10
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2d2:	3b30      	subs	r3, #48	; 0x30
 800b2d4:	2b09      	cmp	r3, #9
 800b2d6:	d94e      	bls.n	800b376 <_svfiprintf_r+0x17e>
 800b2d8:	b1b0      	cbz	r0, 800b308 <_svfiprintf_r+0x110>
 800b2da:	9207      	str	r2, [sp, #28]
 800b2dc:	e014      	b.n	800b308 <_svfiprintf_r+0x110>
 800b2de:	eba0 0308 	sub.w	r3, r0, r8
 800b2e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	9304      	str	r3, [sp, #16]
 800b2ea:	46a2      	mov	sl, r4
 800b2ec:	e7d2      	b.n	800b294 <_svfiprintf_r+0x9c>
 800b2ee:	9b03      	ldr	r3, [sp, #12]
 800b2f0:	1d19      	adds	r1, r3, #4
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	9103      	str	r1, [sp, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bfbb      	ittet	lt
 800b2fa:	425b      	neglt	r3, r3
 800b2fc:	f042 0202 	orrlt.w	r2, r2, #2
 800b300:	9307      	strge	r3, [sp, #28]
 800b302:	9307      	strlt	r3, [sp, #28]
 800b304:	bfb8      	it	lt
 800b306:	9204      	strlt	r2, [sp, #16]
 800b308:	7823      	ldrb	r3, [r4, #0]
 800b30a:	2b2e      	cmp	r3, #46	; 0x2e
 800b30c:	d10c      	bne.n	800b328 <_svfiprintf_r+0x130>
 800b30e:	7863      	ldrb	r3, [r4, #1]
 800b310:	2b2a      	cmp	r3, #42	; 0x2a
 800b312:	d135      	bne.n	800b380 <_svfiprintf_r+0x188>
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	1d1a      	adds	r2, r3, #4
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	9203      	str	r2, [sp, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	bfb8      	it	lt
 800b320:	f04f 33ff 	movlt.w	r3, #4294967295
 800b324:	3402      	adds	r4, #2
 800b326:	9305      	str	r3, [sp, #20]
 800b328:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b3f4 <_svfiprintf_r+0x1fc>
 800b32c:	7821      	ldrb	r1, [r4, #0]
 800b32e:	2203      	movs	r2, #3
 800b330:	4650      	mov	r0, sl
 800b332:	f7f4 ff55 	bl	80001e0 <memchr>
 800b336:	b140      	cbz	r0, 800b34a <_svfiprintf_r+0x152>
 800b338:	2340      	movs	r3, #64	; 0x40
 800b33a:	eba0 000a 	sub.w	r0, r0, sl
 800b33e:	fa03 f000 	lsl.w	r0, r3, r0
 800b342:	9b04      	ldr	r3, [sp, #16]
 800b344:	4303      	orrs	r3, r0
 800b346:	3401      	adds	r4, #1
 800b348:	9304      	str	r3, [sp, #16]
 800b34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b34e:	4826      	ldr	r0, [pc, #152]	; (800b3e8 <_svfiprintf_r+0x1f0>)
 800b350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b354:	2206      	movs	r2, #6
 800b356:	f7f4 ff43 	bl	80001e0 <memchr>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d038      	beq.n	800b3d0 <_svfiprintf_r+0x1d8>
 800b35e:	4b23      	ldr	r3, [pc, #140]	; (800b3ec <_svfiprintf_r+0x1f4>)
 800b360:	bb1b      	cbnz	r3, 800b3aa <_svfiprintf_r+0x1b2>
 800b362:	9b03      	ldr	r3, [sp, #12]
 800b364:	3307      	adds	r3, #7
 800b366:	f023 0307 	bic.w	r3, r3, #7
 800b36a:	3308      	adds	r3, #8
 800b36c:	9303      	str	r3, [sp, #12]
 800b36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b370:	4433      	add	r3, r6
 800b372:	9309      	str	r3, [sp, #36]	; 0x24
 800b374:	e767      	b.n	800b246 <_svfiprintf_r+0x4e>
 800b376:	fb0c 3202 	mla	r2, ip, r2, r3
 800b37a:	460c      	mov	r4, r1
 800b37c:	2001      	movs	r0, #1
 800b37e:	e7a5      	b.n	800b2cc <_svfiprintf_r+0xd4>
 800b380:	2300      	movs	r3, #0
 800b382:	3401      	adds	r4, #1
 800b384:	9305      	str	r3, [sp, #20]
 800b386:	4619      	mov	r1, r3
 800b388:	f04f 0c0a 	mov.w	ip, #10
 800b38c:	4620      	mov	r0, r4
 800b38e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b392:	3a30      	subs	r2, #48	; 0x30
 800b394:	2a09      	cmp	r2, #9
 800b396:	d903      	bls.n	800b3a0 <_svfiprintf_r+0x1a8>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d0c5      	beq.n	800b328 <_svfiprintf_r+0x130>
 800b39c:	9105      	str	r1, [sp, #20]
 800b39e:	e7c3      	b.n	800b328 <_svfiprintf_r+0x130>
 800b3a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e7f0      	b.n	800b38c <_svfiprintf_r+0x194>
 800b3aa:	ab03      	add	r3, sp, #12
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	462a      	mov	r2, r5
 800b3b0:	4b0f      	ldr	r3, [pc, #60]	; (800b3f0 <_svfiprintf_r+0x1f8>)
 800b3b2:	a904      	add	r1, sp, #16
 800b3b4:	4638      	mov	r0, r7
 800b3b6:	f7fe f89b 	bl	80094f0 <_printf_float>
 800b3ba:	1c42      	adds	r2, r0, #1
 800b3bc:	4606      	mov	r6, r0
 800b3be:	d1d6      	bne.n	800b36e <_svfiprintf_r+0x176>
 800b3c0:	89ab      	ldrh	r3, [r5, #12]
 800b3c2:	065b      	lsls	r3, r3, #25
 800b3c4:	f53f af2c 	bmi.w	800b220 <_svfiprintf_r+0x28>
 800b3c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3ca:	b01d      	add	sp, #116	; 0x74
 800b3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d0:	ab03      	add	r3, sp, #12
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <_svfiprintf_r+0x1f8>)
 800b3d8:	a904      	add	r1, sp, #16
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f7fe fb2c 	bl	8009a38 <_printf_i>
 800b3e0:	e7eb      	b.n	800b3ba <_svfiprintf_r+0x1c2>
 800b3e2:	bf00      	nop
 800b3e4:	0800c35c 	.word	0x0800c35c
 800b3e8:	0800c366 	.word	0x0800c366
 800b3ec:	080094f1 	.word	0x080094f1
 800b3f0:	0800b141 	.word	0x0800b141
 800b3f4:	0800c362 	.word	0x0800c362

0800b3f8 <__assert_func>:
 800b3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3fa:	4614      	mov	r4, r2
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	4b09      	ldr	r3, [pc, #36]	; (800b424 <__assert_func+0x2c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4605      	mov	r5, r0
 800b404:	68d8      	ldr	r0, [r3, #12]
 800b406:	b14c      	cbz	r4, 800b41c <__assert_func+0x24>
 800b408:	4b07      	ldr	r3, [pc, #28]	; (800b428 <__assert_func+0x30>)
 800b40a:	9100      	str	r1, [sp, #0]
 800b40c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b410:	4906      	ldr	r1, [pc, #24]	; (800b42c <__assert_func+0x34>)
 800b412:	462b      	mov	r3, r5
 800b414:	f000 f80e 	bl	800b434 <fiprintf>
 800b418:	f000 faa4 	bl	800b964 <abort>
 800b41c:	4b04      	ldr	r3, [pc, #16]	; (800b430 <__assert_func+0x38>)
 800b41e:	461c      	mov	r4, r3
 800b420:	e7f3      	b.n	800b40a <__assert_func+0x12>
 800b422:	bf00      	nop
 800b424:	2000000c 	.word	0x2000000c
 800b428:	0800c36d 	.word	0x0800c36d
 800b42c:	0800c37a 	.word	0x0800c37a
 800b430:	0800c3a8 	.word	0x0800c3a8

0800b434 <fiprintf>:
 800b434:	b40e      	push	{r1, r2, r3}
 800b436:	b503      	push	{r0, r1, lr}
 800b438:	4601      	mov	r1, r0
 800b43a:	ab03      	add	r3, sp, #12
 800b43c:	4805      	ldr	r0, [pc, #20]	; (800b454 <fiprintf+0x20>)
 800b43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b442:	6800      	ldr	r0, [r0, #0]
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	f000 f88f 	bl	800b568 <_vfiprintf_r>
 800b44a:	b002      	add	sp, #8
 800b44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b450:	b003      	add	sp, #12
 800b452:	4770      	bx	lr
 800b454:	2000000c 	.word	0x2000000c

0800b458 <__retarget_lock_init_recursive>:
 800b458:	4770      	bx	lr

0800b45a <__retarget_lock_acquire_recursive>:
 800b45a:	4770      	bx	lr

0800b45c <__retarget_lock_release_recursive>:
 800b45c:	4770      	bx	lr

0800b45e <__ascii_mbtowc>:
 800b45e:	b082      	sub	sp, #8
 800b460:	b901      	cbnz	r1, 800b464 <__ascii_mbtowc+0x6>
 800b462:	a901      	add	r1, sp, #4
 800b464:	b142      	cbz	r2, 800b478 <__ascii_mbtowc+0x1a>
 800b466:	b14b      	cbz	r3, 800b47c <__ascii_mbtowc+0x1e>
 800b468:	7813      	ldrb	r3, [r2, #0]
 800b46a:	600b      	str	r3, [r1, #0]
 800b46c:	7812      	ldrb	r2, [r2, #0]
 800b46e:	1e10      	subs	r0, r2, #0
 800b470:	bf18      	it	ne
 800b472:	2001      	movne	r0, #1
 800b474:	b002      	add	sp, #8
 800b476:	4770      	bx	lr
 800b478:	4610      	mov	r0, r2
 800b47a:	e7fb      	b.n	800b474 <__ascii_mbtowc+0x16>
 800b47c:	f06f 0001 	mvn.w	r0, #1
 800b480:	e7f8      	b.n	800b474 <__ascii_mbtowc+0x16>

0800b482 <memmove>:
 800b482:	4288      	cmp	r0, r1
 800b484:	b510      	push	{r4, lr}
 800b486:	eb01 0402 	add.w	r4, r1, r2
 800b48a:	d902      	bls.n	800b492 <memmove+0x10>
 800b48c:	4284      	cmp	r4, r0
 800b48e:	4623      	mov	r3, r4
 800b490:	d807      	bhi.n	800b4a2 <memmove+0x20>
 800b492:	1e43      	subs	r3, r0, #1
 800b494:	42a1      	cmp	r1, r4
 800b496:	d008      	beq.n	800b4aa <memmove+0x28>
 800b498:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b49c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4a0:	e7f8      	b.n	800b494 <memmove+0x12>
 800b4a2:	4402      	add	r2, r0
 800b4a4:	4601      	mov	r1, r0
 800b4a6:	428a      	cmp	r2, r1
 800b4a8:	d100      	bne.n	800b4ac <memmove+0x2a>
 800b4aa:	bd10      	pop	{r4, pc}
 800b4ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4b4:	e7f7      	b.n	800b4a6 <memmove+0x24>

0800b4b6 <_realloc_r>:
 800b4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ba:	4680      	mov	r8, r0
 800b4bc:	4614      	mov	r4, r2
 800b4be:	460e      	mov	r6, r1
 800b4c0:	b921      	cbnz	r1, 800b4cc <_realloc_r+0x16>
 800b4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	f7fd befe 	b.w	80092c8 <_malloc_r>
 800b4cc:	b92a      	cbnz	r2, 800b4da <_realloc_r+0x24>
 800b4ce:	f7fd fe8f 	bl	80091f0 <_free_r>
 800b4d2:	4625      	mov	r5, r4
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4da:	f000 fc67 	bl	800bdac <_malloc_usable_size_r>
 800b4de:	4284      	cmp	r4, r0
 800b4e0:	4607      	mov	r7, r0
 800b4e2:	d802      	bhi.n	800b4ea <_realloc_r+0x34>
 800b4e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4e8:	d812      	bhi.n	800b510 <_realloc_r+0x5a>
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	4640      	mov	r0, r8
 800b4ee:	f7fd feeb 	bl	80092c8 <_malloc_r>
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d0ed      	beq.n	800b4d4 <_realloc_r+0x1e>
 800b4f8:	42bc      	cmp	r4, r7
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	bf28      	it	cs
 800b500:	463a      	movcs	r2, r7
 800b502:	f7fd fe5f 	bl	80091c4 <memcpy>
 800b506:	4631      	mov	r1, r6
 800b508:	4640      	mov	r0, r8
 800b50a:	f7fd fe71 	bl	80091f0 <_free_r>
 800b50e:	e7e1      	b.n	800b4d4 <_realloc_r+0x1e>
 800b510:	4635      	mov	r5, r6
 800b512:	e7df      	b.n	800b4d4 <_realloc_r+0x1e>

0800b514 <__sfputc_r>:
 800b514:	6893      	ldr	r3, [r2, #8]
 800b516:	3b01      	subs	r3, #1
 800b518:	2b00      	cmp	r3, #0
 800b51a:	b410      	push	{r4}
 800b51c:	6093      	str	r3, [r2, #8]
 800b51e:	da08      	bge.n	800b532 <__sfputc_r+0x1e>
 800b520:	6994      	ldr	r4, [r2, #24]
 800b522:	42a3      	cmp	r3, r4
 800b524:	db01      	blt.n	800b52a <__sfputc_r+0x16>
 800b526:	290a      	cmp	r1, #10
 800b528:	d103      	bne.n	800b532 <__sfputc_r+0x1e>
 800b52a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b52e:	f000 b94b 	b.w	800b7c8 <__swbuf_r>
 800b532:	6813      	ldr	r3, [r2, #0]
 800b534:	1c58      	adds	r0, r3, #1
 800b536:	6010      	str	r0, [r2, #0]
 800b538:	7019      	strb	r1, [r3, #0]
 800b53a:	4608      	mov	r0, r1
 800b53c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <__sfputs_r>:
 800b542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b544:	4606      	mov	r6, r0
 800b546:	460f      	mov	r7, r1
 800b548:	4614      	mov	r4, r2
 800b54a:	18d5      	adds	r5, r2, r3
 800b54c:	42ac      	cmp	r4, r5
 800b54e:	d101      	bne.n	800b554 <__sfputs_r+0x12>
 800b550:	2000      	movs	r0, #0
 800b552:	e007      	b.n	800b564 <__sfputs_r+0x22>
 800b554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b558:	463a      	mov	r2, r7
 800b55a:	4630      	mov	r0, r6
 800b55c:	f7ff ffda 	bl	800b514 <__sfputc_r>
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	d1f3      	bne.n	800b54c <__sfputs_r+0xa>
 800b564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b568 <_vfiprintf_r>:
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	460d      	mov	r5, r1
 800b56e:	b09d      	sub	sp, #116	; 0x74
 800b570:	4614      	mov	r4, r2
 800b572:	4698      	mov	r8, r3
 800b574:	4606      	mov	r6, r0
 800b576:	b118      	cbz	r0, 800b580 <_vfiprintf_r+0x18>
 800b578:	6983      	ldr	r3, [r0, #24]
 800b57a:	b90b      	cbnz	r3, 800b580 <_vfiprintf_r+0x18>
 800b57c:	f000 fb14 	bl	800bba8 <__sinit>
 800b580:	4b89      	ldr	r3, [pc, #548]	; (800b7a8 <_vfiprintf_r+0x240>)
 800b582:	429d      	cmp	r5, r3
 800b584:	d11b      	bne.n	800b5be <_vfiprintf_r+0x56>
 800b586:	6875      	ldr	r5, [r6, #4]
 800b588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b58a:	07d9      	lsls	r1, r3, #31
 800b58c:	d405      	bmi.n	800b59a <_vfiprintf_r+0x32>
 800b58e:	89ab      	ldrh	r3, [r5, #12]
 800b590:	059a      	lsls	r2, r3, #22
 800b592:	d402      	bmi.n	800b59a <_vfiprintf_r+0x32>
 800b594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b596:	f7ff ff60 	bl	800b45a <__retarget_lock_acquire_recursive>
 800b59a:	89ab      	ldrh	r3, [r5, #12]
 800b59c:	071b      	lsls	r3, r3, #28
 800b59e:	d501      	bpl.n	800b5a4 <_vfiprintf_r+0x3c>
 800b5a0:	692b      	ldr	r3, [r5, #16]
 800b5a2:	b9eb      	cbnz	r3, 800b5e0 <_vfiprintf_r+0x78>
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	f000 f96e 	bl	800b888 <__swsetup_r>
 800b5ac:	b1c0      	cbz	r0, 800b5e0 <_vfiprintf_r+0x78>
 800b5ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5b0:	07dc      	lsls	r4, r3, #31
 800b5b2:	d50e      	bpl.n	800b5d2 <_vfiprintf_r+0x6a>
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	b01d      	add	sp, #116	; 0x74
 800b5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5be:	4b7b      	ldr	r3, [pc, #492]	; (800b7ac <_vfiprintf_r+0x244>)
 800b5c0:	429d      	cmp	r5, r3
 800b5c2:	d101      	bne.n	800b5c8 <_vfiprintf_r+0x60>
 800b5c4:	68b5      	ldr	r5, [r6, #8]
 800b5c6:	e7df      	b.n	800b588 <_vfiprintf_r+0x20>
 800b5c8:	4b79      	ldr	r3, [pc, #484]	; (800b7b0 <_vfiprintf_r+0x248>)
 800b5ca:	429d      	cmp	r5, r3
 800b5cc:	bf08      	it	eq
 800b5ce:	68f5      	ldreq	r5, [r6, #12]
 800b5d0:	e7da      	b.n	800b588 <_vfiprintf_r+0x20>
 800b5d2:	89ab      	ldrh	r3, [r5, #12]
 800b5d4:	0598      	lsls	r0, r3, #22
 800b5d6:	d4ed      	bmi.n	800b5b4 <_vfiprintf_r+0x4c>
 800b5d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5da:	f7ff ff3f 	bl	800b45c <__retarget_lock_release_recursive>
 800b5de:	e7e9      	b.n	800b5b4 <_vfiprintf_r+0x4c>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e4:	2320      	movs	r3, #32
 800b5e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5ee:	2330      	movs	r3, #48	; 0x30
 800b5f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7b4 <_vfiprintf_r+0x24c>
 800b5f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5f8:	f04f 0901 	mov.w	r9, #1
 800b5fc:	4623      	mov	r3, r4
 800b5fe:	469a      	mov	sl, r3
 800b600:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b604:	b10a      	cbz	r2, 800b60a <_vfiprintf_r+0xa2>
 800b606:	2a25      	cmp	r2, #37	; 0x25
 800b608:	d1f9      	bne.n	800b5fe <_vfiprintf_r+0x96>
 800b60a:	ebba 0b04 	subs.w	fp, sl, r4
 800b60e:	d00b      	beq.n	800b628 <_vfiprintf_r+0xc0>
 800b610:	465b      	mov	r3, fp
 800b612:	4622      	mov	r2, r4
 800b614:	4629      	mov	r1, r5
 800b616:	4630      	mov	r0, r6
 800b618:	f7ff ff93 	bl	800b542 <__sfputs_r>
 800b61c:	3001      	adds	r0, #1
 800b61e:	f000 80aa 	beq.w	800b776 <_vfiprintf_r+0x20e>
 800b622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b624:	445a      	add	r2, fp
 800b626:	9209      	str	r2, [sp, #36]	; 0x24
 800b628:	f89a 3000 	ldrb.w	r3, [sl]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 80a2 	beq.w	800b776 <_vfiprintf_r+0x20e>
 800b632:	2300      	movs	r3, #0
 800b634:	f04f 32ff 	mov.w	r2, #4294967295
 800b638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b63c:	f10a 0a01 	add.w	sl, sl, #1
 800b640:	9304      	str	r3, [sp, #16]
 800b642:	9307      	str	r3, [sp, #28]
 800b644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b648:	931a      	str	r3, [sp, #104]	; 0x68
 800b64a:	4654      	mov	r4, sl
 800b64c:	2205      	movs	r2, #5
 800b64e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b652:	4858      	ldr	r0, [pc, #352]	; (800b7b4 <_vfiprintf_r+0x24c>)
 800b654:	f7f4 fdc4 	bl	80001e0 <memchr>
 800b658:	9a04      	ldr	r2, [sp, #16]
 800b65a:	b9d8      	cbnz	r0, 800b694 <_vfiprintf_r+0x12c>
 800b65c:	06d1      	lsls	r1, r2, #27
 800b65e:	bf44      	itt	mi
 800b660:	2320      	movmi	r3, #32
 800b662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b666:	0713      	lsls	r3, r2, #28
 800b668:	bf44      	itt	mi
 800b66a:	232b      	movmi	r3, #43	; 0x2b
 800b66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b670:	f89a 3000 	ldrb.w	r3, [sl]
 800b674:	2b2a      	cmp	r3, #42	; 0x2a
 800b676:	d015      	beq.n	800b6a4 <_vfiprintf_r+0x13c>
 800b678:	9a07      	ldr	r2, [sp, #28]
 800b67a:	4654      	mov	r4, sl
 800b67c:	2000      	movs	r0, #0
 800b67e:	f04f 0c0a 	mov.w	ip, #10
 800b682:	4621      	mov	r1, r4
 800b684:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b688:	3b30      	subs	r3, #48	; 0x30
 800b68a:	2b09      	cmp	r3, #9
 800b68c:	d94e      	bls.n	800b72c <_vfiprintf_r+0x1c4>
 800b68e:	b1b0      	cbz	r0, 800b6be <_vfiprintf_r+0x156>
 800b690:	9207      	str	r2, [sp, #28]
 800b692:	e014      	b.n	800b6be <_vfiprintf_r+0x156>
 800b694:	eba0 0308 	sub.w	r3, r0, r8
 800b698:	fa09 f303 	lsl.w	r3, r9, r3
 800b69c:	4313      	orrs	r3, r2
 800b69e:	9304      	str	r3, [sp, #16]
 800b6a0:	46a2      	mov	sl, r4
 800b6a2:	e7d2      	b.n	800b64a <_vfiprintf_r+0xe2>
 800b6a4:	9b03      	ldr	r3, [sp, #12]
 800b6a6:	1d19      	adds	r1, r3, #4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	9103      	str	r1, [sp, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	bfbb      	ittet	lt
 800b6b0:	425b      	neglt	r3, r3
 800b6b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b6b6:	9307      	strge	r3, [sp, #28]
 800b6b8:	9307      	strlt	r3, [sp, #28]
 800b6ba:	bfb8      	it	lt
 800b6bc:	9204      	strlt	r2, [sp, #16]
 800b6be:	7823      	ldrb	r3, [r4, #0]
 800b6c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b6c2:	d10c      	bne.n	800b6de <_vfiprintf_r+0x176>
 800b6c4:	7863      	ldrb	r3, [r4, #1]
 800b6c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b6c8:	d135      	bne.n	800b736 <_vfiprintf_r+0x1ce>
 800b6ca:	9b03      	ldr	r3, [sp, #12]
 800b6cc:	1d1a      	adds	r2, r3, #4
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	9203      	str	r2, [sp, #12]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	bfb8      	it	lt
 800b6d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6da:	3402      	adds	r4, #2
 800b6dc:	9305      	str	r3, [sp, #20]
 800b6de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7c4 <_vfiprintf_r+0x25c>
 800b6e2:	7821      	ldrb	r1, [r4, #0]
 800b6e4:	2203      	movs	r2, #3
 800b6e6:	4650      	mov	r0, sl
 800b6e8:	f7f4 fd7a 	bl	80001e0 <memchr>
 800b6ec:	b140      	cbz	r0, 800b700 <_vfiprintf_r+0x198>
 800b6ee:	2340      	movs	r3, #64	; 0x40
 800b6f0:	eba0 000a 	sub.w	r0, r0, sl
 800b6f4:	fa03 f000 	lsl.w	r0, r3, r0
 800b6f8:	9b04      	ldr	r3, [sp, #16]
 800b6fa:	4303      	orrs	r3, r0
 800b6fc:	3401      	adds	r4, #1
 800b6fe:	9304      	str	r3, [sp, #16]
 800b700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b704:	482c      	ldr	r0, [pc, #176]	; (800b7b8 <_vfiprintf_r+0x250>)
 800b706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b70a:	2206      	movs	r2, #6
 800b70c:	f7f4 fd68 	bl	80001e0 <memchr>
 800b710:	2800      	cmp	r0, #0
 800b712:	d03f      	beq.n	800b794 <_vfiprintf_r+0x22c>
 800b714:	4b29      	ldr	r3, [pc, #164]	; (800b7bc <_vfiprintf_r+0x254>)
 800b716:	bb1b      	cbnz	r3, 800b760 <_vfiprintf_r+0x1f8>
 800b718:	9b03      	ldr	r3, [sp, #12]
 800b71a:	3307      	adds	r3, #7
 800b71c:	f023 0307 	bic.w	r3, r3, #7
 800b720:	3308      	adds	r3, #8
 800b722:	9303      	str	r3, [sp, #12]
 800b724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b726:	443b      	add	r3, r7
 800b728:	9309      	str	r3, [sp, #36]	; 0x24
 800b72a:	e767      	b.n	800b5fc <_vfiprintf_r+0x94>
 800b72c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b730:	460c      	mov	r4, r1
 800b732:	2001      	movs	r0, #1
 800b734:	e7a5      	b.n	800b682 <_vfiprintf_r+0x11a>
 800b736:	2300      	movs	r3, #0
 800b738:	3401      	adds	r4, #1
 800b73a:	9305      	str	r3, [sp, #20]
 800b73c:	4619      	mov	r1, r3
 800b73e:	f04f 0c0a 	mov.w	ip, #10
 800b742:	4620      	mov	r0, r4
 800b744:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b748:	3a30      	subs	r2, #48	; 0x30
 800b74a:	2a09      	cmp	r2, #9
 800b74c:	d903      	bls.n	800b756 <_vfiprintf_r+0x1ee>
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0c5      	beq.n	800b6de <_vfiprintf_r+0x176>
 800b752:	9105      	str	r1, [sp, #20]
 800b754:	e7c3      	b.n	800b6de <_vfiprintf_r+0x176>
 800b756:	fb0c 2101 	mla	r1, ip, r1, r2
 800b75a:	4604      	mov	r4, r0
 800b75c:	2301      	movs	r3, #1
 800b75e:	e7f0      	b.n	800b742 <_vfiprintf_r+0x1da>
 800b760:	ab03      	add	r3, sp, #12
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	462a      	mov	r2, r5
 800b766:	4b16      	ldr	r3, [pc, #88]	; (800b7c0 <_vfiprintf_r+0x258>)
 800b768:	a904      	add	r1, sp, #16
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7fd fec0 	bl	80094f0 <_printf_float>
 800b770:	4607      	mov	r7, r0
 800b772:	1c78      	adds	r0, r7, #1
 800b774:	d1d6      	bne.n	800b724 <_vfiprintf_r+0x1bc>
 800b776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b778:	07d9      	lsls	r1, r3, #31
 800b77a:	d405      	bmi.n	800b788 <_vfiprintf_r+0x220>
 800b77c:	89ab      	ldrh	r3, [r5, #12]
 800b77e:	059a      	lsls	r2, r3, #22
 800b780:	d402      	bmi.n	800b788 <_vfiprintf_r+0x220>
 800b782:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b784:	f7ff fe6a 	bl	800b45c <__retarget_lock_release_recursive>
 800b788:	89ab      	ldrh	r3, [r5, #12]
 800b78a:	065b      	lsls	r3, r3, #25
 800b78c:	f53f af12 	bmi.w	800b5b4 <_vfiprintf_r+0x4c>
 800b790:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b792:	e711      	b.n	800b5b8 <_vfiprintf_r+0x50>
 800b794:	ab03      	add	r3, sp, #12
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	462a      	mov	r2, r5
 800b79a:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <_vfiprintf_r+0x258>)
 800b79c:	a904      	add	r1, sp, #16
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f7fe f94a 	bl	8009a38 <_printf_i>
 800b7a4:	e7e4      	b.n	800b770 <_vfiprintf_r+0x208>
 800b7a6:	bf00      	nop
 800b7a8:	0800c4d4 	.word	0x0800c4d4
 800b7ac:	0800c4f4 	.word	0x0800c4f4
 800b7b0:	0800c4b4 	.word	0x0800c4b4
 800b7b4:	0800c35c 	.word	0x0800c35c
 800b7b8:	0800c366 	.word	0x0800c366
 800b7bc:	080094f1 	.word	0x080094f1
 800b7c0:	0800b543 	.word	0x0800b543
 800b7c4:	0800c362 	.word	0x0800c362

0800b7c8 <__swbuf_r>:
 800b7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ca:	460e      	mov	r6, r1
 800b7cc:	4614      	mov	r4, r2
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	b118      	cbz	r0, 800b7da <__swbuf_r+0x12>
 800b7d2:	6983      	ldr	r3, [r0, #24]
 800b7d4:	b90b      	cbnz	r3, 800b7da <__swbuf_r+0x12>
 800b7d6:	f000 f9e7 	bl	800bba8 <__sinit>
 800b7da:	4b21      	ldr	r3, [pc, #132]	; (800b860 <__swbuf_r+0x98>)
 800b7dc:	429c      	cmp	r4, r3
 800b7de:	d12b      	bne.n	800b838 <__swbuf_r+0x70>
 800b7e0:	686c      	ldr	r4, [r5, #4]
 800b7e2:	69a3      	ldr	r3, [r4, #24]
 800b7e4:	60a3      	str	r3, [r4, #8]
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	071a      	lsls	r2, r3, #28
 800b7ea:	d52f      	bpl.n	800b84c <__swbuf_r+0x84>
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	b36b      	cbz	r3, 800b84c <__swbuf_r+0x84>
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	6820      	ldr	r0, [r4, #0]
 800b7f4:	1ac0      	subs	r0, r0, r3
 800b7f6:	6963      	ldr	r3, [r4, #20]
 800b7f8:	b2f6      	uxtb	r6, r6
 800b7fa:	4283      	cmp	r3, r0
 800b7fc:	4637      	mov	r7, r6
 800b7fe:	dc04      	bgt.n	800b80a <__swbuf_r+0x42>
 800b800:	4621      	mov	r1, r4
 800b802:	4628      	mov	r0, r5
 800b804:	f000 f93c 	bl	800ba80 <_fflush_r>
 800b808:	bb30      	cbnz	r0, 800b858 <__swbuf_r+0x90>
 800b80a:	68a3      	ldr	r3, [r4, #8]
 800b80c:	3b01      	subs	r3, #1
 800b80e:	60a3      	str	r3, [r4, #8]
 800b810:	6823      	ldr	r3, [r4, #0]
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	6022      	str	r2, [r4, #0]
 800b816:	701e      	strb	r6, [r3, #0]
 800b818:	6963      	ldr	r3, [r4, #20]
 800b81a:	3001      	adds	r0, #1
 800b81c:	4283      	cmp	r3, r0
 800b81e:	d004      	beq.n	800b82a <__swbuf_r+0x62>
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	07db      	lsls	r3, r3, #31
 800b824:	d506      	bpl.n	800b834 <__swbuf_r+0x6c>
 800b826:	2e0a      	cmp	r6, #10
 800b828:	d104      	bne.n	800b834 <__swbuf_r+0x6c>
 800b82a:	4621      	mov	r1, r4
 800b82c:	4628      	mov	r0, r5
 800b82e:	f000 f927 	bl	800ba80 <_fflush_r>
 800b832:	b988      	cbnz	r0, 800b858 <__swbuf_r+0x90>
 800b834:	4638      	mov	r0, r7
 800b836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b838:	4b0a      	ldr	r3, [pc, #40]	; (800b864 <__swbuf_r+0x9c>)
 800b83a:	429c      	cmp	r4, r3
 800b83c:	d101      	bne.n	800b842 <__swbuf_r+0x7a>
 800b83e:	68ac      	ldr	r4, [r5, #8]
 800b840:	e7cf      	b.n	800b7e2 <__swbuf_r+0x1a>
 800b842:	4b09      	ldr	r3, [pc, #36]	; (800b868 <__swbuf_r+0xa0>)
 800b844:	429c      	cmp	r4, r3
 800b846:	bf08      	it	eq
 800b848:	68ec      	ldreq	r4, [r5, #12]
 800b84a:	e7ca      	b.n	800b7e2 <__swbuf_r+0x1a>
 800b84c:	4621      	mov	r1, r4
 800b84e:	4628      	mov	r0, r5
 800b850:	f000 f81a 	bl	800b888 <__swsetup_r>
 800b854:	2800      	cmp	r0, #0
 800b856:	d0cb      	beq.n	800b7f0 <__swbuf_r+0x28>
 800b858:	f04f 37ff 	mov.w	r7, #4294967295
 800b85c:	e7ea      	b.n	800b834 <__swbuf_r+0x6c>
 800b85e:	bf00      	nop
 800b860:	0800c4d4 	.word	0x0800c4d4
 800b864:	0800c4f4 	.word	0x0800c4f4
 800b868:	0800c4b4 	.word	0x0800c4b4

0800b86c <__ascii_wctomb>:
 800b86c:	b149      	cbz	r1, 800b882 <__ascii_wctomb+0x16>
 800b86e:	2aff      	cmp	r2, #255	; 0xff
 800b870:	bf85      	ittet	hi
 800b872:	238a      	movhi	r3, #138	; 0x8a
 800b874:	6003      	strhi	r3, [r0, #0]
 800b876:	700a      	strbls	r2, [r1, #0]
 800b878:	f04f 30ff 	movhi.w	r0, #4294967295
 800b87c:	bf98      	it	ls
 800b87e:	2001      	movls	r0, #1
 800b880:	4770      	bx	lr
 800b882:	4608      	mov	r0, r1
 800b884:	4770      	bx	lr
	...

0800b888 <__swsetup_r>:
 800b888:	4b32      	ldr	r3, [pc, #200]	; (800b954 <__swsetup_r+0xcc>)
 800b88a:	b570      	push	{r4, r5, r6, lr}
 800b88c:	681d      	ldr	r5, [r3, #0]
 800b88e:	4606      	mov	r6, r0
 800b890:	460c      	mov	r4, r1
 800b892:	b125      	cbz	r5, 800b89e <__swsetup_r+0x16>
 800b894:	69ab      	ldr	r3, [r5, #24]
 800b896:	b913      	cbnz	r3, 800b89e <__swsetup_r+0x16>
 800b898:	4628      	mov	r0, r5
 800b89a:	f000 f985 	bl	800bba8 <__sinit>
 800b89e:	4b2e      	ldr	r3, [pc, #184]	; (800b958 <__swsetup_r+0xd0>)
 800b8a0:	429c      	cmp	r4, r3
 800b8a2:	d10f      	bne.n	800b8c4 <__swsetup_r+0x3c>
 800b8a4:	686c      	ldr	r4, [r5, #4]
 800b8a6:	89a3      	ldrh	r3, [r4, #12]
 800b8a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8ac:	0719      	lsls	r1, r3, #28
 800b8ae:	d42c      	bmi.n	800b90a <__swsetup_r+0x82>
 800b8b0:	06dd      	lsls	r5, r3, #27
 800b8b2:	d411      	bmi.n	800b8d8 <__swsetup_r+0x50>
 800b8b4:	2309      	movs	r3, #9
 800b8b6:	6033      	str	r3, [r6, #0]
 800b8b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8bc:	81a3      	strh	r3, [r4, #12]
 800b8be:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c2:	e03e      	b.n	800b942 <__swsetup_r+0xba>
 800b8c4:	4b25      	ldr	r3, [pc, #148]	; (800b95c <__swsetup_r+0xd4>)
 800b8c6:	429c      	cmp	r4, r3
 800b8c8:	d101      	bne.n	800b8ce <__swsetup_r+0x46>
 800b8ca:	68ac      	ldr	r4, [r5, #8]
 800b8cc:	e7eb      	b.n	800b8a6 <__swsetup_r+0x1e>
 800b8ce:	4b24      	ldr	r3, [pc, #144]	; (800b960 <__swsetup_r+0xd8>)
 800b8d0:	429c      	cmp	r4, r3
 800b8d2:	bf08      	it	eq
 800b8d4:	68ec      	ldreq	r4, [r5, #12]
 800b8d6:	e7e6      	b.n	800b8a6 <__swsetup_r+0x1e>
 800b8d8:	0758      	lsls	r0, r3, #29
 800b8da:	d512      	bpl.n	800b902 <__swsetup_r+0x7a>
 800b8dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8de:	b141      	cbz	r1, 800b8f2 <__swsetup_r+0x6a>
 800b8e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8e4:	4299      	cmp	r1, r3
 800b8e6:	d002      	beq.n	800b8ee <__swsetup_r+0x66>
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f7fd fc81 	bl	80091f0 <_free_r>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b8f2:	89a3      	ldrh	r3, [r4, #12]
 800b8f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8f8:	81a3      	strh	r3, [r4, #12]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	6063      	str	r3, [r4, #4]
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	f043 0308 	orr.w	r3, r3, #8
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	6923      	ldr	r3, [r4, #16]
 800b90c:	b94b      	cbnz	r3, 800b922 <__swsetup_r+0x9a>
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b918:	d003      	beq.n	800b922 <__swsetup_r+0x9a>
 800b91a:	4621      	mov	r1, r4
 800b91c:	4630      	mov	r0, r6
 800b91e:	f000 fa05 	bl	800bd2c <__smakebuf_r>
 800b922:	89a0      	ldrh	r0, [r4, #12]
 800b924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b928:	f010 0301 	ands.w	r3, r0, #1
 800b92c:	d00a      	beq.n	800b944 <__swsetup_r+0xbc>
 800b92e:	2300      	movs	r3, #0
 800b930:	60a3      	str	r3, [r4, #8]
 800b932:	6963      	ldr	r3, [r4, #20]
 800b934:	425b      	negs	r3, r3
 800b936:	61a3      	str	r3, [r4, #24]
 800b938:	6923      	ldr	r3, [r4, #16]
 800b93a:	b943      	cbnz	r3, 800b94e <__swsetup_r+0xc6>
 800b93c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b940:	d1ba      	bne.n	800b8b8 <__swsetup_r+0x30>
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	0781      	lsls	r1, r0, #30
 800b946:	bf58      	it	pl
 800b948:	6963      	ldrpl	r3, [r4, #20]
 800b94a:	60a3      	str	r3, [r4, #8]
 800b94c:	e7f4      	b.n	800b938 <__swsetup_r+0xb0>
 800b94e:	2000      	movs	r0, #0
 800b950:	e7f7      	b.n	800b942 <__swsetup_r+0xba>
 800b952:	bf00      	nop
 800b954:	2000000c 	.word	0x2000000c
 800b958:	0800c4d4 	.word	0x0800c4d4
 800b95c:	0800c4f4 	.word	0x0800c4f4
 800b960:	0800c4b4 	.word	0x0800c4b4

0800b964 <abort>:
 800b964:	b508      	push	{r3, lr}
 800b966:	2006      	movs	r0, #6
 800b968:	f000 fa50 	bl	800be0c <raise>
 800b96c:	2001      	movs	r0, #1
 800b96e:	f7f6 fd99 	bl	80024a4 <_exit>
	...

0800b974 <__sflush_r>:
 800b974:	898a      	ldrh	r2, [r1, #12]
 800b976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b97a:	4605      	mov	r5, r0
 800b97c:	0710      	lsls	r0, r2, #28
 800b97e:	460c      	mov	r4, r1
 800b980:	d458      	bmi.n	800ba34 <__sflush_r+0xc0>
 800b982:	684b      	ldr	r3, [r1, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	dc05      	bgt.n	800b994 <__sflush_r+0x20>
 800b988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	dc02      	bgt.n	800b994 <__sflush_r+0x20>
 800b98e:	2000      	movs	r0, #0
 800b990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b996:	2e00      	cmp	r6, #0
 800b998:	d0f9      	beq.n	800b98e <__sflush_r+0x1a>
 800b99a:	2300      	movs	r3, #0
 800b99c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9a0:	682f      	ldr	r7, [r5, #0]
 800b9a2:	602b      	str	r3, [r5, #0]
 800b9a4:	d032      	beq.n	800ba0c <__sflush_r+0x98>
 800b9a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	075a      	lsls	r2, r3, #29
 800b9ac:	d505      	bpl.n	800b9ba <__sflush_r+0x46>
 800b9ae:	6863      	ldr	r3, [r4, #4]
 800b9b0:	1ac0      	subs	r0, r0, r3
 800b9b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9b4:	b10b      	cbz	r3, 800b9ba <__sflush_r+0x46>
 800b9b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9b8:	1ac0      	subs	r0, r0, r3
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	4602      	mov	r2, r0
 800b9be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9c0:	6a21      	ldr	r1, [r4, #32]
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	47b0      	blx	r6
 800b9c6:	1c43      	adds	r3, r0, #1
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	d106      	bne.n	800b9da <__sflush_r+0x66>
 800b9cc:	6829      	ldr	r1, [r5, #0]
 800b9ce:	291d      	cmp	r1, #29
 800b9d0:	d82c      	bhi.n	800ba2c <__sflush_r+0xb8>
 800b9d2:	4a2a      	ldr	r2, [pc, #168]	; (800ba7c <__sflush_r+0x108>)
 800b9d4:	40ca      	lsrs	r2, r1
 800b9d6:	07d6      	lsls	r6, r2, #31
 800b9d8:	d528      	bpl.n	800ba2c <__sflush_r+0xb8>
 800b9da:	2200      	movs	r2, #0
 800b9dc:	6062      	str	r2, [r4, #4]
 800b9de:	04d9      	lsls	r1, r3, #19
 800b9e0:	6922      	ldr	r2, [r4, #16]
 800b9e2:	6022      	str	r2, [r4, #0]
 800b9e4:	d504      	bpl.n	800b9f0 <__sflush_r+0x7c>
 800b9e6:	1c42      	adds	r2, r0, #1
 800b9e8:	d101      	bne.n	800b9ee <__sflush_r+0x7a>
 800b9ea:	682b      	ldr	r3, [r5, #0]
 800b9ec:	b903      	cbnz	r3, 800b9f0 <__sflush_r+0x7c>
 800b9ee:	6560      	str	r0, [r4, #84]	; 0x54
 800b9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9f2:	602f      	str	r7, [r5, #0]
 800b9f4:	2900      	cmp	r1, #0
 800b9f6:	d0ca      	beq.n	800b98e <__sflush_r+0x1a>
 800b9f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9fc:	4299      	cmp	r1, r3
 800b9fe:	d002      	beq.n	800ba06 <__sflush_r+0x92>
 800ba00:	4628      	mov	r0, r5
 800ba02:	f7fd fbf5 	bl	80091f0 <_free_r>
 800ba06:	2000      	movs	r0, #0
 800ba08:	6360      	str	r0, [r4, #52]	; 0x34
 800ba0a:	e7c1      	b.n	800b990 <__sflush_r+0x1c>
 800ba0c:	6a21      	ldr	r1, [r4, #32]
 800ba0e:	2301      	movs	r3, #1
 800ba10:	4628      	mov	r0, r5
 800ba12:	47b0      	blx	r6
 800ba14:	1c41      	adds	r1, r0, #1
 800ba16:	d1c7      	bne.n	800b9a8 <__sflush_r+0x34>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d0c4      	beq.n	800b9a8 <__sflush_r+0x34>
 800ba1e:	2b1d      	cmp	r3, #29
 800ba20:	d001      	beq.n	800ba26 <__sflush_r+0xb2>
 800ba22:	2b16      	cmp	r3, #22
 800ba24:	d101      	bne.n	800ba2a <__sflush_r+0xb6>
 800ba26:	602f      	str	r7, [r5, #0]
 800ba28:	e7b1      	b.n	800b98e <__sflush_r+0x1a>
 800ba2a:	89a3      	ldrh	r3, [r4, #12]
 800ba2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba30:	81a3      	strh	r3, [r4, #12]
 800ba32:	e7ad      	b.n	800b990 <__sflush_r+0x1c>
 800ba34:	690f      	ldr	r7, [r1, #16]
 800ba36:	2f00      	cmp	r7, #0
 800ba38:	d0a9      	beq.n	800b98e <__sflush_r+0x1a>
 800ba3a:	0793      	lsls	r3, r2, #30
 800ba3c:	680e      	ldr	r6, [r1, #0]
 800ba3e:	bf08      	it	eq
 800ba40:	694b      	ldreq	r3, [r1, #20]
 800ba42:	600f      	str	r7, [r1, #0]
 800ba44:	bf18      	it	ne
 800ba46:	2300      	movne	r3, #0
 800ba48:	eba6 0807 	sub.w	r8, r6, r7
 800ba4c:	608b      	str	r3, [r1, #8]
 800ba4e:	f1b8 0f00 	cmp.w	r8, #0
 800ba52:	dd9c      	ble.n	800b98e <__sflush_r+0x1a>
 800ba54:	6a21      	ldr	r1, [r4, #32]
 800ba56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba58:	4643      	mov	r3, r8
 800ba5a:	463a      	mov	r2, r7
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	47b0      	blx	r6
 800ba60:	2800      	cmp	r0, #0
 800ba62:	dc06      	bgt.n	800ba72 <__sflush_r+0xfe>
 800ba64:	89a3      	ldrh	r3, [r4, #12]
 800ba66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba6a:	81a3      	strh	r3, [r4, #12]
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba70:	e78e      	b.n	800b990 <__sflush_r+0x1c>
 800ba72:	4407      	add	r7, r0
 800ba74:	eba8 0800 	sub.w	r8, r8, r0
 800ba78:	e7e9      	b.n	800ba4e <__sflush_r+0xda>
 800ba7a:	bf00      	nop
 800ba7c:	20400001 	.word	0x20400001

0800ba80 <_fflush_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	690b      	ldr	r3, [r1, #16]
 800ba84:	4605      	mov	r5, r0
 800ba86:	460c      	mov	r4, r1
 800ba88:	b913      	cbnz	r3, 800ba90 <_fflush_r+0x10>
 800ba8a:	2500      	movs	r5, #0
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	b118      	cbz	r0, 800ba9a <_fflush_r+0x1a>
 800ba92:	6983      	ldr	r3, [r0, #24]
 800ba94:	b90b      	cbnz	r3, 800ba9a <_fflush_r+0x1a>
 800ba96:	f000 f887 	bl	800bba8 <__sinit>
 800ba9a:	4b14      	ldr	r3, [pc, #80]	; (800baec <_fflush_r+0x6c>)
 800ba9c:	429c      	cmp	r4, r3
 800ba9e:	d11b      	bne.n	800bad8 <_fflush_r+0x58>
 800baa0:	686c      	ldr	r4, [r5, #4]
 800baa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d0ef      	beq.n	800ba8a <_fflush_r+0xa>
 800baaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800baac:	07d0      	lsls	r0, r2, #31
 800baae:	d404      	bmi.n	800baba <_fflush_r+0x3a>
 800bab0:	0599      	lsls	r1, r3, #22
 800bab2:	d402      	bmi.n	800baba <_fflush_r+0x3a>
 800bab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bab6:	f7ff fcd0 	bl	800b45a <__retarget_lock_acquire_recursive>
 800baba:	4628      	mov	r0, r5
 800babc:	4621      	mov	r1, r4
 800babe:	f7ff ff59 	bl	800b974 <__sflush_r>
 800bac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bac4:	07da      	lsls	r2, r3, #31
 800bac6:	4605      	mov	r5, r0
 800bac8:	d4e0      	bmi.n	800ba8c <_fflush_r+0xc>
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	059b      	lsls	r3, r3, #22
 800bace:	d4dd      	bmi.n	800ba8c <_fflush_r+0xc>
 800bad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bad2:	f7ff fcc3 	bl	800b45c <__retarget_lock_release_recursive>
 800bad6:	e7d9      	b.n	800ba8c <_fflush_r+0xc>
 800bad8:	4b05      	ldr	r3, [pc, #20]	; (800baf0 <_fflush_r+0x70>)
 800bada:	429c      	cmp	r4, r3
 800badc:	d101      	bne.n	800bae2 <_fflush_r+0x62>
 800bade:	68ac      	ldr	r4, [r5, #8]
 800bae0:	e7df      	b.n	800baa2 <_fflush_r+0x22>
 800bae2:	4b04      	ldr	r3, [pc, #16]	; (800baf4 <_fflush_r+0x74>)
 800bae4:	429c      	cmp	r4, r3
 800bae6:	bf08      	it	eq
 800bae8:	68ec      	ldreq	r4, [r5, #12]
 800baea:	e7da      	b.n	800baa2 <_fflush_r+0x22>
 800baec:	0800c4d4 	.word	0x0800c4d4
 800baf0:	0800c4f4 	.word	0x0800c4f4
 800baf4:	0800c4b4 	.word	0x0800c4b4

0800baf8 <std>:
 800baf8:	2300      	movs	r3, #0
 800bafa:	b510      	push	{r4, lr}
 800bafc:	4604      	mov	r4, r0
 800bafe:	e9c0 3300 	strd	r3, r3, [r0]
 800bb02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb06:	6083      	str	r3, [r0, #8]
 800bb08:	8181      	strh	r1, [r0, #12]
 800bb0a:	6643      	str	r3, [r0, #100]	; 0x64
 800bb0c:	81c2      	strh	r2, [r0, #14]
 800bb0e:	6183      	str	r3, [r0, #24]
 800bb10:	4619      	mov	r1, r3
 800bb12:	2208      	movs	r2, #8
 800bb14:	305c      	adds	r0, #92	; 0x5c
 800bb16:	f7fd fb63 	bl	80091e0 <memset>
 800bb1a:	4b05      	ldr	r3, [pc, #20]	; (800bb30 <std+0x38>)
 800bb1c:	6263      	str	r3, [r4, #36]	; 0x24
 800bb1e:	4b05      	ldr	r3, [pc, #20]	; (800bb34 <std+0x3c>)
 800bb20:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb22:	4b05      	ldr	r3, [pc, #20]	; (800bb38 <std+0x40>)
 800bb24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb26:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <std+0x44>)
 800bb28:	6224      	str	r4, [r4, #32]
 800bb2a:	6323      	str	r3, [r4, #48]	; 0x30
 800bb2c:	bd10      	pop	{r4, pc}
 800bb2e:	bf00      	nop
 800bb30:	0800be45 	.word	0x0800be45
 800bb34:	0800be67 	.word	0x0800be67
 800bb38:	0800be9f 	.word	0x0800be9f
 800bb3c:	0800bec3 	.word	0x0800bec3

0800bb40 <_cleanup_r>:
 800bb40:	4901      	ldr	r1, [pc, #4]	; (800bb48 <_cleanup_r+0x8>)
 800bb42:	f000 b8af 	b.w	800bca4 <_fwalk_reent>
 800bb46:	bf00      	nop
 800bb48:	0800ba81 	.word	0x0800ba81

0800bb4c <__sfmoreglue>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	2268      	movs	r2, #104	; 0x68
 800bb50:	1e4d      	subs	r5, r1, #1
 800bb52:	4355      	muls	r5, r2
 800bb54:	460e      	mov	r6, r1
 800bb56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb5a:	f7fd fbb5 	bl	80092c8 <_malloc_r>
 800bb5e:	4604      	mov	r4, r0
 800bb60:	b140      	cbz	r0, 800bb74 <__sfmoreglue+0x28>
 800bb62:	2100      	movs	r1, #0
 800bb64:	e9c0 1600 	strd	r1, r6, [r0]
 800bb68:	300c      	adds	r0, #12
 800bb6a:	60a0      	str	r0, [r4, #8]
 800bb6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb70:	f7fd fb36 	bl	80091e0 <memset>
 800bb74:	4620      	mov	r0, r4
 800bb76:	bd70      	pop	{r4, r5, r6, pc}

0800bb78 <__sfp_lock_acquire>:
 800bb78:	4801      	ldr	r0, [pc, #4]	; (800bb80 <__sfp_lock_acquire+0x8>)
 800bb7a:	f7ff bc6e 	b.w	800b45a <__retarget_lock_acquire_recursive>
 800bb7e:	bf00      	nop
 800bb80:	20000525 	.word	0x20000525

0800bb84 <__sfp_lock_release>:
 800bb84:	4801      	ldr	r0, [pc, #4]	; (800bb8c <__sfp_lock_release+0x8>)
 800bb86:	f7ff bc69 	b.w	800b45c <__retarget_lock_release_recursive>
 800bb8a:	bf00      	nop
 800bb8c:	20000525 	.word	0x20000525

0800bb90 <__sinit_lock_acquire>:
 800bb90:	4801      	ldr	r0, [pc, #4]	; (800bb98 <__sinit_lock_acquire+0x8>)
 800bb92:	f7ff bc62 	b.w	800b45a <__retarget_lock_acquire_recursive>
 800bb96:	bf00      	nop
 800bb98:	20000526 	.word	0x20000526

0800bb9c <__sinit_lock_release>:
 800bb9c:	4801      	ldr	r0, [pc, #4]	; (800bba4 <__sinit_lock_release+0x8>)
 800bb9e:	f7ff bc5d 	b.w	800b45c <__retarget_lock_release_recursive>
 800bba2:	bf00      	nop
 800bba4:	20000526 	.word	0x20000526

0800bba8 <__sinit>:
 800bba8:	b510      	push	{r4, lr}
 800bbaa:	4604      	mov	r4, r0
 800bbac:	f7ff fff0 	bl	800bb90 <__sinit_lock_acquire>
 800bbb0:	69a3      	ldr	r3, [r4, #24]
 800bbb2:	b11b      	cbz	r3, 800bbbc <__sinit+0x14>
 800bbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbb8:	f7ff bff0 	b.w	800bb9c <__sinit_lock_release>
 800bbbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bbc0:	6523      	str	r3, [r4, #80]	; 0x50
 800bbc2:	4b13      	ldr	r3, [pc, #76]	; (800bc10 <__sinit+0x68>)
 800bbc4:	4a13      	ldr	r2, [pc, #76]	; (800bc14 <__sinit+0x6c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbca:	42a3      	cmp	r3, r4
 800bbcc:	bf04      	itt	eq
 800bbce:	2301      	moveq	r3, #1
 800bbd0:	61a3      	streq	r3, [r4, #24]
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 f820 	bl	800bc18 <__sfp>
 800bbd8:	6060      	str	r0, [r4, #4]
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 f81c 	bl	800bc18 <__sfp>
 800bbe0:	60a0      	str	r0, [r4, #8]
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f000 f818 	bl	800bc18 <__sfp>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	60e0      	str	r0, [r4, #12]
 800bbec:	2104      	movs	r1, #4
 800bbee:	6860      	ldr	r0, [r4, #4]
 800bbf0:	f7ff ff82 	bl	800baf8 <std>
 800bbf4:	68a0      	ldr	r0, [r4, #8]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	2109      	movs	r1, #9
 800bbfa:	f7ff ff7d 	bl	800baf8 <std>
 800bbfe:	68e0      	ldr	r0, [r4, #12]
 800bc00:	2202      	movs	r2, #2
 800bc02:	2112      	movs	r1, #18
 800bc04:	f7ff ff78 	bl	800baf8 <std>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	61a3      	str	r3, [r4, #24]
 800bc0c:	e7d2      	b.n	800bbb4 <__sinit+0xc>
 800bc0e:	bf00      	nop
 800bc10:	0800c13c 	.word	0x0800c13c
 800bc14:	0800bb41 	.word	0x0800bb41

0800bc18 <__sfp>:
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	f7ff ffac 	bl	800bb78 <__sfp_lock_acquire>
 800bc20:	4b1e      	ldr	r3, [pc, #120]	; (800bc9c <__sfp+0x84>)
 800bc22:	681e      	ldr	r6, [r3, #0]
 800bc24:	69b3      	ldr	r3, [r6, #24]
 800bc26:	b913      	cbnz	r3, 800bc2e <__sfp+0x16>
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f7ff ffbd 	bl	800bba8 <__sinit>
 800bc2e:	3648      	adds	r6, #72	; 0x48
 800bc30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc34:	3b01      	subs	r3, #1
 800bc36:	d503      	bpl.n	800bc40 <__sfp+0x28>
 800bc38:	6833      	ldr	r3, [r6, #0]
 800bc3a:	b30b      	cbz	r3, 800bc80 <__sfp+0x68>
 800bc3c:	6836      	ldr	r6, [r6, #0]
 800bc3e:	e7f7      	b.n	800bc30 <__sfp+0x18>
 800bc40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc44:	b9d5      	cbnz	r5, 800bc7c <__sfp+0x64>
 800bc46:	4b16      	ldr	r3, [pc, #88]	; (800bca0 <__sfp+0x88>)
 800bc48:	60e3      	str	r3, [r4, #12]
 800bc4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc4e:	6665      	str	r5, [r4, #100]	; 0x64
 800bc50:	f7ff fc02 	bl	800b458 <__retarget_lock_init_recursive>
 800bc54:	f7ff ff96 	bl	800bb84 <__sfp_lock_release>
 800bc58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc60:	6025      	str	r5, [r4, #0]
 800bc62:	61a5      	str	r5, [r4, #24]
 800bc64:	2208      	movs	r2, #8
 800bc66:	4629      	mov	r1, r5
 800bc68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc6c:	f7fd fab8 	bl	80091e0 <memset>
 800bc70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc78:	4620      	mov	r0, r4
 800bc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc7c:	3468      	adds	r4, #104	; 0x68
 800bc7e:	e7d9      	b.n	800bc34 <__sfp+0x1c>
 800bc80:	2104      	movs	r1, #4
 800bc82:	4638      	mov	r0, r7
 800bc84:	f7ff ff62 	bl	800bb4c <__sfmoreglue>
 800bc88:	4604      	mov	r4, r0
 800bc8a:	6030      	str	r0, [r6, #0]
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d1d5      	bne.n	800bc3c <__sfp+0x24>
 800bc90:	f7ff ff78 	bl	800bb84 <__sfp_lock_release>
 800bc94:	230c      	movs	r3, #12
 800bc96:	603b      	str	r3, [r7, #0]
 800bc98:	e7ee      	b.n	800bc78 <__sfp+0x60>
 800bc9a:	bf00      	nop
 800bc9c:	0800c13c 	.word	0x0800c13c
 800bca0:	ffff0001 	.word	0xffff0001

0800bca4 <_fwalk_reent>:
 800bca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca8:	4606      	mov	r6, r0
 800bcaa:	4688      	mov	r8, r1
 800bcac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcb0:	2700      	movs	r7, #0
 800bcb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcb6:	f1b9 0901 	subs.w	r9, r9, #1
 800bcba:	d505      	bpl.n	800bcc8 <_fwalk_reent+0x24>
 800bcbc:	6824      	ldr	r4, [r4, #0]
 800bcbe:	2c00      	cmp	r4, #0
 800bcc0:	d1f7      	bne.n	800bcb2 <_fwalk_reent+0xe>
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcc8:	89ab      	ldrh	r3, [r5, #12]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d907      	bls.n	800bcde <_fwalk_reent+0x3a>
 800bcce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	d003      	beq.n	800bcde <_fwalk_reent+0x3a>
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	4630      	mov	r0, r6
 800bcda:	47c0      	blx	r8
 800bcdc:	4307      	orrs	r7, r0
 800bcde:	3568      	adds	r5, #104	; 0x68
 800bce0:	e7e9      	b.n	800bcb6 <_fwalk_reent+0x12>

0800bce2 <__swhatbuf_r>:
 800bce2:	b570      	push	{r4, r5, r6, lr}
 800bce4:	460e      	mov	r6, r1
 800bce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcea:	2900      	cmp	r1, #0
 800bcec:	b096      	sub	sp, #88	; 0x58
 800bcee:	4614      	mov	r4, r2
 800bcf0:	461d      	mov	r5, r3
 800bcf2:	da08      	bge.n	800bd06 <__swhatbuf_r+0x24>
 800bcf4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	602a      	str	r2, [r5, #0]
 800bcfc:	061a      	lsls	r2, r3, #24
 800bcfe:	d410      	bmi.n	800bd22 <__swhatbuf_r+0x40>
 800bd00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd04:	e00e      	b.n	800bd24 <__swhatbuf_r+0x42>
 800bd06:	466a      	mov	r2, sp
 800bd08:	f000 f902 	bl	800bf10 <_fstat_r>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	dbf1      	blt.n	800bcf4 <__swhatbuf_r+0x12>
 800bd10:	9a01      	ldr	r2, [sp, #4]
 800bd12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd1a:	425a      	negs	r2, r3
 800bd1c:	415a      	adcs	r2, r3
 800bd1e:	602a      	str	r2, [r5, #0]
 800bd20:	e7ee      	b.n	800bd00 <__swhatbuf_r+0x1e>
 800bd22:	2340      	movs	r3, #64	; 0x40
 800bd24:	2000      	movs	r0, #0
 800bd26:	6023      	str	r3, [r4, #0]
 800bd28:	b016      	add	sp, #88	; 0x58
 800bd2a:	bd70      	pop	{r4, r5, r6, pc}

0800bd2c <__smakebuf_r>:
 800bd2c:	898b      	ldrh	r3, [r1, #12]
 800bd2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd30:	079d      	lsls	r5, r3, #30
 800bd32:	4606      	mov	r6, r0
 800bd34:	460c      	mov	r4, r1
 800bd36:	d507      	bpl.n	800bd48 <__smakebuf_r+0x1c>
 800bd38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	6123      	str	r3, [r4, #16]
 800bd40:	2301      	movs	r3, #1
 800bd42:	6163      	str	r3, [r4, #20]
 800bd44:	b002      	add	sp, #8
 800bd46:	bd70      	pop	{r4, r5, r6, pc}
 800bd48:	ab01      	add	r3, sp, #4
 800bd4a:	466a      	mov	r2, sp
 800bd4c:	f7ff ffc9 	bl	800bce2 <__swhatbuf_r>
 800bd50:	9900      	ldr	r1, [sp, #0]
 800bd52:	4605      	mov	r5, r0
 800bd54:	4630      	mov	r0, r6
 800bd56:	f7fd fab7 	bl	80092c8 <_malloc_r>
 800bd5a:	b948      	cbnz	r0, 800bd70 <__smakebuf_r+0x44>
 800bd5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd60:	059a      	lsls	r2, r3, #22
 800bd62:	d4ef      	bmi.n	800bd44 <__smakebuf_r+0x18>
 800bd64:	f023 0303 	bic.w	r3, r3, #3
 800bd68:	f043 0302 	orr.w	r3, r3, #2
 800bd6c:	81a3      	strh	r3, [r4, #12]
 800bd6e:	e7e3      	b.n	800bd38 <__smakebuf_r+0xc>
 800bd70:	4b0d      	ldr	r3, [pc, #52]	; (800bda8 <__smakebuf_r+0x7c>)
 800bd72:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	6020      	str	r0, [r4, #0]
 800bd78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd7c:	81a3      	strh	r3, [r4, #12]
 800bd7e:	9b00      	ldr	r3, [sp, #0]
 800bd80:	6163      	str	r3, [r4, #20]
 800bd82:	9b01      	ldr	r3, [sp, #4]
 800bd84:	6120      	str	r0, [r4, #16]
 800bd86:	b15b      	cbz	r3, 800bda0 <__smakebuf_r+0x74>
 800bd88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f000 f8d1 	bl	800bf34 <_isatty_r>
 800bd92:	b128      	cbz	r0, 800bda0 <__smakebuf_r+0x74>
 800bd94:	89a3      	ldrh	r3, [r4, #12]
 800bd96:	f023 0303 	bic.w	r3, r3, #3
 800bd9a:	f043 0301 	orr.w	r3, r3, #1
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	89a0      	ldrh	r0, [r4, #12]
 800bda2:	4305      	orrs	r5, r0
 800bda4:	81a5      	strh	r5, [r4, #12]
 800bda6:	e7cd      	b.n	800bd44 <__smakebuf_r+0x18>
 800bda8:	0800bb41 	.word	0x0800bb41

0800bdac <_malloc_usable_size_r>:
 800bdac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdb0:	1f18      	subs	r0, r3, #4
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	bfbc      	itt	lt
 800bdb6:	580b      	ldrlt	r3, [r1, r0]
 800bdb8:	18c0      	addlt	r0, r0, r3
 800bdba:	4770      	bx	lr

0800bdbc <_raise_r>:
 800bdbc:	291f      	cmp	r1, #31
 800bdbe:	b538      	push	{r3, r4, r5, lr}
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	d904      	bls.n	800bdd0 <_raise_r+0x14>
 800bdc6:	2316      	movs	r3, #22
 800bdc8:	6003      	str	r3, [r0, #0]
 800bdca:	f04f 30ff 	mov.w	r0, #4294967295
 800bdce:	bd38      	pop	{r3, r4, r5, pc}
 800bdd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bdd2:	b112      	cbz	r2, 800bdda <_raise_r+0x1e>
 800bdd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdd8:	b94b      	cbnz	r3, 800bdee <_raise_r+0x32>
 800bdda:	4620      	mov	r0, r4
 800bddc:	f000 f830 	bl	800be40 <_getpid_r>
 800bde0:	462a      	mov	r2, r5
 800bde2:	4601      	mov	r1, r0
 800bde4:	4620      	mov	r0, r4
 800bde6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdea:	f000 b817 	b.w	800be1c <_kill_r>
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d00a      	beq.n	800be08 <_raise_r+0x4c>
 800bdf2:	1c59      	adds	r1, r3, #1
 800bdf4:	d103      	bne.n	800bdfe <_raise_r+0x42>
 800bdf6:	2316      	movs	r3, #22
 800bdf8:	6003      	str	r3, [r0, #0]
 800bdfa:	2001      	movs	r0, #1
 800bdfc:	e7e7      	b.n	800bdce <_raise_r+0x12>
 800bdfe:	2400      	movs	r4, #0
 800be00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be04:	4628      	mov	r0, r5
 800be06:	4798      	blx	r3
 800be08:	2000      	movs	r0, #0
 800be0a:	e7e0      	b.n	800bdce <_raise_r+0x12>

0800be0c <raise>:
 800be0c:	4b02      	ldr	r3, [pc, #8]	; (800be18 <raise+0xc>)
 800be0e:	4601      	mov	r1, r0
 800be10:	6818      	ldr	r0, [r3, #0]
 800be12:	f7ff bfd3 	b.w	800bdbc <_raise_r>
 800be16:	bf00      	nop
 800be18:	2000000c 	.word	0x2000000c

0800be1c <_kill_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	4d07      	ldr	r5, [pc, #28]	; (800be3c <_kill_r+0x20>)
 800be20:	2300      	movs	r3, #0
 800be22:	4604      	mov	r4, r0
 800be24:	4608      	mov	r0, r1
 800be26:	4611      	mov	r1, r2
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	f7f6 fb2b 	bl	8002484 <_kill>
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	d102      	bne.n	800be38 <_kill_r+0x1c>
 800be32:	682b      	ldr	r3, [r5, #0]
 800be34:	b103      	cbz	r3, 800be38 <_kill_r+0x1c>
 800be36:	6023      	str	r3, [r4, #0]
 800be38:	bd38      	pop	{r3, r4, r5, pc}
 800be3a:	bf00      	nop
 800be3c:	20000520 	.word	0x20000520

0800be40 <_getpid_r>:
 800be40:	f7f6 bb18 	b.w	8002474 <_getpid>

0800be44 <__sread>:
 800be44:	b510      	push	{r4, lr}
 800be46:	460c      	mov	r4, r1
 800be48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be4c:	f000 f894 	bl	800bf78 <_read_r>
 800be50:	2800      	cmp	r0, #0
 800be52:	bfab      	itete	ge
 800be54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be56:	89a3      	ldrhlt	r3, [r4, #12]
 800be58:	181b      	addge	r3, r3, r0
 800be5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be5e:	bfac      	ite	ge
 800be60:	6563      	strge	r3, [r4, #84]	; 0x54
 800be62:	81a3      	strhlt	r3, [r4, #12]
 800be64:	bd10      	pop	{r4, pc}

0800be66 <__swrite>:
 800be66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6a:	461f      	mov	r7, r3
 800be6c:	898b      	ldrh	r3, [r1, #12]
 800be6e:	05db      	lsls	r3, r3, #23
 800be70:	4605      	mov	r5, r0
 800be72:	460c      	mov	r4, r1
 800be74:	4616      	mov	r6, r2
 800be76:	d505      	bpl.n	800be84 <__swrite+0x1e>
 800be78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be7c:	2302      	movs	r3, #2
 800be7e:	2200      	movs	r2, #0
 800be80:	f000 f868 	bl	800bf54 <_lseek_r>
 800be84:	89a3      	ldrh	r3, [r4, #12]
 800be86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be8e:	81a3      	strh	r3, [r4, #12]
 800be90:	4632      	mov	r2, r6
 800be92:	463b      	mov	r3, r7
 800be94:	4628      	mov	r0, r5
 800be96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be9a:	f000 b817 	b.w	800becc <_write_r>

0800be9e <__sseek>:
 800be9e:	b510      	push	{r4, lr}
 800bea0:	460c      	mov	r4, r1
 800bea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea6:	f000 f855 	bl	800bf54 <_lseek_r>
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	bf15      	itete	ne
 800beb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800beb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800beb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800beba:	81a3      	strheq	r3, [r4, #12]
 800bebc:	bf18      	it	ne
 800bebe:	81a3      	strhne	r3, [r4, #12]
 800bec0:	bd10      	pop	{r4, pc}

0800bec2 <__sclose>:
 800bec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec6:	f000 b813 	b.w	800bef0 <_close_r>
	...

0800becc <_write_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4d07      	ldr	r5, [pc, #28]	; (800beec <_write_r+0x20>)
 800bed0:	4604      	mov	r4, r0
 800bed2:	4608      	mov	r0, r1
 800bed4:	4611      	mov	r1, r2
 800bed6:	2200      	movs	r2, #0
 800bed8:	602a      	str	r2, [r5, #0]
 800beda:	461a      	mov	r2, r3
 800bedc:	f7f6 fb09 	bl	80024f2 <_write>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	d102      	bne.n	800beea <_write_r+0x1e>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	b103      	cbz	r3, 800beea <_write_r+0x1e>
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	20000520 	.word	0x20000520

0800bef0 <_close_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	4d06      	ldr	r5, [pc, #24]	; (800bf0c <_close_r+0x1c>)
 800bef4:	2300      	movs	r3, #0
 800bef6:	4604      	mov	r4, r0
 800bef8:	4608      	mov	r0, r1
 800befa:	602b      	str	r3, [r5, #0]
 800befc:	f7f6 fb15 	bl	800252a <_close>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_close_r+0x1a>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_close_r+0x1a>
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	20000520 	.word	0x20000520

0800bf10 <_fstat_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d07      	ldr	r5, [pc, #28]	; (800bf30 <_fstat_r+0x20>)
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	4608      	mov	r0, r1
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	602b      	str	r3, [r5, #0]
 800bf1e:	f7f6 fb10 	bl	8002542 <_fstat>
 800bf22:	1c43      	adds	r3, r0, #1
 800bf24:	d102      	bne.n	800bf2c <_fstat_r+0x1c>
 800bf26:	682b      	ldr	r3, [r5, #0]
 800bf28:	b103      	cbz	r3, 800bf2c <_fstat_r+0x1c>
 800bf2a:	6023      	str	r3, [r4, #0]
 800bf2c:	bd38      	pop	{r3, r4, r5, pc}
 800bf2e:	bf00      	nop
 800bf30:	20000520 	.word	0x20000520

0800bf34 <_isatty_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4d06      	ldr	r5, [pc, #24]	; (800bf50 <_isatty_r+0x1c>)
 800bf38:	2300      	movs	r3, #0
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	602b      	str	r3, [r5, #0]
 800bf40:	f7f6 fb0f 	bl	8002562 <_isatty>
 800bf44:	1c43      	adds	r3, r0, #1
 800bf46:	d102      	bne.n	800bf4e <_isatty_r+0x1a>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	b103      	cbz	r3, 800bf4e <_isatty_r+0x1a>
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
 800bf50:	20000520 	.word	0x20000520

0800bf54 <_lseek_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	4d07      	ldr	r5, [pc, #28]	; (800bf74 <_lseek_r+0x20>)
 800bf58:	4604      	mov	r4, r0
 800bf5a:	4608      	mov	r0, r1
 800bf5c:	4611      	mov	r1, r2
 800bf5e:	2200      	movs	r2, #0
 800bf60:	602a      	str	r2, [r5, #0]
 800bf62:	461a      	mov	r2, r3
 800bf64:	f7f6 fb08 	bl	8002578 <_lseek>
 800bf68:	1c43      	adds	r3, r0, #1
 800bf6a:	d102      	bne.n	800bf72 <_lseek_r+0x1e>
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	b103      	cbz	r3, 800bf72 <_lseek_r+0x1e>
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	bd38      	pop	{r3, r4, r5, pc}
 800bf74:	20000520 	.word	0x20000520

0800bf78 <_read_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d07      	ldr	r5, [pc, #28]	; (800bf98 <_read_r+0x20>)
 800bf7c:	4604      	mov	r4, r0
 800bf7e:	4608      	mov	r0, r1
 800bf80:	4611      	mov	r1, r2
 800bf82:	2200      	movs	r2, #0
 800bf84:	602a      	str	r2, [r5, #0]
 800bf86:	461a      	mov	r2, r3
 800bf88:	f7f6 fa96 	bl	80024b8 <_read>
 800bf8c:	1c43      	adds	r3, r0, #1
 800bf8e:	d102      	bne.n	800bf96 <_read_r+0x1e>
 800bf90:	682b      	ldr	r3, [r5, #0]
 800bf92:	b103      	cbz	r3, 800bf96 <_read_r+0x1e>
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	bd38      	pop	{r3, r4, r5, pc}
 800bf98:	20000520 	.word	0x20000520

0800bf9c <_init>:
 800bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9e:	bf00      	nop
 800bfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa2:	bc08      	pop	{r3}
 800bfa4:	469e      	mov	lr, r3
 800bfa6:	4770      	bx	lr

0800bfa8 <_fini>:
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	bf00      	nop
 800bfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfae:	bc08      	pop	{r3}
 800bfb0:	469e      	mov	lr, r3
 800bfb2:	4770      	bx	lr
