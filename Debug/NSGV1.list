
NSGV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800b258  0800b258  0001b258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b784  0800b784  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b784  0800b784  0001b784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b78c  0800b78c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b78c  0800b78c  0001b78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b790  0800b790  0001b790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000034c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000528  20000528  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019128  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030fa  00000000  00000000  00039334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0003c430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001610  00000000  00000000  0003db60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023271  00000000  00000000  0003f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ea9  00000000  00000000  000623e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6592  00000000  00000000  0007c28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015281c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000752c  00000000  00000000  0015286c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b23c 	.word	0x0800b23c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b23c 	.word	0x0800b23c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);


int main(void)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b0b0      	sub	sp, #192	; 0xc0
 8000ef0:	af02      	add	r7, sp, #8
	uint16_t vbus=0, vshunt=0, current=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	INA219_t ina1, ina2;
	uint8_t mem=10;
 8000f04:	230a      	movs	r3, #10
 8000f06:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
	char msg[100];
	CAN_TxHeaderTypeDef TxHeader={0};
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	615a      	str	r2, [r3, #20]
	TxHeader.DLC = 5;
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.StdId = 0x6A4;
 8000f20:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8000f24:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE   = CAN_ID_STD;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t TxMailbox;
	uint16_t PIN_LED = PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED, year=0;
 8000f2e:	231e      	movs	r3, #30
 8000f30:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
	uint32_t vmon=0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float freq[3]={0}, duty_cycle[3]={0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f56:	f001 fedd 	bl	8002d14 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000f5a:	f000 fb39 	bl	80015d0 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f5e:	f000 fe29 	bl	8001bb4 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000f62:	f000 fd39 	bl	80019d8 <MX_CAN1_Init>
	MX_SPI1_Init();
 8000f66:	f000 fd9b 	bl	8001aa0 <MX_SPI1_Init>
	MX_ADC1_Init();
 8000f6a:	f000 fce3 	bl	8001934 <MX_ADC1_Init>
	MX_I2C2_Init();
 8000f6e:	f000 fd69 	bl	8001a44 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000f72:	f000 fdcb 	bl	8001b0c <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000f76:	f000 fdf3 	bl	8001b60 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000f7a:	f000 fb99 	bl	80016b0 <MX_TIM2_Init>
	MX_TIM5_Init();
 8000f7e:	f000 fc01 	bl	8001784 <MX_TIM5_Init>
	MX_TIM9_Init();
 8000f82:	f000 fc6b 	bl	800185c <MX_TIM9_Init>
	DS3231_Init(&hi2c2);
 8000f86:	4851      	ldr	r0, [pc, #324]	; (80010cc <main+0x1e0>)
 8000f88:	f001 fc1c 	bl	80027c4 <DS3231_Init>
	DS3231_SetFullTime(15, 25, 30);
 8000f8c:	221e      	movs	r2, #30
 8000f8e:	2119      	movs	r1, #25
 8000f90:	200f      	movs	r0, #15
 8000f92:	f001 fdea 	bl	8002b6a <DS3231_SetFullTime>
	DS3231_SetFullDate(29, 9, 4, 2022);
 8000f96:	f240 73e6 	movw	r3, #2022	; 0x7e6
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	2109      	movs	r1, #9
 8000f9e:	201d      	movs	r0, #29
 8000fa0:	f001 fdfc 	bl	8002b9c <DS3231_SetFullDate>
	CAN_Filter_Config();
 8000fa4:	f000 faee 	bl	8001584 <CAN_Filter_Config>
	while(!INA219_Init(&ina1, &hi2c2, INA219_ADDRESS));
 8000fa8:	bf00      	nop
 8000faa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fae:	2240      	movs	r2, #64	; 0x40
 8000fb0:	4946      	ldr	r1, [pc, #280]	; (80010cc <main+0x1e0>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fbd4 	bl	8002760 <INA219_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f5      	beq.n	8000faa <main+0xbe>
	while(!INA219_Init(&ina2, &hi2c2, INA219_ADDRESS+1));
 8000fbe:	bf00      	nop
 8000fc0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fc4:	2241      	movs	r2, #65	; 0x41
 8000fc6:	4941      	ldr	r1, [pc, #260]	; (80010cc <main+0x1e0>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 fbc9 	bl	8002760 <INA219_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f5      	beq.n	8000fc0 <main+0xd4>
	M24C32_Init(&hi2c2);
 8000fd4:	483d      	ldr	r0, [pc, #244]	; (80010cc <main+0x1e0>)
 8000fd6:	f001 fe3f 	bl	8002c58 <M24C32_Init>

	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	483c      	ldr	r0, [pc, #240]	; (80010d0 <main+0x1e4>)
 8000fde:	f005 ffbf 	bl	8006f60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	483a      	ldr	r0, [pc, #232]	; (80010d0 <main+0x1e4>)
 8000fe6:	f005 ffbb 	bl	8006f60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_1);
 8000fea:	2100      	movs	r1, #0
 8000fec:	4839      	ldr	r0, [pc, #228]	; (80010d4 <main+0x1e8>)
 8000fee:	f005 ffb7 	bl	8006f60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_2);
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	4837      	ldr	r0, [pc, #220]	; (80010d4 <main+0x1e8>)
 8000ff6:	f005 ffb3 	bl	8006f60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim9,TIM_CHANNEL_1);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4836      	ldr	r0, [pc, #216]	; (80010d8 <main+0x1ec>)
 8000ffe:	f005 ffaf 	bl	8006f60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim9,TIM_CHANNEL_2);
 8001002:	2104      	movs	r1, #4
 8001004:	4834      	ldr	r0, [pc, #208]	; (80010d8 <main+0x1ec>)
 8001006:	f005 ffab 	bl	8006f60 <HAL_TIM_IC_Start_IT>

	HAL_ADC_Start_IT(&hadc1);
 800100a:	4834      	ldr	r0, [pc, #208]	; (80010dc <main+0x1f0>)
 800100c:	f001 ff5c 	bl	8002ec8 <HAL_ADC_Start_IT>

	uart= huart1;
 8001010:	4a33      	ldr	r2, [pc, #204]	; (80010e0 <main+0x1f4>)
 8001012:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <main+0x1f8>)
 8001014:	4610      	mov	r0, r2
 8001016:	4619      	mov	r1, r3
 8001018:	2344      	movs	r3, #68	; 0x44
 800101a:	461a      	mov	r2, r3
 800101c:	f007 fa22 	bl	8008464 <memcpy>

	M24C32_WriteByte(0x0001, 69);
 8001020:	2145      	movs	r1, #69	; 0x45
 8001022:	2001      	movs	r0, #1
 8001024:	f001 fe28 	bl	8002c78 <M24C32_WriteByte>
	HAL_Delay(1000);
 8001028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102c:	f001 fee4 	bl	8002df8 <HAL_Delay>
	mem=M24C32_ReadRandomAddr(0x0001);
 8001030:	2001      	movs	r0, #1
 8001032:	f001 fe45 	bl	8002cc0 <M24C32_ReadRandomAddr>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad


	while (1)
	{
//		LED Toggle
		if (beat==1)
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <main+0x1fc>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d10f      	bne.n	8001064 <main+0x178>
		{
			beat=0;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <main+0x1fc>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC,PINC_HEART|PIN_LED);
 800104a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800104e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001052:	b29b      	uxth	r3, r3
 8001054:	4619      	mov	r1, r3
 8001056:	4825      	ldr	r0, [pc, #148]	; (80010ec <main+0x200>)
 8001058:	f003 fb75 	bl	8004746 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, PINB_EN);
 800105c:	2101      	movs	r1, #1
 800105e:	4824      	ldr	r0, [pc, #144]	; (80010f0 <main+0x204>)
 8001060:	f003 fb71 	bl	8004746 <HAL_GPIO_TogglePin>
		}

//		GPIO Input
		memset(msg,0,sizeof(msg));
 8001064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001068:	2264      	movs	r2, #100	; 0x64
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f007 fa07 	bl	8008480 <memset>
		sprintf(msg,"Switch Input: %d",HAL_GPIO_ReadPin(GPIOC, PINC_SWITCH));
 8001072:	2101      	movs	r1, #1
 8001074:	481d      	ldr	r0, [pc, #116]	; (80010ec <main+0x200>)
 8001076:	f003 fb35 	bl	80046e4 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001082:	491c      	ldr	r1, [pc, #112]	; (80010f4 <main+0x208>)
 8001084:	4618      	mov	r0, r3
 8001086:	f007 ff5d 	bl	8008f44 <siprintf>
		dmsg(msg);
 800108a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fa46 	bl	8001520 <dmsg>
		memset(msg,0,sizeof(msg));
 8001094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001098:	2264      	movs	r2, #100	; 0x64
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f007 f9ef 	bl	8008480 <memset>
		sprintf(msg,"State Input: %d",HAL_GPIO_ReadPin(GPIOB, PINB_STATE));
 80010a2:	2102      	movs	r1, #2
 80010a4:	4812      	ldr	r0, [pc, #72]	; (80010f0 <main+0x204>)
 80010a6:	f003 fb1d 	bl	80046e4 <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b2:	4911      	ldr	r1, [pc, #68]	; (80010f8 <main+0x20c>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 ff45 	bl	8008f44 <siprintf>
		dmsg(msg);
 80010ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fa2e 	bl	8001520 <dmsg>

//		Pulse Input
		for (int i=0; i<3; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80010ca:	e086      	b.n	80011da <main+0x2ee>
 80010cc:	20000268 	.word	0x20000268
 80010d0:	2000039c 	.word	0x2000039c
 80010d4:	200003e4 	.word	0x200003e4
 80010d8:	2000042c 	.word	0x2000042c
 80010dc:	200001f8 	.word	0x200001f8
 80010e0:	20000498 	.word	0x20000498
 80010e4:	20000314 	.word	0x20000314
 80010e8:	20000493 	.word	0x20000493
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020400 	.word	0x40020400
 80010f4:	0800b258 	.word	0x0800b258
 80010f8:	0800b26c 	.word	0x0800b26c
		{
			if (freq_update[i]==1)
 80010fc:	4a91      	ldr	r2, [pc, #580]	; (8001344 <main+0x458>)
 80010fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d135      	bne.n	8001176 <main+0x28a>
			{
				freq[i]= 1000000/tim_capture[i][0];
 800110a:	4a8f      	ldr	r2, [pc, #572]	; (8001348 <main+0x45c>)
 800110c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001114:	4a8d      	ldr	r2, [pc, #564]	; (800134c <main+0x460>)
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	33b8      	adds	r3, #184	; 0xb8
 800112a:	443b      	add	r3, r7
 800112c:	3bac      	subs	r3, #172	; 0xac
 800112e:	edc3 7a00 	vstr	s15, [r3]
				duty_cycle[i]= (tim_capture[i][1]/tim_capture[i][0])*100;
 8001132:	4a85      	ldr	r2, [pc, #532]	; (8001348 <main+0x45c>)
 8001134:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4413      	add	r3, r2
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4982      	ldr	r1, [pc, #520]	; (8001348 <main+0x45c>)
 8001140:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001144:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001148:	fbb2 f3f3 	udiv	r3, r2, r3
 800114c:	2264      	movs	r2, #100	; 0x64
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	33b8      	adds	r3, #184	; 0xb8
 8001162:	443b      	add	r3, r7
 8001164:	3bb8      	subs	r3, #184	; 0xb8
 8001166:	edc3 7a00 	vstr	s15, [r3]
				freq_update[i]=0;
 800116a:	4a76      	ldr	r2, [pc, #472]	; (8001344 <main+0x458>)
 800116c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001170:	4413      	add	r3, r2
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
			}
			memset(msg,0,sizeof(msg));
 8001176:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800117a:	2264      	movs	r2, #100	; 0x64
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f007 f97e 	bl	8008480 <memset>
			sprintf(msg,"Frequency3: %.2f   Duty Cycle: %.2f", freq[i],duty_cycle[i]);
 8001184:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	33b8      	adds	r3, #184	; 0xb8
 800118c:	443b      	add	r3, r7
 800118e:	3bac      	subs	r3, #172	; 0xac
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9d8 	bl	8000548 <__aeabi_f2d>
 8001198:	4604      	mov	r4, r0
 800119a:	460d      	mov	r5, r1
 800119c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	33b8      	adds	r3, #184	; 0xb8
 80011a4:	443b      	add	r3, r7
 80011a6:	3bb8      	subs	r3, #184	; 0xb8
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9cc 	bl	8000548 <__aeabi_f2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80011b8:	e9cd 2300 	strd	r2, r3, [sp]
 80011bc:	4622      	mov	r2, r4
 80011be:	462b      	mov	r3, r5
 80011c0:	4963      	ldr	r1, [pc, #396]	; (8001350 <main+0x464>)
 80011c2:	f007 febf 	bl	8008f44 <siprintf>
			dmsg(msg);
 80011c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f9a8 	bl	8001520 <dmsg>
		for (int i=0; i<3; i++)
 80011d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011d4:	3301      	adds	r3, #1
 80011d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011de:	2b02      	cmp	r3, #2
 80011e0:	dd8c      	ble.n	80010fc <main+0x210>
		}

//		Voltage Monitor
		if (adc_update==1)
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <main+0x468>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d118      	bne.n	800121c <main+0x330>
		{
			vmon=HAL_ADC_GetValue(&hadc1);
 80011ea:	485b      	ldr	r0, [pc, #364]	; (8001358 <main+0x46c>)
 80011ec:	f002 f85a 	bl	80032a4 <HAL_ADC_GetValue>
 80011f0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			memset(msg,0,sizeof(msg));
 80011f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f8:	2264      	movs	r2, #100	; 0x64
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f007 f93f 	bl	8008480 <memset>
			sprintf(msg,"Voltage Monitor: %ld", vmon);
 8001202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001206:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800120a:	4954      	ldr	r1, [pc, #336]	; (800135c <main+0x470>)
 800120c:	4618      	mov	r0, r3
 800120e:	f007 fe99 	bl	8008f44 <siprintf>
			dmsg(msg);
 8001212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f982 	bl	8001520 <dmsg>
		}
//		RTC
		year= DS3231_GetYear();
 800121c:	f001 fbbd 	bl	800299a <DS3231_GetYear>
 8001220:	4603      	mov	r3, r0
 8001222:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
		memset(msg,0,sizeof(msg));
 8001226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122a:	2264      	movs	r2, #100	; 0x64
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f007 f926 	bl	8008480 <memset>
		sprintf(msg,"RTC Year: %d", year);
 8001234:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8001238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123c:	4948      	ldr	r1, [pc, #288]	; (8001360 <main+0x474>)
 800123e:	4618      	mov	r0, r3
 8001240:	f007 fe80 	bl	8008f44 <siprintf>
		dmsg(msg);
 8001244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f969 	bl	8001520 <dmsg>
////		CAN RX
//		memset(msg,0,sizeof(msg));
//		sprintf(msg,"Message Received : #%x",can_msg[0]);
//		dmsg(msg);
//		Current Monitor
		vbus = INA219_ReadBusVoltage(&ina1);
 800124e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001252:	4618      	mov	r0, r3
 8001254:	f001 f9cb 	bl	80025ee <INA219_ReadBusVoltage>
 8001258:	4603      	mov	r3, r0
 800125a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
		vshunt = INA219_ReadShuntVolage(&ina1);
 800125e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fa00 	bl	8002668 <INA219_ReadShuntVolage>
 8001268:	4603      	mov	r3, r0
 800126a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		current = INA219_ReadCurrent(&ina1);
 800126e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001272:	4618      	mov	r0, r3
 8001274:	f001 f9de 	bl	8002634 <INA219_ReadCurrent>
 8001278:	4603      	mov	r3, r0
 800127a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		memset(msg,0,sizeof(msg));
 800127e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001282:	2264      	movs	r2, #100	; 0x64
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f007 f8fa 	bl	8008480 <memset>
		sprintf(msg,"Bus Voltage1: %d  Voltage1: %d  Current1: %d", vbus, vshunt, current);
 800128c:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8001290:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8001294:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001298:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	460b      	mov	r3, r1
 80012a0:	4930      	ldr	r1, [pc, #192]	; (8001364 <main+0x478>)
 80012a2:	f007 fe4f 	bl	8008f44 <siprintf>
		dmsg(msg);
 80012a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f938 	bl	8001520 <dmsg>
		vbus = INA219_ReadBusVoltage(&ina2);
 80012b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 f99a 	bl	80025ee <INA219_ReadBusVoltage>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
		vshunt = INA219_ReadShuntVolage(&ina2);
 80012c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 f9cf 	bl	8002668 <INA219_ReadShuntVolage>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		current = INA219_ReadCurrent(&ina2);
 80012d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 f9ad 	bl	8002634 <INA219_ReadCurrent>
 80012da:	4603      	mov	r3, r0
 80012dc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		memset(msg,0,sizeof(msg));
 80012e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f007 f8c9 	bl	8008480 <memset>
		sprintf(msg,"Bus Voltage2: %d  Voltage2: %d  Current2: %d", vbus, vshunt, current);
 80012ee:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80012f2:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 80012f6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80012fa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	460b      	mov	r3, r1
 8001302:	4919      	ldr	r1, [pc, #100]	; (8001368 <main+0x47c>)
 8001304:	f007 fe1e 	bl	8008f44 <siprintf>
		dmsg(msg);
 8001308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f907 	bl	8001520 <dmsg>
//		EEPROM
		memset(msg,0,sizeof(msg));
 8001312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001316:	2264      	movs	r2, #100	; 0x64
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f007 f8b0 	bl	8008480 <memset>
		sprintf(msg,"Memory 0x1:  %d  ", mem);
 8001320:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 8001324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001328:	4910      	ldr	r1, [pc, #64]	; (800136c <main+0x480>)
 800132a:	4618      	mov	r0, r3
 800132c:	f007 fe0a 	bl	8008f44 <siprintf>
		dmsg(msg);
 8001330:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f8f3 	bl	8001520 <dmsg>

		HAL_Delay(1000);
 800133a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133e:	f001 fd5b 	bl	8002df8 <HAL_Delay>
		if (beat==1)
 8001342:	e67b      	b.n	800103c <main+0x150>
 8001344:	20000490 	.word	0x20000490
 8001348:	20000478 	.word	0x20000478
 800134c:	000f4240 	.word	0x000f4240
 8001350:	0800b27c 	.word	0x0800b27c
 8001354:	20000494 	.word	0x20000494
 8001358:	200001f8 	.word	0x200001f8
 800135c:	0800b2a0 	.word	0x0800b2a0
 8001360:	0800b2b8 	.word	0x0800b2b8
 8001364:	0800b2c8 	.word	0x0800b2c8
 8001368:	0800b2f8 	.word	0x0800b2f8
 800136c:	0800b328 	.word	0x0800b328

08001370 <HAL_CAN_TxMailbox0CompleteCallback>:
	}
	return 0;
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	dmsg("CAN Transmitted Mailbox 0");
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 800137a:	f000 f8d1 	bl	8001520 <dmsg>

}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0800b33c 	.word	0x0800b33c

0800138c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	dmsg("CAN Transmitted Mailbox 1");
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 8001396:	f000 f8c3 	bl	8001520 <dmsg>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	0800b358 	.word	0x0800b358

080013a8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	dmsg("CAN Transmitted Mailbox 2");
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 80013b2:	f000 f8b5 	bl	8001520 <dmsg>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	0800b374 	.word	0x0800b374

080013c4 <HAL_CAN_RxFifo0MsgPendingCallback>:

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,can_msg) != HAL_OK)
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f002 fb8c 	bl	8003af0 <HAL_CAN_GetRxMessage>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80013de:	f000 fc7b 	bl	8001cd8 <Error_Handler>
	}
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200004f8 	.word	0x200004f8
 80013f0:	200004dc 	.word	0x200004dc

080013f4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	adc_update=1;
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_ADC_ConvCpltCallback+0x1c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000494 	.word	0x20000494

08001414 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001424:	d119      	bne.n	800145a <HAL_TIM_IC_CaptureCallback+0x46>
	{
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7f1b      	ldrb	r3, [r3, #28]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d152      	bne.n	80014d4 <HAL_TIM_IC_CaptureCallback+0xc0>
		{
			tim_capture[2][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800142e:	2100      	movs	r1, #0
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f006 f8a3 	bl	800757c <HAL_TIM_ReadCapturedValue>
 8001436:	4603      	mov	r3, r0
 8001438:	4a28      	ldr	r2, [pc, #160]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800143a:	6113      	str	r3, [r2, #16]
			if (tim_capture[2][0]!= 0)
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d047      	beq.n	80014d4 <HAL_TIM_IC_CaptureCallback+0xc0>
			{
				tim_capture[2][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001444:	2104      	movs	r1, #4
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f006 f898 	bl	800757c <HAL_TIM_ReadCapturedValue>
 800144c:	4603      	mov	r3, r0
 800144e:	4a23      	ldr	r2, [pc, #140]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001450:	6153      	str	r3, [r2, #20]
				freq_update[2]=1;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001454:	2201      	movs	r2, #1
 8001456:	709a      	strb	r2, [r3, #2]
				tim_capture[0][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
				freq_update[0]=1;
			}
		}
	}
}
 8001458:	e03c      	b.n	80014d4 <HAL_TIM_IC_CaptureCallback+0xc0>
	else if(htim->Instance==TIM5)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d119      	bne.n	8001498 <HAL_TIM_IC_CaptureCallback+0x84>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7f1b      	ldrb	r3, [r3, #28]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d133      	bne.n	80014d4 <HAL_TIM_IC_CaptureCallback+0xc0>
			tim_capture[1][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800146c:	2104      	movs	r1, #4
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f006 f884 	bl	800757c <HAL_TIM_ReadCapturedValue>
 8001474:	4603      	mov	r3, r0
 8001476:	4a19      	ldr	r2, [pc, #100]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001478:	6093      	str	r3, [r2, #8]
			if (tim_capture[1][0]!= 0)
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d028      	beq.n	80014d4 <HAL_TIM_IC_CaptureCallback+0xc0>
				tim_capture[1][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001482:	2100      	movs	r1, #0
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f006 f879 	bl	800757c <HAL_TIM_ReadCapturedValue>
 800148a:	4603      	mov	r3, r0
 800148c:	4a13      	ldr	r2, [pc, #76]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800148e:	60d3      	str	r3, [r2, #12]
				freq_update[1]=1;
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001492:	2201      	movs	r2, #1
 8001494:	705a      	strb	r2, [r3, #1]
}
 8001496:	e01d      	b.n	80014d4 <HAL_TIM_IC_CaptureCallback+0xc0>
	else if(htim->Instance==TIM9)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d118      	bne.n	80014d4 <HAL_TIM_IC_CaptureCallback+0xc0>
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7f1b      	ldrb	r3, [r3, #28]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d114      	bne.n	80014d4 <HAL_TIM_IC_CaptureCallback+0xc0>
			tim_capture[0][0]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80014aa:	2100      	movs	r1, #0
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f006 f865 	bl	800757c <HAL_TIM_ReadCapturedValue>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a09      	ldr	r2, [pc, #36]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014b6:	6013      	str	r3, [r2, #0]
			if (tim_capture[0][0]!= 0)
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d009      	beq.n	80014d4 <HAL_TIM_IC_CaptureCallback+0xc0>
				tim_capture[0][1]= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80014c0:	2104      	movs	r1, #4
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f006 f85a 	bl	800757c <HAL_TIM_ReadCapturedValue>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014cc:	6053      	str	r3, [r2, #4]
				freq_update[0]=1;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000478 	.word	0x20000478
 80014e0:	20000490 	.word	0x20000490
 80014e4:	40000c00 	.word	0x40000c00
 80014e8:	40014000 	.word	0x40014000

080014ec <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	if (HAL_GetTick()- tick >=1000)
 80014f0:	f001 fc76 	bl	8002de0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_SYSTICK_Callback+0x2c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001500:	d307      	bcc.n	8001512 <HAL_SYSTICK_Callback+0x26>
	{
		tick = HAL_GetTick();
 8001502:	f001 fc6d 	bl	8002de0 <HAL_GetTick>
 8001506:	4603      	mov	r3, r0
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_SYSTICK_Callback+0x2c>)
 800150a:	6013      	str	r3, [r2, #0]
		beat=1;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_SYSTICK_Callback+0x30>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
	}
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000474 	.word	0x20000474
 800151c:	20000493 	.word	0x20000493

08001520 <dmsg>:

void dmsg(char *msg)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	char *str = malloc(strlen(msg) + 3);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7fe fe51 	bl	80001d0 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	3303      	adds	r3, #3
 8001532:	4618      	mov	r0, r3
 8001534:	f006 ff8e 	bl	8008454 <malloc>
 8001538:	4603      	mov	r3, r0
 800153a:	60fb      	str	r3, [r7, #12]
	strcpy(str, msg);
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f007 fd20 	bl	8008f84 <strcpy>
	strcat(str, "\r\n");
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7fe fe43 	bl	80001d0 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <dmsg+0x5c>)
 8001554:	8811      	ldrh	r1, [r2, #0]
 8001556:	7892      	ldrb	r2, [r2, #2]
 8001558:	8019      	strh	r1, [r3, #0]
 800155a:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7fe fe37 	bl	80001d0 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	b29a      	uxth	r2, r3
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	68f9      	ldr	r1, [r7, #12]
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <dmsg+0x60>)
 800156e:	f006 fbd2 	bl	8007d16 <HAL_UART_Transmit>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	0800b390 	.word	0x0800b390
 8001580:	20000498 	.word	0x20000498

08001584 <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 800158a:	2301      	movs	r3, #1
 800158c:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank  = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0X0000;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <CAN_Filter_Config+0x48>)
 80015b4:	f002 f9bc 	bl	8003930 <HAL_CAN_ConfigFilter>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 80015be:	f000 fb8b 	bl	8001cd8 <Error_Handler>
	}

}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000240 	.word	0x20000240

080015d0 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2230      	movs	r2, #48	; 0x30
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f006 ff4e 	bl	8008480 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <SystemClock_Config+0xd4>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <SystemClock_Config+0xd4>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <SystemClock_Config+0xd4>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <SystemClock_Config+0xd8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <SystemClock_Config+0xd8>)
 800161a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <SystemClock_Config+0xd8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800162c:	2301      	movs	r3, #1
 800162e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001636:	2302      	movs	r3, #2
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800163e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001640:	2308      	movs	r3, #8
 8001642:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 320;
 8001644:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001648:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800164e:	2304      	movs	r3, #4
 8001650:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	4618      	mov	r0, r3
 8001658:	f004 fdf2 	bl	8006240 <HAL_RCC_OscConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001662:	f000 fb39 	bl	8001cd8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001666:	230f      	movs	r3, #15
 8001668:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166a:	2302      	movs	r3, #2
 800166c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001676:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	2105      	movs	r1, #5
 8001684:	4618      	mov	r0, r3
 8001686:	f005 f853 	bl	8006730 <HAL_RCC_ClockConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001690:	f000 fb22 	bl	8001cd8 <Error_Handler>
	}
	__HAL_RCC_HSI_DISABLE();
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SystemClock_Config+0xdc>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	3750      	adds	r7, #80	; 0x50
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000
 80016ac:	42470000 	.word	0x42470000

080016b0 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]

	htim2.Instance = TIM2;
 80016d2:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <MX_TIM2_Init+0xd0>)
 80016d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80;
 80016da:	4b29      	ldr	r3, [pc, #164]	; (8001780 <MX_TIM2_Init+0xd0>)
 80016dc:	2250      	movs	r2, #80	; 0x50
 80016de:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <MX_TIM2_Init+0xd0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <MX_TIM2_Init+0xd0>)
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <MX_TIM2_Init+0xd0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_TIM2_Init+0xd0>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80016fa:	4821      	ldr	r0, [pc, #132]	; (8001780 <MX_TIM2_Init+0xd0>)
 80016fc:	f005 fbe0 	bl	8006ec0 <HAL_TIM_IC_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 8001706:	f000 fae7 	bl	8001cd8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800170a:	2304      	movs	r3, #4
 800170c:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800170e:	2350      	movs	r3, #80	; 0x50
 8001710:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4816      	ldr	r0, [pc, #88]	; (8001780 <MX_TIM2_Init+0xd0>)
 8001726:	f005 fee7 	bl	80074f8 <HAL_TIM_SlaveConfigSynchro>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 8001730:	f000 fad2 	bl	8001cd8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001738:	2301      	movs	r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM2_Init+0xd0>)
 800174c:	f005 fe38 	bl	80073c0 <HAL_TIM_IC_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0xaa>
	{
		Error_Handler();
 8001756:	f000 fabf 	bl	8001cd8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800175a:	2302      	movs	r3, #2
 800175c:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800175e:	2302      	movs	r3, #2
 8001760:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2204      	movs	r2, #4
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_TIM2_Init+0xd0>)
 800176a:	f005 fe29 	bl	80073c0 <HAL_TIM_IC_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM2_Init+0xc8>
	{
		Error_Handler();
 8001774:	f000 fab0 	bl	8001cd8 <Error_Handler>
	}
}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000039c 	.word	0x2000039c

08001784 <MX_TIM5_Init>:

static void MX_TIM5_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]

	htim5.Instance = TIM5;
 80017a6:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <MX_TIM5_Init+0xd0>)
 80017a8:	4a2b      	ldr	r2, [pc, #172]	; (8001858 <MX_TIM5_Init+0xd4>)
 80017aa:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 80;
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_TIM5_Init+0xd0>)
 80017ae:	2250      	movs	r2, #80	; 0x50
 80017b0:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b28      	ldr	r3, [pc, #160]	; (8001854 <MX_TIM5_Init+0xd0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 0xFFFFFFFF;
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <MX_TIM5_Init+0xd0>)
 80017ba:	f04f 32ff 	mov.w	r2, #4294967295
 80017be:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <MX_TIM5_Init+0xd0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <MX_TIM5_Init+0xd0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80017cc:	4821      	ldr	r0, [pc, #132]	; (8001854 <MX_TIM5_Init+0xd0>)
 80017ce:	f005 fb77 	bl	8006ec0 <HAL_TIM_IC_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM5_Init+0x58>
	{
		Error_Handler();
 80017d8:	f000 fa7e 	bl	8001cd8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80017dc:	2304      	movs	r3, #4
 80017de:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80017e0:	2360      	movs	r3, #96	; 0x60
 80017e2:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4817      	ldr	r0, [pc, #92]	; (8001854 <MX_TIM5_Init+0xd0>)
 80017f8:	f005 fe7e 	bl	80074f8 <HAL_TIM_SlaveConfigSynchro>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM5_Init+0x82>
	{
		Error_Handler();
 8001802:	f000 fa69 	bl	8001cd8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001806:	2302      	movs	r3, #2
 8001808:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800180a:	2302      	movs	r3, #2
 800180c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2200      	movs	r2, #0
 800181a:	4619      	mov	r1, r3
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <MX_TIM5_Init+0xd0>)
 800181e:	f005 fdcf 	bl	80073c0 <HAL_TIM_IC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM5_Init+0xa8>
	{
		Error_Handler();
 8001828:	f000 fa56 	bl	8001cd8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001830:	2301      	movs	r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2204      	movs	r2, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <MX_TIM5_Init+0xd0>)
 800183c:	f005 fdc0 	bl	80073c0 <HAL_TIM_IC_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM5_Init+0xc6>
	{
		Error_Handler();
 8001846:	f000 fa47 	bl	8001cd8 <Error_Handler>
	}
}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200003e4 	.word	0x200003e4
 8001858:	40000c00 	.word	0x40000c00

0800185c <MX_TIM9_Init>:

static void MX_TIM9_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]

	htim9.Instance = TIM9;
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <MX_TIM9_Init+0xd0>)
 8001880:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <MX_TIM9_Init+0xd4>)
 8001882:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 160;
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <MX_TIM9_Init+0xd0>)
 8001886:	22a0      	movs	r2, #160	; 0xa0
 8001888:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <MX_TIM9_Init+0xd0>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 0xFFFF;
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <MX_TIM9_Init+0xd0>)
 8001892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001896:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <MX_TIM9_Init+0xd0>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189e:	4b23      	ldr	r3, [pc, #140]	; (800192c <MX_TIM9_Init+0xd0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80018a4:	4821      	ldr	r0, [pc, #132]	; (800192c <MX_TIM9_Init+0xd0>)
 80018a6:	f005 fb0b 	bl	8006ec0 <HAL_TIM_IC_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM9_Init+0x58>
	{
		Error_Handler();
 80018b0:	f000 fa12 	bl	8001cd8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80018b4:	2304      	movs	r3, #4
 80018b6:	617b      	str	r3, [r7, #20]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80018b8:	2350      	movs	r3, #80	; 0x50
 80018ba:	61bb      	str	r3, [r7, #24]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerFilter = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4817      	ldr	r0, [pc, #92]	; (800192c <MX_TIM9_Init+0xd0>)
 80018d0:	f005 fe12 	bl	80074f8 <HAL_TIM_SlaveConfigSynchro>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM9_Init+0x82>
	{
		Error_Handler();
 80018da:	f000 f9fd 	bl	8001cd8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018e2:	2301      	movs	r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	4619      	mov	r1, r3
 80018f4:	480d      	ldr	r0, [pc, #52]	; (800192c <MX_TIM9_Init+0xd0>)
 80018f6:	f005 fd63 	bl	80073c0 <HAL_TIM_IC_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM9_Init+0xa8>
	{
		Error_Handler();
 8001900:	f000 f9ea 	bl	8001cd8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001904:	2302      	movs	r3, #2
 8001906:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001908:	2302      	movs	r3, #2
 800190a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2204      	movs	r2, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <MX_TIM9_Init+0xd0>)
 8001914:	f005 fd54 	bl	80073c0 <HAL_TIM_IC_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM9_Init+0xc6>
	{
		Error_Handler();
 800191e:	f000 f9db 	bl	8001cd8 <Error_Handler>
	}
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000042c 	.word	0x2000042c
 8001930:	40014000 	.word	0x40014000

08001934 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
	hadc1.Instance = ADC1;
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <MX_ADC1_Init+0x98>)
 8001948:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <MX_ADC1_Init+0x9c>)
 800194a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <MX_ADC1_Init+0x98>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <MX_ADC1_Init+0x98>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <MX_ADC1_Init+0x98>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_ADC1_Init+0x98>)
 8001960:	2200      	movs	r2, #0
 8001962:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <MX_ADC1_Init+0x98>)
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <MX_ADC1_Init+0x98>)
 800196e:	2200      	movs	r2, #0
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_ADC1_Init+0x98>)
 8001974:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <MX_ADC1_Init+0xa0>)
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_ADC1_Init+0x98>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_ADC1_Init+0x98>)
 8001980:	2201      	movs	r2, #1
 8001982:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_ADC1_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_ADC1_Init+0x98>)
 800198e:	2201      	movs	r2, #1
 8001990:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001992:	480e      	ldr	r0, [pc, #56]	; (80019cc <MX_ADC1_Init+0x98>)
 8001994:	f001 fa54 	bl	8002e40 <HAL_ADC_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 800199e:	f000 f99b 	bl	8001cd8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_3;
 80019a2:	2303      	movs	r3, #3
 80019a4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <MX_ADC1_Init+0x98>)
 80019b4:	f001 fc98 	bl	80032e8 <HAL_ADC_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 80019be:	f000 f98b 	bl	8001cd8 <Error_Handler>
	}
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200001f8 	.word	0x200001f8
 80019d0:	40012000 	.word	0x40012000
 80019d4:	0f000001 	.word	0x0f000001

080019d8 <MX_CAN1_Init>:

static void MX_CAN1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_CAN1_Init+0x64>)
 80019de:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <MX_CAN1_Init+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 10;
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <MX_CAN1_Init+0x64>)
 80019e4:	220a      	movs	r2, #10
 80019e6:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MX_CAN1_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <MX_CAN1_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_CAN1_Init+0x64>)
 80019f6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80019fa:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_CAN1_Init+0x64>)
 80019fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a02:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <MX_CAN1_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_CAN1_Init+0x64>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <MX_CAN1_Init+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_CAN1_Init+0x64>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <MX_CAN1_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_CAN1_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <MX_CAN1_Init+0x64>)
 8001a2a:	f001 fe85 	bl	8003738 <HAL_CAN_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001a34:	f000 f950 	bl	8001cd8 <Error_Handler>
	}
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000240 	.word	0x20000240
 8001a40:	40006400 	.word	0x40006400

08001a44 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <MX_I2C2_Init+0x54>)
 8001a4c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <MX_I2C2_Init+0x58>)
 8001a52:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a66:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <MX_I2C2_Init+0x50>)
 8001a82:	f002 fe7b 	bl	800477c <HAL_I2C_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001a8c:	f000 f924 	bl	8001cd8 <Error_Handler>
	}

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000268 	.word	0x20000268
 8001a98:	40005800 	.word	0x40005800
 8001a9c:	000186a0 	.word	0x000186a0

08001aa0 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001aa6:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <MX_SPI1_Init+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ab0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001aec:	220a      	movs	r2, #10
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001af2:	f005 f83d 	bl	8006b70 <HAL_SPI_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001afc:	f000 f8ec 	bl	8001cd8 <Error_Handler>
	}

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200002bc 	.word	0x200002bc
 8001b08:	40013000 	.word	0x40013000

08001b0c <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <MX_USART1_UART_Init+0x50>)
 8001b14:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b1c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b32:	220c      	movs	r2, #12
 8001b34:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b44:	f006 f89a 	bl	8007c7c <HAL_UART_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001b4e:	f000 f8c3 	bl	8001cd8 <Error_Handler>
	}

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000314 	.word	0x20000314
 8001b5c:	40011000 	.word	0x40011000

08001b60 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <MX_USART3_UART_Init+0x50>)
 8001b68:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b70:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_USART3_UART_Init+0x4c>)
 8001b98:	f006 f870 	bl	8007c7c <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001ba2:	f000 f899 	bl	8001cd8 <Error_Handler>
	}

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000358 	.word	0x20000358
 8001bb0:	40004800 	.word	0x40004800

08001bb4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a3d      	ldr	r2, [pc, #244]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a36      	ldr	r2, [pc, #216]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a2f      	ldr	r2, [pc, #188]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOC, PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED|PINC_CAN_STB|PINC_HEART, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f242 211e 	movw	r1, #8734	; 0x221e
 8001c24:	4829      	ldr	r0, [pc, #164]	; (8001ccc <MX_GPIO_Init+0x118>)
 8001c26:	f002 fd75 	bl	8004714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, PINC_SPI_SSA|PINC_SPI_SSB|PINC_SPI_SSV|PINC_SPI_SST, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001c30:	4826      	ldr	r0, [pc, #152]	; (8001ccc <MX_GPIO_Init+0x118>)
 8001c32:	f002 fd6f 	bl	8004714 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = PINC_RLED|PINC_GLED|PINC_BLED|PINC_YLED|PINC_CAN_STB|
 8001c36:	f242 33fe 	movw	r3, #9214	; 0x23fe
 8001c3a:	60fb      	str	r3, [r7, #12]
					  PINC_HEART|PINC_SPI_SSA|PINC_SPI_SSB|PINC_SPI_SSV|PINC_SPI_SST;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	481f      	ldr	r0, [pc, #124]	; (8001ccc <MX_GPIO_Init+0x118>)
 8001c50:	f002 fbac 	bl	80043ac <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINC_SWITCH;
 8001c54:	2301      	movs	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	4619      	mov	r1, r3
 8001c66:	4819      	ldr	r0, [pc, #100]	; (8001ccc <MX_GPIO_Init+0x118>)
 8001c68:	f002 fba0 	bl	80043ac <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINA_IC_FREQ3|PINA_IC_FREQ2|PINA_IC_FREQ1;
 8001c6c:	2307      	movs	r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <MX_GPIO_Init+0x11c>)
 8001c88:	f002 fb90 	bl	80043ac <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINB_EN;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <MX_GPIO_Init+0x120>)
 8001ca4:	f002 fb82 	bl	80043ac <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PINB_STATE;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	; (8001cd4 <MX_GPIO_Init+0x120>)
 8001cbc:	f002 fb76 	bl	80043ac <HAL_GPIO_Init>

}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400

08001cd8 <Error_Handler>:

void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
	__disable_irq();
	while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <Error_Handler+0x8>
	...

08001ce4 <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001d22:	2005      	movs	r0, #5
 8001d24:	f002 fad8 	bl	80042d8 <HAL_NVIC_SetPriorityGrouping>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08e      	sub	sp, #56	; 0x38
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d134      	bne.n	8001dc0 <HAL_TIM_IC_MspInit+0x8c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
 8001d5a:	4b55      	ldr	r3, [pc, #340]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a54      	ldr	r2, [pc, #336]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a4d      	ldr	r2, [pc, #308]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PINA_IC_FREQ3;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	4619      	mov	r1, r3
 8001da8:	4842      	ldr	r0, [pc, #264]	; (8001eb4 <HAL_TIM_IC_MspInit+0x180>)
 8001daa:	f002 faff 	bl	80043ac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2102      	movs	r1, #2
 8001db2:	201c      	movs	r0, #28
 8001db4:	f002 fa9b 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001db8:	201c      	movs	r0, #28
 8001dba:	f002 fab4 	bl	8004326 <HAL_NVIC_EnableIRQ>
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  }

}
 8001dbe:	e072      	b.n	8001ea6 <HAL_TIM_IC_MspInit+0x172>
  else if(htim_ic->Instance==TIM5)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a3c      	ldr	r2, [pc, #240]	; (8001eb8 <HAL_TIM_IC_MspInit+0x184>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d134      	bne.n	8001e34 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a37      	ldr	r2, [pc, #220]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a30      	ldr	r2, [pc, #192]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PINA_IC_FREQ2;
 8001e02:	2302      	movs	r3, #2
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e12:	2302      	movs	r3, #2
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4825      	ldr	r0, [pc, #148]	; (8001eb4 <HAL_TIM_IC_MspInit+0x180>)
 8001e1e:	f002 fac5 	bl	80043ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2103      	movs	r1, #3
 8001e26:	2032      	movs	r0, #50	; 0x32
 8001e28:	f002 fa61 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e2c:	2032      	movs	r0, #50	; 0x32
 8001e2e:	f002 fa7a 	bl	8004326 <HAL_NVIC_EnableIRQ>
}
 8001e32:	e038      	b.n	8001ea6 <HAL_TIM_IC_MspInit+0x172>
  else if(htim_ic->Instance==TIM9)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <HAL_TIM_IC_MspInit+0x188>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d133      	bne.n	8001ea6 <HAL_TIM_IC_MspInit+0x172>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_TIM_IC_MspInit+0x17c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINA_IC_FREQ1;
 8001e76:	2304      	movs	r3, #4
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001e86:	2303      	movs	r3, #3
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4808      	ldr	r0, [pc, #32]	; (8001eb4 <HAL_TIM_IC_MspInit+0x180>)
 8001e92:	f002 fa8b 	bl	80043ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2103      	movs	r1, #3
 8001e9a:	2018      	movs	r0, #24
 8001e9c:	f002 fa27 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ea0:	2018      	movs	r0, #24
 8001ea2:	f002 fa40 	bl	8004326 <HAL_NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3738      	adds	r7, #56	; 0x38
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40014000 	.word	0x40014000

08001ec0 <HAL_ADC_MspInit>:
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  }
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <HAL_ADC_MspInit+0x8c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d12f      	bne.n	8001f42 <HAL_ADC_MspInit+0x82>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_ADC_MspInit+0x90>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <HAL_ADC_MspInit+0x90>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <HAL_ADC_MspInit+0x90>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <HAL_ADC_MspInit+0x90>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <HAL_ADC_MspInit+0x90>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_ADC_MspInit+0x90>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = PINA_ADC_VMON;
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4809      	ldr	r0, [pc, #36]	; (8001f54 <HAL_ADC_MspInit+0x94>)
 8001f2e:	f002 fa3d 	bl	80043ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2102      	movs	r1, #2
 8001f36:	2012      	movs	r0, #18
 8001f38:	f002 f9d9 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f3c:	2012      	movs	r0, #18
 8001f3e:	f002 f9f2 	bl	8004326 <HAL_NVIC_EnableIRQ>
  }

}
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40012000 	.word	0x40012000
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000

08001f58 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a29      	ldr	r2, [pc, #164]	; (800201c <HAL_CAN_MspInit+0xc4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d14c      	bne.n	8002014 <HAL_CAN_MspInit+0xbc>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_CAN_MspInit+0xc8>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a27      	ldr	r2, [pc, #156]	; (8002020 <HAL_CAN_MspInit+0xc8>)
 8001f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_CAN_MspInit+0xc8>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_CAN_MspInit+0xc8>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_CAN_MspInit+0xc8>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_CAN_MspInit+0xc8>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PINB_CAN_RX|PINB_CAN_TX;
 8001fb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fc4:	2309      	movs	r3, #9
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4815      	ldr	r0, [pc, #84]	; (8002024 <HAL_CAN_MspInit+0xcc>)
 8001fd0:	f002 f9ec 	bl	80043ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	2013      	movs	r0, #19
 8001fda:	f002 f988 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001fde:	2013      	movs	r0, #19
 8001fe0:	f002 f9a1 	bl	8004326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	2014      	movs	r0, #20
 8001fea:	f002 f980 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001fee:	2014      	movs	r0, #20
 8001ff0:	f002 f999 	bl	8004326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	2015      	movs	r0, #21
 8001ffa:	f002 f978 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001ffe:	2015      	movs	r0, #21
 8002000:	f002 f991 	bl	8004326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2102      	movs	r1, #2
 8002008:	2016      	movs	r0, #22
 800200a:	f002 f970 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800200e:	2016      	movs	r0, #22
 8002010:	f002 f989 	bl	8004326 <HAL_NVIC_EnableIRQ>
  }

}
 8002014:	bf00      	nop
 8002016:	3728      	adds	r7, #40	; 0x28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40006400 	.word	0x40006400
 8002020:	40023800 	.word	0x40023800
 8002024:	40020400 	.word	0x40020400

08002028 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	; (80020ac <HAL_I2C_MspInit+0x84>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d12c      	bne.n	80020a4 <HAL_I2C_MspInit+0x7c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_I2C_MspInit+0x88>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_I2C_MspInit+0x88>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_I2C_MspInit+0x88>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = PINB_I2C_SCL|PINB_12C_SDA;
 8002066:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206c:	2312      	movs	r3, #18
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002074:	2302      	movs	r3, #2
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002078:	2304      	movs	r3, #4
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <HAL_I2C_MspInit+0x8c>)
 8002084:	f002 f992 	bl	80043ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_I2C_MspInit+0x88>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_I2C_MspInit+0x88>)
 8002092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002096:	6413      	str	r3, [r2, #64]	; 0x40
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_I2C_MspInit+0x88>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
//    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
//    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 2, 0);
//    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  }

}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	; 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40005800 	.word	0x40005800
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020400 	.word	0x40020400

080020b8 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_SPI_MspInit+0x94>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d133      	bne.n	8002142 <HAL_SPI_MspInit+0x8a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_SPI_MspInit+0x98>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_SPI_MspInit+0x98>)
 80020e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_SPI_MspInit+0x98>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_SPI_MspInit+0x98>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_SPI_MspInit+0x98>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_SPI_MspInit+0x98>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PINA_SPI_SCK|PINA_SPI_MISO|PINA_SPI_MOSI;
 8002112:	23e0      	movs	r3, #224	; 0xe0
 8002114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211e:	2302      	movs	r3, #2
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002122:	2305      	movs	r3, #5
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <HAL_SPI_MspInit+0x9c>)
 800212e:	f002 f93d 	bl	80043ac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2102      	movs	r1, #2
 8002136:	2023      	movs	r0, #35	; 0x23
 8002138:	f002 f8d9 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800213c:	2023      	movs	r0, #35	; 0x23
 800213e:	f002 f8f2 	bl	8004326 <HAL_NVIC_EnableIRQ>
  }

}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	; 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40013000 	.word	0x40013000
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000

08002158 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	; 0x30
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a32      	ldr	r2, [pc, #200]	; (8002240 <HAL_UART_MspInit+0xe8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d12c      	bne.n	80021d4 <HAL_UART_MspInit+0x7c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_UART_MspInit+0xec>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a30      	ldr	r2, [pc, #192]	; (8002244 <HAL_UART_MspInit+0xec>)
 8002184:	f043 0310 	orr.w	r3, r3, #16
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b2e      	ldr	r3, [pc, #184]	; (8002244 <HAL_UART_MspInit+0xec>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_UART_MspInit+0xec>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a29      	ldr	r2, [pc, #164]	; (8002244 <HAL_UART_MspInit+0xec>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_UART_MspInit+0xec>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PINB_UART1_TX|PINB_UART1_RX;
 80021b2:	23c0      	movs	r3, #192	; 0xc0
 80021b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021c2:	2307      	movs	r3, #7
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	481e      	ldr	r0, [pc, #120]	; (8002248 <HAL_UART_MspInit+0xf0>)
 80021ce:	f002 f8ed 	bl	80043ac <HAL_GPIO_Init>
    /* USART3 interrupt Init */
//    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
//    HAL_NVIC_EnableIRQ(USART3_IRQn);
  }

}
 80021d2:	e031      	b.n	8002238 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1c      	ldr	r2, [pc, #112]	; (800224c <HAL_UART_MspInit+0xf4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d12c      	bne.n	8002238 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	4b18      	ldr	r3, [pc, #96]	; (8002244 <HAL_UART_MspInit+0xec>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_UART_MspInit+0xec>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_UART_MspInit+0xec>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_UART_MspInit+0xec>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_UART_MspInit+0xec>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <HAL_UART_MspInit+0xec>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PINC_UART2_RX|PINC_UART2_TX;
 8002216:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002228:	2307      	movs	r3, #7
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	4619      	mov	r1, r3
 8002232:	4807      	ldr	r0, [pc, #28]	; (8002250 <HAL_UART_MspInit+0xf8>)
 8002234:	f002 f8ba 	bl	80043ac <HAL_GPIO_Init>
}
 8002238:	bf00      	nop
 800223a:	3730      	adds	r7, #48	; 0x30
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40011000 	.word	0x40011000
 8002244:	40023800 	.word	0x40023800
 8002248:	40020400 	.word	0x40020400
 800224c:	40004800 	.word	0x40004800
 8002250:	40020800 	.word	0x40020800

08002254 <NMI_Handler>:
extern TIM_HandleTypeDef htim9;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;

void NMI_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  while (1)
 8002258:	e7fe      	b.n	8002258 <NMI_Handler+0x4>

0800225a <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0

  while (1)
 800225e:	e7fe      	b.n	800225e <HardFault_Handler+0x4>

08002260 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  while (1)
 8002264:	e7fe      	b.n	8002264 <MemManage_Handler+0x4>

08002266 <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  while (1)
 800226a:	e7fe      	b.n	800226a <BusFault_Handler+0x4>

0800226c <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  while (1)
 8002270:	e7fe      	b.n	8002270 <UsageFault_Handler+0x4>

08002272 <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <PendSV_Handler>:

void PendSV_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80022a0:	f000 fd8a 	bl	8002db8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80022a4:	f002 f859 	bl	800435a <HAL_SYSTICK_IRQHandler>
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}

080022ac <TIM1_BRK_TIM9_IRQHandler>:

void TIM1_BRK_TIM9_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim9);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80022b2:	f004 ff7d 	bl	80071b0 <HAL_TIM_IRQHandler>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000042c 	.word	0x2000042c

080022c0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM2_IRQHandler+0x10>)
 80022c6:	f004 ff73 	bl	80071b0 <HAL_TIM_IRQHandler>
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000039c 	.word	0x2000039c

080022d4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim5);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <TIM5_IRQHandler+0x10>)
 80022da:	f004 ff69 	bl	80071b0 <HAL_TIM_IRQHandler>
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200003e4 	.word	0x200003e4

080022e8 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <ADC_IRQHandler+0x10>)
 80022ee:	f000 fec9 	bl	8003084 <HAL_ADC_IRQHandler>
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200001f8 	.word	0x200001f8

080022fc <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <CAN1_TX_IRQHandler+0x10>)
 8002302:	f001 fd07 	bl	8003d14 <HAL_CAN_IRQHandler>
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000240 	.word	0x20000240

08002310 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <CAN1_RX0_IRQHandler+0x10>)
 8002316:	f001 fcfd 	bl	8003d14 <HAL_CAN_IRQHandler>
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000240 	.word	0x20000240

08002324 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <CAN1_RX1_IRQHandler+0x10>)
 800232a:	f001 fcf3 	bl	8003d14 <HAL_CAN_IRQHandler>
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000240 	.word	0x20000240

08002338 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  HAL_CAN_IRQHandler(&hcan1);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <CAN1_SCE_IRQHandler+0x10>)
 800233e:	f001 fce9 	bl	8003d14 <HAL_CAN_IRQHandler>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000240 	.word	0x20000240

0800234c <SPI1_IRQHandler>:
//{
//  HAL_I2C_ER_IRQHandler(&hi2c2);
//}

void SPI1_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <SPI1_IRQHandler+0x10>)
 8002352:	f004 fc97 	bl	8006c84 <HAL_SPI_IRQHandler>
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200002bc 	.word	0x200002bc

08002360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
	return 1;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <_kill>:

int _kill(int pid, int sig)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800237a:	f006 f841 	bl	8008400 <__errno>
 800237e:	4603      	mov	r3, r0
 8002380:	2216      	movs	r2, #22
 8002382:	601a      	str	r2, [r3, #0]
	return -1;
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_exit>:

void _exit (int status)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ffe7 	bl	8002370 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023a2:	e7fe      	b.n	80023a2 <_exit+0x12>

080023a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	e00a      	b.n	80023cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023b6:	f3af 8000 	nop.w
 80023ba:	4601      	mov	r1, r0
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	60ba      	str	r2, [r7, #8]
 80023c2:	b2ca      	uxtb	r2, r1
 80023c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	dbf0      	blt.n	80023b6 <_read+0x12>
	}

return len;
 80023d4:	687b      	ldr	r3, [r7, #4]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e009      	b.n	8002404 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	60ba      	str	r2, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	dbf1      	blt.n	80023f0 <_write+0x12>
	}
	return len;
 800240c:	687b      	ldr	r3, [r7, #4]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <_close>:

int _close(int file)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
	return -1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800243e:	605a      	str	r2, [r3, #4]
	return 0;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <_isatty>:

int _isatty(int file)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
	return 1;
 8002456:	2301      	movs	r3, #1
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
	return 0;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <_sbrk+0x5c>)
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <_sbrk+0x60>)
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <_sbrk+0x64>)
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <_sbrk+0x68>)
 80024a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d207      	bcs.n	80024c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b0:	f005 ffa6 	bl	8008400 <__errno>
 80024b4:	4603      	mov	r3, r0
 80024b6:	220c      	movs	r2, #12
 80024b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	e009      	b.n	80024d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <_sbrk+0x64>)
 80024d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20020000 	.word	0x20020000
 80024e0:	00000400 	.word	0x00000400
 80024e4:	20000500 	.word	0x20000500
 80024e8:	20000528 	.word	0x20000528

080024ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <SystemInit+0x20>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <SystemInit+0x20>)
 80024f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002548 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002514:	480d      	ldr	r0, [pc, #52]	; (800254c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002516:	490e      	ldr	r1, [pc, #56]	; (8002550 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002518:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800251a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800251c:	e002      	b.n	8002524 <LoopCopyDataInit>

0800251e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002522:	3304      	adds	r3, #4

08002524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002528:	d3f9      	bcc.n	800251e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800252c:	4c0b      	ldr	r4, [pc, #44]	; (800255c <LoopFillZerobss+0x26>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002530:	e001      	b.n	8002536 <LoopFillZerobss>

08002532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002534:	3204      	adds	r2, #4

08002536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002538:	d3fb      	bcc.n	8002532 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800253a:	f7ff ffd7 	bl	80024ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800253e:	f005 ff65 	bl	800840c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002542:	f7fe fcd3 	bl	8000eec <main>
  bx  lr    
 8002546:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002548:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800254c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002550:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002554:	0800b794 	.word	0x0800b794
  ldr r2, =_sbss
 8002558:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800255c:	20000528 	.word	0x20000528

08002560 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002560:	e7fe      	b.n	8002560 <CAN2_RX0_IRQHandler>

08002562 <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b088      	sub	sp, #32
 8002566:	af04      	add	r7, sp, #16
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	b29a      	uxth	r2, r3
 8002576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257a:	9302      	str	r3, [sp, #8]
 800257c:	2302      	movs	r3, #2
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2301      	movs	r3, #1
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	f002 fe59 	bl	8005240 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 800258e:	7b3b      	ldrb	r3, [r7, #12]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	b21a      	sxth	r2, r3
 8002594:	7b7b      	ldrb	r3, [r7, #13]
 8002596:	b21b      	sxth	r3, r3
 8002598:	4313      	orrs	r3, r2
 800259a:	b21b      	sxth	r3, r3
 800259c:	b29b      	uxth	r3, r3
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b088      	sub	sp, #32
 80025aa:	af04      	add	r7, sp, #16
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	70fb      	strb	r3, [r7, #3]
 80025b2:	4613      	mov	r3, r2
 80025b4:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80025b6:	883b      	ldrh	r3, [r7, #0]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80025c0:	883b      	ldrh	r3, [r7, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	2302      	movs	r3, #2
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2301      	movs	r3, #1
 80025e0:	2180      	movs	r1, #128	; 0x80
 80025e2:	f002 fd33 	bl	800504c <HAL_I2C_Mem_Write>
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 80025f6:	2102      	movs	r1, #2
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ffb2 	bl	8002562 <Read16>
 80025fe:	4603      	mov	r3, r0
 8002600:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8002602:	89fb      	ldrh	r3, [r7, #14]
 8002604:	08db      	lsrs	r3, r3, #3
 8002606:	b29b      	uxth	r3, r3
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	b29b      	uxth	r3, r3

}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 800261c:	2104      	movs	r1, #4
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ff9f 	bl	8002562 <Read16>
 8002624:	4603      	mov	r3, r0
 8002626:	81fb      	strh	r3, [r7, #14]

	return (result );
 8002628:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ffe9 	bl	8002614 <INA219_ReadCurrent_raw>
 8002642:	4603      	mov	r3, r0
 8002644:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8002646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <INA219_ReadCurrent+0x2c>)
 800264c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002650:	fb93 f3f2 	sdiv	r3, r3, r2
 8002654:	b21b      	sxth	r3, r3
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000506 	.word	0x20000506
 8002664:	00000000 	.word	0x00000000

08002668 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8002670:	2101      	movs	r1, #1
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ff75 	bl	8002562 <Read16>
 8002678:	4603      	mov	r3, r0
 800267a:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 800267c:	89fb      	ldrh	r3, [r7, #14]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd ff50 	bl	8000524 <__aeabi_i2d>
 8002684:	a308      	add	r3, pc, #32	; (adr r3, 80026a8 <INA219_ReadShuntVolage+0x40>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	f7fd ffb5 	bl	80005f8 <__aeabi_dmul>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	f7fe fa87 	bl	8000ba8 <__aeabi_d2uiz>
 800269a:	4603      	mov	r3, r0
 800269c:	b29b      	uxth	r3, r3
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	47ae147b 	.word	0x47ae147b
 80026ac:	3f847ae1 	.word	0x3f847ae1

080026b0 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80026b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026bc:	2100      	movs	r1, #0
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ff71 	bl	80025a6 <Write16>
	HAL_Delay(1);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f000 fb97 	bl	8002df8 <HAL_Delay>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	461a      	mov	r2, r3
 80026e2:	2105      	movs	r1, #5
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff5e 	bl	80025a6 <Write16>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	461a      	mov	r2, r3
 8002702:	2100      	movs	r1, #0
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff4e 	bl	80025a6 <Write16>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 800271c:	f643 139f 	movw	r3, #14751	; 0x399f
 8002720:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <INA219_setCalibration_32V_2A+0x40>)
 8002724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002728:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <INA219_setCalibration_32V_2A+0x44>)
 800272c:	220a      	movs	r2, #10
 800272e:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <INA219_setCalibration_32V_2A+0x48>)
 8002732:	2202      	movs	r2, #2
 8002734:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <INA219_setCalibration_32V_2A+0x40>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	4619      	mov	r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ffc8 	bl	80026d2 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8002742:	89fb      	ldrh	r3, [r7, #14]
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffd3 	bl	80026f2 <INA219_setConfig>
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000504 	.word	0x20000504
 8002758:	20000506 	.word	0x20000506
 800275c:	20000508 	.word	0x20000508

08002760 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	4613      	mov	r3, r2
 800276c:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	79fa      	ldrb	r2, [r7, #7]
 8002778:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <INA219_Init+0x5c>)
 800277c:	2200      	movs	r2, #0
 800277e:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <INA219_Init+0x60>)
 8002782:	2200      	movs	r2, #0
 8002784:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	b29b      	uxth	r3, r3
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	b299      	uxth	r1, r3
 800278e:	2302      	movs	r3, #2
 8002790:	2203      	movs	r2, #3
 8002792:	68b8      	ldr	r0, [r7, #8]
 8002794:	f002 ff7a 	bl	800568c <HAL_I2C_IsDeviceReady>
 8002798:	4603      	mov	r3, r0
 800279a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d107      	bne.n	80027b2 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff ff84 	bl	80026b0 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff ffb3 	bl	8002714 <INA219_setCalibration_32V_2A>

		return 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <INA219_Init+0x54>
	}

	else
	{
		return 0;
 80027b2:	2300      	movs	r3, #0
	}
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000506 	.word	0x20000506
 80027c0:	20000508 	.word	0x20000508

080027c4 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 80027cc:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <DS3231_Init+0x30>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f000 f8a9 	bl	800292a <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 80027d8:	2000      	movs	r0, #0
 80027da:	f000 f86d 	bl	80028b8 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 80027de:	f000 f8c6 	bl	800296e <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 80027e2:	f000 f88c 	bl	80028fe <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f000 f846 	bl	8002878 <DS3231_SetInterruptMode>
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	2000050c 	.word	0x2000050c

080027f8 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	4603      	mov	r3, r0
 8002800:	460a      	mov	r2, r1
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	4613      	mov	r3, r2
 8002806:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	733b      	strb	r3, [r7, #12]
 800280c:	79bb      	ldrb	r3, [r7, #6]
 800280e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <DS3231_SetRegByte+0x38>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	f107 020c 	add.w	r2, r7, #12
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2302      	movs	r3, #2
 8002820:	21d0      	movs	r1, #208	; 0xd0
 8002822:	f002 f8ef 	bl	8004a04 <HAL_I2C_Master_Transmit>
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000050c 	.word	0x2000050c

08002834 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af02      	add	r7, sp, #8
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <DS3231_GetRegByte+0x40>)
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	1dfa      	adds	r2, r7, #7
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2301      	movs	r3, #1
 800284c:	21d0      	movs	r1, #208	; 0xd0
 800284e:	f002 f8d9 	bl	8004a04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <DS3231_GetRegByte+0x40>)
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	f107 020f 	add.w	r2, r7, #15
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2301      	movs	r3, #1
 8002862:	21d0      	movs	r1, #208	; 0xd0
 8002864:	f002 f9cc 	bl	8004c00 <HAL_I2C_Master_Receive>
	return val;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000050c 	.word	0x2000050c

08002878 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002882:	200e      	movs	r0, #14
 8002884:	f7ff ffd6 	bl	8002834 <DS3231_GetRegByte>
 8002888:	4603      	mov	r3, r0
 800288a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800288c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	b25a      	sxtb	r2, r3
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	b25b      	sxtb	r3, r3
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	4313      	orrs	r3, r2
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4619      	mov	r1, r3
 80028aa:	200e      	movs	r0, #14
 80028ac:	f7ff ffa4 	bl	80027f8 <DS3231_SetRegByte>
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80028c2:	200e      	movs	r0, #14
 80028c4:	f7ff ffb6 	bl	8002834 <DS3231_GetRegByte>
 80028c8:	4603      	mov	r3, r0
 80028ca:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80028cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d0:	f023 0302 	bic.w	r3, r3, #2
 80028d4:	b25a      	sxtb	r2, r3
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	b25b      	sxtb	r3, r3
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b25b      	sxtb	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	4619      	mov	r1, r3
 80028ea:	200e      	movs	r0, #14
 80028ec:	f7ff ff84 	bl	80027f8 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80028f0:	2001      	movs	r0, #1
 80028f2:	f7ff ffc1 	bl	8002878 <DS3231_SetInterruptMode>
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8002904:	200f      	movs	r0, #15
 8002906:	f7ff ff95 	bl	8002834 <DS3231_GetRegByte>
 800290a:	4603      	mov	r3, r0
 800290c:	f023 0302 	bic.w	r3, r3, #2
 8002910:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f023 0302 	bic.w	r3, r3, #2
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4619      	mov	r1, r3
 800291c:	200f      	movs	r0, #15
 800291e:	f7ff ff6b 	bl	80027f8 <DS3231_SetRegByte>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002934:	200e      	movs	r0, #14
 8002936:	f7ff ff7d 	bl	8002834 <DS3231_GetRegByte>
 800293a:	4603      	mov	r3, r0
 800293c:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	b25a      	sxtb	r2, r3
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	b25b      	sxtb	r3, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	b25b      	sxtb	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	4619      	mov	r1, r3
 800295a:	200e      	movs	r0, #14
 800295c:	f7ff ff4c 	bl	80027f8 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002960:	2001      	movs	r0, #1
 8002962:	f7ff ff89 	bl	8002878 <DS3231_SetInterruptMode>
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002974:	200f      	movs	r0, #15
 8002976:	f7ff ff5d 	bl	8002834 <DS3231_GetRegByte>
 800297a:	4603      	mov	r3, r0
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4619      	mov	r1, r3
 800298c:	200f      	movs	r0, #15
 800298e:	f7ff ff33 	bl	80027f8 <DS3231_SetRegByte>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 80029a0:	2006      	movs	r0, #6
 80029a2:	f7ff ff47 	bl	8002834 <DS3231_GetRegByte>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f91a 	bl	8002be2 <DS3231_DecodeBCD>
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 80029b2:	2005      	movs	r0, #5
 80029b4:	f7ff ff3e 	bl	8002834 <DS3231_GetRegByte>
 80029b8:	4603      	mov	r3, r0
 80029ba:	09db      	lsrs	r3, r3, #7
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	461a      	mov	r2, r3
 80029c8:	0091      	lsls	r1, r2, #2
 80029ca:	461a      	mov	r2, r3
 80029cc:	460b      	mov	r3, r1
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80029d8:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	88bb      	ldrh	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	b29b      	uxth	r3, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 f90b 	bl	8002c14 <DS3231_EncodeBCD>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4619      	mov	r1, r3
 8002a02:	2003      	movs	r0, #3
 8002a04:	f7ff fef8 	bl	80027f8 <DS3231_SetRegByte>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <DS3231_SetDate>:

/**
 * @brief Set the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS3231_SetDate(uint8_t date) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DATE, DS3231_EncodeBCD(date));
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f8f9 	bl	8002c14 <DS3231_EncodeBCD>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4619      	mov	r1, r3
 8002a26:	2004      	movs	r0, #4
 8002a28:	f7ff fee6 	bl	80027f8 <DS3231_SetRegByte>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <DS3231_SetMonth>:

/**
 * @brief Set the current month.
 * @param month Month, 1 to 12.
 */
void DS3231_SetMonth(uint8_t month) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8002a3e:	2005      	movs	r0, #5
 8002a40:	f7ff fef8 	bl	8002834 <DS3231_GetRegByte>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a4a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f8e0 	bl	8002c14 <DS3231_EncodeBCD>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461a      	mov	r2, r3
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	4619      	mov	r1, r3
 8002a60:	2005      	movs	r0, #5
 8002a62:	f7ff fec9 	bl	80027f8 <DS3231_SetRegByte>
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <DS3231_SetYear>:

/**
 * @brief Set the current year.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetYear(uint16_t year) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
	uint8_t century = (year / 100) % 20;
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <DS3231_SetYear+0x80>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <DS3231_SetYear+0x84>)
 8002a88:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8c:	0919      	lsrs	r1, r3, #4
 8002a8e:	460b      	mov	r3, r1
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	73fb      	strb	r3, [r7, #15]
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 8002a9c:	2005      	movs	r0, #5
 8002a9e:	f7ff fec9 	bl	8002834 <DS3231_GetRegByte>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	b25b      	sxtb	r3, r3
 8002aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aaa:	b25a      	sxtb	r2, r3
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	01db      	lsls	r3, r3, #7
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	b25b      	sxtb	r3, r3
 8002ab6:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_REG_MONTH, monthReg);
 8002ab8:	7bbb      	ldrb	r3, [r7, #14]
 8002aba:	4619      	mov	r1, r3
 8002abc:	2005      	movs	r0, #5
 8002abe:	f7ff fe9b 	bl	80027f8 <DS3231_SetRegByte>
	DS3231_SetRegByte(DS3231_REG_YEAR, DS3231_EncodeBCD(year % 100));
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <DS3231_SetYear+0x80>)
 8002ac6:	fba2 1203 	umull	r1, r2, r2, r3
 8002aca:	0952      	lsrs	r2, r2, #5
 8002acc:	2164      	movs	r1, #100	; 0x64
 8002ace:	fb01 f202 	mul.w	r2, r1, r2
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f89b 	bl	8002c14 <DS3231_EncodeBCD>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	2006      	movs	r0, #6
 8002ae4:	f7ff fe88 	bl	80027f8 <DS3231_SetRegByte>
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	51eb851f 	.word	0x51eb851f
 8002af4:	cccccccd 	.word	0xcccccccd

08002af8 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f882 	bl	8002c14 <DS3231_EncodeBCD>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4619      	mov	r1, r3
 8002b14:	2002      	movs	r0, #2
 8002b16:	f7ff fe6f 	bl	80027f8 <DS3231_SetRegByte>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f870 	bl	8002c14 <DS3231_EncodeBCD>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4619      	mov	r1, r3
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f7ff fe5d 	bl	80027f8 <DS3231_SetRegByte>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f85e 	bl	8002c14 <DS3231_EncodeBCD>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7ff fe4b 	bl	80027f8 <DS3231_SetRegByte>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	71fb      	strb	r3, [r7, #7]
 8002b74:	460b      	mov	r3, r1
 8002b76:	71bb      	strb	r3, [r7, #6]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	717b      	strb	r3, [r7, #5]
	DS3231_SetHour(hour_24mode);
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ffba 	bl	8002af8 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8002b84:	79bb      	ldrb	r3, [r7, #6]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ffcb 	bl	8002b22 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8002b8c:	797b      	ldrb	r3, [r7, #5]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ffd9 	bl	8002b46 <DS3231_SetSecond>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <DS3231_SetFullDate>:
 * @param date Date, 0 to 31.
 * @param month Month, 1 to 12.
 * @param dow Days since last Sunday, 1 to 7.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetFullDate(uint8_t date, uint8_t month, uint8_t dow, uint16_t year){
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4623      	mov	r3, r4
 8002bac:	71fb      	strb	r3, [r7, #7]
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71bb      	strb	r3, [r7, #6]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	717b      	strb	r3, [r7, #5]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	807b      	strh	r3, [r7, #2]
	DS3231_SetDate(date);
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff27 	bl	8002a10 <DS3231_SetDate>
	DS3231_SetMonth(month);
 8002bc2:	79bb      	ldrb	r3, [r7, #6]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff35 	bl	8002a34 <DS3231_SetMonth>
	DS3231_SetDayOfWeek(dow);
 8002bca:	797b      	ldrb	r3, [r7, #5]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff0d 	bl	80029ec <DS3231_SetDayOfWeek>
	DS3231_SetYear(year);
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff4b 	bl	8002a70 <DS3231_SetYear>
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}

08002be2 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	b2db      	uxtb	r3, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002c1e:	79fa      	ldrb	r2, [r7, #7]
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <DS3231_EncodeBCD+0x40>)
 8002c22:	fba3 1302 	umull	r1, r3, r3, r2
 8002c26:	08d9      	lsrs	r1, r3, #3
 8002c28:	460b      	mov	r3, r1
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	4907      	ldr	r1, [pc, #28]	; (8002c54 <DS3231_EncodeBCD+0x40>)
 8002c38:	fba1 1303 	umull	r1, r3, r1, r3
 8002c3c:	08db      	lsrs	r3, r3, #3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	b2db      	uxtb	r3, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	cccccccd 	.word	0xcccccccd

08002c58 <M24C32_Init>:
extern "C"{
#endif

I2C_HandleTypeDef *_M24C32_ui2c;

void M24C32_Init(I2C_HandleTypeDef *hi2c) {
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	_M24C32_ui2c = hi2c;
 8002c60:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <M24C32_Init+0x1c>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6013      	str	r3, [r2, #0]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000510 	.word	0x20000510

08002c78 <M24C32_WriteByte>:

void M24C32_WriteByte(uint16_t regAddr, uint8_t val) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	4603      	mov	r3, r0
 8002c80:	460a      	mov	r2, r1
 8002c82:	80fb      	strh	r3, [r7, #6]
 8002c84:	4613      	mov	r3, r2
 8002c86:	717b      	strb	r3, [r7, #5]
	uint8_t bytes[3] = { regAddr>>8, regAddr&0xFF, val };
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	733b      	strb	r3, [r7, #12]
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	737b      	strb	r3, [r7, #13]
 8002c98:	797b      	ldrb	r3, [r7, #5]
 8002c9a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_M24C32_ui2c, M24C32_I2C_ADDR, bytes, 3, M24C32_TIMEOUT);
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <M24C32_WriteByte+0x44>)
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	f107 020c 	add.w	r2, r7, #12
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2303      	movs	r3, #3
 8002cac:	21ae      	movs	r1, #174	; 0xae
 8002cae:	f001 fea9 	bl	8004a04 <HAL_I2C_Master_Transmit>
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000510 	.word	0x20000510

08002cc0 <M24C32_ReadRandomAddr>:
	uint8_t val;
	HAL_I2C_Master_Receive(_M24C32_ui2c, M24C32_I2C_ADDR, &val, 1, M24C32_TIMEOUT);
	return val;
}

uint8_t M24C32_ReadRandomAddr(uint16_t regAddr) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	80fb      	strh	r3, [r7, #6]
	uint8_t val;
	uint8_t bytes[2] = { regAddr>>8, regAddr&0xFF};
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	733b      	strb	r3, [r7, #12]
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_M24C32_ui2c, M24C32_I2C_ADDR, bytes, 2, M24C32_TIMEOUT);
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <M24C32_ReadRandomAddr+0x50>)
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	f107 020c 	add.w	r2, r7, #12
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	21ae      	movs	r1, #174	; 0xae
 8002cec:	f001 fe8a 	bl	8004a04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_M24C32_ui2c, M24C32_I2C_ADDR, &val, 1, M24C32_TIMEOUT);
 8002cf0:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <M24C32_ReadRandomAddr+0x50>)
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	f107 020f 	add.w	r2, r7, #15
 8002cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	21ae      	movs	r1, #174	; 0xae
 8002d02:	f001 ff7d 	bl	8004c00 <HAL_I2C_Master_Receive>
	return val;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000510 	.word	0x20000510

08002d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <HAL_Init+0x40>)
 8002d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_Init+0x40>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <HAL_Init+0x40>)
 8002d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_Init+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <HAL_Init+0x40>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	f001 facb 	bl	80042d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f000 f808 	bl	8002d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d48:	f7fe ffcc 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023c00 	.word	0x40023c00

08002d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_InitTick+0x54>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_InitTick+0x58>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 fae3 	bl	8004342 <HAL_SYSTICK_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00e      	b.n	8002da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b0f      	cmp	r3, #15
 8002d8a:	d80a      	bhi.n	8002da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f001 faab 	bl	80042ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d98:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <HAL_InitTick+0x5c>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e000      	b.n	8002da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000008 	.word	0x20000008
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_IncTick+0x20>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_IncTick+0x24>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_IncTick+0x24>)
 8002dca:	6013      	str	r3, [r2, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000008 	.word	0x20000008
 8002ddc:	20000514 	.word	0x20000514

08002de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return uwTick;
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <HAL_GetTick+0x14>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000514 	.word	0x20000514

08002df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff ffee 	bl	8002de0 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d005      	beq.n	8002e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_Delay+0x44>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e1e:	bf00      	nop
 8002e20:	f7ff ffde 	bl	8002de0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d8f7      	bhi.n	8002e20 <HAL_Delay+0x28>
  {
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000008 	.word	0x20000008

08002e40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e033      	b.n	8002ebe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff f82e 	bl	8001ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d118      	bne.n	8002eb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e86:	f023 0302 	bic.w	r3, r3, #2
 8002e8a:	f043 0202 	orr.w	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fb4a 	bl	800352c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
 8002eae:	e001      	b.n	8002eb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Start_IT+0x1a>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0bd      	b.n	800305e <HAL_ADC_Start_IT+0x196>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d018      	beq.n	8002f2a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f08:	4b58      	ldr	r3, [pc, #352]	; (800306c <HAL_ADC_Start_IT+0x1a4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_ADC_Start_IT+0x1a8>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0c9a      	lsrs	r2, r3, #18
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f1c:	e002      	b.n	8002f24 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	f040 8085 	bne.w	8003044 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f78:	d106      	bne.n	8002f88 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f023 0206 	bic.w	r2, r3, #6
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
 8002f86:	e002      	b.n	8002f8e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f96:	4b37      	ldr	r3, [pc, #220]	; (8003074 <HAL_ADC_Start_IT+0x1ac>)
 8002f98:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fa2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fb2:	f043 0320 	orr.w	r3, r3, #32
 8002fb6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d12a      	bne.n	800301a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <HAL_ADC_Start_IT+0x1b0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d015      	beq.n	8002ffa <HAL_ADC_Start_IT+0x132>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2a      	ldr	r2, [pc, #168]	; (800307c <HAL_ADC_Start_IT+0x1b4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d105      	bne.n	8002fe4 <HAL_ADC_Start_IT+0x11c>
 8002fd8:	4b26      	ldr	r3, [pc, #152]	; (8003074 <HAL_ADC_Start_IT+0x1ac>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a25      	ldr	r2, [pc, #148]	; (8003080 <HAL_ADC_Start_IT+0x1b8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d136      	bne.n	800305c <HAL_ADC_Start_IT+0x194>
 8002fee:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_ADC_Start_IT+0x1ac>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d130      	bne.n	800305c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d129      	bne.n	800305c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	e020      	b.n	800305c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a16      	ldr	r2, [pc, #88]	; (8003078 <HAL_ADC_Start_IT+0x1b0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d11b      	bne.n	800305c <HAL_ADC_Start_IT+0x194>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d114      	bne.n	800305c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	e00b      	b.n	800305c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f043 0210 	orr.w	r2, r3, #16
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000000 	.word	0x20000000
 8003070:	431bde83 	.word	0x431bde83
 8003074:	40012300 	.word	0x40012300
 8003078:	40012000 	.word	0x40012000
 800307c:	40012100 	.word	0x40012100
 8003080:	40012200 	.word	0x40012200

08003084 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d049      	beq.n	800314e <HAL_ADC_IRQHandler+0xca>
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d046      	beq.n	800314e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d12b      	bne.n	800313e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d127      	bne.n	800313e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003106:	2b00      	cmp	r3, #0
 8003108:	d119      	bne.n	800313e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0220 	bic.w	r2, r2, #32
 8003118:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe f958 	bl	80013f4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0212 	mvn.w	r2, #18
 800314c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d057      	beq.n	8003214 <HAL_ADC_IRQHandler+0x190>
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d054      	beq.n	8003214 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	d105      	bne.n	8003182 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d139      	bne.n	8003204 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d12b      	bne.n	8003204 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d124      	bne.n	8003204 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d11d      	bne.n	8003204 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d119      	bne.n	8003204 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fa8d 	bl	8003724 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f06f 020c 	mvn.w	r2, #12
 8003212:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d017      	beq.n	800325a <HAL_ADC_IRQHandler+0x1d6>
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d014      	beq.n	800325a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10d      	bne.n	800325a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f837 	bl	80032be <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0201 	mvn.w	r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003268:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d015      	beq.n	800329c <HAL_ADC_IRQHandler+0x218>
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d012      	beq.n	800329c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f043 0202 	orr.w	r2, r3, #2
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f06f 0220 	mvn.w	r2, #32
 800328a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f820 	bl	80032d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 0220 	mvn.w	r2, #32
 800329a:	601a      	str	r2, [r3, #0]
  }
}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x1c>
 8003300:	2302      	movs	r3, #2
 8003302:	e105      	b.n	8003510 <HAL_ADC_ConfigChannel+0x228>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b09      	cmp	r3, #9
 8003312:	d925      	bls.n	8003360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68d9      	ldr	r1, [r3, #12]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	3b1e      	subs	r3, #30
 800332a:	2207      	movs	r2, #7
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43da      	mvns	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	400a      	ands	r2, r1
 8003338:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68d9      	ldr	r1, [r3, #12]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	4618      	mov	r0, r3
 800334c:	4603      	mov	r3, r0
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4403      	add	r3, r0
 8003352:	3b1e      	subs	r3, #30
 8003354:	409a      	lsls	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	e022      	b.n	80033a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6919      	ldr	r1, [r3, #16]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	2207      	movs	r2, #7
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	400a      	ands	r2, r1
 8003382:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6919      	ldr	r1, [r3, #16]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	4618      	mov	r0, r3
 8003396:	4603      	mov	r3, r0
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4403      	add	r3, r0
 800339c:	409a      	lsls	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d824      	bhi.n	80033f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b05      	subs	r3, #5
 80033c0:	221f      	movs	r2, #31
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	400a      	ands	r2, r1
 80033ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	3b05      	subs	r3, #5
 80033ea:	fa00 f203 	lsl.w	r2, r0, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	635a      	str	r2, [r3, #52]	; 0x34
 80033f6:	e04c      	b.n	8003492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b0c      	cmp	r3, #12
 80033fe:	d824      	bhi.n	800344a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	3b23      	subs	r3, #35	; 0x23
 8003412:	221f      	movs	r2, #31
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43da      	mvns	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	400a      	ands	r2, r1
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	4618      	mov	r0, r3
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	3b23      	subs	r3, #35	; 0x23
 800343c:	fa00 f203 	lsl.w	r2, r0, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
 8003448:	e023      	b.n	8003492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	3b41      	subs	r3, #65	; 0x41
 800345c:	221f      	movs	r2, #31
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	400a      	ands	r2, r1
 800346a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	4618      	mov	r0, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	3b41      	subs	r3, #65	; 0x41
 8003486:	fa00 f203 	lsl.w	r2, r0, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003492:	4b22      	ldr	r3, [pc, #136]	; (800351c <HAL_ADC_ConfigChannel+0x234>)
 8003494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <HAL_ADC_ConfigChannel+0x238>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d109      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1cc>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b12      	cmp	r3, #18
 80034a6:	d105      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <HAL_ADC_ConfigChannel+0x238>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d123      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x21e>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d003      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x1e6>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b11      	cmp	r3, #17
 80034cc:	d11b      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d111      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_ADC_ConfigChannel+0x23c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a10      	ldr	r2, [pc, #64]	; (8003528 <HAL_ADC_ConfigChannel+0x240>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	0c9a      	lsrs	r2, r3, #18
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034f8:	e002      	b.n	8003500 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f9      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40012300 	.word	0x40012300
 8003520:	40012000 	.word	0x40012000
 8003524:	20000000 	.word	0x20000000
 8003528:	431bde83 	.word	0x431bde83

0800352c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003534:	4b79      	ldr	r3, [pc, #484]	; (800371c <ADC_Init+0x1f0>)
 8003536:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	021a      	lsls	r2, r3, #8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	4a58      	ldr	r2, [pc, #352]	; (8003720 <ADC_Init+0x1f4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6899      	ldr	r1, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	e00f      	b.n	800362a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003628:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0202 	bic.w	r2, r2, #2
 8003638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6899      	ldr	r1, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	7e1b      	ldrb	r3, [r3, #24]
 8003644:	005a      	lsls	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01b      	beq.n	8003690 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003666:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	3b01      	subs	r3, #1
 8003684:	035a      	lsls	r2, r3, #13
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	e007      	b.n	80036a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800369e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	051a      	lsls	r2, r3, #20
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6899      	ldr	r1, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036e2:	025a      	lsls	r2, r3, #9
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6899      	ldr	r1, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	029a      	lsls	r2, r3, #10
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]
}
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40012300 	.word	0x40012300
 8003720:	0f000001 	.word	0x0f000001

08003724 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0ed      	b.n	8003926 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe fbfe 	bl	8001f58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800376c:	f7ff fb38 	bl	8002de0 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003772:	e012      	b.n	800379a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003774:	f7ff fb34 	bl	8002de0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b0a      	cmp	r3, #10
 8003780:	d90b      	bls.n	800379a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2205      	movs	r2, #5
 8003792:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0c5      	b.n	8003926 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0e5      	beq.n	8003774 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0202 	bic.w	r2, r2, #2
 80037b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037b8:	f7ff fb12 	bl	8002de0 <HAL_GetTick>
 80037bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037be:	e012      	b.n	80037e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037c0:	f7ff fb0e 	bl	8002de0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b0a      	cmp	r3, #10
 80037cc:	d90b      	bls.n	80037e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2205      	movs	r2, #5
 80037de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e09f      	b.n	8003926 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	7e1b      	ldrb	r3, [r3, #24]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d108      	bne.n	800380e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e007      	b.n	800381e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800381c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7e5b      	ldrb	r3, [r3, #25]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d108      	bne.n	8003838 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e007      	b.n	8003848 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7e9b      	ldrb	r3, [r3, #26]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d108      	bne.n	8003862 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0220 	orr.w	r2, r2, #32
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e007      	b.n	8003872 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0220 	bic.w	r2, r2, #32
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7edb      	ldrb	r3, [r3, #27]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d108      	bne.n	800388c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0210 	bic.w	r2, r2, #16
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e007      	b.n	800389c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0210 	orr.w	r2, r2, #16
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	7f1b      	ldrb	r3, [r3, #28]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d108      	bne.n	80038b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0208 	orr.w	r2, r2, #8
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e007      	b.n	80038c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0208 	bic.w	r2, r2, #8
 80038c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7f5b      	ldrb	r3, [r3, #29]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d108      	bne.n	80038e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0204 	orr.w	r2, r2, #4
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e007      	b.n	80038f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0204 	bic.w	r2, r2, #4
 80038ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	ea42 0103 	orr.w	r1, r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003946:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d003      	beq.n	8003956 <HAL_CAN_ConfigFilter+0x26>
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b02      	cmp	r3, #2
 8003952:	f040 80be 	bne.w	8003ad2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <HAL_CAN_ConfigFilter+0x1bc>)
 8003958:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003970:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	431a      	orrs	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2201      	movs	r2, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	401a      	ands	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d123      	bne.n	8003a00 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	401a      	ands	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3248      	adds	r2, #72	; 0x48
 80039e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039f6:	6979      	ldr	r1, [r7, #20]
 80039f8:	3348      	adds	r3, #72	; 0x48
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	440b      	add	r3, r1
 80039fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d122      	bne.n	8003a4e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	431a      	orrs	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3248      	adds	r2, #72	; 0x48
 8003a2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a44:	6979      	ldr	r1, [r7, #20]
 8003a46:	3348      	adds	r3, #72	; 0x48
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	401a      	ands	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003a68:	e007      	b.n	8003a7a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	401a      	ands	r2, r3
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003a94:	e007      	b.n	8003aa6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d107      	bne.n	8003abe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ac4:	f023 0201 	bic.w	r2, r3, #1
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e006      	b.n	8003ae0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
  }
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40006400 	.word	0x40006400

08003af0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d003      	beq.n	8003b14 <HAL_CAN_GetRxMessage+0x24>
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	f040 80f3 	bne.w	8003cfa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10e      	bne.n	8003b38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d116      	bne.n	8003b56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0e7      	b.n	8003d08 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d107      	bne.n	8003b56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0d8      	b.n	8003d08 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	331b      	adds	r3, #27
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	4413      	add	r3, r2
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0204 	and.w	r2, r3, #4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10c      	bne.n	8003b8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	331b      	adds	r3, #27
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	4413      	add	r3, r2
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	0d5b      	lsrs	r3, r3, #21
 8003b84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e00b      	b.n	8003ba6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	331b      	adds	r3, #27
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	4413      	add	r3, r2
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	331b      	adds	r3, #27
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	4413      	add	r3, r2
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0202 	and.w	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	331b      	adds	r3, #27
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3304      	adds	r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 020f 	and.w	r2, r3, #15
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	331b      	adds	r3, #27
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	4413      	add	r3, r2
 8003be0:	3304      	adds	r3, #4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	331b      	adds	r3, #27
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	0a1a      	lsrs	r2, r3, #8
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	0c1a      	lsrs	r2, r3, #16
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	3302      	adds	r3, #2
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	0e1a      	lsrs	r2, r3, #24
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	3303      	adds	r3, #3
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0a1a      	lsrs	r2, r3, #8
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	3305      	adds	r3, #5
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0c1a      	lsrs	r2, r3, #16
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	3306      	adds	r3, #6
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0e1a      	lsrs	r2, r3, #24
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	3307      	adds	r3, #7
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d108      	bne.n	8003ce6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0220 	orr.w	r2, r2, #32
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	e007      	b.n	8003cf6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0220 	orr.w	r2, r2, #32
 8003cf4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e006      	b.n	8003d08 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
  }
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d07c      	beq.n	8003e54 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fafa 	bl	8001370 <HAL_CAN_TxMailbox0CompleteCallback>
 8003d7c:	e016      	b.n	8003dac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d90:	e00c      	b.n	8003dac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
 8003da4:	e002      	b.n	8003dac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f96b 	bl	8004082 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d024      	beq.n	8003e00 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd fade 	bl	800138c <HAL_CAN_TxMailbox1CompleteCallback>
 8003dd0:	e016      	b.n	8003e00 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
 8003de4:	e00c      	b.n	8003e00 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
 8003df8:	e002      	b.n	8003e00 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f94b 	bl	8004096 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d024      	beq.n	8003e54 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fac2 	bl	80013a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e24:	e016      	b.n	8003e54 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d004      	beq.n	8003e3a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
 8003e38:	e00c      	b.n	8003e54 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4c:	e002      	b.n	8003e54 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f92b 	bl	80040aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00c      	beq.n	8003e78 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2210      	movs	r2, #16
 8003e76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2208      	movs	r2, #8
 8003e92:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f912 	bl	80040be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd fa86 	bl	80013c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2210      	movs	r2, #16
 8003eda:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8f4 	bl	80040e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d009      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8db 	bl	80040d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d006      	beq.n	8003f3e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2210      	movs	r2, #16
 8003f36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f8de 	bl	80040fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00b      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2208      	movs	r2, #8
 8003f58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8d7 	bl	800410e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d07b      	beq.n	8004062 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d072      	beq.n	800405a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f043 0302 	orr.w	r3, r3, #2
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	f043 0304 	orr.w	r3, r3, #4
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d043      	beq.n	800405a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d03e      	beq.n	800405a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fe2:	2b60      	cmp	r3, #96	; 0x60
 8003fe4:	d02b      	beq.n	800403e <HAL_CAN_IRQHandler+0x32a>
 8003fe6:	2b60      	cmp	r3, #96	; 0x60
 8003fe8:	d82e      	bhi.n	8004048 <HAL_CAN_IRQHandler+0x334>
 8003fea:	2b50      	cmp	r3, #80	; 0x50
 8003fec:	d022      	beq.n	8004034 <HAL_CAN_IRQHandler+0x320>
 8003fee:	2b50      	cmp	r3, #80	; 0x50
 8003ff0:	d82a      	bhi.n	8004048 <HAL_CAN_IRQHandler+0x334>
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	d019      	beq.n	800402a <HAL_CAN_IRQHandler+0x316>
 8003ff6:	2b40      	cmp	r3, #64	; 0x40
 8003ff8:	d826      	bhi.n	8004048 <HAL_CAN_IRQHandler+0x334>
 8003ffa:	2b30      	cmp	r3, #48	; 0x30
 8003ffc:	d010      	beq.n	8004020 <HAL_CAN_IRQHandler+0x30c>
 8003ffe:	2b30      	cmp	r3, #48	; 0x30
 8004000:	d822      	bhi.n	8004048 <HAL_CAN_IRQHandler+0x334>
 8004002:	2b10      	cmp	r3, #16
 8004004:	d002      	beq.n	800400c <HAL_CAN_IRQHandler+0x2f8>
 8004006:	2b20      	cmp	r3, #32
 8004008:	d005      	beq.n	8004016 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800400a:	e01d      	b.n	8004048 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f043 0308 	orr.w	r3, r3, #8
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004014:	e019      	b.n	800404a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	f043 0310 	orr.w	r3, r3, #16
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800401e:	e014      	b.n	800404a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	f043 0320 	orr.w	r3, r3, #32
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004028:	e00f      	b.n	800404a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004032:	e00a      	b.n	800404a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800403c:	e005      	b.n	800404a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004046:	e000      	b.n	800404a <HAL_CAN_IRQHandler+0x336>
            break;
 8004048:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699a      	ldr	r2, [r3, #24]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004058:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2204      	movs	r2, #4
 8004060:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f854 	bl	8004122 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800407a:	bf00      	nop
 800407c:	3728      	adds	r7, #40	; 0x28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <__NVIC_SetPriorityGrouping+0x44>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004154:	4013      	ands	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416a:	4a04      	ldr	r2, [pc, #16]	; (800417c <__NVIC_SetPriorityGrouping+0x44>)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	60d3      	str	r3, [r2, #12]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <__NVIC_GetPriorityGrouping+0x18>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	f003 0307 	and.w	r3, r3, #7
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	db0b      	blt.n	80041c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	4907      	ldr	r1, [pc, #28]	; (80041d4 <__NVIC_EnableIRQ+0x38>)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2001      	movs	r0, #1
 80041be:	fa00 f202 	lsl.w	r2, r0, r2
 80041c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000e100 	.word	0xe000e100

080041d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	6039      	str	r1, [r7, #0]
 80041e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	db0a      	blt.n	8004202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	490c      	ldr	r1, [pc, #48]	; (8004224 <__NVIC_SetPriority+0x4c>)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	0112      	lsls	r2, r2, #4
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	440b      	add	r3, r1
 80041fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004200:	e00a      	b.n	8004218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4908      	ldr	r1, [pc, #32]	; (8004228 <__NVIC_SetPriority+0x50>)
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	3b04      	subs	r3, #4
 8004210:	0112      	lsls	r2, r2, #4
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	440b      	add	r3, r1
 8004216:	761a      	strb	r2, [r3, #24]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	e000e100 	.word	0xe000e100
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800422c:	b480      	push	{r7}
 800422e:	b089      	sub	sp, #36	; 0x24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f1c3 0307 	rsb	r3, r3, #7
 8004246:	2b04      	cmp	r3, #4
 8004248:	bf28      	it	cs
 800424a:	2304      	movcs	r3, #4
 800424c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3304      	adds	r3, #4
 8004252:	2b06      	cmp	r3, #6
 8004254:	d902      	bls.n	800425c <NVIC_EncodePriority+0x30>
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3b03      	subs	r3, #3
 800425a:	e000      	b.n	800425e <NVIC_EncodePriority+0x32>
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004260:	f04f 32ff 	mov.w	r2, #4294967295
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	401a      	ands	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004274:	f04f 31ff 	mov.w	r1, #4294967295
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	43d9      	mvns	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004284:	4313      	orrs	r3, r2
         );
}
 8004286:	4618      	mov	r0, r3
 8004288:	3724      	adds	r7, #36	; 0x24
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042a4:	d301      	bcc.n	80042aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042a6:	2301      	movs	r3, #1
 80042a8:	e00f      	b.n	80042ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <SysTick_Config+0x40>)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042b2:	210f      	movs	r1, #15
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	f7ff ff8e 	bl	80041d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <SysTick_Config+0x40>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <SysTick_Config+0x40>)
 80042c4:	2207      	movs	r2, #7
 80042c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	e000e010 	.word	0xe000e010

080042d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff ff29 	bl	8004138 <__NVIC_SetPriorityGrouping>
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	4603      	mov	r3, r0
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004300:	f7ff ff3e 	bl	8004180 <__NVIC_GetPriorityGrouping>
 8004304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	6978      	ldr	r0, [r7, #20]
 800430c:	f7ff ff8e 	bl	800422c <NVIC_EncodePriority>
 8004310:	4602      	mov	r2, r0
 8004312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff5d 	bl	80041d8 <__NVIC_SetPriority>
}
 800431e:	bf00      	nop
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	4603      	mov	r3, r0
 800432e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ff31 	bl	800419c <__NVIC_EnableIRQ>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff ffa2 	bl	8004294 <SysTick_Config>
 8004350:	4603      	mov	r3, r0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800435e:	f7fd f8c5 	bl	80014ec <HAL_SYSTICK_Callback>
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d004      	beq.n	8004384 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2280      	movs	r2, #128	; 0x80
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e00c      	b.n	800439e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2205      	movs	r2, #5
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b089      	sub	sp, #36	; 0x24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	e16b      	b.n	80046a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043c8:	2201      	movs	r2, #1
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4013      	ands	r3, r2
 80043da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	f040 815a 	bne.w	800469a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d005      	beq.n	80043fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d130      	bne.n	8004460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	2203      	movs	r2, #3
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004434:	2201      	movs	r2, #1
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 0201 	and.w	r2, r3, #1
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b03      	cmp	r3, #3
 800446a:	d017      	beq.n	800449c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	2203      	movs	r2, #3
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	43db      	mvns	r3, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d123      	bne.n	80044f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	08da      	lsrs	r2, r3, #3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3208      	adds	r2, #8
 80044b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	220f      	movs	r2, #15
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4313      	orrs	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	08da      	lsrs	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3208      	adds	r2, #8
 80044ea:	69b9      	ldr	r1, [r7, #24]
 80044ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	2203      	movs	r2, #3
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4013      	ands	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 0203 	and.w	r2, r3, #3
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4313      	orrs	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80b4 	beq.w	800469a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	4b60      	ldr	r3, [pc, #384]	; (80046b8 <HAL_GPIO_Init+0x30c>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	4a5f      	ldr	r2, [pc, #380]	; (80046b8 <HAL_GPIO_Init+0x30c>)
 800453c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004540:	6453      	str	r3, [r2, #68]	; 0x44
 8004542:	4b5d      	ldr	r3, [pc, #372]	; (80046b8 <HAL_GPIO_Init+0x30c>)
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800454e:	4a5b      	ldr	r2, [pc, #364]	; (80046bc <HAL_GPIO_Init+0x310>)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	3302      	adds	r3, #2
 8004556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	220f      	movs	r2, #15
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a52      	ldr	r2, [pc, #328]	; (80046c0 <HAL_GPIO_Init+0x314>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02b      	beq.n	80045d2 <HAL_GPIO_Init+0x226>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a51      	ldr	r2, [pc, #324]	; (80046c4 <HAL_GPIO_Init+0x318>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d025      	beq.n	80045ce <HAL_GPIO_Init+0x222>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a50      	ldr	r2, [pc, #320]	; (80046c8 <HAL_GPIO_Init+0x31c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01f      	beq.n	80045ca <HAL_GPIO_Init+0x21e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a4f      	ldr	r2, [pc, #316]	; (80046cc <HAL_GPIO_Init+0x320>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d019      	beq.n	80045c6 <HAL_GPIO_Init+0x21a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a4e      	ldr	r2, [pc, #312]	; (80046d0 <HAL_GPIO_Init+0x324>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <HAL_GPIO_Init+0x216>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a4d      	ldr	r2, [pc, #308]	; (80046d4 <HAL_GPIO_Init+0x328>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00d      	beq.n	80045be <HAL_GPIO_Init+0x212>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a4c      	ldr	r2, [pc, #304]	; (80046d8 <HAL_GPIO_Init+0x32c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <HAL_GPIO_Init+0x20e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a4b      	ldr	r2, [pc, #300]	; (80046dc <HAL_GPIO_Init+0x330>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <HAL_GPIO_Init+0x20a>
 80045b2:	2307      	movs	r3, #7
 80045b4:	e00e      	b.n	80045d4 <HAL_GPIO_Init+0x228>
 80045b6:	2308      	movs	r3, #8
 80045b8:	e00c      	b.n	80045d4 <HAL_GPIO_Init+0x228>
 80045ba:	2306      	movs	r3, #6
 80045bc:	e00a      	b.n	80045d4 <HAL_GPIO_Init+0x228>
 80045be:	2305      	movs	r3, #5
 80045c0:	e008      	b.n	80045d4 <HAL_GPIO_Init+0x228>
 80045c2:	2304      	movs	r3, #4
 80045c4:	e006      	b.n	80045d4 <HAL_GPIO_Init+0x228>
 80045c6:	2303      	movs	r3, #3
 80045c8:	e004      	b.n	80045d4 <HAL_GPIO_Init+0x228>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e002      	b.n	80045d4 <HAL_GPIO_Init+0x228>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <HAL_GPIO_Init+0x228>
 80045d2:	2300      	movs	r3, #0
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	f002 0203 	and.w	r2, r2, #3
 80045da:	0092      	lsls	r2, r2, #2
 80045dc:	4093      	lsls	r3, r2
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045e4:	4935      	ldr	r1, [pc, #212]	; (80046bc <HAL_GPIO_Init+0x310>)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	089b      	lsrs	r3, r3, #2
 80045ea:	3302      	adds	r3, #2
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045f2:	4b3b      	ldr	r3, [pc, #236]	; (80046e0 <HAL_GPIO_Init+0x334>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	43db      	mvns	r3, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4013      	ands	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004616:	4a32      	ldr	r2, [pc, #200]	; (80046e0 <HAL_GPIO_Init+0x334>)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800461c:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_GPIO_Init+0x334>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004640:	4a27      	ldr	r2, [pc, #156]	; (80046e0 <HAL_GPIO_Init+0x334>)
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004646:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_GPIO_Init+0x334>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	43db      	mvns	r3, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4013      	ands	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800466a:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <HAL_GPIO_Init+0x334>)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_GPIO_Init+0x334>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004694:	4a12      	ldr	r2, [pc, #72]	; (80046e0 <HAL_GPIO_Init+0x334>)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	3301      	adds	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	2b0f      	cmp	r3, #15
 80046a4:	f67f ae90 	bls.w	80043c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop
 80046ac:	3724      	adds	r7, #36	; 0x24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	40013800 	.word	0x40013800
 80046c0:	40020000 	.word	0x40020000
 80046c4:	40020400 	.word	0x40020400
 80046c8:	40020800 	.word	0x40020800
 80046cc:	40020c00 	.word	0x40020c00
 80046d0:	40021000 	.word	0x40021000
 80046d4:	40021400 	.word	0x40021400
 80046d8:	40021800 	.word	0x40021800
 80046dc:	40021c00 	.word	0x40021c00
 80046e0:	40013c00 	.word	0x40013c00

080046e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	887b      	ldrh	r3, [r7, #2]
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
 8004700:	e001      	b.n	8004706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	807b      	strh	r3, [r7, #2]
 8004720:	4613      	mov	r3, r2
 8004722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004724:	787b      	ldrb	r3, [r7, #1]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800472a:	887a      	ldrh	r2, [r7, #2]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004730:	e003      	b.n	800473a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004732:	887b      	ldrh	r3, [r7, #2]
 8004734:	041a      	lsls	r2, r3, #16
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	619a      	str	r2, [r3, #24]
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	460b      	mov	r3, r1
 8004750:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004758:	887a      	ldrh	r2, [r7, #2]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4013      	ands	r3, r2
 800475e:	041a      	lsls	r2, r3, #16
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	43d9      	mvns	r1, r3
 8004764:	887b      	ldrh	r3, [r7, #2]
 8004766:	400b      	ands	r3, r1
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	619a      	str	r2, [r3, #24]
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
	...

0800477c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e12b      	b.n	80049e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fd fc40 	bl	8002028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	; 0x24
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047e0:	f002 f99e 	bl	8006b20 <HAL_RCC_GetPCLK1Freq>
 80047e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4a81      	ldr	r2, [pc, #516]	; (80049f0 <HAL_I2C_Init+0x274>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d807      	bhi.n	8004800 <HAL_I2C_Init+0x84>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4a80      	ldr	r2, [pc, #512]	; (80049f4 <HAL_I2C_Init+0x278>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	bf94      	ite	ls
 80047f8:	2301      	movls	r3, #1
 80047fa:	2300      	movhi	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e006      	b.n	800480e <HAL_I2C_Init+0x92>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a7d      	ldr	r2, [pc, #500]	; (80049f8 <HAL_I2C_Init+0x27c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	bf94      	ite	ls
 8004808:	2301      	movls	r3, #1
 800480a:	2300      	movhi	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e0e7      	b.n	80049e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a78      	ldr	r2, [pc, #480]	; (80049fc <HAL_I2C_Init+0x280>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	0c9b      	lsrs	r3, r3, #18
 8004820:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4a6a      	ldr	r2, [pc, #424]	; (80049f0 <HAL_I2C_Init+0x274>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d802      	bhi.n	8004850 <HAL_I2C_Init+0xd4>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	3301      	adds	r3, #1
 800484e:	e009      	b.n	8004864 <HAL_I2C_Init+0xe8>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	4a69      	ldr	r2, [pc, #420]	; (8004a00 <HAL_I2C_Init+0x284>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	099b      	lsrs	r3, r3, #6
 8004862:	3301      	adds	r3, #1
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	430b      	orrs	r3, r1
 800486a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004876:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	495c      	ldr	r1, [pc, #368]	; (80049f0 <HAL_I2C_Init+0x274>)
 8004880:	428b      	cmp	r3, r1
 8004882:	d819      	bhi.n	80048b8 <HAL_I2C_Init+0x13c>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1e59      	subs	r1, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004892:	1c59      	adds	r1, r3, #1
 8004894:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004898:	400b      	ands	r3, r1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_I2C_Init+0x138>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1e59      	subs	r1, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ac:	3301      	adds	r3, #1
 80048ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b2:	e051      	b.n	8004958 <HAL_I2C_Init+0x1dc>
 80048b4:	2304      	movs	r3, #4
 80048b6:	e04f      	b.n	8004958 <HAL_I2C_Init+0x1dc>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d111      	bne.n	80048e4 <HAL_I2C_Init+0x168>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1e58      	subs	r0, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6859      	ldr	r1, [r3, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	440b      	add	r3, r1
 80048ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d2:	3301      	adds	r3, #1
 80048d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e012      	b.n	800490a <HAL_I2C_Init+0x18e>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	1e58      	subs	r0, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	0099      	lsls	r1, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fa:	3301      	adds	r3, #1
 80048fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_I2C_Init+0x196>
 800490e:	2301      	movs	r3, #1
 8004910:	e022      	b.n	8004958 <HAL_I2C_Init+0x1dc>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10e      	bne.n	8004938 <HAL_I2C_Init+0x1bc>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1e58      	subs	r0, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6859      	ldr	r1, [r3, #4]
 8004922:	460b      	mov	r3, r1
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	440b      	add	r3, r1
 8004928:	fbb0 f3f3 	udiv	r3, r0, r3
 800492c:	3301      	adds	r3, #1
 800492e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004936:	e00f      	b.n	8004958 <HAL_I2C_Init+0x1dc>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e58      	subs	r0, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	0099      	lsls	r1, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	fbb0 f3f3 	udiv	r3, r0, r3
 800494e:	3301      	adds	r3, #1
 8004950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	6809      	ldr	r1, [r1, #0]
 800495c:	4313      	orrs	r3, r2
 800495e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004986:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6911      	ldr	r1, [r2, #16]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68d2      	ldr	r2, [r2, #12]
 8004992:	4311      	orrs	r1, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	430b      	orrs	r3, r1
 800499a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	000186a0 	.word	0x000186a0
 80049f4:	001e847f 	.word	0x001e847f
 80049f8:	003d08ff 	.word	0x003d08ff
 80049fc:	431bde83 	.word	0x431bde83
 8004a00:	10624dd3 	.word	0x10624dd3

08004a04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	460b      	mov	r3, r1
 8004a12:	817b      	strh	r3, [r7, #10]
 8004a14:	4613      	mov	r3, r2
 8004a16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a18:	f7fe f9e2 	bl	8002de0 <HAL_GetTick>
 8004a1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	f040 80e0 	bne.w	8004bec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	2319      	movs	r3, #25
 8004a32:	2201      	movs	r2, #1
 8004a34:	4970      	ldr	r1, [pc, #448]	; (8004bf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f001 fa24 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
 8004a44:	e0d3      	b.n	8004bee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_I2C_Master_Transmit+0x50>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0cc      	b.n	8004bee <HAL_I2C_Master_Transmit+0x1ea>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d007      	beq.n	8004a7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2221      	movs	r2, #33	; 0x21
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2210      	movs	r2, #16
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	893a      	ldrh	r2, [r7, #8]
 8004aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a50      	ldr	r2, [pc, #320]	; (8004bfc <HAL_I2C_Master_Transmit+0x1f8>)
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004abc:	8979      	ldrh	r1, [r7, #10]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6a3a      	ldr	r2, [r7, #32]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 ff10 	bl	80058e8 <I2C_MasterRequestWrite>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e08d      	b.n	8004bee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ae8:	e066      	b.n	8004bb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	6a39      	ldr	r1, [r7, #32]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f001 fa9e 	bl	8006030 <I2C_WaitOnTXEFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d107      	bne.n	8004b12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e06b      	b.n	8004bee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d11b      	bne.n	8004b8c <HAL_I2C_Master_Transmit+0x188>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d017      	beq.n	8004b8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	6a39      	ldr	r1, [r7, #32]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f001 fa8e 	bl	80060b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00d      	beq.n	8004bb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d107      	bne.n	8004bb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e01a      	b.n	8004bee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d194      	bne.n	8004aea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	00100002 	.word	0x00100002
 8004bfc:	ffff0000 	.word	0xffff0000

08004c00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08c      	sub	sp, #48	; 0x30
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	817b      	strh	r3, [r7, #10]
 8004c10:	4613      	mov	r3, r2
 8004c12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c14:	f7fe f8e4 	bl	8002de0 <HAL_GetTick>
 8004c18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	f040 820b 	bne.w	800503e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2319      	movs	r3, #25
 8004c2e:	2201      	movs	r2, #1
 8004c30:	497c      	ldr	r1, [pc, #496]	; (8004e24 <HAL_I2C_Master_Receive+0x224>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f001 f926 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e1fe      	b.n	8005040 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_I2C_Master_Receive+0x50>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e1f7      	b.n	8005040 <HAL_I2C_Master_Receive+0x440>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d007      	beq.n	8004c76 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0201 	orr.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2222      	movs	r2, #34	; 0x22
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2210      	movs	r2, #16
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	893a      	ldrh	r2, [r7, #8]
 8004ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a5c      	ldr	r2, [pc, #368]	; (8004e28 <HAL_I2C_Master_Receive+0x228>)
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cb8:	8979      	ldrh	r1, [r7, #10]
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fe94 	bl	80059ec <I2C_MasterRequestRead>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e1b8      	b.n	8005040 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d113      	bne.n	8004cfe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	623b      	str	r3, [r7, #32]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	623b      	str	r3, [r7, #32]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	623b      	str	r3, [r7, #32]
 8004cea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e18c      	b.n	8005018 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d11b      	bne.n	8004d3e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e16c      	b.n	8005018 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d11b      	bne.n	8004d7e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d66:	2300      	movs	r3, #0
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	e14c      	b.n	8005018 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004da4:	e138      	b.n	8005018 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	f200 80f1 	bhi.w	8004f92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d123      	bne.n	8004e00 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f001 f9b9 	bl	8006134 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e139      	b.n	8005040 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dfe:	e10b      	b.n	8005018 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d14e      	bne.n	8004ea6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	2200      	movs	r2, #0
 8004e10:	4906      	ldr	r1, [pc, #24]	; (8004e2c <HAL_I2C_Master_Receive+0x22c>)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f001 f836 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e10e      	b.n	8005040 <HAL_I2C_Master_Receive+0x440>
 8004e22:	bf00      	nop
 8004e24:	00100002 	.word	0x00100002
 8004e28:	ffff0000 	.word	0xffff0000
 8004e2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ea4:	e0b8      	b.n	8005018 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	2200      	movs	r2, #0
 8004eae:	4966      	ldr	r1, [pc, #408]	; (8005048 <HAL_I2C_Master_Receive+0x448>)
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 ffe7 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0bf      	b.n	8005040 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ece:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	2200      	movs	r2, #0
 8004f0a:	494f      	ldr	r1, [pc, #316]	; (8005048 <HAL_I2C_Master_Receive+0x448>)
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 ffb9 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e091      	b.n	8005040 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f90:	e042      	b.n	8005018 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f001 f8cc 	bl	8006134 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e04c      	b.n	8005040 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d118      	bne.n	8005018 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	f47f aec2 	bne.w	8004da6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3728      	adds	r7, #40	; 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	00010004 	.word	0x00010004

0800504c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	4608      	mov	r0, r1
 8005056:	4611      	mov	r1, r2
 8005058:	461a      	mov	r2, r3
 800505a:	4603      	mov	r3, r0
 800505c:	817b      	strh	r3, [r7, #10]
 800505e:	460b      	mov	r3, r1
 8005060:	813b      	strh	r3, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005066:	f7fd febb 	bl	8002de0 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b20      	cmp	r3, #32
 8005076:	f040 80d9 	bne.w	800522c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	2319      	movs	r3, #25
 8005080:	2201      	movs	r2, #1
 8005082:	496d      	ldr	r1, [pc, #436]	; (8005238 <HAL_I2C_Mem_Write+0x1ec>)
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fefd 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
 8005092:	e0cc      	b.n	800522e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_I2C_Mem_Write+0x56>
 800509e:	2302      	movs	r3, #2
 80050a0:	e0c5      	b.n	800522e <HAL_I2C_Mem_Write+0x1e2>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d007      	beq.n	80050c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2221      	movs	r2, #33	; 0x21
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2240      	movs	r2, #64	; 0x40
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4a4d      	ldr	r2, [pc, #308]	; (800523c <HAL_I2C_Mem_Write+0x1f0>)
 8005108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800510a:	88f8      	ldrh	r0, [r7, #6]
 800510c:	893a      	ldrh	r2, [r7, #8]
 800510e:	8979      	ldrh	r1, [r7, #10]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	4603      	mov	r3, r0
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fd34 	bl	8005b88 <I2C_RequestMemoryWrite>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d052      	beq.n	80051cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e081      	b.n	800522e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 ff7e 	bl	8006030 <I2C_WaitOnTXEFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00d      	beq.n	8005156 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	2b04      	cmp	r3, #4
 8005140:	d107      	bne.n	8005152 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005150:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e06b      	b.n	800522e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	781a      	ldrb	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b04      	cmp	r3, #4
 8005192:	d11b      	bne.n	80051cc <HAL_I2C_Mem_Write+0x180>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005198:	2b00      	cmp	r3, #0
 800519a:	d017      	beq.n	80051cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	781a      	ldrb	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1aa      	bne.n	800512a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 ff6a 	bl	80060b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d107      	bne.n	80051fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e016      	b.n	800522e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	e000      	b.n	800522e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800522c:	2302      	movs	r3, #2
  }
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	00100002 	.word	0x00100002
 800523c:	ffff0000 	.word	0xffff0000

08005240 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08c      	sub	sp, #48	; 0x30
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	4608      	mov	r0, r1
 800524a:	4611      	mov	r1, r2
 800524c:	461a      	mov	r2, r3
 800524e:	4603      	mov	r3, r0
 8005250:	817b      	strh	r3, [r7, #10]
 8005252:	460b      	mov	r3, r1
 8005254:	813b      	strh	r3, [r7, #8]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800525a:	f7fd fdc1 	bl	8002de0 <HAL_GetTick>
 800525e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b20      	cmp	r3, #32
 800526a:	f040 8208 	bne.w	800567e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	2319      	movs	r3, #25
 8005274:	2201      	movs	r2, #1
 8005276:	497b      	ldr	r1, [pc, #492]	; (8005464 <HAL_I2C_Mem_Read+0x224>)
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fe03 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005284:	2302      	movs	r3, #2
 8005286:	e1fb      	b.n	8005680 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_I2C_Mem_Read+0x56>
 8005292:	2302      	movs	r3, #2
 8005294:	e1f4      	b.n	8005680 <HAL_I2C_Mem_Read+0x440>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d007      	beq.n	80052bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2222      	movs	r2, #34	; 0x22
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2240      	movs	r2, #64	; 0x40
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80052ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a5b      	ldr	r2, [pc, #364]	; (8005468 <HAL_I2C_Mem_Read+0x228>)
 80052fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052fe:	88f8      	ldrh	r0, [r7, #6]
 8005300:	893a      	ldrh	r2, [r7, #8]
 8005302:	8979      	ldrh	r1, [r7, #10]
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	4603      	mov	r3, r0
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fcd0 	bl	8005cb4 <I2C_RequestMemoryRead>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e1b0      	b.n	8005680 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005322:	2b00      	cmp	r3, #0
 8005324:	d113      	bne.n	800534e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005326:	2300      	movs	r3, #0
 8005328:	623b      	str	r3, [r7, #32]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	623b      	str	r3, [r7, #32]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e184      	b.n	8005658 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005352:	2b01      	cmp	r3, #1
 8005354:	d11b      	bne.n	800538e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e164      	b.n	8005658 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005392:	2b02      	cmp	r3, #2
 8005394:	d11b      	bne.n	80053ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b6:	2300      	movs	r3, #0
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	e144      	b.n	8005658 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053e4:	e138      	b.n	8005658 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	f200 80f1 	bhi.w	80055d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d123      	bne.n	8005440 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fe99 	bl	8006134 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e139      	b.n	8005680 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800543e:	e10b      	b.n	8005658 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005444:	2b02      	cmp	r3, #2
 8005446:	d14e      	bne.n	80054e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544e:	2200      	movs	r2, #0
 8005450:	4906      	ldr	r1, [pc, #24]	; (800546c <HAL_I2C_Mem_Read+0x22c>)
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fd16 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e10e      	b.n	8005680 <HAL_I2C_Mem_Read+0x440>
 8005462:	bf00      	nop
 8005464:	00100002 	.word	0x00100002
 8005468:	ffff0000 	.word	0xffff0000
 800546c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054e4:	e0b8      	b.n	8005658 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2200      	movs	r2, #0
 80054ee:	4966      	ldr	r1, [pc, #408]	; (8005688 <HAL_I2C_Mem_Read+0x448>)
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fcc7 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0bf      	b.n	8005680 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	2200      	movs	r2, #0
 800554a:	494f      	ldr	r1, [pc, #316]	; (8005688 <HAL_I2C_Mem_Read+0x448>)
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fc99 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e091      	b.n	8005680 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055d0:	e042      	b.n	8005658 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fdac 	bl	8006134 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e04c      	b.n	8005680 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b04      	cmp	r3, #4
 8005624:	d118      	bne.n	8005658 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565c:	2b00      	cmp	r3, #0
 800565e:	f47f aec2 	bne.w	80053e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	e000      	b.n	8005680 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800567e:	2302      	movs	r3, #2
  }
}
 8005680:	4618      	mov	r0, r3
 8005682:	3728      	adds	r7, #40	; 0x28
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	00010004 	.word	0x00010004

0800568c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	460b      	mov	r3, r1
 800569a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800569c:	f7fd fba0 	bl	8002de0 <HAL_GetTick>
 80056a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	f040 8111 	bne.w	80058d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	2319      	movs	r3, #25
 80056ba:	2201      	movs	r2, #1
 80056bc:	4988      	ldr	r1, [pc, #544]	; (80058e0 <HAL_I2C_IsDeviceReady+0x254>)
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fbe0 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80056ca:	2302      	movs	r3, #2
 80056cc:	e104      	b.n	80058d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_I2C_IsDeviceReady+0x50>
 80056d8:	2302      	movs	r3, #2
 80056da:	e0fd      	b.n	80058d8 <HAL_I2C_IsDeviceReady+0x24c>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d007      	beq.n	8005702 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0201 	orr.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005710:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2224      	movs	r2, #36	; 0x24
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4a70      	ldr	r2, [pc, #448]	; (80058e4 <HAL_I2C_IsDeviceReady+0x258>)
 8005724:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005734:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2200      	movs	r2, #0
 800573e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fb9e 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575c:	d103      	bne.n	8005766 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e0b6      	b.n	80058d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800576a:	897b      	ldrh	r3, [r7, #10]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005778:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800577a:	f7fd fb31 	bl	8002de0 <HAL_GetTick>
 800577e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b02      	cmp	r3, #2
 800578c:	bf0c      	ite	eq
 800578e:	2301      	moveq	r3, #1
 8005790:	2300      	movne	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057ae:	e025      	b.n	80057fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057b0:	f7fd fb16 	bl	8002de0 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d302      	bcc.n	80057c6 <HAL_I2C_IsDeviceReady+0x13a>
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	22a0      	movs	r2, #160	; 0xa0
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b02      	cmp	r3, #2
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2ba0      	cmp	r3, #160	; 0xa0
 8005806:	d005      	beq.n	8005814 <HAL_I2C_IsDeviceReady+0x188>
 8005808:	7dfb      	ldrb	r3, [r7, #23]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d102      	bne.n	8005814 <HAL_I2C_IsDeviceReady+0x188>
 800580e:	7dbb      	ldrb	r3, [r7, #22]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0cd      	beq.n	80057b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d129      	bne.n	800587e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005838:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	2319      	movs	r3, #25
 8005856:	2201      	movs	r2, #1
 8005858:	4921      	ldr	r1, [pc, #132]	; (80058e0 <HAL_I2C_IsDeviceReady+0x254>)
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fb12 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e036      	b.n	80058d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e02c      	b.n	80058d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005896:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	2319      	movs	r3, #25
 800589e:	2201      	movs	r2, #1
 80058a0:	490f      	ldr	r1, [pc, #60]	; (80058e0 <HAL_I2C_IsDeviceReady+0x254>)
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 faee 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e012      	b.n	80058d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	3301      	adds	r3, #1
 80058b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	f4ff af32 	bcc.w	8005726 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	00100002 	.word	0x00100002
 80058e4:	ffff0000 	.word	0xffff0000

080058e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	460b      	mov	r3, r1
 80058f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b08      	cmp	r3, #8
 8005902:	d006      	beq.n	8005912 <I2C_MasterRequestWrite+0x2a>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d003      	beq.n	8005912 <I2C_MasterRequestWrite+0x2a>
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005910:	d108      	bne.n	8005924 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e00b      	b.n	800593c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	2b12      	cmp	r3, #18
 800592a:	d107      	bne.n	800593c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800593a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fa9b 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00d      	beq.n	8005970 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005962:	d103      	bne.n	800596c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e035      	b.n	80059dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005978:	d108      	bne.n	800598c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800597a:	897b      	ldrh	r3, [r7, #10]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005988:	611a      	str	r2, [r3, #16]
 800598a:	e01b      	b.n	80059c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800598c:	897b      	ldrh	r3, [r7, #10]
 800598e:	11db      	asrs	r3, r3, #7
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 0306 	and.w	r3, r3, #6
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f063 030f 	orn	r3, r3, #15
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	490e      	ldr	r1, [pc, #56]	; (80059e4 <I2C_MasterRequestWrite+0xfc>)
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fac1 	bl	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e010      	b.n	80059dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059ba:	897b      	ldrh	r3, [r7, #10]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4907      	ldr	r1, [pc, #28]	; (80059e8 <I2C_MasterRequestWrite+0x100>)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fab1 	bl	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	00010008 	.word	0x00010008
 80059e8:	00010002 	.word	0x00010002

080059ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	460b      	mov	r3, r1
 80059fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d006      	beq.n	8005a26 <I2C_MasterRequestRead+0x3a>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d003      	beq.n	8005a26 <I2C_MasterRequestRead+0x3a>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a24:	d108      	bne.n	8005a38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e00b      	b.n	8005a50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	2b11      	cmp	r3, #17
 8005a3e:	d107      	bne.n	8005a50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fa11 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00d      	beq.n	8005a84 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a76:	d103      	bne.n	8005a80 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e079      	b.n	8005b78 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a8c:	d108      	bne.n	8005aa0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a8e:	897b      	ldrh	r3, [r7, #10]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	611a      	str	r2, [r3, #16]
 8005a9e:	e05f      	b.n	8005b60 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005aa0:	897b      	ldrh	r3, [r7, #10]
 8005aa2:	11db      	asrs	r3, r3, #7
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 0306 	and.w	r3, r3, #6
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f063 030f 	orn	r3, r3, #15
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4930      	ldr	r1, [pc, #192]	; (8005b80 <I2C_MasterRequestRead+0x194>)
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fa37 	bl	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e054      	b.n	8005b78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ace:	897b      	ldrh	r3, [r7, #10]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4929      	ldr	r1, [pc, #164]	; (8005b84 <I2C_MasterRequestRead+0x198>)
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fa27 	bl	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e044      	b.n	8005b78 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b12:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f9af 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00d      	beq.n	8005b48 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3a:	d103      	bne.n	8005b44 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e017      	b.n	8005b78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b48:	897b      	ldrh	r3, [r7, #10]
 8005b4a:	11db      	asrs	r3, r3, #7
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 0306 	and.w	r3, r3, #6
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f063 030e 	orn	r3, r3, #14
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4907      	ldr	r1, [pc, #28]	; (8005b84 <I2C_MasterRequestRead+0x198>)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f9e3 	bl	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	00010008 	.word	0x00010008
 8005b84:	00010002 	.word	0x00010002

08005b88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	4608      	mov	r0, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	461a      	mov	r2, r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	817b      	strh	r3, [r7, #10]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	813b      	strh	r3, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f960 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd8:	d103      	bne.n	8005be2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e05f      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005be6:	897b      	ldrh	r3, [r7, #10]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	492d      	ldr	r1, [pc, #180]	; (8005cb0 <I2C_RequestMemoryWrite+0x128>)
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f998 	bl	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e04c      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c24:	6a39      	ldr	r1, [r7, #32]
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fa02 	bl	8006030 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d107      	bne.n	8005c4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e02b      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d105      	bne.n	8005c60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c54:	893b      	ldrh	r3, [r7, #8]
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	611a      	str	r2, [r3, #16]
 8005c5e:	e021      	b.n	8005ca4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c60:	893b      	ldrh	r3, [r7, #8]
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c70:	6a39      	ldr	r1, [r7, #32]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f9dc 	bl	8006030 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d107      	bne.n	8005c96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e005      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	00010002 	.word	0x00010002

08005cb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	817b      	strh	r3, [r7, #10]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	813b      	strh	r3, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f8c2 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d14:	d103      	bne.n	8005d1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e0aa      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	4952      	ldr	r1, [pc, #328]	; (8005e80 <I2C_RequestMemoryRead+0x1cc>)
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f8fa 	bl	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e097      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	6a39      	ldr	r1, [r7, #32]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f964 	bl	8006030 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00d      	beq.n	8005d8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d107      	bne.n	8005d86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e076      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d105      	bne.n	8005d9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d90:	893b      	ldrh	r3, [r7, #8]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	611a      	str	r2, [r3, #16]
 8005d9a:	e021      	b.n	8005de0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dac:	6a39      	ldr	r1, [r7, #32]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f93e 	bl	8006030 <I2C_WaitOnTXEFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00d      	beq.n	8005dd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d107      	bne.n	8005dd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e050      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd6:	893b      	ldrh	r3, [r7, #8]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de2:	6a39      	ldr	r1, [r7, #32]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f923 	bl	8006030 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00d      	beq.n	8005e0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d107      	bne.n	8005e08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e035      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f82b 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00d      	beq.n	8005e50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e42:	d103      	bne.n	8005e4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e013      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e50:	897b      	ldrh	r3, [r7, #10]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	4906      	ldr	r1, [pc, #24]	; (8005e80 <I2C_RequestMemoryRead+0x1cc>)
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f863 	bl	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	00010002 	.word	0x00010002

08005e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	4613      	mov	r3, r2
 8005e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e94:	e025      	b.n	8005ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d021      	beq.n	8005ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9e:	f7fc ff9f 	bl	8002de0 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d302      	bcc.n	8005eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d116      	bne.n	8005ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f043 0220 	orr.w	r2, r3, #32
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e023      	b.n	8005f2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d10d      	bne.n	8005f08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	43da      	mvns	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	bf0c      	ite	eq
 8005efe:	2301      	moveq	r3, #1
 8005f00:	2300      	movne	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	e00c      	b.n	8005f22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	43da      	mvns	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4013      	ands	r3, r2
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bf0c      	ite	eq
 8005f1a:	2301      	moveq	r3, #1
 8005f1c:	2300      	movne	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d0b6      	beq.n	8005e96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f40:	e051      	b.n	8005fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f50:	d123      	bne.n	8005f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	f043 0204 	orr.w	r2, r3, #4
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e046      	b.n	8006028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d021      	beq.n	8005fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa2:	f7fc ff1d 	bl	8002de0 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d302      	bcc.n	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d116      	bne.n	8005fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f043 0220 	orr.w	r2, r3, #32
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e020      	b.n	8006028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10c      	bne.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bf14      	ite	ne
 8006002:	2301      	movne	r3, #1
 8006004:	2300      	moveq	r3, #0
 8006006:	b2db      	uxtb	r3, r3
 8006008:	e00b      	b.n	8006022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	43da      	mvns	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4013      	ands	r3, r2
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf14      	ite	ne
 800601c:	2301      	movne	r3, #1
 800601e:	2300      	moveq	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d18d      	bne.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800603c:	e02d      	b.n	800609a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f8ce 	bl	80061e0 <I2C_IsAcknowledgeFailed>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e02d      	b.n	80060aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d021      	beq.n	800609a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006056:	f7fc fec3 	bl	8002de0 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	d302      	bcc.n	800606c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d116      	bne.n	800609a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f043 0220 	orr.w	r2, r3, #32
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e007      	b.n	80060aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a4:	2b80      	cmp	r3, #128	; 0x80
 80060a6:	d1ca      	bne.n	800603e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060be:	e02d      	b.n	800611c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f88d 	bl	80061e0 <I2C_IsAcknowledgeFailed>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e02d      	b.n	800612c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d021      	beq.n	800611c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d8:	f7fc fe82 	bl	8002de0 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d302      	bcc.n	80060ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d116      	bne.n	800611c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e007      	b.n	800612c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b04      	cmp	r3, #4
 8006128:	d1ca      	bne.n	80060c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006140:	e042      	b.n	80061c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b10      	cmp	r3, #16
 800614e:	d119      	bne.n	8006184 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0210 	mvn.w	r2, #16
 8006158:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e029      	b.n	80061d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006184:	f7fc fe2c 	bl	8002de0 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	429a      	cmp	r2, r3
 8006192:	d302      	bcc.n	800619a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d116      	bne.n	80061c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	f043 0220 	orr.w	r2, r3, #32
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e007      	b.n	80061d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d1b5      	bne.n	8006142 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f6:	d11b      	bne.n	8006230 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006200:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	f043 0204 	orr.w	r2, r3, #4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
	...

08006240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e267      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d075      	beq.n	800634a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800625e:	4b88      	ldr	r3, [pc, #544]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
 8006266:	2b04      	cmp	r3, #4
 8006268:	d00c      	beq.n	8006284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800626a:	4b85      	ldr	r3, [pc, #532]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006272:	2b08      	cmp	r3, #8
 8006274:	d112      	bne.n	800629c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006276:	4b82      	ldr	r3, [pc, #520]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800627e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006282:	d10b      	bne.n	800629c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006284:	4b7e      	ldr	r3, [pc, #504]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d05b      	beq.n	8006348 <HAL_RCC_OscConfig+0x108>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d157      	bne.n	8006348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e242      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a4:	d106      	bne.n	80062b4 <HAL_RCC_OscConfig+0x74>
 80062a6:	4b76      	ldr	r3, [pc, #472]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a75      	ldr	r2, [pc, #468]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80062ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e01d      	b.n	80062f0 <HAL_RCC_OscConfig+0xb0>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062bc:	d10c      	bne.n	80062d8 <HAL_RCC_OscConfig+0x98>
 80062be:	4b70      	ldr	r3, [pc, #448]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a6f      	ldr	r2, [pc, #444]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80062c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	4b6d      	ldr	r3, [pc, #436]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a6c      	ldr	r2, [pc, #432]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80062d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e00b      	b.n	80062f0 <HAL_RCC_OscConfig+0xb0>
 80062d8:	4b69      	ldr	r3, [pc, #420]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a68      	ldr	r2, [pc, #416]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80062de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	4b66      	ldr	r3, [pc, #408]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a65      	ldr	r2, [pc, #404]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80062ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d013      	beq.n	8006320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f8:	f7fc fd72 	bl	8002de0 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006300:	f7fc fd6e 	bl	8002de0 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b64      	cmp	r3, #100	; 0x64
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e207      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006312:	4b5b      	ldr	r3, [pc, #364]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCC_OscConfig+0xc0>
 800631e:	e014      	b.n	800634a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006320:	f7fc fd5e 	bl	8002de0 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006328:	f7fc fd5a 	bl	8002de0 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b64      	cmp	r3, #100	; 0x64
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e1f3      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800633a:	4b51      	ldr	r3, [pc, #324]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0xe8>
 8006346:	e000      	b.n	800634a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d063      	beq.n	800641e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006356:	4b4a      	ldr	r3, [pc, #296]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 030c 	and.w	r3, r3, #12
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006362:	4b47      	ldr	r3, [pc, #284]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800636a:	2b08      	cmp	r3, #8
 800636c:	d11c      	bne.n	80063a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800636e:	4b44      	ldr	r3, [pc, #272]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d116      	bne.n	80063a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800637a:	4b41      	ldr	r3, [pc, #260]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <HAL_RCC_OscConfig+0x152>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d001      	beq.n	8006392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e1c7      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006392:	4b3b      	ldr	r3, [pc, #236]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	4937      	ldr	r1, [pc, #220]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063a6:	e03a      	b.n	800641e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d020      	beq.n	80063f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063b0:	4b34      	ldr	r3, [pc, #208]	; (8006484 <HAL_RCC_OscConfig+0x244>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b6:	f7fc fd13 	bl	8002de0 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063be:	f7fc fd0f 	bl	8002de0 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e1a8      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d0:	4b2b      	ldr	r3, [pc, #172]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f0      	beq.n	80063be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063dc:	4b28      	ldr	r3, [pc, #160]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	4925      	ldr	r1, [pc, #148]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	600b      	str	r3, [r1, #0]
 80063f0:	e015      	b.n	800641e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063f2:	4b24      	ldr	r3, [pc, #144]	; (8006484 <HAL_RCC_OscConfig+0x244>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fc fcf2 	bl	8002de0 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006400:	f7fc fcee 	bl	8002de0 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e187      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006412:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d036      	beq.n	8006498 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d016      	beq.n	8006460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <HAL_RCC_OscConfig+0x248>)
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fc fcd2 	bl	8002de0 <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006440:	f7fc fcce 	bl	8002de0 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e167      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <HAL_RCC_OscConfig+0x240>)
 8006454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0f0      	beq.n	8006440 <HAL_RCC_OscConfig+0x200>
 800645e:	e01b      	b.n	8006498 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <HAL_RCC_OscConfig+0x248>)
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006466:	f7fc fcbb 	bl	8002de0 <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800646c:	e00e      	b.n	800648c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800646e:	f7fc fcb7 	bl	8002de0 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d907      	bls.n	800648c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e150      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
 8006480:	40023800 	.word	0x40023800
 8006484:	42470000 	.word	0x42470000
 8006488:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800648c:	4b88      	ldr	r3, [pc, #544]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 800648e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1ea      	bne.n	800646e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8097 	beq.w	80065d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064a6:	2300      	movs	r3, #0
 80064a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064aa:	4b81      	ldr	r3, [pc, #516]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10f      	bne.n	80064d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064b6:	2300      	movs	r3, #0
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	4b7d      	ldr	r3, [pc, #500]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	4a7c      	ldr	r2, [pc, #496]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 80064c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c4:	6413      	str	r3, [r2, #64]	; 0x40
 80064c6:	4b7a      	ldr	r3, [pc, #488]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d6:	4b77      	ldr	r3, [pc, #476]	; (80066b4 <HAL_RCC_OscConfig+0x474>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d118      	bne.n	8006514 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064e2:	4b74      	ldr	r3, [pc, #464]	; (80066b4 <HAL_RCC_OscConfig+0x474>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a73      	ldr	r2, [pc, #460]	; (80066b4 <HAL_RCC_OscConfig+0x474>)
 80064e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ee:	f7fc fc77 	bl	8002de0 <HAL_GetTick>
 80064f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f4:	e008      	b.n	8006508 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f6:	f7fc fc73 	bl	8002de0 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d901      	bls.n	8006508 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e10c      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006508:	4b6a      	ldr	r3, [pc, #424]	; (80066b4 <HAL_RCC_OscConfig+0x474>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0f0      	beq.n	80064f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d106      	bne.n	800652a <HAL_RCC_OscConfig+0x2ea>
 800651c:	4b64      	ldr	r3, [pc, #400]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 800651e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006520:	4a63      	ldr	r2, [pc, #396]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	6713      	str	r3, [r2, #112]	; 0x70
 8006528:	e01c      	b.n	8006564 <HAL_RCC_OscConfig+0x324>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b05      	cmp	r3, #5
 8006530:	d10c      	bne.n	800654c <HAL_RCC_OscConfig+0x30c>
 8006532:	4b5f      	ldr	r3, [pc, #380]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006536:	4a5e      	ldr	r2, [pc, #376]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 8006538:	f043 0304 	orr.w	r3, r3, #4
 800653c:	6713      	str	r3, [r2, #112]	; 0x70
 800653e:	4b5c      	ldr	r3, [pc, #368]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	4a5b      	ldr	r2, [pc, #364]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 8006544:	f043 0301 	orr.w	r3, r3, #1
 8006548:	6713      	str	r3, [r2, #112]	; 0x70
 800654a:	e00b      	b.n	8006564 <HAL_RCC_OscConfig+0x324>
 800654c:	4b58      	ldr	r3, [pc, #352]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 800654e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006550:	4a57      	ldr	r2, [pc, #348]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 8006552:	f023 0301 	bic.w	r3, r3, #1
 8006556:	6713      	str	r3, [r2, #112]	; 0x70
 8006558:	4b55      	ldr	r3, [pc, #340]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	4a54      	ldr	r2, [pc, #336]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 800655e:	f023 0304 	bic.w	r3, r3, #4
 8006562:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d015      	beq.n	8006598 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656c:	f7fc fc38 	bl	8002de0 <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006572:	e00a      	b.n	800658a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006574:	f7fc fc34 	bl	8002de0 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006582:	4293      	cmp	r3, r2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e0cb      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800658a:	4b49      	ldr	r3, [pc, #292]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 800658c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0ee      	beq.n	8006574 <HAL_RCC_OscConfig+0x334>
 8006596:	e014      	b.n	80065c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006598:	f7fc fc22 	bl	8002de0 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800659e:	e00a      	b.n	80065b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065a0:	f7fc fc1e 	bl	8002de0 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e0b5      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065b6:	4b3e      	ldr	r3, [pc, #248]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1ee      	bne.n	80065a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d105      	bne.n	80065d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065c8:	4b39      	ldr	r3, [pc, #228]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	4a38      	ldr	r2, [pc, #224]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 80065ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80a1 	beq.w	8006720 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065de:	4b34      	ldr	r3, [pc, #208]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 030c 	and.w	r3, r3, #12
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d05c      	beq.n	80066a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d141      	bne.n	8006676 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f2:	4b31      	ldr	r3, [pc, #196]	; (80066b8 <HAL_RCC_OscConfig+0x478>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f8:	f7fc fbf2 	bl	8002de0 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006600:	f7fc fbee 	bl	8002de0 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e087      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	4b27      	ldr	r3, [pc, #156]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69da      	ldr	r2, [r3, #28]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	019b      	lsls	r3, r3, #6
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	085b      	lsrs	r3, r3, #1
 8006636:	3b01      	subs	r3, #1
 8006638:	041b      	lsls	r3, r3, #16
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	061b      	lsls	r3, r3, #24
 8006642:	491b      	ldr	r1, [pc, #108]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 8006644:	4313      	orrs	r3, r2
 8006646:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006648:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <HAL_RCC_OscConfig+0x478>)
 800664a:	2201      	movs	r2, #1
 800664c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664e:	f7fc fbc7 	bl	8002de0 <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006656:	f7fc fbc3 	bl	8002de0 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e05c      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006668:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0f0      	beq.n	8006656 <HAL_RCC_OscConfig+0x416>
 8006674:	e054      	b.n	8006720 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006676:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <HAL_RCC_OscConfig+0x478>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667c:	f7fc fbb0 	bl	8002de0 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006684:	f7fc fbac 	bl	8002de0 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e045      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006696:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <HAL_RCC_OscConfig+0x470>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f0      	bne.n	8006684 <HAL_RCC_OscConfig+0x444>
 80066a2:	e03d      	b.n	8006720 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d107      	bne.n	80066bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e038      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
 80066b0:	40023800 	.word	0x40023800
 80066b4:	40007000 	.word	0x40007000
 80066b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066bc:	4b1b      	ldr	r3, [pc, #108]	; (800672c <HAL_RCC_OscConfig+0x4ec>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d028      	beq.n	800671c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d121      	bne.n	800671c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d11a      	bne.n	800671c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066ec:	4013      	ands	r3, r2
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d111      	bne.n	800671c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	3b01      	subs	r3, #1
 8006706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006708:	429a      	cmp	r2, r3
 800670a:	d107      	bne.n	800671c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006718:	429a      	cmp	r2, r3
 800671a:	d001      	beq.n	8006720 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40023800 	.word	0x40023800

08006730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0cc      	b.n	80068de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006744:	4b68      	ldr	r3, [pc, #416]	; (80068e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d90c      	bls.n	800676c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006752:	4b65      	ldr	r3, [pc, #404]	; (80068e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800675a:	4b63      	ldr	r3, [pc, #396]	; (80068e8 <HAL_RCC_ClockConfig+0x1b8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d001      	beq.n	800676c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0b8      	b.n	80068de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d020      	beq.n	80067ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006784:	4b59      	ldr	r3, [pc, #356]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	4a58      	ldr	r2, [pc, #352]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 800678a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800678e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800679c:	4b53      	ldr	r3, [pc, #332]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	4a52      	ldr	r2, [pc, #328]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 80067a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067a8:	4b50      	ldr	r3, [pc, #320]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	494d      	ldr	r1, [pc, #308]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d044      	beq.n	8006850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d107      	bne.n	80067de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ce:	4b47      	ldr	r3, [pc, #284]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d119      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e07f      	b.n	80068de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d003      	beq.n	80067ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d107      	bne.n	80067fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ee:	4b3f      	ldr	r3, [pc, #252]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e06f      	b.n	80068de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fe:	4b3b      	ldr	r3, [pc, #236]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e067      	b.n	80068de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800680e:	4b37      	ldr	r3, [pc, #220]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f023 0203 	bic.w	r2, r3, #3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	4934      	ldr	r1, [pc, #208]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	4313      	orrs	r3, r2
 800681e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006820:	f7fc fade 	bl	8002de0 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006826:	e00a      	b.n	800683e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006828:	f7fc fada 	bl	8002de0 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f241 3288 	movw	r2, #5000	; 0x1388
 8006836:	4293      	cmp	r3, r2
 8006838:	d901      	bls.n	800683e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e04f      	b.n	80068de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683e:	4b2b      	ldr	r3, [pc, #172]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 020c 	and.w	r2, r3, #12
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	429a      	cmp	r2, r3
 800684e:	d1eb      	bne.n	8006828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006850:	4b25      	ldr	r3, [pc, #148]	; (80068e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d20c      	bcs.n	8006878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685e:	4b22      	ldr	r3, [pc, #136]	; (80068e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006866:	4b20      	ldr	r3, [pc, #128]	; (80068e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d001      	beq.n	8006878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e032      	b.n	80068de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d008      	beq.n	8006896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006884:	4b19      	ldr	r3, [pc, #100]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	4916      	ldr	r1, [pc, #88]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 8006892:	4313      	orrs	r3, r2
 8006894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	490e      	ldr	r1, [pc, #56]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068b6:	f000 f821 	bl	80068fc <HAL_RCC_GetSysClockFreq>
 80068ba:	4602      	mov	r2, r0
 80068bc:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	091b      	lsrs	r3, r3, #4
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	490a      	ldr	r1, [pc, #40]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 80068c8:	5ccb      	ldrb	r3, [r1, r3]
 80068ca:	fa22 f303 	lsr.w	r3, r2, r3
 80068ce:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80068d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068d2:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fc fa3e 	bl	8002d58 <HAL_InitTick>

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40023c00 	.word	0x40023c00
 80068ec:	40023800 	.word	0x40023800
 80068f0:	0800b394 	.word	0x0800b394
 80068f4:	20000000 	.word	0x20000000
 80068f8:	20000004 	.word	0x20000004

080068fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006900:	b094      	sub	sp, #80	; 0x50
 8006902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	647b      	str	r3, [r7, #68]	; 0x44
 8006908:	2300      	movs	r3, #0
 800690a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800690c:	2300      	movs	r3, #0
 800690e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006914:	4b79      	ldr	r3, [pc, #484]	; (8006afc <HAL_RCC_GetSysClockFreq+0x200>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f003 030c 	and.w	r3, r3, #12
 800691c:	2b08      	cmp	r3, #8
 800691e:	d00d      	beq.n	800693c <HAL_RCC_GetSysClockFreq+0x40>
 8006920:	2b08      	cmp	r3, #8
 8006922:	f200 80e1 	bhi.w	8006ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <HAL_RCC_GetSysClockFreq+0x34>
 800692a:	2b04      	cmp	r3, #4
 800692c:	d003      	beq.n	8006936 <HAL_RCC_GetSysClockFreq+0x3a>
 800692e:	e0db      	b.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006930:	4b73      	ldr	r3, [pc, #460]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8006932:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006934:	e0db      	b.n	8006aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006936:	4b73      	ldr	r3, [pc, #460]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x208>)
 8006938:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800693a:	e0d8      	b.n	8006aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800693c:	4b6f      	ldr	r3, [pc, #444]	; (8006afc <HAL_RCC_GetSysClockFreq+0x200>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006944:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006946:	4b6d      	ldr	r3, [pc, #436]	; (8006afc <HAL_RCC_GetSysClockFreq+0x200>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d063      	beq.n	8006a1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006952:	4b6a      	ldr	r3, [pc, #424]	; (8006afc <HAL_RCC_GetSysClockFreq+0x200>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	099b      	lsrs	r3, r3, #6
 8006958:	2200      	movs	r2, #0
 800695a:	63bb      	str	r3, [r7, #56]	; 0x38
 800695c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006964:	633b      	str	r3, [r7, #48]	; 0x30
 8006966:	2300      	movs	r3, #0
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
 800696a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800696e:	4622      	mov	r2, r4
 8006970:	462b      	mov	r3, r5
 8006972:	f04f 0000 	mov.w	r0, #0
 8006976:	f04f 0100 	mov.w	r1, #0
 800697a:	0159      	lsls	r1, r3, #5
 800697c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006980:	0150      	lsls	r0, r2, #5
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4621      	mov	r1, r4
 8006988:	1a51      	subs	r1, r2, r1
 800698a:	6139      	str	r1, [r7, #16]
 800698c:	4629      	mov	r1, r5
 800698e:	eb63 0301 	sbc.w	r3, r3, r1
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069a0:	4659      	mov	r1, fp
 80069a2:	018b      	lsls	r3, r1, #6
 80069a4:	4651      	mov	r1, sl
 80069a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069aa:	4651      	mov	r1, sl
 80069ac:	018a      	lsls	r2, r1, #6
 80069ae:	4651      	mov	r1, sl
 80069b0:	ebb2 0801 	subs.w	r8, r2, r1
 80069b4:	4659      	mov	r1, fp
 80069b6:	eb63 0901 	sbc.w	r9, r3, r1
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069ce:	4690      	mov	r8, r2
 80069d0:	4699      	mov	r9, r3
 80069d2:	4623      	mov	r3, r4
 80069d4:	eb18 0303 	adds.w	r3, r8, r3
 80069d8:	60bb      	str	r3, [r7, #8]
 80069da:	462b      	mov	r3, r5
 80069dc:	eb49 0303 	adc.w	r3, r9, r3
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069ee:	4629      	mov	r1, r5
 80069f0:	024b      	lsls	r3, r1, #9
 80069f2:	4621      	mov	r1, r4
 80069f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069f8:	4621      	mov	r1, r4
 80069fa:	024a      	lsls	r2, r1, #9
 80069fc:	4610      	mov	r0, r2
 80069fe:	4619      	mov	r1, r3
 8006a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a02:	2200      	movs	r2, #0
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a0c:	f7fa f8ec 	bl	8000be8 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4613      	mov	r3, r2
 8006a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a18:	e058      	b.n	8006acc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a1a:	4b38      	ldr	r3, [pc, #224]	; (8006afc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	099b      	lsrs	r3, r3, #6
 8006a20:	2200      	movs	r2, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	4611      	mov	r1, r2
 8006a26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a2a:	623b      	str	r3, [r7, #32]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a34:	4642      	mov	r2, r8
 8006a36:	464b      	mov	r3, r9
 8006a38:	f04f 0000 	mov.w	r0, #0
 8006a3c:	f04f 0100 	mov.w	r1, #0
 8006a40:	0159      	lsls	r1, r3, #5
 8006a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a46:	0150      	lsls	r0, r2, #5
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a52:	4649      	mov	r1, r9
 8006a54:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	f04f 0300 	mov.w	r3, #0
 8006a60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a6c:	ebb2 040a 	subs.w	r4, r2, sl
 8006a70:	eb63 050b 	sbc.w	r5, r3, fp
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	00eb      	lsls	r3, r5, #3
 8006a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a82:	00e2      	lsls	r2, r4, #3
 8006a84:	4614      	mov	r4, r2
 8006a86:	461d      	mov	r5, r3
 8006a88:	4643      	mov	r3, r8
 8006a8a:	18e3      	adds	r3, r4, r3
 8006a8c:	603b      	str	r3, [r7, #0]
 8006a8e:	464b      	mov	r3, r9
 8006a90:	eb45 0303 	adc.w	r3, r5, r3
 8006a94:	607b      	str	r3, [r7, #4]
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	028b      	lsls	r3, r1, #10
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006aac:	4621      	mov	r1, r4
 8006aae:	028a      	lsls	r2, r1, #10
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	61fa      	str	r2, [r7, #28]
 8006abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ac0:	f7fa f892 	bl	8000be8 <__aeabi_uldivmod>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4613      	mov	r3, r2
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <HAL_RCC_GetSysClockFreq+0x200>)
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	0c1b      	lsrs	r3, r3, #16
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006adc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ae6:	e002      	b.n	8006aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8006aea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3750      	adds	r7, #80	; 0x50
 8006af4:	46bd      	mov	sp, r7
 8006af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006afa:	bf00      	nop
 8006afc:	40023800 	.word	0x40023800
 8006b00:	00f42400 	.word	0x00f42400
 8006b04:	007a1200 	.word	0x007a1200

08006b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b0c:	4b03      	ldr	r3, [pc, #12]	; (8006b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	20000000 	.word	0x20000000

08006b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b24:	f7ff fff0 	bl	8006b08 <HAL_RCC_GetHCLKFreq>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	0a9b      	lsrs	r3, r3, #10
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	4903      	ldr	r1, [pc, #12]	; (8006b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b36:	5ccb      	ldrb	r3, [r1, r3]
 8006b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40023800 	.word	0x40023800
 8006b44:	0800b3a4 	.word	0x0800b3a4

08006b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b4c:	f7ff ffdc 	bl	8006b08 <HAL_RCC_GetHCLKFreq>
 8006b50:	4602      	mov	r2, r0
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	0b5b      	lsrs	r3, r3, #13
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	4903      	ldr	r1, [pc, #12]	; (8006b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b5e:	5ccb      	ldrb	r3, [r1, r3]
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	0800b3a4 	.word	0x0800b3a4

08006b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e07b      	b.n	8006c7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d108      	bne.n	8006b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b92:	d009      	beq.n	8006ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	61da      	str	r2, [r3, #28]
 8006b9a:	e005      	b.n	8006ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fb fa78 	bl	80020b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2c:	ea42 0103 	orr.w	r1, r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	0c1b      	lsrs	r3, r3, #16
 8006c46:	f003 0104 	and.w	r1, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f003 0210 	and.w	r2, r3, #16
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	099b      	lsrs	r3, r3, #6
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10f      	bne.n	8006cc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	099b      	lsrs	r3, r3, #6
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
    return;
 8006cc6:	e0d7      	b.n	8006e78 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	085b      	lsrs	r3, r3, #1
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <HAL_SPI_IRQHandler+0x66>
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	09db      	lsrs	r3, r3, #7
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d004      	beq.n	8006cea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
    return;
 8006ce8:	e0c6      	b.n	8006e78 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10c      	bne.n	8006d10 <HAL_SPI_IRQHandler+0x8c>
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	099b      	lsrs	r3, r3, #6
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	0a1b      	lsrs	r3, r3, #8
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80b4 	beq.w	8006e78 <HAL_SPI_IRQHandler+0x1f4>
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80ad 	beq.w	8006e78 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	099b      	lsrs	r3, r3, #6
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d023      	beq.n	8006d72 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d011      	beq.n	8006d5a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3a:	f043 0204 	orr.w	r2, r3, #4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	e00b      	b.n	8006d72 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	613b      	str	r3, [r7, #16]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	693b      	ldr	r3, [r7, #16]
        return;
 8006d70:	e082      	b.n	8006e78 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	095b      	lsrs	r3, r3, #5
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d014      	beq.n	8006da8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	f043 0201 	orr.w	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	0a1b      	lsrs	r3, r3, #8
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00c      	beq.n	8006dce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db8:	f043 0208 	orr.w	r2, r3, #8
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60bb      	str	r3, [r7, #8]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d04f      	beq.n	8006e76 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006de4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <HAL_SPI_IRQHandler+0x17e>
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d034      	beq.n	8006e6c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0203 	bic.w	r2, r2, #3
 8006e10:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d011      	beq.n	8006e3e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1e:	4a18      	ldr	r2, [pc, #96]	; (8006e80 <HAL_SPI_IRQHandler+0x1fc>)
 8006e20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fd fa9d 	bl	8004366 <HAL_DMA_Abort_IT>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d016      	beq.n	8006e74 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4a:	4a0d      	ldr	r2, [pc, #52]	; (8006e80 <HAL_SPI_IRQHandler+0x1fc>)
 8006e4c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fd fa87 	bl	8004366 <HAL_DMA_Abort_IT>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006e6a:	e003      	b.n	8006e74 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f809 	bl	8006e84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e72:	e000      	b.n	8006e76 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006e74:	bf00      	nop
    return;
 8006e76:	bf00      	nop
  }
}
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	08006e99 	.word	0x08006e99

08006e84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f7ff ffe6 	bl	8006e84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e041      	b.n	8006f56 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fa ff24 	bl	8001d34 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4619      	mov	r1, r3
 8006efe:	4610      	mov	r0, r2
 8006f00:	f000 fba8 	bl	8007654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <HAL_TIM_IC_Start_IT+0x1e>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	e013      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x46>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d104      	bne.n	8006f8e <HAL_TIM_IC_Start_IT+0x2e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	e00b      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x46>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d104      	bne.n	8006f9e <HAL_TIM_IC_Start_IT+0x3e>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	e003      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x46>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <HAL_TIM_IC_Start_IT+0x58>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	e013      	b.n	8006fe0 <HAL_TIM_IC_Start_IT+0x80>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d104      	bne.n	8006fc8 <HAL_TIM_IC_Start_IT+0x68>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	e00b      	b.n	8006fe0 <HAL_TIM_IC_Start_IT+0x80>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b08      	cmp	r3, #8
 8006fcc:	d104      	bne.n	8006fd8 <HAL_TIM_IC_Start_IT+0x78>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e003      	b.n	8006fe0 <HAL_TIM_IC_Start_IT+0x80>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d102      	bne.n	8006fee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fe8:	7b7b      	ldrb	r3, [r7, #13]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d001      	beq.n	8006ff2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e0cc      	b.n	800718c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_IC_Start_IT+0xa2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007000:	e013      	b.n	800702a <HAL_TIM_IC_Start_IT+0xca>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d104      	bne.n	8007012 <HAL_TIM_IC_Start_IT+0xb2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007010:	e00b      	b.n	800702a <HAL_TIM_IC_Start_IT+0xca>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d104      	bne.n	8007022 <HAL_TIM_IC_Start_IT+0xc2>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007020:	e003      	b.n	800702a <HAL_TIM_IC_Start_IT+0xca>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2202      	movs	r2, #2
 8007026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <HAL_TIM_IC_Start_IT+0xda>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007038:	e013      	b.n	8007062 <HAL_TIM_IC_Start_IT+0x102>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b04      	cmp	r3, #4
 800703e:	d104      	bne.n	800704a <HAL_TIM_IC_Start_IT+0xea>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007048:	e00b      	b.n	8007062 <HAL_TIM_IC_Start_IT+0x102>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b08      	cmp	r3, #8
 800704e:	d104      	bne.n	800705a <HAL_TIM_IC_Start_IT+0xfa>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007058:	e003      	b.n	8007062 <HAL_TIM_IC_Start_IT+0x102>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b0c      	cmp	r3, #12
 8007066:	d841      	bhi.n	80070ec <HAL_TIM_IC_Start_IT+0x18c>
 8007068:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <HAL_TIM_IC_Start_IT+0x110>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	080070a5 	.word	0x080070a5
 8007074:	080070ed 	.word	0x080070ed
 8007078:	080070ed 	.word	0x080070ed
 800707c:	080070ed 	.word	0x080070ed
 8007080:	080070b7 	.word	0x080070b7
 8007084:	080070ed 	.word	0x080070ed
 8007088:	080070ed 	.word	0x080070ed
 800708c:	080070ed 	.word	0x080070ed
 8007090:	080070c9 	.word	0x080070c9
 8007094:	080070ed 	.word	0x080070ed
 8007098:	080070ed 	.word	0x080070ed
 800709c:	080070ed 	.word	0x080070ed
 80070a0:	080070db 	.word	0x080070db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0202 	orr.w	r2, r2, #2
 80070b2:	60da      	str	r2, [r3, #12]
      break;
 80070b4:	e01d      	b.n	80070f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0204 	orr.w	r2, r2, #4
 80070c4:	60da      	str	r2, [r3, #12]
      break;
 80070c6:	e014      	b.n	80070f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0208 	orr.w	r2, r2, #8
 80070d6:	60da      	str	r2, [r3, #12]
      break;
 80070d8:	e00b      	b.n	80070f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f042 0210 	orr.w	r2, r2, #16
 80070e8:	60da      	str	r2, [r3, #12]
      break;
 80070ea:	e002      	b.n	80070f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]
      break;
 80070f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d148      	bne.n	800718a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2201      	movs	r2, #1
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fd82 	bl	8007c0a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a22      	ldr	r2, [pc, #136]	; (8007194 <HAL_TIM_IC_Start_IT+0x234>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d022      	beq.n	8007156 <HAL_TIM_IC_Start_IT+0x1f6>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007118:	d01d      	beq.n	8007156 <HAL_TIM_IC_Start_IT+0x1f6>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a1e      	ldr	r2, [pc, #120]	; (8007198 <HAL_TIM_IC_Start_IT+0x238>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d018      	beq.n	8007156 <HAL_TIM_IC_Start_IT+0x1f6>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1c      	ldr	r2, [pc, #112]	; (800719c <HAL_TIM_IC_Start_IT+0x23c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d013      	beq.n	8007156 <HAL_TIM_IC_Start_IT+0x1f6>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1b      	ldr	r2, [pc, #108]	; (80071a0 <HAL_TIM_IC_Start_IT+0x240>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00e      	beq.n	8007156 <HAL_TIM_IC_Start_IT+0x1f6>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a19      	ldr	r2, [pc, #100]	; (80071a4 <HAL_TIM_IC_Start_IT+0x244>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d009      	beq.n	8007156 <HAL_TIM_IC_Start_IT+0x1f6>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a18      	ldr	r2, [pc, #96]	; (80071a8 <HAL_TIM_IC_Start_IT+0x248>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d004      	beq.n	8007156 <HAL_TIM_IC_Start_IT+0x1f6>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a16      	ldr	r2, [pc, #88]	; (80071ac <HAL_TIM_IC_Start_IT+0x24c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d111      	bne.n	800717a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2b06      	cmp	r3, #6
 8007166:	d010      	beq.n	800718a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007178:	e007      	b.n	800718a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800718a:	7bfb      	ldrb	r3, [r7, #15]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40010000 	.word	0x40010000
 8007198:	40000400 	.word	0x40000400
 800719c:	40000800 	.word	0x40000800
 80071a0:	40000c00 	.word	0x40000c00
 80071a4:	40010400 	.word	0x40010400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40001800 	.word	0x40001800

080071b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d122      	bne.n	800720c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d11b      	bne.n	800720c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0202 	mvn.w	r2, #2
 80071dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fa f90e 	bl	8001414 <HAL_TIM_IC_CaptureCallback>
 80071f8:	e005      	b.n	8007206 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa0c 	bl	8007618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fa13 	bl	800762c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b04      	cmp	r3, #4
 8007218:	d122      	bne.n	8007260 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b04      	cmp	r3, #4
 8007226:	d11b      	bne.n	8007260 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0204 	mvn.w	r2, #4
 8007230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7fa f8e4 	bl	8001414 <HAL_TIM_IC_CaptureCallback>
 800724c:	e005      	b.n	800725a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f9e2 	bl	8007618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f9e9 	bl	800762c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b08      	cmp	r3, #8
 800726c:	d122      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0308 	and.w	r3, r3, #8
 8007278:	2b08      	cmp	r3, #8
 800727a:	d11b      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0208 	mvn.w	r2, #8
 8007284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2204      	movs	r2, #4
 800728a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fa f8ba 	bl	8001414 <HAL_TIM_IC_CaptureCallback>
 80072a0:	e005      	b.n	80072ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9b8 	bl	8007618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f9bf 	bl	800762c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	2b10      	cmp	r3, #16
 80072c0:	d122      	bne.n	8007308 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b10      	cmp	r3, #16
 80072ce:	d11b      	bne.n	8007308 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0210 	mvn.w	r2, #16
 80072d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2208      	movs	r2, #8
 80072de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fa f890 	bl	8001414 <HAL_TIM_IC_CaptureCallback>
 80072f4:	e005      	b.n	8007302 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f98e 	bl	8007618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f995 	bl	800762c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b01      	cmp	r3, #1
 8007314:	d10e      	bne.n	8007334 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b01      	cmp	r3, #1
 8007322:	d107      	bne.n	8007334 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f06f 0201 	mvn.w	r2, #1
 800732c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f968 	bl	8007604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733e:	2b80      	cmp	r3, #128	; 0x80
 8007340:	d10e      	bne.n	8007360 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734c:	2b80      	cmp	r3, #128	; 0x80
 800734e:	d107      	bne.n	8007360 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fc84 	bl	8007c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736a:	2b40      	cmp	r3, #64	; 0x40
 800736c:	d10e      	bne.n	800738c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d107      	bne.n	800738c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f95a 	bl	8007640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b20      	cmp	r3, #32
 8007398:	d10e      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d107      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0220 	mvn.w	r2, #32
 80073b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fc4e 	bl	8007c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <HAL_TIM_IC_ConfigChannel+0x1e>
 80073da:	2302      	movs	r3, #2
 80073dc:	e088      	b.n	80074f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d11b      	bne.n	8007424 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	6819      	ldr	r1, [r3, #0]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f000 fa5c 	bl	80078b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 020c 	bic.w	r2, r2, #12
 800740e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6999      	ldr	r1, [r3, #24]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	619a      	str	r2, [r3, #24]
 8007422:	e060      	b.n	80074e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b04      	cmp	r3, #4
 8007428:	d11c      	bne.n	8007464 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6819      	ldr	r1, [r3, #0]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f000 fae0 	bl	80079fe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699a      	ldr	r2, [r3, #24]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800744c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6999      	ldr	r1, [r3, #24]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	021a      	lsls	r2, r3, #8
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	619a      	str	r2, [r3, #24]
 8007462:	e040      	b.n	80074e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b08      	cmp	r3, #8
 8007468:	d11b      	bne.n	80074a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6819      	ldr	r1, [r3, #0]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f000 fb2d 	bl	8007ad8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 020c 	bic.w	r2, r2, #12
 800748c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69d9      	ldr	r1, [r3, #28]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	61da      	str	r2, [r3, #28]
 80074a0:	e021      	b.n	80074e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b0c      	cmp	r3, #12
 80074a6:	d11c      	bne.n	80074e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6818      	ldr	r0, [r3, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6819      	ldr	r1, [r3, #0]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f000 fb4a 	bl	8007b50 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	69da      	ldr	r2, [r3, #28]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80074ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69d9      	ldr	r1, [r3, #28]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	021a      	lsls	r2, r3, #8
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	61da      	str	r2, [r3, #28]
 80074e0:	e001      	b.n	80074e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_TIM_SlaveConfigSynchro+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e031      	b.n	8007574 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f936 	bl	8007794 <TIM_SlaveTimer_SetConfig>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e018      	b.n	8007574 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007550:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007560:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b0c      	cmp	r3, #12
 800758e:	d831      	bhi.n	80075f4 <HAL_TIM_ReadCapturedValue+0x78>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075cd 	.word	0x080075cd
 800759c:	080075f5 	.word	0x080075f5
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	080075f5 	.word	0x080075f5
 80075a8:	080075d7 	.word	0x080075d7
 80075ac:	080075f5 	.word	0x080075f5
 80075b0:	080075f5 	.word	0x080075f5
 80075b4:	080075f5 	.word	0x080075f5
 80075b8:	080075e1 	.word	0x080075e1
 80075bc:	080075f5 	.word	0x080075f5
 80075c0:	080075f5 	.word	0x080075f5
 80075c4:	080075f5 	.word	0x080075f5
 80075c8:	080075eb 	.word	0x080075eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d2:	60fb      	str	r3, [r7, #12]

      break;
 80075d4:	e00f      	b.n	80075f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	60fb      	str	r3, [r7, #12]

      break;
 80075de:	e00a      	b.n	80075f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e6:	60fb      	str	r3, [r7, #12]

      break;
 80075e8:	e005      	b.n	80075f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	60fb      	str	r3, [r7, #12]

      break;
 80075f2:	e000      	b.n	80075f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80075f4:	bf00      	nop
  }

  return tmpreg;
 80075f6:	68fb      	ldr	r3, [r7, #12]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a40      	ldr	r2, [pc, #256]	; (8007768 <TIM_Base_SetConfig+0x114>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007672:	d00f      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a3d      	ldr	r2, [pc, #244]	; (800776c <TIM_Base_SetConfig+0x118>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00b      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a3c      	ldr	r2, [pc, #240]	; (8007770 <TIM_Base_SetConfig+0x11c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d007      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a3b      	ldr	r2, [pc, #236]	; (8007774 <TIM_Base_SetConfig+0x120>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a3a      	ldr	r2, [pc, #232]	; (8007778 <TIM_Base_SetConfig+0x124>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d108      	bne.n	80076a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a2f      	ldr	r2, [pc, #188]	; (8007768 <TIM_Base_SetConfig+0x114>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d02b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b4:	d027      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2c      	ldr	r2, [pc, #176]	; (800776c <TIM_Base_SetConfig+0x118>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d023      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a2b      	ldr	r2, [pc, #172]	; (8007770 <TIM_Base_SetConfig+0x11c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01f      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a2a      	ldr	r2, [pc, #168]	; (8007774 <TIM_Base_SetConfig+0x120>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a29      	ldr	r2, [pc, #164]	; (8007778 <TIM_Base_SetConfig+0x124>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d017      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a28      	ldr	r2, [pc, #160]	; (800777c <TIM_Base_SetConfig+0x128>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d013      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a27      	ldr	r2, [pc, #156]	; (8007780 <TIM_Base_SetConfig+0x12c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00f      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a26      	ldr	r2, [pc, #152]	; (8007784 <TIM_Base_SetConfig+0x130>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a25      	ldr	r2, [pc, #148]	; (8007788 <TIM_Base_SetConfig+0x134>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a24      	ldr	r2, [pc, #144]	; (800778c <TIM_Base_SetConfig+0x138>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a23      	ldr	r2, [pc, #140]	; (8007790 <TIM_Base_SetConfig+0x13c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d108      	bne.n	8007718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800770c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a0a      	ldr	r2, [pc, #40]	; (8007768 <TIM_Base_SetConfig+0x114>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0xf8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <TIM_Base_SetConfig+0x124>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d103      	bne.n	8007754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	615a      	str	r2, [r3, #20]
}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40010000 	.word	0x40010000
 800776c:	40000400 	.word	0x40000400
 8007770:	40000800 	.word	0x40000800
 8007774:	40000c00 	.word	0x40000c00
 8007778:	40010400 	.word	0x40010400
 800777c:	40014000 	.word	0x40014000
 8007780:	40014400 	.word	0x40014400
 8007784:	40014800 	.word	0x40014800
 8007788:	40001800 	.word	0x40001800
 800778c:	40001c00 	.word	0x40001c00
 8007790:	40002000 	.word	0x40002000

08007794 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f023 0307 	bic.w	r3, r3, #7
 80077c2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b70      	cmp	r3, #112	; 0x70
 80077dc:	d01a      	beq.n	8007814 <TIM_SlaveTimer_SetConfig+0x80>
 80077de:	2b70      	cmp	r3, #112	; 0x70
 80077e0:	d860      	bhi.n	80078a4 <TIM_SlaveTimer_SetConfig+0x110>
 80077e2:	2b60      	cmp	r3, #96	; 0x60
 80077e4:	d054      	beq.n	8007890 <TIM_SlaveTimer_SetConfig+0xfc>
 80077e6:	2b60      	cmp	r3, #96	; 0x60
 80077e8:	d85c      	bhi.n	80078a4 <TIM_SlaveTimer_SetConfig+0x110>
 80077ea:	2b50      	cmp	r3, #80	; 0x50
 80077ec:	d046      	beq.n	800787c <TIM_SlaveTimer_SetConfig+0xe8>
 80077ee:	2b50      	cmp	r3, #80	; 0x50
 80077f0:	d858      	bhi.n	80078a4 <TIM_SlaveTimer_SetConfig+0x110>
 80077f2:	2b40      	cmp	r3, #64	; 0x40
 80077f4:	d019      	beq.n	800782a <TIM_SlaveTimer_SetConfig+0x96>
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d854      	bhi.n	80078a4 <TIM_SlaveTimer_SetConfig+0x110>
 80077fa:	2b30      	cmp	r3, #48	; 0x30
 80077fc:	d055      	beq.n	80078aa <TIM_SlaveTimer_SetConfig+0x116>
 80077fe:	2b30      	cmp	r3, #48	; 0x30
 8007800:	d850      	bhi.n	80078a4 <TIM_SlaveTimer_SetConfig+0x110>
 8007802:	2b20      	cmp	r3, #32
 8007804:	d051      	beq.n	80078aa <TIM_SlaveTimer_SetConfig+0x116>
 8007806:	2b20      	cmp	r3, #32
 8007808:	d84c      	bhi.n	80078a4 <TIM_SlaveTimer_SetConfig+0x110>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d04d      	beq.n	80078aa <TIM_SlaveTimer_SetConfig+0x116>
 800780e:	2b10      	cmp	r3, #16
 8007810:	d04b      	beq.n	80078aa <TIM_SlaveTimer_SetConfig+0x116>
 8007812:	e047      	b.n	80078a4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6818      	ldr	r0, [r3, #0]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	68d9      	ldr	r1, [r3, #12]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	f000 f9d1 	bl	8007bca <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007828:	e040      	b.n	80078ac <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b05      	cmp	r3, #5
 8007830:	d101      	bne.n	8007836 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e03b      	b.n	80078ae <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6a1a      	ldr	r2, [r3, #32]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800785c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	4313      	orrs	r3, r2
 8007868:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	621a      	str	r2, [r3, #32]
      break;
 800787a:	e017      	b.n	80078ac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	6899      	ldr	r1, [r3, #8]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	461a      	mov	r2, r3
 800788a:	f000 f889 	bl	80079a0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800788e:	e00d      	b.n	80078ac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	6899      	ldr	r1, [r3, #8]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	461a      	mov	r2, r3
 800789e:	f000 f8eb 	bl	8007a78 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80078a2:	e003      	b.n	80078ac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	75fb      	strb	r3, [r7, #23]
      break;
 80078a8:	e000      	b.n	80078ac <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80078aa:	bf00      	nop
  }

  return status;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	f023 0201 	bic.w	r2, r3, #1
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4a28      	ldr	r2, [pc, #160]	; (8007984 <TIM_TI1_SetConfig+0xcc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d01b      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ec:	d017      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a25      	ldr	r2, [pc, #148]	; (8007988 <TIM_TI1_SetConfig+0xd0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a24      	ldr	r2, [pc, #144]	; (800798c <TIM_TI1_SetConfig+0xd4>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00f      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4a23      	ldr	r2, [pc, #140]	; (8007990 <TIM_TI1_SetConfig+0xd8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00b      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4a22      	ldr	r2, [pc, #136]	; (8007994 <TIM_TI1_SetConfig+0xdc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d007      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4a21      	ldr	r2, [pc, #132]	; (8007998 <TIM_TI1_SetConfig+0xe0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d003      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4a20      	ldr	r2, [pc, #128]	; (800799c <TIM_TI1_SetConfig+0xe4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d101      	bne.n	8007922 <TIM_TI1_SetConfig+0x6a>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <TIM_TI1_SetConfig+0x6c>
 8007922:	2300      	movs	r3, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f023 0303 	bic.w	r3, r3, #3
 800792e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	e003      	b.n	8007942 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f043 0301 	orr.w	r3, r3, #1
 8007940:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	b2db      	uxtb	r3, r3
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f023 030a 	bic.w	r3, r3, #10
 800795c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f003 030a 	and.w	r3, r3, #10
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4313      	orrs	r3, r2
 8007968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	621a      	str	r2, [r3, #32]
}
 8007976:	bf00      	nop
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40010000 	.word	0x40010000
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40010400 	.word	0x40010400
 8007998:	40014000 	.word	0x40014000
 800799c:	40001800 	.word	0x40001800

080079a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f023 0201 	bic.w	r2, r3, #1
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f023 030a 	bic.w	r3, r3, #10
 80079dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	621a      	str	r2, [r3, #32]
}
 80079f2:	bf00      	nop
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b087      	sub	sp, #28
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	f023 0210 	bic.w	r2, r3, #16
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	021b      	lsls	r3, r3, #8
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	031b      	lsls	r3, r3, #12
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	621a      	str	r2, [r3, #32]
}
 8007a6c:	bf00      	nop
 8007a6e:	371c      	adds	r7, #28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	f023 0210 	bic.w	r2, r3, #16
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	031b      	lsls	r3, r3, #12
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	621a      	str	r2, [r3, #32]
}
 8007acc:	bf00      	nop
 8007ace:	371c      	adds	r7, #28
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f023 0303 	bic.w	r3, r3, #3
 8007b04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007b28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	621a      	str	r2, [r3, #32]
}
 8007b44:	bf00      	nop
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	031b      	lsls	r3, r3, #12
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007ba2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	031b      	lsls	r3, r3, #12
 8007ba8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	621a      	str	r2, [r3, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b087      	sub	sp, #28
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	607a      	str	r2, [r7, #4]
 8007bd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007be4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	021a      	lsls	r2, r3, #8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	431a      	orrs	r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	609a      	str	r2, [r3, #8]
}
 8007bfe:	bf00      	nop
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b087      	sub	sp, #28
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f003 031f 	and.w	r3, r3, #31
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c22:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a1a      	ldr	r2, [r3, #32]
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	43db      	mvns	r3, r3
 8007c2c:	401a      	ands	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1a      	ldr	r2, [r3, #32]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f003 031f 	and.w	r3, r3, #31
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c42:	431a      	orrs	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	621a      	str	r2, [r3, #32]
}
 8007c48:	bf00      	nop
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e03f      	b.n	8007d0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fa fa58 	bl	8002158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2224      	movs	r2, #36	; 0x24
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f929 	bl	8007f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	695a      	ldr	r2, [r3, #20]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b08a      	sub	sp, #40	; 0x28
 8007d1a:	af02      	add	r7, sp, #8
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	603b      	str	r3, [r7, #0]
 8007d22:	4613      	mov	r3, r2
 8007d24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d17c      	bne.n	8007e30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <HAL_UART_Transmit+0x2c>
 8007d3c:	88fb      	ldrh	r3, [r7, #6]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e075      	b.n	8007e32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d101      	bne.n	8007d54 <HAL_UART_Transmit+0x3e>
 8007d50:	2302      	movs	r3, #2
 8007d52:	e06e      	b.n	8007e32 <HAL_UART_Transmit+0x11c>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2221      	movs	r2, #33	; 0x21
 8007d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d6a:	f7fb f839 	bl	8002de0 <HAL_GetTick>
 8007d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	88fa      	ldrh	r2, [r7, #6]
 8007d7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d84:	d108      	bne.n	8007d98 <HAL_UART_Transmit+0x82>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	e003      	b.n	8007da0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007da8:	e02a      	b.n	8007e00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2200      	movs	r2, #0
 8007db2:	2180      	movs	r1, #128	; 0x80
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f840 	bl	8007e3a <UART_WaitOnFlagUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e036      	b.n	8007e32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10b      	bne.n	8007de2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	3302      	adds	r3, #2
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	e007      	b.n	8007df2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	3301      	adds	r3, #1
 8007df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1cf      	bne.n	8007daa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2200      	movs	r2, #0
 8007e12:	2140      	movs	r1, #64	; 0x40
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f810 	bl	8007e3a <UART_WaitOnFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e006      	b.n	8007e32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	e000      	b.n	8007e32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b090      	sub	sp, #64	; 0x40
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	4613      	mov	r3, r2
 8007e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e4a:	e050      	b.n	8007eee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e52:	d04c      	beq.n	8007eee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d007      	beq.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x30>
 8007e5a:	f7fa ffc1 	bl	8002de0 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d241      	bcs.n	8007eee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	330c      	adds	r3, #12
 8007e70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	e853 3f00 	ldrex	r3, [r3]
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	330c      	adds	r3, #12
 8007e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e8a:	637a      	str	r2, [r7, #52]	; 0x34
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e5      	bne.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3314      	adds	r3, #20
 8007ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	613b      	str	r3, [r7, #16]
   return(result);
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	f023 0301 	bic.w	r3, r3, #1
 8007eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3314      	adds	r3, #20
 8007ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ebe:	623a      	str	r2, [r7, #32]
 8007ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	69f9      	ldr	r1, [r7, #28]
 8007ec4:	6a3a      	ldr	r2, [r7, #32]
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e5      	bne.n	8007e9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e00f      	b.n	8007f0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	bf0c      	ite	eq
 8007efe:	2301      	moveq	r3, #1
 8007f00:	2300      	movne	r3, #0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d09f      	beq.n	8007e4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3740      	adds	r7, #64	; 0x40
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f1c:	b0c0      	sub	sp, #256	; 0x100
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f34:	68d9      	ldr	r1, [r3, #12]
 8007f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	ea40 0301 	orr.w	r3, r0, r1
 8007f40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f70:	f021 010c 	bic.w	r1, r1, #12
 8007f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f7e:	430b      	orrs	r3, r1
 8007f80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f92:	6999      	ldr	r1, [r3, #24]
 8007f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	ea40 0301 	orr.w	r3, r0, r1
 8007f9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4b8f      	ldr	r3, [pc, #572]	; (80081e4 <UART_SetConfig+0x2cc>)
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d005      	beq.n	8007fb8 <UART_SetConfig+0xa0>
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b8d      	ldr	r3, [pc, #564]	; (80081e8 <UART_SetConfig+0x2d0>)
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d104      	bne.n	8007fc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fb8:	f7fe fdc6 	bl	8006b48 <HAL_RCC_GetPCLK2Freq>
 8007fbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007fc0:	e003      	b.n	8007fca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fc2:	f7fe fdad 	bl	8006b20 <HAL_RCC_GetPCLK1Freq>
 8007fc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd4:	f040 810c 	bne.w	80081f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fe2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007fe6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007fea:	4622      	mov	r2, r4
 8007fec:	462b      	mov	r3, r5
 8007fee:	1891      	adds	r1, r2, r2
 8007ff0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ff2:	415b      	adcs	r3, r3
 8007ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ff6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	eb12 0801 	adds.w	r8, r2, r1
 8008000:	4629      	mov	r1, r5
 8008002:	eb43 0901 	adc.w	r9, r3, r1
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800801a:	4690      	mov	r8, r2
 800801c:	4699      	mov	r9, r3
 800801e:	4623      	mov	r3, r4
 8008020:	eb18 0303 	adds.w	r3, r8, r3
 8008024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008028:	462b      	mov	r3, r5
 800802a:	eb49 0303 	adc.w	r3, r9, r3
 800802e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800803e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008042:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008046:	460b      	mov	r3, r1
 8008048:	18db      	adds	r3, r3, r3
 800804a:	653b      	str	r3, [r7, #80]	; 0x50
 800804c:	4613      	mov	r3, r2
 800804e:	eb42 0303 	adc.w	r3, r2, r3
 8008052:	657b      	str	r3, [r7, #84]	; 0x54
 8008054:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008058:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800805c:	f7f8 fdc4 	bl	8000be8 <__aeabi_uldivmod>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4b61      	ldr	r3, [pc, #388]	; (80081ec <UART_SetConfig+0x2d4>)
 8008066:	fba3 2302 	umull	r2, r3, r3, r2
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	011c      	lsls	r4, r3, #4
 800806e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008072:	2200      	movs	r2, #0
 8008074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008078:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800807c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	1891      	adds	r1, r2, r2
 8008086:	64b9      	str	r1, [r7, #72]	; 0x48
 8008088:	415b      	adcs	r3, r3
 800808a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800808c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008090:	4641      	mov	r1, r8
 8008092:	eb12 0a01 	adds.w	sl, r2, r1
 8008096:	4649      	mov	r1, r9
 8008098:	eb43 0b01 	adc.w	fp, r3, r1
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080b0:	4692      	mov	sl, r2
 80080b2:	469b      	mov	fp, r3
 80080b4:	4643      	mov	r3, r8
 80080b6:	eb1a 0303 	adds.w	r3, sl, r3
 80080ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080be:	464b      	mov	r3, r9
 80080c0:	eb4b 0303 	adc.w	r3, fp, r3
 80080c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80080d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80080dc:	460b      	mov	r3, r1
 80080de:	18db      	adds	r3, r3, r3
 80080e0:	643b      	str	r3, [r7, #64]	; 0x40
 80080e2:	4613      	mov	r3, r2
 80080e4:	eb42 0303 	adc.w	r3, r2, r3
 80080e8:	647b      	str	r3, [r7, #68]	; 0x44
 80080ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80080f2:	f7f8 fd79 	bl	8000be8 <__aeabi_uldivmod>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	4b3b      	ldr	r3, [pc, #236]	; (80081ec <UART_SetConfig+0x2d4>)
 80080fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	2264      	movs	r2, #100	; 0x64
 8008106:	fb02 f303 	mul.w	r3, r2, r3
 800810a:	1acb      	subs	r3, r1, r3
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008112:	4b36      	ldr	r3, [pc, #216]	; (80081ec <UART_SetConfig+0x2d4>)
 8008114:	fba3 2302 	umull	r2, r3, r3, r2
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008120:	441c      	add	r4, r3
 8008122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008126:	2200      	movs	r2, #0
 8008128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800812c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008130:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008134:	4642      	mov	r2, r8
 8008136:	464b      	mov	r3, r9
 8008138:	1891      	adds	r1, r2, r2
 800813a:	63b9      	str	r1, [r7, #56]	; 0x38
 800813c:	415b      	adcs	r3, r3
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008144:	4641      	mov	r1, r8
 8008146:	1851      	adds	r1, r2, r1
 8008148:	6339      	str	r1, [r7, #48]	; 0x30
 800814a:	4649      	mov	r1, r9
 800814c:	414b      	adcs	r3, r1
 800814e:	637b      	str	r3, [r7, #52]	; 0x34
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800815c:	4659      	mov	r1, fp
 800815e:	00cb      	lsls	r3, r1, #3
 8008160:	4651      	mov	r1, sl
 8008162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008166:	4651      	mov	r1, sl
 8008168:	00ca      	lsls	r2, r1, #3
 800816a:	4610      	mov	r0, r2
 800816c:	4619      	mov	r1, r3
 800816e:	4603      	mov	r3, r0
 8008170:	4642      	mov	r2, r8
 8008172:	189b      	adds	r3, r3, r2
 8008174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008178:	464b      	mov	r3, r9
 800817a:	460a      	mov	r2, r1
 800817c:	eb42 0303 	adc.w	r3, r2, r3
 8008180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008190:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008194:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008198:	460b      	mov	r3, r1
 800819a:	18db      	adds	r3, r3, r3
 800819c:	62bb      	str	r3, [r7, #40]	; 0x28
 800819e:	4613      	mov	r3, r2
 80081a0:	eb42 0303 	adc.w	r3, r2, r3
 80081a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80081ae:	f7f8 fd1b 	bl	8000be8 <__aeabi_uldivmod>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <UART_SetConfig+0x2d4>)
 80081b8:	fba3 1302 	umull	r1, r3, r3, r2
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	2164      	movs	r1, #100	; 0x64
 80081c0:	fb01 f303 	mul.w	r3, r1, r3
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	3332      	adds	r3, #50	; 0x32
 80081ca:	4a08      	ldr	r2, [pc, #32]	; (80081ec <UART_SetConfig+0x2d4>)
 80081cc:	fba2 2303 	umull	r2, r3, r2, r3
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	f003 0207 	and.w	r2, r3, #7
 80081d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4422      	add	r2, r4
 80081de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081e0:	e105      	b.n	80083ee <UART_SetConfig+0x4d6>
 80081e2:	bf00      	nop
 80081e4:	40011000 	.word	0x40011000
 80081e8:	40011400 	.word	0x40011400
 80081ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008202:	4642      	mov	r2, r8
 8008204:	464b      	mov	r3, r9
 8008206:	1891      	adds	r1, r2, r2
 8008208:	6239      	str	r1, [r7, #32]
 800820a:	415b      	adcs	r3, r3
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
 800820e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008212:	4641      	mov	r1, r8
 8008214:	1854      	adds	r4, r2, r1
 8008216:	4649      	mov	r1, r9
 8008218:	eb43 0501 	adc.w	r5, r3, r1
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	00eb      	lsls	r3, r5, #3
 8008226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800822a:	00e2      	lsls	r2, r4, #3
 800822c:	4614      	mov	r4, r2
 800822e:	461d      	mov	r5, r3
 8008230:	4643      	mov	r3, r8
 8008232:	18e3      	adds	r3, r4, r3
 8008234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008238:	464b      	mov	r3, r9
 800823a:	eb45 0303 	adc.w	r3, r5, r3
 800823e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800824e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800825e:	4629      	mov	r1, r5
 8008260:	008b      	lsls	r3, r1, #2
 8008262:	4621      	mov	r1, r4
 8008264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008268:	4621      	mov	r1, r4
 800826a:	008a      	lsls	r2, r1, #2
 800826c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008270:	f7f8 fcba 	bl	8000be8 <__aeabi_uldivmod>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4b60      	ldr	r3, [pc, #384]	; (80083fc <UART_SetConfig+0x4e4>)
 800827a:	fba3 2302 	umull	r2, r3, r3, r2
 800827e:	095b      	lsrs	r3, r3, #5
 8008280:	011c      	lsls	r4, r3, #4
 8008282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008286:	2200      	movs	r2, #0
 8008288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800828c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008290:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008294:	4642      	mov	r2, r8
 8008296:	464b      	mov	r3, r9
 8008298:	1891      	adds	r1, r2, r2
 800829a:	61b9      	str	r1, [r7, #24]
 800829c:	415b      	adcs	r3, r3
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082a4:	4641      	mov	r1, r8
 80082a6:	1851      	adds	r1, r2, r1
 80082a8:	6139      	str	r1, [r7, #16]
 80082aa:	4649      	mov	r1, r9
 80082ac:	414b      	adcs	r3, r1
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	f04f 0200 	mov.w	r2, #0
 80082b4:	f04f 0300 	mov.w	r3, #0
 80082b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082bc:	4659      	mov	r1, fp
 80082be:	00cb      	lsls	r3, r1, #3
 80082c0:	4651      	mov	r1, sl
 80082c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082c6:	4651      	mov	r1, sl
 80082c8:	00ca      	lsls	r2, r1, #3
 80082ca:	4610      	mov	r0, r2
 80082cc:	4619      	mov	r1, r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	4642      	mov	r2, r8
 80082d2:	189b      	adds	r3, r3, r2
 80082d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082d8:	464b      	mov	r3, r9
 80082da:	460a      	mov	r2, r1
 80082dc:	eb42 0303 	adc.w	r3, r2, r3
 80082e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80082ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80082fc:	4649      	mov	r1, r9
 80082fe:	008b      	lsls	r3, r1, #2
 8008300:	4641      	mov	r1, r8
 8008302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008306:	4641      	mov	r1, r8
 8008308:	008a      	lsls	r2, r1, #2
 800830a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800830e:	f7f8 fc6b 	bl	8000be8 <__aeabi_uldivmod>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4b39      	ldr	r3, [pc, #228]	; (80083fc <UART_SetConfig+0x4e4>)
 8008318:	fba3 1302 	umull	r1, r3, r3, r2
 800831c:	095b      	lsrs	r3, r3, #5
 800831e:	2164      	movs	r1, #100	; 0x64
 8008320:	fb01 f303 	mul.w	r3, r1, r3
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	011b      	lsls	r3, r3, #4
 8008328:	3332      	adds	r3, #50	; 0x32
 800832a:	4a34      	ldr	r2, [pc, #208]	; (80083fc <UART_SetConfig+0x4e4>)
 800832c:	fba2 2303 	umull	r2, r3, r2, r3
 8008330:	095b      	lsrs	r3, r3, #5
 8008332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008336:	441c      	add	r4, r3
 8008338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800833c:	2200      	movs	r2, #0
 800833e:	673b      	str	r3, [r7, #112]	; 0x70
 8008340:	677a      	str	r2, [r7, #116]	; 0x74
 8008342:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008346:	4642      	mov	r2, r8
 8008348:	464b      	mov	r3, r9
 800834a:	1891      	adds	r1, r2, r2
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	415b      	adcs	r3, r3
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008356:	4641      	mov	r1, r8
 8008358:	1851      	adds	r1, r2, r1
 800835a:	6039      	str	r1, [r7, #0]
 800835c:	4649      	mov	r1, r9
 800835e:	414b      	adcs	r3, r1
 8008360:	607b      	str	r3, [r7, #4]
 8008362:	f04f 0200 	mov.w	r2, #0
 8008366:	f04f 0300 	mov.w	r3, #0
 800836a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800836e:	4659      	mov	r1, fp
 8008370:	00cb      	lsls	r3, r1, #3
 8008372:	4651      	mov	r1, sl
 8008374:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008378:	4651      	mov	r1, sl
 800837a:	00ca      	lsls	r2, r1, #3
 800837c:	4610      	mov	r0, r2
 800837e:	4619      	mov	r1, r3
 8008380:	4603      	mov	r3, r0
 8008382:	4642      	mov	r2, r8
 8008384:	189b      	adds	r3, r3, r2
 8008386:	66bb      	str	r3, [r7, #104]	; 0x68
 8008388:	464b      	mov	r3, r9
 800838a:	460a      	mov	r2, r1
 800838c:	eb42 0303 	adc.w	r3, r2, r3
 8008390:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	663b      	str	r3, [r7, #96]	; 0x60
 800839c:	667a      	str	r2, [r7, #100]	; 0x64
 800839e:	f04f 0200 	mov.w	r2, #0
 80083a2:	f04f 0300 	mov.w	r3, #0
 80083a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80083aa:	4649      	mov	r1, r9
 80083ac:	008b      	lsls	r3, r1, #2
 80083ae:	4641      	mov	r1, r8
 80083b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083b4:	4641      	mov	r1, r8
 80083b6:	008a      	lsls	r2, r1, #2
 80083b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80083bc:	f7f8 fc14 	bl	8000be8 <__aeabi_uldivmod>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4b0d      	ldr	r3, [pc, #52]	; (80083fc <UART_SetConfig+0x4e4>)
 80083c6:	fba3 1302 	umull	r1, r3, r3, r2
 80083ca:	095b      	lsrs	r3, r3, #5
 80083cc:	2164      	movs	r1, #100	; 0x64
 80083ce:	fb01 f303 	mul.w	r3, r1, r3
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	011b      	lsls	r3, r3, #4
 80083d6:	3332      	adds	r3, #50	; 0x32
 80083d8:	4a08      	ldr	r2, [pc, #32]	; (80083fc <UART_SetConfig+0x4e4>)
 80083da:	fba2 2303 	umull	r2, r3, r2, r3
 80083de:	095b      	lsrs	r3, r3, #5
 80083e0:	f003 020f 	and.w	r2, r3, #15
 80083e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4422      	add	r2, r4
 80083ec:	609a      	str	r2, [r3, #8]
}
 80083ee:	bf00      	nop
 80083f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80083f4:	46bd      	mov	sp, r7
 80083f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083fa:	bf00      	nop
 80083fc:	51eb851f 	.word	0x51eb851f

08008400 <__errno>:
 8008400:	4b01      	ldr	r3, [pc, #4]	; (8008408 <__errno+0x8>)
 8008402:	6818      	ldr	r0, [r3, #0]
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	2000000c 	.word	0x2000000c

0800840c <__libc_init_array>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4d0d      	ldr	r5, [pc, #52]	; (8008444 <__libc_init_array+0x38>)
 8008410:	4c0d      	ldr	r4, [pc, #52]	; (8008448 <__libc_init_array+0x3c>)
 8008412:	1b64      	subs	r4, r4, r5
 8008414:	10a4      	asrs	r4, r4, #2
 8008416:	2600      	movs	r6, #0
 8008418:	42a6      	cmp	r6, r4
 800841a:	d109      	bne.n	8008430 <__libc_init_array+0x24>
 800841c:	4d0b      	ldr	r5, [pc, #44]	; (800844c <__libc_init_array+0x40>)
 800841e:	4c0c      	ldr	r4, [pc, #48]	; (8008450 <__libc_init_array+0x44>)
 8008420:	f002 ff0c 	bl	800b23c <_init>
 8008424:	1b64      	subs	r4, r4, r5
 8008426:	10a4      	asrs	r4, r4, #2
 8008428:	2600      	movs	r6, #0
 800842a:	42a6      	cmp	r6, r4
 800842c:	d105      	bne.n	800843a <__libc_init_array+0x2e>
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	f855 3b04 	ldr.w	r3, [r5], #4
 8008434:	4798      	blx	r3
 8008436:	3601      	adds	r6, #1
 8008438:	e7ee      	b.n	8008418 <__libc_init_array+0xc>
 800843a:	f855 3b04 	ldr.w	r3, [r5], #4
 800843e:	4798      	blx	r3
 8008440:	3601      	adds	r6, #1
 8008442:	e7f2      	b.n	800842a <__libc_init_array+0x1e>
 8008444:	0800b78c 	.word	0x0800b78c
 8008448:	0800b78c 	.word	0x0800b78c
 800844c:	0800b78c 	.word	0x0800b78c
 8008450:	0800b790 	.word	0x0800b790

08008454 <malloc>:
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <malloc+0xc>)
 8008456:	4601      	mov	r1, r0
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	f000 b885 	b.w	8008568 <_malloc_r>
 800845e:	bf00      	nop
 8008460:	2000000c 	.word	0x2000000c

08008464 <memcpy>:
 8008464:	440a      	add	r2, r1
 8008466:	4291      	cmp	r1, r2
 8008468:	f100 33ff 	add.w	r3, r0, #4294967295
 800846c:	d100      	bne.n	8008470 <memcpy+0xc>
 800846e:	4770      	bx	lr
 8008470:	b510      	push	{r4, lr}
 8008472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800847a:	4291      	cmp	r1, r2
 800847c:	d1f9      	bne.n	8008472 <memcpy+0xe>
 800847e:	bd10      	pop	{r4, pc}

08008480 <memset>:
 8008480:	4402      	add	r2, r0
 8008482:	4603      	mov	r3, r0
 8008484:	4293      	cmp	r3, r2
 8008486:	d100      	bne.n	800848a <memset+0xa>
 8008488:	4770      	bx	lr
 800848a:	f803 1b01 	strb.w	r1, [r3], #1
 800848e:	e7f9      	b.n	8008484 <memset+0x4>

08008490 <_free_r>:
 8008490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008492:	2900      	cmp	r1, #0
 8008494:	d044      	beq.n	8008520 <_free_r+0x90>
 8008496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800849a:	9001      	str	r0, [sp, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	f1a1 0404 	sub.w	r4, r1, #4
 80084a2:	bfb8      	it	lt
 80084a4:	18e4      	addlt	r4, r4, r3
 80084a6:	f001 fbf5 	bl	8009c94 <__malloc_lock>
 80084aa:	4a1e      	ldr	r2, [pc, #120]	; (8008524 <_free_r+0x94>)
 80084ac:	9801      	ldr	r0, [sp, #4]
 80084ae:	6813      	ldr	r3, [r2, #0]
 80084b0:	b933      	cbnz	r3, 80084c0 <_free_r+0x30>
 80084b2:	6063      	str	r3, [r4, #4]
 80084b4:	6014      	str	r4, [r2, #0]
 80084b6:	b003      	add	sp, #12
 80084b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084bc:	f001 bbf0 	b.w	8009ca0 <__malloc_unlock>
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	d908      	bls.n	80084d6 <_free_r+0x46>
 80084c4:	6825      	ldr	r5, [r4, #0]
 80084c6:	1961      	adds	r1, r4, r5
 80084c8:	428b      	cmp	r3, r1
 80084ca:	bf01      	itttt	eq
 80084cc:	6819      	ldreq	r1, [r3, #0]
 80084ce:	685b      	ldreq	r3, [r3, #4]
 80084d0:	1949      	addeq	r1, r1, r5
 80084d2:	6021      	streq	r1, [r4, #0]
 80084d4:	e7ed      	b.n	80084b2 <_free_r+0x22>
 80084d6:	461a      	mov	r2, r3
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	b10b      	cbz	r3, 80084e0 <_free_r+0x50>
 80084dc:	42a3      	cmp	r3, r4
 80084de:	d9fa      	bls.n	80084d6 <_free_r+0x46>
 80084e0:	6811      	ldr	r1, [r2, #0]
 80084e2:	1855      	adds	r5, r2, r1
 80084e4:	42a5      	cmp	r5, r4
 80084e6:	d10b      	bne.n	8008500 <_free_r+0x70>
 80084e8:	6824      	ldr	r4, [r4, #0]
 80084ea:	4421      	add	r1, r4
 80084ec:	1854      	adds	r4, r2, r1
 80084ee:	42a3      	cmp	r3, r4
 80084f0:	6011      	str	r1, [r2, #0]
 80084f2:	d1e0      	bne.n	80084b6 <_free_r+0x26>
 80084f4:	681c      	ldr	r4, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	6053      	str	r3, [r2, #4]
 80084fa:	4421      	add	r1, r4
 80084fc:	6011      	str	r1, [r2, #0]
 80084fe:	e7da      	b.n	80084b6 <_free_r+0x26>
 8008500:	d902      	bls.n	8008508 <_free_r+0x78>
 8008502:	230c      	movs	r3, #12
 8008504:	6003      	str	r3, [r0, #0]
 8008506:	e7d6      	b.n	80084b6 <_free_r+0x26>
 8008508:	6825      	ldr	r5, [r4, #0]
 800850a:	1961      	adds	r1, r4, r5
 800850c:	428b      	cmp	r3, r1
 800850e:	bf04      	itt	eq
 8008510:	6819      	ldreq	r1, [r3, #0]
 8008512:	685b      	ldreq	r3, [r3, #4]
 8008514:	6063      	str	r3, [r4, #4]
 8008516:	bf04      	itt	eq
 8008518:	1949      	addeq	r1, r1, r5
 800851a:	6021      	streq	r1, [r4, #0]
 800851c:	6054      	str	r4, [r2, #4]
 800851e:	e7ca      	b.n	80084b6 <_free_r+0x26>
 8008520:	b003      	add	sp, #12
 8008522:	bd30      	pop	{r4, r5, pc}
 8008524:	20000518 	.word	0x20000518

08008528 <sbrk_aligned>:
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	4e0e      	ldr	r6, [pc, #56]	; (8008564 <sbrk_aligned+0x3c>)
 800852c:	460c      	mov	r4, r1
 800852e:	6831      	ldr	r1, [r6, #0]
 8008530:	4605      	mov	r5, r0
 8008532:	b911      	cbnz	r1, 800853a <sbrk_aligned+0x12>
 8008534:	f000 fcf6 	bl	8008f24 <_sbrk_r>
 8008538:	6030      	str	r0, [r6, #0]
 800853a:	4621      	mov	r1, r4
 800853c:	4628      	mov	r0, r5
 800853e:	f000 fcf1 	bl	8008f24 <_sbrk_r>
 8008542:	1c43      	adds	r3, r0, #1
 8008544:	d00a      	beq.n	800855c <sbrk_aligned+0x34>
 8008546:	1cc4      	adds	r4, r0, #3
 8008548:	f024 0403 	bic.w	r4, r4, #3
 800854c:	42a0      	cmp	r0, r4
 800854e:	d007      	beq.n	8008560 <sbrk_aligned+0x38>
 8008550:	1a21      	subs	r1, r4, r0
 8008552:	4628      	mov	r0, r5
 8008554:	f000 fce6 	bl	8008f24 <_sbrk_r>
 8008558:	3001      	adds	r0, #1
 800855a:	d101      	bne.n	8008560 <sbrk_aligned+0x38>
 800855c:	f04f 34ff 	mov.w	r4, #4294967295
 8008560:	4620      	mov	r0, r4
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	2000051c 	.word	0x2000051c

08008568 <_malloc_r>:
 8008568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800856c:	1ccd      	adds	r5, r1, #3
 800856e:	f025 0503 	bic.w	r5, r5, #3
 8008572:	3508      	adds	r5, #8
 8008574:	2d0c      	cmp	r5, #12
 8008576:	bf38      	it	cc
 8008578:	250c      	movcc	r5, #12
 800857a:	2d00      	cmp	r5, #0
 800857c:	4607      	mov	r7, r0
 800857e:	db01      	blt.n	8008584 <_malloc_r+0x1c>
 8008580:	42a9      	cmp	r1, r5
 8008582:	d905      	bls.n	8008590 <_malloc_r+0x28>
 8008584:	230c      	movs	r3, #12
 8008586:	603b      	str	r3, [r7, #0]
 8008588:	2600      	movs	r6, #0
 800858a:	4630      	mov	r0, r6
 800858c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008590:	4e2e      	ldr	r6, [pc, #184]	; (800864c <_malloc_r+0xe4>)
 8008592:	f001 fb7f 	bl	8009c94 <__malloc_lock>
 8008596:	6833      	ldr	r3, [r6, #0]
 8008598:	461c      	mov	r4, r3
 800859a:	bb34      	cbnz	r4, 80085ea <_malloc_r+0x82>
 800859c:	4629      	mov	r1, r5
 800859e:	4638      	mov	r0, r7
 80085a0:	f7ff ffc2 	bl	8008528 <sbrk_aligned>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	4604      	mov	r4, r0
 80085a8:	d14d      	bne.n	8008646 <_malloc_r+0xde>
 80085aa:	6834      	ldr	r4, [r6, #0]
 80085ac:	4626      	mov	r6, r4
 80085ae:	2e00      	cmp	r6, #0
 80085b0:	d140      	bne.n	8008634 <_malloc_r+0xcc>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	4631      	mov	r1, r6
 80085b6:	4638      	mov	r0, r7
 80085b8:	eb04 0803 	add.w	r8, r4, r3
 80085bc:	f000 fcb2 	bl	8008f24 <_sbrk_r>
 80085c0:	4580      	cmp	r8, r0
 80085c2:	d13a      	bne.n	800863a <_malloc_r+0xd2>
 80085c4:	6821      	ldr	r1, [r4, #0]
 80085c6:	3503      	adds	r5, #3
 80085c8:	1a6d      	subs	r5, r5, r1
 80085ca:	f025 0503 	bic.w	r5, r5, #3
 80085ce:	3508      	adds	r5, #8
 80085d0:	2d0c      	cmp	r5, #12
 80085d2:	bf38      	it	cc
 80085d4:	250c      	movcc	r5, #12
 80085d6:	4629      	mov	r1, r5
 80085d8:	4638      	mov	r0, r7
 80085da:	f7ff ffa5 	bl	8008528 <sbrk_aligned>
 80085de:	3001      	adds	r0, #1
 80085e0:	d02b      	beq.n	800863a <_malloc_r+0xd2>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	442b      	add	r3, r5
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	e00e      	b.n	8008608 <_malloc_r+0xa0>
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	1b52      	subs	r2, r2, r5
 80085ee:	d41e      	bmi.n	800862e <_malloc_r+0xc6>
 80085f0:	2a0b      	cmp	r2, #11
 80085f2:	d916      	bls.n	8008622 <_malloc_r+0xba>
 80085f4:	1961      	adds	r1, r4, r5
 80085f6:	42a3      	cmp	r3, r4
 80085f8:	6025      	str	r5, [r4, #0]
 80085fa:	bf18      	it	ne
 80085fc:	6059      	strne	r1, [r3, #4]
 80085fe:	6863      	ldr	r3, [r4, #4]
 8008600:	bf08      	it	eq
 8008602:	6031      	streq	r1, [r6, #0]
 8008604:	5162      	str	r2, [r4, r5]
 8008606:	604b      	str	r3, [r1, #4]
 8008608:	4638      	mov	r0, r7
 800860a:	f104 060b 	add.w	r6, r4, #11
 800860e:	f001 fb47 	bl	8009ca0 <__malloc_unlock>
 8008612:	f026 0607 	bic.w	r6, r6, #7
 8008616:	1d23      	adds	r3, r4, #4
 8008618:	1af2      	subs	r2, r6, r3
 800861a:	d0b6      	beq.n	800858a <_malloc_r+0x22>
 800861c:	1b9b      	subs	r3, r3, r6
 800861e:	50a3      	str	r3, [r4, r2]
 8008620:	e7b3      	b.n	800858a <_malloc_r+0x22>
 8008622:	6862      	ldr	r2, [r4, #4]
 8008624:	42a3      	cmp	r3, r4
 8008626:	bf0c      	ite	eq
 8008628:	6032      	streq	r2, [r6, #0]
 800862a:	605a      	strne	r2, [r3, #4]
 800862c:	e7ec      	b.n	8008608 <_malloc_r+0xa0>
 800862e:	4623      	mov	r3, r4
 8008630:	6864      	ldr	r4, [r4, #4]
 8008632:	e7b2      	b.n	800859a <_malloc_r+0x32>
 8008634:	4634      	mov	r4, r6
 8008636:	6876      	ldr	r6, [r6, #4]
 8008638:	e7b9      	b.n	80085ae <_malloc_r+0x46>
 800863a:	230c      	movs	r3, #12
 800863c:	603b      	str	r3, [r7, #0]
 800863e:	4638      	mov	r0, r7
 8008640:	f001 fb2e 	bl	8009ca0 <__malloc_unlock>
 8008644:	e7a1      	b.n	800858a <_malloc_r+0x22>
 8008646:	6025      	str	r5, [r4, #0]
 8008648:	e7de      	b.n	8008608 <_malloc_r+0xa0>
 800864a:	bf00      	nop
 800864c:	20000518 	.word	0x20000518

08008650 <__cvt>:
 8008650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008654:	ec55 4b10 	vmov	r4, r5, d0
 8008658:	2d00      	cmp	r5, #0
 800865a:	460e      	mov	r6, r1
 800865c:	4619      	mov	r1, r3
 800865e:	462b      	mov	r3, r5
 8008660:	bfbb      	ittet	lt
 8008662:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008666:	461d      	movlt	r5, r3
 8008668:	2300      	movge	r3, #0
 800866a:	232d      	movlt	r3, #45	; 0x2d
 800866c:	700b      	strb	r3, [r1, #0]
 800866e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008670:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008674:	4691      	mov	r9, r2
 8008676:	f023 0820 	bic.w	r8, r3, #32
 800867a:	bfbc      	itt	lt
 800867c:	4622      	movlt	r2, r4
 800867e:	4614      	movlt	r4, r2
 8008680:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008684:	d005      	beq.n	8008692 <__cvt+0x42>
 8008686:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800868a:	d100      	bne.n	800868e <__cvt+0x3e>
 800868c:	3601      	adds	r6, #1
 800868e:	2102      	movs	r1, #2
 8008690:	e000      	b.n	8008694 <__cvt+0x44>
 8008692:	2103      	movs	r1, #3
 8008694:	ab03      	add	r3, sp, #12
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	ab02      	add	r3, sp, #8
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	ec45 4b10 	vmov	d0, r4, r5
 80086a0:	4653      	mov	r3, sl
 80086a2:	4632      	mov	r2, r6
 80086a4:	f000 fd04 	bl	80090b0 <_dtoa_r>
 80086a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086ac:	4607      	mov	r7, r0
 80086ae:	d102      	bne.n	80086b6 <__cvt+0x66>
 80086b0:	f019 0f01 	tst.w	r9, #1
 80086b4:	d022      	beq.n	80086fc <__cvt+0xac>
 80086b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086ba:	eb07 0906 	add.w	r9, r7, r6
 80086be:	d110      	bne.n	80086e2 <__cvt+0x92>
 80086c0:	783b      	ldrb	r3, [r7, #0]
 80086c2:	2b30      	cmp	r3, #48	; 0x30
 80086c4:	d10a      	bne.n	80086dc <__cvt+0x8c>
 80086c6:	2200      	movs	r2, #0
 80086c8:	2300      	movs	r3, #0
 80086ca:	4620      	mov	r0, r4
 80086cc:	4629      	mov	r1, r5
 80086ce:	f7f8 f9fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d2:	b918      	cbnz	r0, 80086dc <__cvt+0x8c>
 80086d4:	f1c6 0601 	rsb	r6, r6, #1
 80086d8:	f8ca 6000 	str.w	r6, [sl]
 80086dc:	f8da 3000 	ldr.w	r3, [sl]
 80086e0:	4499      	add	r9, r3
 80086e2:	2200      	movs	r2, #0
 80086e4:	2300      	movs	r3, #0
 80086e6:	4620      	mov	r0, r4
 80086e8:	4629      	mov	r1, r5
 80086ea:	f7f8 f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80086ee:	b108      	cbz	r0, 80086f4 <__cvt+0xa4>
 80086f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80086f4:	2230      	movs	r2, #48	; 0x30
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	454b      	cmp	r3, r9
 80086fa:	d307      	bcc.n	800870c <__cvt+0xbc>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008700:	1bdb      	subs	r3, r3, r7
 8008702:	4638      	mov	r0, r7
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	b004      	add	sp, #16
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	1c59      	adds	r1, r3, #1
 800870e:	9103      	str	r1, [sp, #12]
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	e7f0      	b.n	80086f6 <__cvt+0xa6>

08008714 <__exponent>:
 8008714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008716:	4603      	mov	r3, r0
 8008718:	2900      	cmp	r1, #0
 800871a:	bfb8      	it	lt
 800871c:	4249      	neglt	r1, r1
 800871e:	f803 2b02 	strb.w	r2, [r3], #2
 8008722:	bfb4      	ite	lt
 8008724:	222d      	movlt	r2, #45	; 0x2d
 8008726:	222b      	movge	r2, #43	; 0x2b
 8008728:	2909      	cmp	r1, #9
 800872a:	7042      	strb	r2, [r0, #1]
 800872c:	dd2a      	ble.n	8008784 <__exponent+0x70>
 800872e:	f10d 0407 	add.w	r4, sp, #7
 8008732:	46a4      	mov	ip, r4
 8008734:	270a      	movs	r7, #10
 8008736:	46a6      	mov	lr, r4
 8008738:	460a      	mov	r2, r1
 800873a:	fb91 f6f7 	sdiv	r6, r1, r7
 800873e:	fb07 1516 	mls	r5, r7, r6, r1
 8008742:	3530      	adds	r5, #48	; 0x30
 8008744:	2a63      	cmp	r2, #99	; 0x63
 8008746:	f104 34ff 	add.w	r4, r4, #4294967295
 800874a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800874e:	4631      	mov	r1, r6
 8008750:	dcf1      	bgt.n	8008736 <__exponent+0x22>
 8008752:	3130      	adds	r1, #48	; 0x30
 8008754:	f1ae 0502 	sub.w	r5, lr, #2
 8008758:	f804 1c01 	strb.w	r1, [r4, #-1]
 800875c:	1c44      	adds	r4, r0, #1
 800875e:	4629      	mov	r1, r5
 8008760:	4561      	cmp	r1, ip
 8008762:	d30a      	bcc.n	800877a <__exponent+0x66>
 8008764:	f10d 0209 	add.w	r2, sp, #9
 8008768:	eba2 020e 	sub.w	r2, r2, lr
 800876c:	4565      	cmp	r5, ip
 800876e:	bf88      	it	hi
 8008770:	2200      	movhi	r2, #0
 8008772:	4413      	add	r3, r2
 8008774:	1a18      	subs	r0, r3, r0
 8008776:	b003      	add	sp, #12
 8008778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800877a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800877e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008782:	e7ed      	b.n	8008760 <__exponent+0x4c>
 8008784:	2330      	movs	r3, #48	; 0x30
 8008786:	3130      	adds	r1, #48	; 0x30
 8008788:	7083      	strb	r3, [r0, #2]
 800878a:	70c1      	strb	r1, [r0, #3]
 800878c:	1d03      	adds	r3, r0, #4
 800878e:	e7f1      	b.n	8008774 <__exponent+0x60>

08008790 <_printf_float>:
 8008790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008794:	ed2d 8b02 	vpush	{d8}
 8008798:	b08d      	sub	sp, #52	; 0x34
 800879a:	460c      	mov	r4, r1
 800879c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087a0:	4616      	mov	r6, r2
 80087a2:	461f      	mov	r7, r3
 80087a4:	4605      	mov	r5, r0
 80087a6:	f001 fa71 	bl	8009c8c <_localeconv_r>
 80087aa:	f8d0 a000 	ldr.w	sl, [r0]
 80087ae:	4650      	mov	r0, sl
 80087b0:	f7f7 fd0e 	bl	80001d0 <strlen>
 80087b4:	2300      	movs	r3, #0
 80087b6:	930a      	str	r3, [sp, #40]	; 0x28
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	9305      	str	r3, [sp, #20]
 80087bc:	f8d8 3000 	ldr.w	r3, [r8]
 80087c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087c4:	3307      	adds	r3, #7
 80087c6:	f023 0307 	bic.w	r3, r3, #7
 80087ca:	f103 0208 	add.w	r2, r3, #8
 80087ce:	f8c8 2000 	str.w	r2, [r8]
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087e2:	9307      	str	r3, [sp, #28]
 80087e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80087e8:	ee08 0a10 	vmov	s16, r0
 80087ec:	4b9f      	ldr	r3, [pc, #636]	; (8008a6c <_printf_float+0x2dc>)
 80087ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087f2:	f04f 32ff 	mov.w	r2, #4294967295
 80087f6:	f7f8 f999 	bl	8000b2c <__aeabi_dcmpun>
 80087fa:	bb88      	cbnz	r0, 8008860 <_printf_float+0xd0>
 80087fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008800:	4b9a      	ldr	r3, [pc, #616]	; (8008a6c <_printf_float+0x2dc>)
 8008802:	f04f 32ff 	mov.w	r2, #4294967295
 8008806:	f7f8 f973 	bl	8000af0 <__aeabi_dcmple>
 800880a:	bb48      	cbnz	r0, 8008860 <_printf_float+0xd0>
 800880c:	2200      	movs	r2, #0
 800880e:	2300      	movs	r3, #0
 8008810:	4640      	mov	r0, r8
 8008812:	4649      	mov	r1, r9
 8008814:	f7f8 f962 	bl	8000adc <__aeabi_dcmplt>
 8008818:	b110      	cbz	r0, 8008820 <_printf_float+0x90>
 800881a:	232d      	movs	r3, #45	; 0x2d
 800881c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008820:	4b93      	ldr	r3, [pc, #588]	; (8008a70 <_printf_float+0x2e0>)
 8008822:	4894      	ldr	r0, [pc, #592]	; (8008a74 <_printf_float+0x2e4>)
 8008824:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008828:	bf94      	ite	ls
 800882a:	4698      	movls	r8, r3
 800882c:	4680      	movhi	r8, r0
 800882e:	2303      	movs	r3, #3
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	f023 0204 	bic.w	r2, r3, #4
 8008838:	6022      	str	r2, [r4, #0]
 800883a:	f04f 0900 	mov.w	r9, #0
 800883e:	9700      	str	r7, [sp, #0]
 8008840:	4633      	mov	r3, r6
 8008842:	aa0b      	add	r2, sp, #44	; 0x2c
 8008844:	4621      	mov	r1, r4
 8008846:	4628      	mov	r0, r5
 8008848:	f000 f9d8 	bl	8008bfc <_printf_common>
 800884c:	3001      	adds	r0, #1
 800884e:	f040 8090 	bne.w	8008972 <_printf_float+0x1e2>
 8008852:	f04f 30ff 	mov.w	r0, #4294967295
 8008856:	b00d      	add	sp, #52	; 0x34
 8008858:	ecbd 8b02 	vpop	{d8}
 800885c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008860:	4642      	mov	r2, r8
 8008862:	464b      	mov	r3, r9
 8008864:	4640      	mov	r0, r8
 8008866:	4649      	mov	r1, r9
 8008868:	f7f8 f960 	bl	8000b2c <__aeabi_dcmpun>
 800886c:	b140      	cbz	r0, 8008880 <_printf_float+0xf0>
 800886e:	464b      	mov	r3, r9
 8008870:	2b00      	cmp	r3, #0
 8008872:	bfbc      	itt	lt
 8008874:	232d      	movlt	r3, #45	; 0x2d
 8008876:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800887a:	487f      	ldr	r0, [pc, #508]	; (8008a78 <_printf_float+0x2e8>)
 800887c:	4b7f      	ldr	r3, [pc, #508]	; (8008a7c <_printf_float+0x2ec>)
 800887e:	e7d1      	b.n	8008824 <_printf_float+0x94>
 8008880:	6863      	ldr	r3, [r4, #4]
 8008882:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008886:	9206      	str	r2, [sp, #24]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	d13f      	bne.n	800890c <_printf_float+0x17c>
 800888c:	2306      	movs	r3, #6
 800888e:	6063      	str	r3, [r4, #4]
 8008890:	9b05      	ldr	r3, [sp, #20]
 8008892:	6861      	ldr	r1, [r4, #4]
 8008894:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008898:	2300      	movs	r3, #0
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	ab0a      	add	r3, sp, #40	; 0x28
 800889e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80088a2:	ab09      	add	r3, sp, #36	; 0x24
 80088a4:	ec49 8b10 	vmov	d0, r8, r9
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	6022      	str	r2, [r4, #0]
 80088ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088b0:	4628      	mov	r0, r5
 80088b2:	f7ff fecd 	bl	8008650 <__cvt>
 80088b6:	9b06      	ldr	r3, [sp, #24]
 80088b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088ba:	2b47      	cmp	r3, #71	; 0x47
 80088bc:	4680      	mov	r8, r0
 80088be:	d108      	bne.n	80088d2 <_printf_float+0x142>
 80088c0:	1cc8      	adds	r0, r1, #3
 80088c2:	db02      	blt.n	80088ca <_printf_float+0x13a>
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	4299      	cmp	r1, r3
 80088c8:	dd41      	ble.n	800894e <_printf_float+0x1be>
 80088ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80088ce:	fa5f fb8b 	uxtb.w	fp, fp
 80088d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088d6:	d820      	bhi.n	800891a <_printf_float+0x18a>
 80088d8:	3901      	subs	r1, #1
 80088da:	465a      	mov	r2, fp
 80088dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088e0:	9109      	str	r1, [sp, #36]	; 0x24
 80088e2:	f7ff ff17 	bl	8008714 <__exponent>
 80088e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088e8:	1813      	adds	r3, r2, r0
 80088ea:	2a01      	cmp	r2, #1
 80088ec:	4681      	mov	r9, r0
 80088ee:	6123      	str	r3, [r4, #16]
 80088f0:	dc02      	bgt.n	80088f8 <_printf_float+0x168>
 80088f2:	6822      	ldr	r2, [r4, #0]
 80088f4:	07d2      	lsls	r2, r2, #31
 80088f6:	d501      	bpl.n	80088fc <_printf_float+0x16c>
 80088f8:	3301      	adds	r3, #1
 80088fa:	6123      	str	r3, [r4, #16]
 80088fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008900:	2b00      	cmp	r3, #0
 8008902:	d09c      	beq.n	800883e <_printf_float+0xae>
 8008904:	232d      	movs	r3, #45	; 0x2d
 8008906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800890a:	e798      	b.n	800883e <_printf_float+0xae>
 800890c:	9a06      	ldr	r2, [sp, #24]
 800890e:	2a47      	cmp	r2, #71	; 0x47
 8008910:	d1be      	bne.n	8008890 <_printf_float+0x100>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1bc      	bne.n	8008890 <_printf_float+0x100>
 8008916:	2301      	movs	r3, #1
 8008918:	e7b9      	b.n	800888e <_printf_float+0xfe>
 800891a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800891e:	d118      	bne.n	8008952 <_printf_float+0x1c2>
 8008920:	2900      	cmp	r1, #0
 8008922:	6863      	ldr	r3, [r4, #4]
 8008924:	dd0b      	ble.n	800893e <_printf_float+0x1ae>
 8008926:	6121      	str	r1, [r4, #16]
 8008928:	b913      	cbnz	r3, 8008930 <_printf_float+0x1a0>
 800892a:	6822      	ldr	r2, [r4, #0]
 800892c:	07d0      	lsls	r0, r2, #31
 800892e:	d502      	bpl.n	8008936 <_printf_float+0x1a6>
 8008930:	3301      	adds	r3, #1
 8008932:	440b      	add	r3, r1
 8008934:	6123      	str	r3, [r4, #16]
 8008936:	65a1      	str	r1, [r4, #88]	; 0x58
 8008938:	f04f 0900 	mov.w	r9, #0
 800893c:	e7de      	b.n	80088fc <_printf_float+0x16c>
 800893e:	b913      	cbnz	r3, 8008946 <_printf_float+0x1b6>
 8008940:	6822      	ldr	r2, [r4, #0]
 8008942:	07d2      	lsls	r2, r2, #31
 8008944:	d501      	bpl.n	800894a <_printf_float+0x1ba>
 8008946:	3302      	adds	r3, #2
 8008948:	e7f4      	b.n	8008934 <_printf_float+0x1a4>
 800894a:	2301      	movs	r3, #1
 800894c:	e7f2      	b.n	8008934 <_printf_float+0x1a4>
 800894e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008954:	4299      	cmp	r1, r3
 8008956:	db05      	blt.n	8008964 <_printf_float+0x1d4>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	6121      	str	r1, [r4, #16]
 800895c:	07d8      	lsls	r0, r3, #31
 800895e:	d5ea      	bpl.n	8008936 <_printf_float+0x1a6>
 8008960:	1c4b      	adds	r3, r1, #1
 8008962:	e7e7      	b.n	8008934 <_printf_float+0x1a4>
 8008964:	2900      	cmp	r1, #0
 8008966:	bfd4      	ite	le
 8008968:	f1c1 0202 	rsble	r2, r1, #2
 800896c:	2201      	movgt	r2, #1
 800896e:	4413      	add	r3, r2
 8008970:	e7e0      	b.n	8008934 <_printf_float+0x1a4>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	055a      	lsls	r2, r3, #21
 8008976:	d407      	bmi.n	8008988 <_printf_float+0x1f8>
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	4642      	mov	r2, r8
 800897c:	4631      	mov	r1, r6
 800897e:	4628      	mov	r0, r5
 8008980:	47b8      	blx	r7
 8008982:	3001      	adds	r0, #1
 8008984:	d12c      	bne.n	80089e0 <_printf_float+0x250>
 8008986:	e764      	b.n	8008852 <_printf_float+0xc2>
 8008988:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800898c:	f240 80e0 	bls.w	8008b50 <_printf_float+0x3c0>
 8008990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008994:	2200      	movs	r2, #0
 8008996:	2300      	movs	r3, #0
 8008998:	f7f8 f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800899c:	2800      	cmp	r0, #0
 800899e:	d034      	beq.n	8008a0a <_printf_float+0x27a>
 80089a0:	4a37      	ldr	r2, [pc, #220]	; (8008a80 <_printf_float+0x2f0>)
 80089a2:	2301      	movs	r3, #1
 80089a4:	4631      	mov	r1, r6
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b8      	blx	r7
 80089aa:	3001      	adds	r0, #1
 80089ac:	f43f af51 	beq.w	8008852 <_printf_float+0xc2>
 80089b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089b4:	429a      	cmp	r2, r3
 80089b6:	db02      	blt.n	80089be <_printf_float+0x22e>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	07d8      	lsls	r0, r3, #31
 80089bc:	d510      	bpl.n	80089e0 <_printf_float+0x250>
 80089be:	ee18 3a10 	vmov	r3, s16
 80089c2:	4652      	mov	r2, sl
 80089c4:	4631      	mov	r1, r6
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	f43f af41 	beq.w	8008852 <_printf_float+0xc2>
 80089d0:	f04f 0800 	mov.w	r8, #0
 80089d4:	f104 091a 	add.w	r9, r4, #26
 80089d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089da:	3b01      	subs	r3, #1
 80089dc:	4543      	cmp	r3, r8
 80089de:	dc09      	bgt.n	80089f4 <_printf_float+0x264>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	079b      	lsls	r3, r3, #30
 80089e4:	f100 8105 	bmi.w	8008bf2 <_printf_float+0x462>
 80089e8:	68e0      	ldr	r0, [r4, #12]
 80089ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ec:	4298      	cmp	r0, r3
 80089ee:	bfb8      	it	lt
 80089f0:	4618      	movlt	r0, r3
 80089f2:	e730      	b.n	8008856 <_printf_float+0xc6>
 80089f4:	2301      	movs	r3, #1
 80089f6:	464a      	mov	r2, r9
 80089f8:	4631      	mov	r1, r6
 80089fa:	4628      	mov	r0, r5
 80089fc:	47b8      	blx	r7
 80089fe:	3001      	adds	r0, #1
 8008a00:	f43f af27 	beq.w	8008852 <_printf_float+0xc2>
 8008a04:	f108 0801 	add.w	r8, r8, #1
 8008a08:	e7e6      	b.n	80089d8 <_printf_float+0x248>
 8008a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dc39      	bgt.n	8008a84 <_printf_float+0x2f4>
 8008a10:	4a1b      	ldr	r2, [pc, #108]	; (8008a80 <_printf_float+0x2f0>)
 8008a12:	2301      	movs	r3, #1
 8008a14:	4631      	mov	r1, r6
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b8      	blx	r7
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	f43f af19 	beq.w	8008852 <_printf_float+0xc2>
 8008a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a24:	4313      	orrs	r3, r2
 8008a26:	d102      	bne.n	8008a2e <_printf_float+0x29e>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	07d9      	lsls	r1, r3, #31
 8008a2c:	d5d8      	bpl.n	80089e0 <_printf_float+0x250>
 8008a2e:	ee18 3a10 	vmov	r3, s16
 8008a32:	4652      	mov	r2, sl
 8008a34:	4631      	mov	r1, r6
 8008a36:	4628      	mov	r0, r5
 8008a38:	47b8      	blx	r7
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f43f af09 	beq.w	8008852 <_printf_float+0xc2>
 8008a40:	f04f 0900 	mov.w	r9, #0
 8008a44:	f104 0a1a 	add.w	sl, r4, #26
 8008a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4a:	425b      	negs	r3, r3
 8008a4c:	454b      	cmp	r3, r9
 8008a4e:	dc01      	bgt.n	8008a54 <_printf_float+0x2c4>
 8008a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a52:	e792      	b.n	800897a <_printf_float+0x1ea>
 8008a54:	2301      	movs	r3, #1
 8008a56:	4652      	mov	r2, sl
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	47b8      	blx	r7
 8008a5e:	3001      	adds	r0, #1
 8008a60:	f43f aef7 	beq.w	8008852 <_printf_float+0xc2>
 8008a64:	f109 0901 	add.w	r9, r9, #1
 8008a68:	e7ee      	b.n	8008a48 <_printf_float+0x2b8>
 8008a6a:	bf00      	nop
 8008a6c:	7fefffff 	.word	0x7fefffff
 8008a70:	0800b3b0 	.word	0x0800b3b0
 8008a74:	0800b3b4 	.word	0x0800b3b4
 8008a78:	0800b3bc 	.word	0x0800b3bc
 8008a7c:	0800b3b8 	.word	0x0800b3b8
 8008a80:	0800b3c0 	.word	0x0800b3c0
 8008a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	bfa8      	it	ge
 8008a8c:	461a      	movge	r2, r3
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	4691      	mov	r9, r2
 8008a92:	dc37      	bgt.n	8008b04 <_printf_float+0x374>
 8008a94:	f04f 0b00 	mov.w	fp, #0
 8008a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a9c:	f104 021a 	add.w	r2, r4, #26
 8008aa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aa2:	9305      	str	r3, [sp, #20]
 8008aa4:	eba3 0309 	sub.w	r3, r3, r9
 8008aa8:	455b      	cmp	r3, fp
 8008aaa:	dc33      	bgt.n	8008b14 <_printf_float+0x384>
 8008aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	db3b      	blt.n	8008b2c <_printf_float+0x39c>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	07da      	lsls	r2, r3, #31
 8008ab8:	d438      	bmi.n	8008b2c <_printf_float+0x39c>
 8008aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abc:	9a05      	ldr	r2, [sp, #20]
 8008abe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ac0:	1a9a      	subs	r2, r3, r2
 8008ac2:	eba3 0901 	sub.w	r9, r3, r1
 8008ac6:	4591      	cmp	r9, r2
 8008ac8:	bfa8      	it	ge
 8008aca:	4691      	movge	r9, r2
 8008acc:	f1b9 0f00 	cmp.w	r9, #0
 8008ad0:	dc35      	bgt.n	8008b3e <_printf_float+0x3ae>
 8008ad2:	f04f 0800 	mov.w	r8, #0
 8008ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ada:	f104 0a1a 	add.w	sl, r4, #26
 8008ade:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	eba3 0309 	sub.w	r3, r3, r9
 8008ae8:	4543      	cmp	r3, r8
 8008aea:	f77f af79 	ble.w	80089e0 <_printf_float+0x250>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4652      	mov	r2, sl
 8008af2:	4631      	mov	r1, r6
 8008af4:	4628      	mov	r0, r5
 8008af6:	47b8      	blx	r7
 8008af8:	3001      	adds	r0, #1
 8008afa:	f43f aeaa 	beq.w	8008852 <_printf_float+0xc2>
 8008afe:	f108 0801 	add.w	r8, r8, #1
 8008b02:	e7ec      	b.n	8008ade <_printf_float+0x34e>
 8008b04:	4613      	mov	r3, r2
 8008b06:	4631      	mov	r1, r6
 8008b08:	4642      	mov	r2, r8
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d1c0      	bne.n	8008a94 <_printf_float+0x304>
 8008b12:	e69e      	b.n	8008852 <_printf_float+0xc2>
 8008b14:	2301      	movs	r3, #1
 8008b16:	4631      	mov	r1, r6
 8008b18:	4628      	mov	r0, r5
 8008b1a:	9205      	str	r2, [sp, #20]
 8008b1c:	47b8      	blx	r7
 8008b1e:	3001      	adds	r0, #1
 8008b20:	f43f ae97 	beq.w	8008852 <_printf_float+0xc2>
 8008b24:	9a05      	ldr	r2, [sp, #20]
 8008b26:	f10b 0b01 	add.w	fp, fp, #1
 8008b2a:	e7b9      	b.n	8008aa0 <_printf_float+0x310>
 8008b2c:	ee18 3a10 	vmov	r3, s16
 8008b30:	4652      	mov	r2, sl
 8008b32:	4631      	mov	r1, r6
 8008b34:	4628      	mov	r0, r5
 8008b36:	47b8      	blx	r7
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d1be      	bne.n	8008aba <_printf_float+0x32a>
 8008b3c:	e689      	b.n	8008852 <_printf_float+0xc2>
 8008b3e:	9a05      	ldr	r2, [sp, #20]
 8008b40:	464b      	mov	r3, r9
 8008b42:	4442      	add	r2, r8
 8008b44:	4631      	mov	r1, r6
 8008b46:	4628      	mov	r0, r5
 8008b48:	47b8      	blx	r7
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	d1c1      	bne.n	8008ad2 <_printf_float+0x342>
 8008b4e:	e680      	b.n	8008852 <_printf_float+0xc2>
 8008b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b52:	2a01      	cmp	r2, #1
 8008b54:	dc01      	bgt.n	8008b5a <_printf_float+0x3ca>
 8008b56:	07db      	lsls	r3, r3, #31
 8008b58:	d538      	bpl.n	8008bcc <_printf_float+0x43c>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4628      	mov	r0, r5
 8008b62:	47b8      	blx	r7
 8008b64:	3001      	adds	r0, #1
 8008b66:	f43f ae74 	beq.w	8008852 <_printf_float+0xc2>
 8008b6a:	ee18 3a10 	vmov	r3, s16
 8008b6e:	4652      	mov	r2, sl
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f ae6b 	beq.w	8008852 <_printf_float+0xc2>
 8008b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b80:	2200      	movs	r2, #0
 8008b82:	2300      	movs	r3, #0
 8008b84:	f7f7 ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b88:	b9d8      	cbnz	r0, 8008bc2 <_printf_float+0x432>
 8008b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b8c:	f108 0201 	add.w	r2, r8, #1
 8008b90:	3b01      	subs	r3, #1
 8008b92:	4631      	mov	r1, r6
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b8      	blx	r7
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d10e      	bne.n	8008bba <_printf_float+0x42a>
 8008b9c:	e659      	b.n	8008852 <_printf_float+0xc2>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4652      	mov	r2, sl
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	47b8      	blx	r7
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f43f ae52 	beq.w	8008852 <_printf_float+0xc2>
 8008bae:	f108 0801 	add.w	r8, r8, #1
 8008bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	4543      	cmp	r3, r8
 8008bb8:	dcf1      	bgt.n	8008b9e <_printf_float+0x40e>
 8008bba:	464b      	mov	r3, r9
 8008bbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bc0:	e6dc      	b.n	800897c <_printf_float+0x1ec>
 8008bc2:	f04f 0800 	mov.w	r8, #0
 8008bc6:	f104 0a1a 	add.w	sl, r4, #26
 8008bca:	e7f2      	b.n	8008bb2 <_printf_float+0x422>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	4642      	mov	r2, r8
 8008bd0:	e7df      	b.n	8008b92 <_printf_float+0x402>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	464a      	mov	r2, r9
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	4628      	mov	r0, r5
 8008bda:	47b8      	blx	r7
 8008bdc:	3001      	adds	r0, #1
 8008bde:	f43f ae38 	beq.w	8008852 <_printf_float+0xc2>
 8008be2:	f108 0801 	add.w	r8, r8, #1
 8008be6:	68e3      	ldr	r3, [r4, #12]
 8008be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bea:	1a5b      	subs	r3, r3, r1
 8008bec:	4543      	cmp	r3, r8
 8008bee:	dcf0      	bgt.n	8008bd2 <_printf_float+0x442>
 8008bf0:	e6fa      	b.n	80089e8 <_printf_float+0x258>
 8008bf2:	f04f 0800 	mov.w	r8, #0
 8008bf6:	f104 0919 	add.w	r9, r4, #25
 8008bfa:	e7f4      	b.n	8008be6 <_printf_float+0x456>

08008bfc <_printf_common>:
 8008bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c00:	4616      	mov	r6, r2
 8008c02:	4699      	mov	r9, r3
 8008c04:	688a      	ldr	r2, [r1, #8]
 8008c06:	690b      	ldr	r3, [r1, #16]
 8008c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	bfb8      	it	lt
 8008c10:	4613      	movlt	r3, r2
 8008c12:	6033      	str	r3, [r6, #0]
 8008c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c18:	4607      	mov	r7, r0
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	b10a      	cbz	r2, 8008c22 <_printf_common+0x26>
 8008c1e:	3301      	adds	r3, #1
 8008c20:	6033      	str	r3, [r6, #0]
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	0699      	lsls	r1, r3, #26
 8008c26:	bf42      	ittt	mi
 8008c28:	6833      	ldrmi	r3, [r6, #0]
 8008c2a:	3302      	addmi	r3, #2
 8008c2c:	6033      	strmi	r3, [r6, #0]
 8008c2e:	6825      	ldr	r5, [r4, #0]
 8008c30:	f015 0506 	ands.w	r5, r5, #6
 8008c34:	d106      	bne.n	8008c44 <_printf_common+0x48>
 8008c36:	f104 0a19 	add.w	sl, r4, #25
 8008c3a:	68e3      	ldr	r3, [r4, #12]
 8008c3c:	6832      	ldr	r2, [r6, #0]
 8008c3e:	1a9b      	subs	r3, r3, r2
 8008c40:	42ab      	cmp	r3, r5
 8008c42:	dc26      	bgt.n	8008c92 <_printf_common+0x96>
 8008c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c48:	1e13      	subs	r3, r2, #0
 8008c4a:	6822      	ldr	r2, [r4, #0]
 8008c4c:	bf18      	it	ne
 8008c4e:	2301      	movne	r3, #1
 8008c50:	0692      	lsls	r2, r2, #26
 8008c52:	d42b      	bmi.n	8008cac <_printf_common+0xb0>
 8008c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c58:	4649      	mov	r1, r9
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	47c0      	blx	r8
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d01e      	beq.n	8008ca0 <_printf_common+0xa4>
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	68e5      	ldr	r5, [r4, #12]
 8008c66:	6832      	ldr	r2, [r6, #0]
 8008c68:	f003 0306 	and.w	r3, r3, #6
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	bf08      	it	eq
 8008c70:	1aad      	subeq	r5, r5, r2
 8008c72:	68a3      	ldr	r3, [r4, #8]
 8008c74:	6922      	ldr	r2, [r4, #16]
 8008c76:	bf0c      	ite	eq
 8008c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c7c:	2500      	movne	r5, #0
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	bfc4      	itt	gt
 8008c82:	1a9b      	subgt	r3, r3, r2
 8008c84:	18ed      	addgt	r5, r5, r3
 8008c86:	2600      	movs	r6, #0
 8008c88:	341a      	adds	r4, #26
 8008c8a:	42b5      	cmp	r5, r6
 8008c8c:	d11a      	bne.n	8008cc4 <_printf_common+0xc8>
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e008      	b.n	8008ca4 <_printf_common+0xa8>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4652      	mov	r2, sl
 8008c96:	4649      	mov	r1, r9
 8008c98:	4638      	mov	r0, r7
 8008c9a:	47c0      	blx	r8
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d103      	bne.n	8008ca8 <_printf_common+0xac>
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca8:	3501      	adds	r5, #1
 8008caa:	e7c6      	b.n	8008c3a <_printf_common+0x3e>
 8008cac:	18e1      	adds	r1, r4, r3
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	2030      	movs	r0, #48	; 0x30
 8008cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cb6:	4422      	add	r2, r4
 8008cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cc0:	3302      	adds	r3, #2
 8008cc2:	e7c7      	b.n	8008c54 <_printf_common+0x58>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	4649      	mov	r1, r9
 8008cca:	4638      	mov	r0, r7
 8008ccc:	47c0      	blx	r8
 8008cce:	3001      	adds	r0, #1
 8008cd0:	d0e6      	beq.n	8008ca0 <_printf_common+0xa4>
 8008cd2:	3601      	adds	r6, #1
 8008cd4:	e7d9      	b.n	8008c8a <_printf_common+0x8e>
	...

08008cd8 <_printf_i>:
 8008cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cdc:	7e0f      	ldrb	r7, [r1, #24]
 8008cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ce0:	2f78      	cmp	r7, #120	; 0x78
 8008ce2:	4691      	mov	r9, r2
 8008ce4:	4680      	mov	r8, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	469a      	mov	sl, r3
 8008cea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cee:	d807      	bhi.n	8008d00 <_printf_i+0x28>
 8008cf0:	2f62      	cmp	r7, #98	; 0x62
 8008cf2:	d80a      	bhi.n	8008d0a <_printf_i+0x32>
 8008cf4:	2f00      	cmp	r7, #0
 8008cf6:	f000 80d8 	beq.w	8008eaa <_printf_i+0x1d2>
 8008cfa:	2f58      	cmp	r7, #88	; 0x58
 8008cfc:	f000 80a3 	beq.w	8008e46 <_printf_i+0x16e>
 8008d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d08:	e03a      	b.n	8008d80 <_printf_i+0xa8>
 8008d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d0e:	2b15      	cmp	r3, #21
 8008d10:	d8f6      	bhi.n	8008d00 <_printf_i+0x28>
 8008d12:	a101      	add	r1, pc, #4	; (adr r1, 8008d18 <_printf_i+0x40>)
 8008d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d18:	08008d71 	.word	0x08008d71
 8008d1c:	08008d85 	.word	0x08008d85
 8008d20:	08008d01 	.word	0x08008d01
 8008d24:	08008d01 	.word	0x08008d01
 8008d28:	08008d01 	.word	0x08008d01
 8008d2c:	08008d01 	.word	0x08008d01
 8008d30:	08008d85 	.word	0x08008d85
 8008d34:	08008d01 	.word	0x08008d01
 8008d38:	08008d01 	.word	0x08008d01
 8008d3c:	08008d01 	.word	0x08008d01
 8008d40:	08008d01 	.word	0x08008d01
 8008d44:	08008e91 	.word	0x08008e91
 8008d48:	08008db5 	.word	0x08008db5
 8008d4c:	08008e73 	.word	0x08008e73
 8008d50:	08008d01 	.word	0x08008d01
 8008d54:	08008d01 	.word	0x08008d01
 8008d58:	08008eb3 	.word	0x08008eb3
 8008d5c:	08008d01 	.word	0x08008d01
 8008d60:	08008db5 	.word	0x08008db5
 8008d64:	08008d01 	.word	0x08008d01
 8008d68:	08008d01 	.word	0x08008d01
 8008d6c:	08008e7b 	.word	0x08008e7b
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	1d1a      	adds	r2, r3, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	602a      	str	r2, [r5, #0]
 8008d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d80:	2301      	movs	r3, #1
 8008d82:	e0a3      	b.n	8008ecc <_printf_i+0x1f4>
 8008d84:	6820      	ldr	r0, [r4, #0]
 8008d86:	6829      	ldr	r1, [r5, #0]
 8008d88:	0606      	lsls	r6, r0, #24
 8008d8a:	f101 0304 	add.w	r3, r1, #4
 8008d8e:	d50a      	bpl.n	8008da6 <_printf_i+0xce>
 8008d90:	680e      	ldr	r6, [r1, #0]
 8008d92:	602b      	str	r3, [r5, #0]
 8008d94:	2e00      	cmp	r6, #0
 8008d96:	da03      	bge.n	8008da0 <_printf_i+0xc8>
 8008d98:	232d      	movs	r3, #45	; 0x2d
 8008d9a:	4276      	negs	r6, r6
 8008d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008da0:	485e      	ldr	r0, [pc, #376]	; (8008f1c <_printf_i+0x244>)
 8008da2:	230a      	movs	r3, #10
 8008da4:	e019      	b.n	8008dda <_printf_i+0x102>
 8008da6:	680e      	ldr	r6, [r1, #0]
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dae:	bf18      	it	ne
 8008db0:	b236      	sxthne	r6, r6
 8008db2:	e7ef      	b.n	8008d94 <_printf_i+0xbc>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	6820      	ldr	r0, [r4, #0]
 8008db8:	1d19      	adds	r1, r3, #4
 8008dba:	6029      	str	r1, [r5, #0]
 8008dbc:	0601      	lsls	r1, r0, #24
 8008dbe:	d501      	bpl.n	8008dc4 <_printf_i+0xec>
 8008dc0:	681e      	ldr	r6, [r3, #0]
 8008dc2:	e002      	b.n	8008dca <_printf_i+0xf2>
 8008dc4:	0646      	lsls	r6, r0, #25
 8008dc6:	d5fb      	bpl.n	8008dc0 <_printf_i+0xe8>
 8008dc8:	881e      	ldrh	r6, [r3, #0]
 8008dca:	4854      	ldr	r0, [pc, #336]	; (8008f1c <_printf_i+0x244>)
 8008dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8008dce:	bf0c      	ite	eq
 8008dd0:	2308      	moveq	r3, #8
 8008dd2:	230a      	movne	r3, #10
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dda:	6865      	ldr	r5, [r4, #4]
 8008ddc:	60a5      	str	r5, [r4, #8]
 8008dde:	2d00      	cmp	r5, #0
 8008de0:	bfa2      	ittt	ge
 8008de2:	6821      	ldrge	r1, [r4, #0]
 8008de4:	f021 0104 	bicge.w	r1, r1, #4
 8008de8:	6021      	strge	r1, [r4, #0]
 8008dea:	b90e      	cbnz	r6, 8008df0 <_printf_i+0x118>
 8008dec:	2d00      	cmp	r5, #0
 8008dee:	d04d      	beq.n	8008e8c <_printf_i+0x1b4>
 8008df0:	4615      	mov	r5, r2
 8008df2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008df6:	fb03 6711 	mls	r7, r3, r1, r6
 8008dfa:	5dc7      	ldrb	r7, [r0, r7]
 8008dfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e00:	4637      	mov	r7, r6
 8008e02:	42bb      	cmp	r3, r7
 8008e04:	460e      	mov	r6, r1
 8008e06:	d9f4      	bls.n	8008df2 <_printf_i+0x11a>
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d10b      	bne.n	8008e24 <_printf_i+0x14c>
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	07de      	lsls	r6, r3, #31
 8008e10:	d508      	bpl.n	8008e24 <_printf_i+0x14c>
 8008e12:	6923      	ldr	r3, [r4, #16]
 8008e14:	6861      	ldr	r1, [r4, #4]
 8008e16:	4299      	cmp	r1, r3
 8008e18:	bfde      	ittt	le
 8008e1a:	2330      	movle	r3, #48	; 0x30
 8008e1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e24:	1b52      	subs	r2, r2, r5
 8008e26:	6122      	str	r2, [r4, #16]
 8008e28:	f8cd a000 	str.w	sl, [sp]
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	aa03      	add	r2, sp, #12
 8008e30:	4621      	mov	r1, r4
 8008e32:	4640      	mov	r0, r8
 8008e34:	f7ff fee2 	bl	8008bfc <_printf_common>
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d14c      	bne.n	8008ed6 <_printf_i+0x1fe>
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	b004      	add	sp, #16
 8008e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e46:	4835      	ldr	r0, [pc, #212]	; (8008f1c <_printf_i+0x244>)
 8008e48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e4c:	6829      	ldr	r1, [r5, #0]
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e54:	6029      	str	r1, [r5, #0]
 8008e56:	061d      	lsls	r5, r3, #24
 8008e58:	d514      	bpl.n	8008e84 <_printf_i+0x1ac>
 8008e5a:	07df      	lsls	r7, r3, #31
 8008e5c:	bf44      	itt	mi
 8008e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e62:	6023      	strmi	r3, [r4, #0]
 8008e64:	b91e      	cbnz	r6, 8008e6e <_printf_i+0x196>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	f023 0320 	bic.w	r3, r3, #32
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	2310      	movs	r3, #16
 8008e70:	e7b0      	b.n	8008dd4 <_printf_i+0xfc>
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	f043 0320 	orr.w	r3, r3, #32
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	2378      	movs	r3, #120	; 0x78
 8008e7c:	4828      	ldr	r0, [pc, #160]	; (8008f20 <_printf_i+0x248>)
 8008e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e82:	e7e3      	b.n	8008e4c <_printf_i+0x174>
 8008e84:	0659      	lsls	r1, r3, #25
 8008e86:	bf48      	it	mi
 8008e88:	b2b6      	uxthmi	r6, r6
 8008e8a:	e7e6      	b.n	8008e5a <_printf_i+0x182>
 8008e8c:	4615      	mov	r5, r2
 8008e8e:	e7bb      	b.n	8008e08 <_printf_i+0x130>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	6826      	ldr	r6, [r4, #0]
 8008e94:	6961      	ldr	r1, [r4, #20]
 8008e96:	1d18      	adds	r0, r3, #4
 8008e98:	6028      	str	r0, [r5, #0]
 8008e9a:	0635      	lsls	r5, r6, #24
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	d501      	bpl.n	8008ea4 <_printf_i+0x1cc>
 8008ea0:	6019      	str	r1, [r3, #0]
 8008ea2:	e002      	b.n	8008eaa <_printf_i+0x1d2>
 8008ea4:	0670      	lsls	r0, r6, #25
 8008ea6:	d5fb      	bpl.n	8008ea0 <_printf_i+0x1c8>
 8008ea8:	8019      	strh	r1, [r3, #0]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	6123      	str	r3, [r4, #16]
 8008eae:	4615      	mov	r5, r2
 8008eb0:	e7ba      	b.n	8008e28 <_printf_i+0x150>
 8008eb2:	682b      	ldr	r3, [r5, #0]
 8008eb4:	1d1a      	adds	r2, r3, #4
 8008eb6:	602a      	str	r2, [r5, #0]
 8008eb8:	681d      	ldr	r5, [r3, #0]
 8008eba:	6862      	ldr	r2, [r4, #4]
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f7f7 f98e 	bl	80001e0 <memchr>
 8008ec4:	b108      	cbz	r0, 8008eca <_printf_i+0x1f2>
 8008ec6:	1b40      	subs	r0, r0, r5
 8008ec8:	6060      	str	r0, [r4, #4]
 8008eca:	6863      	ldr	r3, [r4, #4]
 8008ecc:	6123      	str	r3, [r4, #16]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ed4:	e7a8      	b.n	8008e28 <_printf_i+0x150>
 8008ed6:	6923      	ldr	r3, [r4, #16]
 8008ed8:	462a      	mov	r2, r5
 8008eda:	4649      	mov	r1, r9
 8008edc:	4640      	mov	r0, r8
 8008ede:	47d0      	blx	sl
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d0ab      	beq.n	8008e3c <_printf_i+0x164>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	079b      	lsls	r3, r3, #30
 8008ee8:	d413      	bmi.n	8008f12 <_printf_i+0x23a>
 8008eea:	68e0      	ldr	r0, [r4, #12]
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	4298      	cmp	r0, r3
 8008ef0:	bfb8      	it	lt
 8008ef2:	4618      	movlt	r0, r3
 8008ef4:	e7a4      	b.n	8008e40 <_printf_i+0x168>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	4632      	mov	r2, r6
 8008efa:	4649      	mov	r1, r9
 8008efc:	4640      	mov	r0, r8
 8008efe:	47d0      	blx	sl
 8008f00:	3001      	adds	r0, #1
 8008f02:	d09b      	beq.n	8008e3c <_printf_i+0x164>
 8008f04:	3501      	adds	r5, #1
 8008f06:	68e3      	ldr	r3, [r4, #12]
 8008f08:	9903      	ldr	r1, [sp, #12]
 8008f0a:	1a5b      	subs	r3, r3, r1
 8008f0c:	42ab      	cmp	r3, r5
 8008f0e:	dcf2      	bgt.n	8008ef6 <_printf_i+0x21e>
 8008f10:	e7eb      	b.n	8008eea <_printf_i+0x212>
 8008f12:	2500      	movs	r5, #0
 8008f14:	f104 0619 	add.w	r6, r4, #25
 8008f18:	e7f5      	b.n	8008f06 <_printf_i+0x22e>
 8008f1a:	bf00      	nop
 8008f1c:	0800b3c2 	.word	0x0800b3c2
 8008f20:	0800b3d3 	.word	0x0800b3d3

08008f24 <_sbrk_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4d06      	ldr	r5, [pc, #24]	; (8008f40 <_sbrk_r+0x1c>)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	f7f9 faa6 	bl	8002480 <_sbrk>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_sbrk_r+0x1a>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_sbrk_r+0x1a>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	20000520 	.word	0x20000520

08008f44 <siprintf>:
 8008f44:	b40e      	push	{r1, r2, r3}
 8008f46:	b500      	push	{lr}
 8008f48:	b09c      	sub	sp, #112	; 0x70
 8008f4a:	ab1d      	add	r3, sp, #116	; 0x74
 8008f4c:	9002      	str	r0, [sp, #8]
 8008f4e:	9006      	str	r0, [sp, #24]
 8008f50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f54:	4809      	ldr	r0, [pc, #36]	; (8008f7c <siprintf+0x38>)
 8008f56:	9107      	str	r1, [sp, #28]
 8008f58:	9104      	str	r1, [sp, #16]
 8008f5a:	4909      	ldr	r1, [pc, #36]	; (8008f80 <siprintf+0x3c>)
 8008f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f60:	9105      	str	r1, [sp, #20]
 8008f62:	6800      	ldr	r0, [r0, #0]
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	a902      	add	r1, sp, #8
 8008f68:	f001 fa96 	bl	800a498 <_svfiprintf_r>
 8008f6c:	9b02      	ldr	r3, [sp, #8]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	b01c      	add	sp, #112	; 0x70
 8008f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f78:	b003      	add	sp, #12
 8008f7a:	4770      	bx	lr
 8008f7c:	2000000c 	.word	0x2000000c
 8008f80:	ffff0208 	.word	0xffff0208

08008f84 <strcpy>:
 8008f84:	4603      	mov	r3, r0
 8008f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f8a:	f803 2b01 	strb.w	r2, [r3], #1
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	d1f9      	bne.n	8008f86 <strcpy+0x2>
 8008f92:	4770      	bx	lr

08008f94 <quorem>:
 8008f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	6903      	ldr	r3, [r0, #16]
 8008f9a:	690c      	ldr	r4, [r1, #16]
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	f2c0 8081 	blt.w	80090a6 <quorem+0x112>
 8008fa4:	3c01      	subs	r4, #1
 8008fa6:	f101 0814 	add.w	r8, r1, #20
 8008faa:	f100 0514 	add.w	r5, r0, #20
 8008fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fcc:	d331      	bcc.n	8009032 <quorem+0x9e>
 8008fce:	f04f 0e00 	mov.w	lr, #0
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	46ac      	mov	ip, r5
 8008fd6:	46f2      	mov	sl, lr
 8008fd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fdc:	b293      	uxth	r3, r2
 8008fde:	fb06 e303 	mla	r3, r6, r3, lr
 8008fe2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	ebaa 0303 	sub.w	r3, sl, r3
 8008fec:	f8dc a000 	ldr.w	sl, [ip]
 8008ff0:	0c12      	lsrs	r2, r2, #16
 8008ff2:	fa13 f38a 	uxtah	r3, r3, sl
 8008ff6:	fb06 e202 	mla	r2, r6, r2, lr
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	9b00      	ldr	r3, [sp, #0]
 8008ffe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009002:	b292      	uxth	r2, r2
 8009004:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800900c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009010:	4581      	cmp	r9, r0
 8009012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009016:	f84c 3b04 	str.w	r3, [ip], #4
 800901a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800901e:	d2db      	bcs.n	8008fd8 <quorem+0x44>
 8009020:	f855 300b 	ldr.w	r3, [r5, fp]
 8009024:	b92b      	cbnz	r3, 8009032 <quorem+0x9e>
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	3b04      	subs	r3, #4
 800902a:	429d      	cmp	r5, r3
 800902c:	461a      	mov	r2, r3
 800902e:	d32e      	bcc.n	800908e <quorem+0xfa>
 8009030:	613c      	str	r4, [r7, #16]
 8009032:	4638      	mov	r0, r7
 8009034:	f001 f8bc 	bl	800a1b0 <__mcmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	db24      	blt.n	8009086 <quorem+0xf2>
 800903c:	3601      	adds	r6, #1
 800903e:	4628      	mov	r0, r5
 8009040:	f04f 0c00 	mov.w	ip, #0
 8009044:	f858 2b04 	ldr.w	r2, [r8], #4
 8009048:	f8d0 e000 	ldr.w	lr, [r0]
 800904c:	b293      	uxth	r3, r2
 800904e:	ebac 0303 	sub.w	r3, ip, r3
 8009052:	0c12      	lsrs	r2, r2, #16
 8009054:	fa13 f38e 	uxtah	r3, r3, lr
 8009058:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800905c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009060:	b29b      	uxth	r3, r3
 8009062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009066:	45c1      	cmp	r9, r8
 8009068:	f840 3b04 	str.w	r3, [r0], #4
 800906c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009070:	d2e8      	bcs.n	8009044 <quorem+0xb0>
 8009072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800907a:	b922      	cbnz	r2, 8009086 <quorem+0xf2>
 800907c:	3b04      	subs	r3, #4
 800907e:	429d      	cmp	r5, r3
 8009080:	461a      	mov	r2, r3
 8009082:	d30a      	bcc.n	800909a <quorem+0x106>
 8009084:	613c      	str	r4, [r7, #16]
 8009086:	4630      	mov	r0, r6
 8009088:	b003      	add	sp, #12
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	3b04      	subs	r3, #4
 8009092:	2a00      	cmp	r2, #0
 8009094:	d1cc      	bne.n	8009030 <quorem+0x9c>
 8009096:	3c01      	subs	r4, #1
 8009098:	e7c7      	b.n	800902a <quorem+0x96>
 800909a:	6812      	ldr	r2, [r2, #0]
 800909c:	3b04      	subs	r3, #4
 800909e:	2a00      	cmp	r2, #0
 80090a0:	d1f0      	bne.n	8009084 <quorem+0xf0>
 80090a2:	3c01      	subs	r4, #1
 80090a4:	e7eb      	b.n	800907e <quorem+0xea>
 80090a6:	2000      	movs	r0, #0
 80090a8:	e7ee      	b.n	8009088 <quorem+0xf4>
 80090aa:	0000      	movs	r0, r0
 80090ac:	0000      	movs	r0, r0
	...

080090b0 <_dtoa_r>:
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	ed2d 8b04 	vpush	{d8-d9}
 80090b8:	ec57 6b10 	vmov	r6, r7, d0
 80090bc:	b093      	sub	sp, #76	; 0x4c
 80090be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090c4:	9106      	str	r1, [sp, #24]
 80090c6:	ee10 aa10 	vmov	sl, s0
 80090ca:	4604      	mov	r4, r0
 80090cc:	9209      	str	r2, [sp, #36]	; 0x24
 80090ce:	930c      	str	r3, [sp, #48]	; 0x30
 80090d0:	46bb      	mov	fp, r7
 80090d2:	b975      	cbnz	r5, 80090f2 <_dtoa_r+0x42>
 80090d4:	2010      	movs	r0, #16
 80090d6:	f7ff f9bd 	bl	8008454 <malloc>
 80090da:	4602      	mov	r2, r0
 80090dc:	6260      	str	r0, [r4, #36]	; 0x24
 80090de:	b920      	cbnz	r0, 80090ea <_dtoa_r+0x3a>
 80090e0:	4ba7      	ldr	r3, [pc, #668]	; (8009380 <_dtoa_r+0x2d0>)
 80090e2:	21ea      	movs	r1, #234	; 0xea
 80090e4:	48a7      	ldr	r0, [pc, #668]	; (8009384 <_dtoa_r+0x2d4>)
 80090e6:	f001 fad7 	bl	800a698 <__assert_func>
 80090ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090ee:	6005      	str	r5, [r0, #0]
 80090f0:	60c5      	str	r5, [r0, #12]
 80090f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f4:	6819      	ldr	r1, [r3, #0]
 80090f6:	b151      	cbz	r1, 800910e <_dtoa_r+0x5e>
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	604a      	str	r2, [r1, #4]
 80090fc:	2301      	movs	r3, #1
 80090fe:	4093      	lsls	r3, r2
 8009100:	608b      	str	r3, [r1, #8]
 8009102:	4620      	mov	r0, r4
 8009104:	f000 fe12 	bl	8009d2c <_Bfree>
 8009108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	1e3b      	subs	r3, r7, #0
 8009110:	bfaa      	itet	ge
 8009112:	2300      	movge	r3, #0
 8009114:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009118:	f8c8 3000 	strge.w	r3, [r8]
 800911c:	4b9a      	ldr	r3, [pc, #616]	; (8009388 <_dtoa_r+0x2d8>)
 800911e:	bfbc      	itt	lt
 8009120:	2201      	movlt	r2, #1
 8009122:	f8c8 2000 	strlt.w	r2, [r8]
 8009126:	ea33 030b 	bics.w	r3, r3, fp
 800912a:	d11b      	bne.n	8009164 <_dtoa_r+0xb4>
 800912c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800912e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009138:	4333      	orrs	r3, r6
 800913a:	f000 8592 	beq.w	8009c62 <_dtoa_r+0xbb2>
 800913e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009140:	b963      	cbnz	r3, 800915c <_dtoa_r+0xac>
 8009142:	4b92      	ldr	r3, [pc, #584]	; (800938c <_dtoa_r+0x2dc>)
 8009144:	e022      	b.n	800918c <_dtoa_r+0xdc>
 8009146:	4b92      	ldr	r3, [pc, #584]	; (8009390 <_dtoa_r+0x2e0>)
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	3308      	adds	r3, #8
 800914c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800914e:	6013      	str	r3, [r2, #0]
 8009150:	9801      	ldr	r0, [sp, #4]
 8009152:	b013      	add	sp, #76	; 0x4c
 8009154:	ecbd 8b04 	vpop	{d8-d9}
 8009158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915c:	4b8b      	ldr	r3, [pc, #556]	; (800938c <_dtoa_r+0x2dc>)
 800915e:	9301      	str	r3, [sp, #4]
 8009160:	3303      	adds	r3, #3
 8009162:	e7f3      	b.n	800914c <_dtoa_r+0x9c>
 8009164:	2200      	movs	r2, #0
 8009166:	2300      	movs	r3, #0
 8009168:	4650      	mov	r0, sl
 800916a:	4659      	mov	r1, fp
 800916c:	f7f7 fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009170:	ec4b ab19 	vmov	d9, sl, fp
 8009174:	4680      	mov	r8, r0
 8009176:	b158      	cbz	r0, 8009190 <_dtoa_r+0xe0>
 8009178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800917a:	2301      	movs	r3, #1
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 856b 	beq.w	8009c5c <_dtoa_r+0xbac>
 8009186:	4883      	ldr	r0, [pc, #524]	; (8009394 <_dtoa_r+0x2e4>)
 8009188:	6018      	str	r0, [r3, #0]
 800918a:	1e43      	subs	r3, r0, #1
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	e7df      	b.n	8009150 <_dtoa_r+0xa0>
 8009190:	ec4b ab10 	vmov	d0, sl, fp
 8009194:	aa10      	add	r2, sp, #64	; 0x40
 8009196:	a911      	add	r1, sp, #68	; 0x44
 8009198:	4620      	mov	r0, r4
 800919a:	f001 f8af 	bl	800a2fc <__d2b>
 800919e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80091a2:	ee08 0a10 	vmov	s16, r0
 80091a6:	2d00      	cmp	r5, #0
 80091a8:	f000 8084 	beq.w	80092b4 <_dtoa_r+0x204>
 80091ac:	ee19 3a90 	vmov	r3, s19
 80091b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80091b8:	4656      	mov	r6, sl
 80091ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80091be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80091c6:	4b74      	ldr	r3, [pc, #464]	; (8009398 <_dtoa_r+0x2e8>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	4630      	mov	r0, r6
 80091cc:	4639      	mov	r1, r7
 80091ce:	f7f7 f85b 	bl	8000288 <__aeabi_dsub>
 80091d2:	a365      	add	r3, pc, #404	; (adr r3, 8009368 <_dtoa_r+0x2b8>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	f7f7 fa0e 	bl	80005f8 <__aeabi_dmul>
 80091dc:	a364      	add	r3, pc, #400	; (adr r3, 8009370 <_dtoa_r+0x2c0>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f7f7 f853 	bl	800028c <__adddf3>
 80091e6:	4606      	mov	r6, r0
 80091e8:	4628      	mov	r0, r5
 80091ea:	460f      	mov	r7, r1
 80091ec:	f7f7 f99a 	bl	8000524 <__aeabi_i2d>
 80091f0:	a361      	add	r3, pc, #388	; (adr r3, 8009378 <_dtoa_r+0x2c8>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f7f7 f9ff 	bl	80005f8 <__aeabi_dmul>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4630      	mov	r0, r6
 8009200:	4639      	mov	r1, r7
 8009202:	f7f7 f843 	bl	800028c <__adddf3>
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	f7f7 fca5 	bl	8000b58 <__aeabi_d2iz>
 800920e:	2200      	movs	r2, #0
 8009210:	9000      	str	r0, [sp, #0]
 8009212:	2300      	movs	r3, #0
 8009214:	4630      	mov	r0, r6
 8009216:	4639      	mov	r1, r7
 8009218:	f7f7 fc60 	bl	8000adc <__aeabi_dcmplt>
 800921c:	b150      	cbz	r0, 8009234 <_dtoa_r+0x184>
 800921e:	9800      	ldr	r0, [sp, #0]
 8009220:	f7f7 f980 	bl	8000524 <__aeabi_i2d>
 8009224:	4632      	mov	r2, r6
 8009226:	463b      	mov	r3, r7
 8009228:	f7f7 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800922c:	b910      	cbnz	r0, 8009234 <_dtoa_r+0x184>
 800922e:	9b00      	ldr	r3, [sp, #0]
 8009230:	3b01      	subs	r3, #1
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	9b00      	ldr	r3, [sp, #0]
 8009236:	2b16      	cmp	r3, #22
 8009238:	d85a      	bhi.n	80092f0 <_dtoa_r+0x240>
 800923a:	9a00      	ldr	r2, [sp, #0]
 800923c:	4b57      	ldr	r3, [pc, #348]	; (800939c <_dtoa_r+0x2ec>)
 800923e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	ec51 0b19 	vmov	r0, r1, d9
 800924a:	f7f7 fc47 	bl	8000adc <__aeabi_dcmplt>
 800924e:	2800      	cmp	r0, #0
 8009250:	d050      	beq.n	80092f4 <_dtoa_r+0x244>
 8009252:	9b00      	ldr	r3, [sp, #0]
 8009254:	3b01      	subs	r3, #1
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	2300      	movs	r3, #0
 800925a:	930b      	str	r3, [sp, #44]	; 0x2c
 800925c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800925e:	1b5d      	subs	r5, r3, r5
 8009260:	1e6b      	subs	r3, r5, #1
 8009262:	9305      	str	r3, [sp, #20]
 8009264:	bf45      	ittet	mi
 8009266:	f1c5 0301 	rsbmi	r3, r5, #1
 800926a:	9304      	strmi	r3, [sp, #16]
 800926c:	2300      	movpl	r3, #0
 800926e:	2300      	movmi	r3, #0
 8009270:	bf4c      	ite	mi
 8009272:	9305      	strmi	r3, [sp, #20]
 8009274:	9304      	strpl	r3, [sp, #16]
 8009276:	9b00      	ldr	r3, [sp, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	db3d      	blt.n	80092f8 <_dtoa_r+0x248>
 800927c:	9b05      	ldr	r3, [sp, #20]
 800927e:	9a00      	ldr	r2, [sp, #0]
 8009280:	920a      	str	r2, [sp, #40]	; 0x28
 8009282:	4413      	add	r3, r2
 8009284:	9305      	str	r3, [sp, #20]
 8009286:	2300      	movs	r3, #0
 8009288:	9307      	str	r3, [sp, #28]
 800928a:	9b06      	ldr	r3, [sp, #24]
 800928c:	2b09      	cmp	r3, #9
 800928e:	f200 8089 	bhi.w	80093a4 <_dtoa_r+0x2f4>
 8009292:	2b05      	cmp	r3, #5
 8009294:	bfc4      	itt	gt
 8009296:	3b04      	subgt	r3, #4
 8009298:	9306      	strgt	r3, [sp, #24]
 800929a:	9b06      	ldr	r3, [sp, #24]
 800929c:	f1a3 0302 	sub.w	r3, r3, #2
 80092a0:	bfcc      	ite	gt
 80092a2:	2500      	movgt	r5, #0
 80092a4:	2501      	movle	r5, #1
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	f200 8087 	bhi.w	80093ba <_dtoa_r+0x30a>
 80092ac:	e8df f003 	tbb	[pc, r3]
 80092b0:	59383a2d 	.word	0x59383a2d
 80092b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092b8:	441d      	add	r5, r3
 80092ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092be:	2b20      	cmp	r3, #32
 80092c0:	bfc1      	itttt	gt
 80092c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80092ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80092ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80092d2:	bfda      	itte	le
 80092d4:	f1c3 0320 	rsble	r3, r3, #32
 80092d8:	fa06 f003 	lslle.w	r0, r6, r3
 80092dc:	4318      	orrgt	r0, r3
 80092de:	f7f7 f911 	bl	8000504 <__aeabi_ui2d>
 80092e2:	2301      	movs	r3, #1
 80092e4:	4606      	mov	r6, r0
 80092e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80092ea:	3d01      	subs	r5, #1
 80092ec:	930e      	str	r3, [sp, #56]	; 0x38
 80092ee:	e76a      	b.n	80091c6 <_dtoa_r+0x116>
 80092f0:	2301      	movs	r3, #1
 80092f2:	e7b2      	b.n	800925a <_dtoa_r+0x1aa>
 80092f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80092f6:	e7b1      	b.n	800925c <_dtoa_r+0x1ac>
 80092f8:	9b04      	ldr	r3, [sp, #16]
 80092fa:	9a00      	ldr	r2, [sp, #0]
 80092fc:	1a9b      	subs	r3, r3, r2
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	4253      	negs	r3, r2
 8009302:	9307      	str	r3, [sp, #28]
 8009304:	2300      	movs	r3, #0
 8009306:	930a      	str	r3, [sp, #40]	; 0x28
 8009308:	e7bf      	b.n	800928a <_dtoa_r+0x1da>
 800930a:	2300      	movs	r3, #0
 800930c:	9308      	str	r3, [sp, #32]
 800930e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009310:	2b00      	cmp	r3, #0
 8009312:	dc55      	bgt.n	80093c0 <_dtoa_r+0x310>
 8009314:	2301      	movs	r3, #1
 8009316:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800931a:	461a      	mov	r2, r3
 800931c:	9209      	str	r2, [sp, #36]	; 0x24
 800931e:	e00c      	b.n	800933a <_dtoa_r+0x28a>
 8009320:	2301      	movs	r3, #1
 8009322:	e7f3      	b.n	800930c <_dtoa_r+0x25c>
 8009324:	2300      	movs	r3, #0
 8009326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009328:	9308      	str	r3, [sp, #32]
 800932a:	9b00      	ldr	r3, [sp, #0]
 800932c:	4413      	add	r3, r2
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	3301      	adds	r3, #1
 8009332:	2b01      	cmp	r3, #1
 8009334:	9303      	str	r3, [sp, #12]
 8009336:	bfb8      	it	lt
 8009338:	2301      	movlt	r3, #1
 800933a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800933c:	2200      	movs	r2, #0
 800933e:	6042      	str	r2, [r0, #4]
 8009340:	2204      	movs	r2, #4
 8009342:	f102 0614 	add.w	r6, r2, #20
 8009346:	429e      	cmp	r6, r3
 8009348:	6841      	ldr	r1, [r0, #4]
 800934a:	d93d      	bls.n	80093c8 <_dtoa_r+0x318>
 800934c:	4620      	mov	r0, r4
 800934e:	f000 fcad 	bl	8009cac <_Balloc>
 8009352:	9001      	str	r0, [sp, #4]
 8009354:	2800      	cmp	r0, #0
 8009356:	d13b      	bne.n	80093d0 <_dtoa_r+0x320>
 8009358:	4b11      	ldr	r3, [pc, #68]	; (80093a0 <_dtoa_r+0x2f0>)
 800935a:	4602      	mov	r2, r0
 800935c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009360:	e6c0      	b.n	80090e4 <_dtoa_r+0x34>
 8009362:	2301      	movs	r3, #1
 8009364:	e7df      	b.n	8009326 <_dtoa_r+0x276>
 8009366:	bf00      	nop
 8009368:	636f4361 	.word	0x636f4361
 800936c:	3fd287a7 	.word	0x3fd287a7
 8009370:	8b60c8b3 	.word	0x8b60c8b3
 8009374:	3fc68a28 	.word	0x3fc68a28
 8009378:	509f79fb 	.word	0x509f79fb
 800937c:	3fd34413 	.word	0x3fd34413
 8009380:	0800b3f1 	.word	0x0800b3f1
 8009384:	0800b408 	.word	0x0800b408
 8009388:	7ff00000 	.word	0x7ff00000
 800938c:	0800b3ed 	.word	0x0800b3ed
 8009390:	0800b3e4 	.word	0x0800b3e4
 8009394:	0800b3c1 	.word	0x0800b3c1
 8009398:	3ff80000 	.word	0x3ff80000
 800939c:	0800b4f8 	.word	0x0800b4f8
 80093a0:	0800b463 	.word	0x0800b463
 80093a4:	2501      	movs	r5, #1
 80093a6:	2300      	movs	r3, #0
 80093a8:	9306      	str	r3, [sp, #24]
 80093aa:	9508      	str	r5, [sp, #32]
 80093ac:	f04f 33ff 	mov.w	r3, #4294967295
 80093b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093b4:	2200      	movs	r2, #0
 80093b6:	2312      	movs	r3, #18
 80093b8:	e7b0      	b.n	800931c <_dtoa_r+0x26c>
 80093ba:	2301      	movs	r3, #1
 80093bc:	9308      	str	r3, [sp, #32]
 80093be:	e7f5      	b.n	80093ac <_dtoa_r+0x2fc>
 80093c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093c6:	e7b8      	b.n	800933a <_dtoa_r+0x28a>
 80093c8:	3101      	adds	r1, #1
 80093ca:	6041      	str	r1, [r0, #4]
 80093cc:	0052      	lsls	r2, r2, #1
 80093ce:	e7b8      	b.n	8009342 <_dtoa_r+0x292>
 80093d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d2:	9a01      	ldr	r2, [sp, #4]
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	2b0e      	cmp	r3, #14
 80093da:	f200 809d 	bhi.w	8009518 <_dtoa_r+0x468>
 80093de:	2d00      	cmp	r5, #0
 80093e0:	f000 809a 	beq.w	8009518 <_dtoa_r+0x468>
 80093e4:	9b00      	ldr	r3, [sp, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	dd32      	ble.n	8009450 <_dtoa_r+0x3a0>
 80093ea:	4ab7      	ldr	r2, [pc, #732]	; (80096c8 <_dtoa_r+0x618>)
 80093ec:	f003 030f 	and.w	r3, r3, #15
 80093f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093f8:	9b00      	ldr	r3, [sp, #0]
 80093fa:	05d8      	lsls	r0, r3, #23
 80093fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009400:	d516      	bpl.n	8009430 <_dtoa_r+0x380>
 8009402:	4bb2      	ldr	r3, [pc, #712]	; (80096cc <_dtoa_r+0x61c>)
 8009404:	ec51 0b19 	vmov	r0, r1, d9
 8009408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800940c:	f7f7 fa1e 	bl	800084c <__aeabi_ddiv>
 8009410:	f007 070f 	and.w	r7, r7, #15
 8009414:	4682      	mov	sl, r0
 8009416:	468b      	mov	fp, r1
 8009418:	2503      	movs	r5, #3
 800941a:	4eac      	ldr	r6, [pc, #688]	; (80096cc <_dtoa_r+0x61c>)
 800941c:	b957      	cbnz	r7, 8009434 <_dtoa_r+0x384>
 800941e:	4642      	mov	r2, r8
 8009420:	464b      	mov	r3, r9
 8009422:	4650      	mov	r0, sl
 8009424:	4659      	mov	r1, fp
 8009426:	f7f7 fa11 	bl	800084c <__aeabi_ddiv>
 800942a:	4682      	mov	sl, r0
 800942c:	468b      	mov	fp, r1
 800942e:	e028      	b.n	8009482 <_dtoa_r+0x3d2>
 8009430:	2502      	movs	r5, #2
 8009432:	e7f2      	b.n	800941a <_dtoa_r+0x36a>
 8009434:	07f9      	lsls	r1, r7, #31
 8009436:	d508      	bpl.n	800944a <_dtoa_r+0x39a>
 8009438:	4640      	mov	r0, r8
 800943a:	4649      	mov	r1, r9
 800943c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009440:	f7f7 f8da 	bl	80005f8 <__aeabi_dmul>
 8009444:	3501      	adds	r5, #1
 8009446:	4680      	mov	r8, r0
 8009448:	4689      	mov	r9, r1
 800944a:	107f      	asrs	r7, r7, #1
 800944c:	3608      	adds	r6, #8
 800944e:	e7e5      	b.n	800941c <_dtoa_r+0x36c>
 8009450:	f000 809b 	beq.w	800958a <_dtoa_r+0x4da>
 8009454:	9b00      	ldr	r3, [sp, #0]
 8009456:	4f9d      	ldr	r7, [pc, #628]	; (80096cc <_dtoa_r+0x61c>)
 8009458:	425e      	negs	r6, r3
 800945a:	4b9b      	ldr	r3, [pc, #620]	; (80096c8 <_dtoa_r+0x618>)
 800945c:	f006 020f 	and.w	r2, r6, #15
 8009460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	ec51 0b19 	vmov	r0, r1, d9
 800946c:	f7f7 f8c4 	bl	80005f8 <__aeabi_dmul>
 8009470:	1136      	asrs	r6, r6, #4
 8009472:	4682      	mov	sl, r0
 8009474:	468b      	mov	fp, r1
 8009476:	2300      	movs	r3, #0
 8009478:	2502      	movs	r5, #2
 800947a:	2e00      	cmp	r6, #0
 800947c:	d17a      	bne.n	8009574 <_dtoa_r+0x4c4>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1d3      	bne.n	800942a <_dtoa_r+0x37a>
 8009482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 8082 	beq.w	800958e <_dtoa_r+0x4de>
 800948a:	4b91      	ldr	r3, [pc, #580]	; (80096d0 <_dtoa_r+0x620>)
 800948c:	2200      	movs	r2, #0
 800948e:	4650      	mov	r0, sl
 8009490:	4659      	mov	r1, fp
 8009492:	f7f7 fb23 	bl	8000adc <__aeabi_dcmplt>
 8009496:	2800      	cmp	r0, #0
 8009498:	d079      	beq.n	800958e <_dtoa_r+0x4de>
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d076      	beq.n	800958e <_dtoa_r+0x4de>
 80094a0:	9b02      	ldr	r3, [sp, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dd36      	ble.n	8009514 <_dtoa_r+0x464>
 80094a6:	9b00      	ldr	r3, [sp, #0]
 80094a8:	4650      	mov	r0, sl
 80094aa:	4659      	mov	r1, fp
 80094ac:	1e5f      	subs	r7, r3, #1
 80094ae:	2200      	movs	r2, #0
 80094b0:	4b88      	ldr	r3, [pc, #544]	; (80096d4 <_dtoa_r+0x624>)
 80094b2:	f7f7 f8a1 	bl	80005f8 <__aeabi_dmul>
 80094b6:	9e02      	ldr	r6, [sp, #8]
 80094b8:	4682      	mov	sl, r0
 80094ba:	468b      	mov	fp, r1
 80094bc:	3501      	adds	r5, #1
 80094be:	4628      	mov	r0, r5
 80094c0:	f7f7 f830 	bl	8000524 <__aeabi_i2d>
 80094c4:	4652      	mov	r2, sl
 80094c6:	465b      	mov	r3, fp
 80094c8:	f7f7 f896 	bl	80005f8 <__aeabi_dmul>
 80094cc:	4b82      	ldr	r3, [pc, #520]	; (80096d8 <_dtoa_r+0x628>)
 80094ce:	2200      	movs	r2, #0
 80094d0:	f7f6 fedc 	bl	800028c <__adddf3>
 80094d4:	46d0      	mov	r8, sl
 80094d6:	46d9      	mov	r9, fp
 80094d8:	4682      	mov	sl, r0
 80094da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80094de:	2e00      	cmp	r6, #0
 80094e0:	d158      	bne.n	8009594 <_dtoa_r+0x4e4>
 80094e2:	4b7e      	ldr	r3, [pc, #504]	; (80096dc <_dtoa_r+0x62c>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	4640      	mov	r0, r8
 80094e8:	4649      	mov	r1, r9
 80094ea:	f7f6 fecd 	bl	8000288 <__aeabi_dsub>
 80094ee:	4652      	mov	r2, sl
 80094f0:	465b      	mov	r3, fp
 80094f2:	4680      	mov	r8, r0
 80094f4:	4689      	mov	r9, r1
 80094f6:	f7f7 fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	f040 8295 	bne.w	8009a2a <_dtoa_r+0x97a>
 8009500:	4652      	mov	r2, sl
 8009502:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009506:	4640      	mov	r0, r8
 8009508:	4649      	mov	r1, r9
 800950a:	f7f7 fae7 	bl	8000adc <__aeabi_dcmplt>
 800950e:	2800      	cmp	r0, #0
 8009510:	f040 8289 	bne.w	8009a26 <_dtoa_r+0x976>
 8009514:	ec5b ab19 	vmov	sl, fp, d9
 8009518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800951a:	2b00      	cmp	r3, #0
 800951c:	f2c0 8148 	blt.w	80097b0 <_dtoa_r+0x700>
 8009520:	9a00      	ldr	r2, [sp, #0]
 8009522:	2a0e      	cmp	r2, #14
 8009524:	f300 8144 	bgt.w	80097b0 <_dtoa_r+0x700>
 8009528:	4b67      	ldr	r3, [pc, #412]	; (80096c8 <_dtoa_r+0x618>)
 800952a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800952e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009534:	2b00      	cmp	r3, #0
 8009536:	f280 80d5 	bge.w	80096e4 <_dtoa_r+0x634>
 800953a:	9b03      	ldr	r3, [sp, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	f300 80d1 	bgt.w	80096e4 <_dtoa_r+0x634>
 8009542:	f040 826f 	bne.w	8009a24 <_dtoa_r+0x974>
 8009546:	4b65      	ldr	r3, [pc, #404]	; (80096dc <_dtoa_r+0x62c>)
 8009548:	2200      	movs	r2, #0
 800954a:	4640      	mov	r0, r8
 800954c:	4649      	mov	r1, r9
 800954e:	f7f7 f853 	bl	80005f8 <__aeabi_dmul>
 8009552:	4652      	mov	r2, sl
 8009554:	465b      	mov	r3, fp
 8009556:	f7f7 fad5 	bl	8000b04 <__aeabi_dcmpge>
 800955a:	9e03      	ldr	r6, [sp, #12]
 800955c:	4637      	mov	r7, r6
 800955e:	2800      	cmp	r0, #0
 8009560:	f040 8245 	bne.w	80099ee <_dtoa_r+0x93e>
 8009564:	9d01      	ldr	r5, [sp, #4]
 8009566:	2331      	movs	r3, #49	; 0x31
 8009568:	f805 3b01 	strb.w	r3, [r5], #1
 800956c:	9b00      	ldr	r3, [sp, #0]
 800956e:	3301      	adds	r3, #1
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	e240      	b.n	80099f6 <_dtoa_r+0x946>
 8009574:	07f2      	lsls	r2, r6, #31
 8009576:	d505      	bpl.n	8009584 <_dtoa_r+0x4d4>
 8009578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800957c:	f7f7 f83c 	bl	80005f8 <__aeabi_dmul>
 8009580:	3501      	adds	r5, #1
 8009582:	2301      	movs	r3, #1
 8009584:	1076      	asrs	r6, r6, #1
 8009586:	3708      	adds	r7, #8
 8009588:	e777      	b.n	800947a <_dtoa_r+0x3ca>
 800958a:	2502      	movs	r5, #2
 800958c:	e779      	b.n	8009482 <_dtoa_r+0x3d2>
 800958e:	9f00      	ldr	r7, [sp, #0]
 8009590:	9e03      	ldr	r6, [sp, #12]
 8009592:	e794      	b.n	80094be <_dtoa_r+0x40e>
 8009594:	9901      	ldr	r1, [sp, #4]
 8009596:	4b4c      	ldr	r3, [pc, #304]	; (80096c8 <_dtoa_r+0x618>)
 8009598:	4431      	add	r1, r6
 800959a:	910d      	str	r1, [sp, #52]	; 0x34
 800959c:	9908      	ldr	r1, [sp, #32]
 800959e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095a6:	2900      	cmp	r1, #0
 80095a8:	d043      	beq.n	8009632 <_dtoa_r+0x582>
 80095aa:	494d      	ldr	r1, [pc, #308]	; (80096e0 <_dtoa_r+0x630>)
 80095ac:	2000      	movs	r0, #0
 80095ae:	f7f7 f94d 	bl	800084c <__aeabi_ddiv>
 80095b2:	4652      	mov	r2, sl
 80095b4:	465b      	mov	r3, fp
 80095b6:	f7f6 fe67 	bl	8000288 <__aeabi_dsub>
 80095ba:	9d01      	ldr	r5, [sp, #4]
 80095bc:	4682      	mov	sl, r0
 80095be:	468b      	mov	fp, r1
 80095c0:	4649      	mov	r1, r9
 80095c2:	4640      	mov	r0, r8
 80095c4:	f7f7 fac8 	bl	8000b58 <__aeabi_d2iz>
 80095c8:	4606      	mov	r6, r0
 80095ca:	f7f6 ffab 	bl	8000524 <__aeabi_i2d>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	4640      	mov	r0, r8
 80095d4:	4649      	mov	r1, r9
 80095d6:	f7f6 fe57 	bl	8000288 <__aeabi_dsub>
 80095da:	3630      	adds	r6, #48	; 0x30
 80095dc:	f805 6b01 	strb.w	r6, [r5], #1
 80095e0:	4652      	mov	r2, sl
 80095e2:	465b      	mov	r3, fp
 80095e4:	4680      	mov	r8, r0
 80095e6:	4689      	mov	r9, r1
 80095e8:	f7f7 fa78 	bl	8000adc <__aeabi_dcmplt>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d163      	bne.n	80096b8 <_dtoa_r+0x608>
 80095f0:	4642      	mov	r2, r8
 80095f2:	464b      	mov	r3, r9
 80095f4:	4936      	ldr	r1, [pc, #216]	; (80096d0 <_dtoa_r+0x620>)
 80095f6:	2000      	movs	r0, #0
 80095f8:	f7f6 fe46 	bl	8000288 <__aeabi_dsub>
 80095fc:	4652      	mov	r2, sl
 80095fe:	465b      	mov	r3, fp
 8009600:	f7f7 fa6c 	bl	8000adc <__aeabi_dcmplt>
 8009604:	2800      	cmp	r0, #0
 8009606:	f040 80b5 	bne.w	8009774 <_dtoa_r+0x6c4>
 800960a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800960c:	429d      	cmp	r5, r3
 800960e:	d081      	beq.n	8009514 <_dtoa_r+0x464>
 8009610:	4b30      	ldr	r3, [pc, #192]	; (80096d4 <_dtoa_r+0x624>)
 8009612:	2200      	movs	r2, #0
 8009614:	4650      	mov	r0, sl
 8009616:	4659      	mov	r1, fp
 8009618:	f7f6 ffee 	bl	80005f8 <__aeabi_dmul>
 800961c:	4b2d      	ldr	r3, [pc, #180]	; (80096d4 <_dtoa_r+0x624>)
 800961e:	4682      	mov	sl, r0
 8009620:	468b      	mov	fp, r1
 8009622:	4640      	mov	r0, r8
 8009624:	4649      	mov	r1, r9
 8009626:	2200      	movs	r2, #0
 8009628:	f7f6 ffe6 	bl	80005f8 <__aeabi_dmul>
 800962c:	4680      	mov	r8, r0
 800962e:	4689      	mov	r9, r1
 8009630:	e7c6      	b.n	80095c0 <_dtoa_r+0x510>
 8009632:	4650      	mov	r0, sl
 8009634:	4659      	mov	r1, fp
 8009636:	f7f6 ffdf 	bl	80005f8 <__aeabi_dmul>
 800963a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800963c:	9d01      	ldr	r5, [sp, #4]
 800963e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009640:	4682      	mov	sl, r0
 8009642:	468b      	mov	fp, r1
 8009644:	4649      	mov	r1, r9
 8009646:	4640      	mov	r0, r8
 8009648:	f7f7 fa86 	bl	8000b58 <__aeabi_d2iz>
 800964c:	4606      	mov	r6, r0
 800964e:	f7f6 ff69 	bl	8000524 <__aeabi_i2d>
 8009652:	3630      	adds	r6, #48	; 0x30
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4640      	mov	r0, r8
 800965a:	4649      	mov	r1, r9
 800965c:	f7f6 fe14 	bl	8000288 <__aeabi_dsub>
 8009660:	f805 6b01 	strb.w	r6, [r5], #1
 8009664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009666:	429d      	cmp	r5, r3
 8009668:	4680      	mov	r8, r0
 800966a:	4689      	mov	r9, r1
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	d124      	bne.n	80096bc <_dtoa_r+0x60c>
 8009672:	4b1b      	ldr	r3, [pc, #108]	; (80096e0 <_dtoa_r+0x630>)
 8009674:	4650      	mov	r0, sl
 8009676:	4659      	mov	r1, fp
 8009678:	f7f6 fe08 	bl	800028c <__adddf3>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4640      	mov	r0, r8
 8009682:	4649      	mov	r1, r9
 8009684:	f7f7 fa48 	bl	8000b18 <__aeabi_dcmpgt>
 8009688:	2800      	cmp	r0, #0
 800968a:	d173      	bne.n	8009774 <_dtoa_r+0x6c4>
 800968c:	4652      	mov	r2, sl
 800968e:	465b      	mov	r3, fp
 8009690:	4913      	ldr	r1, [pc, #76]	; (80096e0 <_dtoa_r+0x630>)
 8009692:	2000      	movs	r0, #0
 8009694:	f7f6 fdf8 	bl	8000288 <__aeabi_dsub>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4640      	mov	r0, r8
 800969e:	4649      	mov	r1, r9
 80096a0:	f7f7 fa1c 	bl	8000adc <__aeabi_dcmplt>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	f43f af35 	beq.w	8009514 <_dtoa_r+0x464>
 80096aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096ac:	1e6b      	subs	r3, r5, #1
 80096ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80096b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096b4:	2b30      	cmp	r3, #48	; 0x30
 80096b6:	d0f8      	beq.n	80096aa <_dtoa_r+0x5fa>
 80096b8:	9700      	str	r7, [sp, #0]
 80096ba:	e049      	b.n	8009750 <_dtoa_r+0x6a0>
 80096bc:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <_dtoa_r+0x624>)
 80096be:	f7f6 ff9b 	bl	80005f8 <__aeabi_dmul>
 80096c2:	4680      	mov	r8, r0
 80096c4:	4689      	mov	r9, r1
 80096c6:	e7bd      	b.n	8009644 <_dtoa_r+0x594>
 80096c8:	0800b4f8 	.word	0x0800b4f8
 80096cc:	0800b4d0 	.word	0x0800b4d0
 80096d0:	3ff00000 	.word	0x3ff00000
 80096d4:	40240000 	.word	0x40240000
 80096d8:	401c0000 	.word	0x401c0000
 80096dc:	40140000 	.word	0x40140000
 80096e0:	3fe00000 	.word	0x3fe00000
 80096e4:	9d01      	ldr	r5, [sp, #4]
 80096e6:	4656      	mov	r6, sl
 80096e8:	465f      	mov	r7, fp
 80096ea:	4642      	mov	r2, r8
 80096ec:	464b      	mov	r3, r9
 80096ee:	4630      	mov	r0, r6
 80096f0:	4639      	mov	r1, r7
 80096f2:	f7f7 f8ab 	bl	800084c <__aeabi_ddiv>
 80096f6:	f7f7 fa2f 	bl	8000b58 <__aeabi_d2iz>
 80096fa:	4682      	mov	sl, r0
 80096fc:	f7f6 ff12 	bl	8000524 <__aeabi_i2d>
 8009700:	4642      	mov	r2, r8
 8009702:	464b      	mov	r3, r9
 8009704:	f7f6 ff78 	bl	80005f8 <__aeabi_dmul>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4630      	mov	r0, r6
 800970e:	4639      	mov	r1, r7
 8009710:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009714:	f7f6 fdb8 	bl	8000288 <__aeabi_dsub>
 8009718:	f805 6b01 	strb.w	r6, [r5], #1
 800971c:	9e01      	ldr	r6, [sp, #4]
 800971e:	9f03      	ldr	r7, [sp, #12]
 8009720:	1bae      	subs	r6, r5, r6
 8009722:	42b7      	cmp	r7, r6
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	d135      	bne.n	8009796 <_dtoa_r+0x6e6>
 800972a:	f7f6 fdaf 	bl	800028c <__adddf3>
 800972e:	4642      	mov	r2, r8
 8009730:	464b      	mov	r3, r9
 8009732:	4606      	mov	r6, r0
 8009734:	460f      	mov	r7, r1
 8009736:	f7f7 f9ef 	bl	8000b18 <__aeabi_dcmpgt>
 800973a:	b9d0      	cbnz	r0, 8009772 <_dtoa_r+0x6c2>
 800973c:	4642      	mov	r2, r8
 800973e:	464b      	mov	r3, r9
 8009740:	4630      	mov	r0, r6
 8009742:	4639      	mov	r1, r7
 8009744:	f7f7 f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009748:	b110      	cbz	r0, 8009750 <_dtoa_r+0x6a0>
 800974a:	f01a 0f01 	tst.w	sl, #1
 800974e:	d110      	bne.n	8009772 <_dtoa_r+0x6c2>
 8009750:	4620      	mov	r0, r4
 8009752:	ee18 1a10 	vmov	r1, s16
 8009756:	f000 fae9 	bl	8009d2c <_Bfree>
 800975a:	2300      	movs	r3, #0
 800975c:	9800      	ldr	r0, [sp, #0]
 800975e:	702b      	strb	r3, [r5, #0]
 8009760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009762:	3001      	adds	r0, #1
 8009764:	6018      	str	r0, [r3, #0]
 8009766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009768:	2b00      	cmp	r3, #0
 800976a:	f43f acf1 	beq.w	8009150 <_dtoa_r+0xa0>
 800976e:	601d      	str	r5, [r3, #0]
 8009770:	e4ee      	b.n	8009150 <_dtoa_r+0xa0>
 8009772:	9f00      	ldr	r7, [sp, #0]
 8009774:	462b      	mov	r3, r5
 8009776:	461d      	mov	r5, r3
 8009778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800977c:	2a39      	cmp	r2, #57	; 0x39
 800977e:	d106      	bne.n	800978e <_dtoa_r+0x6de>
 8009780:	9a01      	ldr	r2, [sp, #4]
 8009782:	429a      	cmp	r2, r3
 8009784:	d1f7      	bne.n	8009776 <_dtoa_r+0x6c6>
 8009786:	9901      	ldr	r1, [sp, #4]
 8009788:	2230      	movs	r2, #48	; 0x30
 800978a:	3701      	adds	r7, #1
 800978c:	700a      	strb	r2, [r1, #0]
 800978e:	781a      	ldrb	r2, [r3, #0]
 8009790:	3201      	adds	r2, #1
 8009792:	701a      	strb	r2, [r3, #0]
 8009794:	e790      	b.n	80096b8 <_dtoa_r+0x608>
 8009796:	4ba6      	ldr	r3, [pc, #664]	; (8009a30 <_dtoa_r+0x980>)
 8009798:	2200      	movs	r2, #0
 800979a:	f7f6 ff2d 	bl	80005f8 <__aeabi_dmul>
 800979e:	2200      	movs	r2, #0
 80097a0:	2300      	movs	r3, #0
 80097a2:	4606      	mov	r6, r0
 80097a4:	460f      	mov	r7, r1
 80097a6:	f7f7 f98f 	bl	8000ac8 <__aeabi_dcmpeq>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d09d      	beq.n	80096ea <_dtoa_r+0x63a>
 80097ae:	e7cf      	b.n	8009750 <_dtoa_r+0x6a0>
 80097b0:	9a08      	ldr	r2, [sp, #32]
 80097b2:	2a00      	cmp	r2, #0
 80097b4:	f000 80d7 	beq.w	8009966 <_dtoa_r+0x8b6>
 80097b8:	9a06      	ldr	r2, [sp, #24]
 80097ba:	2a01      	cmp	r2, #1
 80097bc:	f300 80ba 	bgt.w	8009934 <_dtoa_r+0x884>
 80097c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	f000 80b2 	beq.w	800992c <_dtoa_r+0x87c>
 80097c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097cc:	9e07      	ldr	r6, [sp, #28]
 80097ce:	9d04      	ldr	r5, [sp, #16]
 80097d0:	9a04      	ldr	r2, [sp, #16]
 80097d2:	441a      	add	r2, r3
 80097d4:	9204      	str	r2, [sp, #16]
 80097d6:	9a05      	ldr	r2, [sp, #20]
 80097d8:	2101      	movs	r1, #1
 80097da:	441a      	add	r2, r3
 80097dc:	4620      	mov	r0, r4
 80097de:	9205      	str	r2, [sp, #20]
 80097e0:	f000 fb5c 	bl	8009e9c <__i2b>
 80097e4:	4607      	mov	r7, r0
 80097e6:	2d00      	cmp	r5, #0
 80097e8:	dd0c      	ble.n	8009804 <_dtoa_r+0x754>
 80097ea:	9b05      	ldr	r3, [sp, #20]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	dd09      	ble.n	8009804 <_dtoa_r+0x754>
 80097f0:	42ab      	cmp	r3, r5
 80097f2:	9a04      	ldr	r2, [sp, #16]
 80097f4:	bfa8      	it	ge
 80097f6:	462b      	movge	r3, r5
 80097f8:	1ad2      	subs	r2, r2, r3
 80097fa:	9204      	str	r2, [sp, #16]
 80097fc:	9a05      	ldr	r2, [sp, #20]
 80097fe:	1aed      	subs	r5, r5, r3
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	9305      	str	r3, [sp, #20]
 8009804:	9b07      	ldr	r3, [sp, #28]
 8009806:	b31b      	cbz	r3, 8009850 <_dtoa_r+0x7a0>
 8009808:	9b08      	ldr	r3, [sp, #32]
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 80af 	beq.w	800996e <_dtoa_r+0x8be>
 8009810:	2e00      	cmp	r6, #0
 8009812:	dd13      	ble.n	800983c <_dtoa_r+0x78c>
 8009814:	4639      	mov	r1, r7
 8009816:	4632      	mov	r2, r6
 8009818:	4620      	mov	r0, r4
 800981a:	f000 fbff 	bl	800a01c <__pow5mult>
 800981e:	ee18 2a10 	vmov	r2, s16
 8009822:	4601      	mov	r1, r0
 8009824:	4607      	mov	r7, r0
 8009826:	4620      	mov	r0, r4
 8009828:	f000 fb4e 	bl	8009ec8 <__multiply>
 800982c:	ee18 1a10 	vmov	r1, s16
 8009830:	4680      	mov	r8, r0
 8009832:	4620      	mov	r0, r4
 8009834:	f000 fa7a 	bl	8009d2c <_Bfree>
 8009838:	ee08 8a10 	vmov	s16, r8
 800983c:	9b07      	ldr	r3, [sp, #28]
 800983e:	1b9a      	subs	r2, r3, r6
 8009840:	d006      	beq.n	8009850 <_dtoa_r+0x7a0>
 8009842:	ee18 1a10 	vmov	r1, s16
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fbe8 	bl	800a01c <__pow5mult>
 800984c:	ee08 0a10 	vmov	s16, r0
 8009850:	2101      	movs	r1, #1
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fb22 	bl	8009e9c <__i2b>
 8009858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	4606      	mov	r6, r0
 800985e:	f340 8088 	ble.w	8009972 <_dtoa_r+0x8c2>
 8009862:	461a      	mov	r2, r3
 8009864:	4601      	mov	r1, r0
 8009866:	4620      	mov	r0, r4
 8009868:	f000 fbd8 	bl	800a01c <__pow5mult>
 800986c:	9b06      	ldr	r3, [sp, #24]
 800986e:	2b01      	cmp	r3, #1
 8009870:	4606      	mov	r6, r0
 8009872:	f340 8081 	ble.w	8009978 <_dtoa_r+0x8c8>
 8009876:	f04f 0800 	mov.w	r8, #0
 800987a:	6933      	ldr	r3, [r6, #16]
 800987c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009880:	6918      	ldr	r0, [r3, #16]
 8009882:	f000 fabb 	bl	8009dfc <__hi0bits>
 8009886:	f1c0 0020 	rsb	r0, r0, #32
 800988a:	9b05      	ldr	r3, [sp, #20]
 800988c:	4418      	add	r0, r3
 800988e:	f010 001f 	ands.w	r0, r0, #31
 8009892:	f000 8092 	beq.w	80099ba <_dtoa_r+0x90a>
 8009896:	f1c0 0320 	rsb	r3, r0, #32
 800989a:	2b04      	cmp	r3, #4
 800989c:	f340 808a 	ble.w	80099b4 <_dtoa_r+0x904>
 80098a0:	f1c0 001c 	rsb	r0, r0, #28
 80098a4:	9b04      	ldr	r3, [sp, #16]
 80098a6:	4403      	add	r3, r0
 80098a8:	9304      	str	r3, [sp, #16]
 80098aa:	9b05      	ldr	r3, [sp, #20]
 80098ac:	4403      	add	r3, r0
 80098ae:	4405      	add	r5, r0
 80098b0:	9305      	str	r3, [sp, #20]
 80098b2:	9b04      	ldr	r3, [sp, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	dd07      	ble.n	80098c8 <_dtoa_r+0x818>
 80098b8:	ee18 1a10 	vmov	r1, s16
 80098bc:	461a      	mov	r2, r3
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 fc06 	bl	800a0d0 <__lshift>
 80098c4:	ee08 0a10 	vmov	s16, r0
 80098c8:	9b05      	ldr	r3, [sp, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	dd05      	ble.n	80098da <_dtoa_r+0x82a>
 80098ce:	4631      	mov	r1, r6
 80098d0:	461a      	mov	r2, r3
 80098d2:	4620      	mov	r0, r4
 80098d4:	f000 fbfc 	bl	800a0d0 <__lshift>
 80098d8:	4606      	mov	r6, r0
 80098da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d06e      	beq.n	80099be <_dtoa_r+0x90e>
 80098e0:	ee18 0a10 	vmov	r0, s16
 80098e4:	4631      	mov	r1, r6
 80098e6:	f000 fc63 	bl	800a1b0 <__mcmp>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	da67      	bge.n	80099be <_dtoa_r+0x90e>
 80098ee:	9b00      	ldr	r3, [sp, #0]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	ee18 1a10 	vmov	r1, s16
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	220a      	movs	r2, #10
 80098fa:	2300      	movs	r3, #0
 80098fc:	4620      	mov	r0, r4
 80098fe:	f000 fa37 	bl	8009d70 <__multadd>
 8009902:	9b08      	ldr	r3, [sp, #32]
 8009904:	ee08 0a10 	vmov	s16, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 81b1 	beq.w	8009c70 <_dtoa_r+0xbc0>
 800990e:	2300      	movs	r3, #0
 8009910:	4639      	mov	r1, r7
 8009912:	220a      	movs	r2, #10
 8009914:	4620      	mov	r0, r4
 8009916:	f000 fa2b 	bl	8009d70 <__multadd>
 800991a:	9b02      	ldr	r3, [sp, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	4607      	mov	r7, r0
 8009920:	f300 808e 	bgt.w	8009a40 <_dtoa_r+0x990>
 8009924:	9b06      	ldr	r3, [sp, #24]
 8009926:	2b02      	cmp	r3, #2
 8009928:	dc51      	bgt.n	80099ce <_dtoa_r+0x91e>
 800992a:	e089      	b.n	8009a40 <_dtoa_r+0x990>
 800992c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800992e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009932:	e74b      	b.n	80097cc <_dtoa_r+0x71c>
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	1e5e      	subs	r6, r3, #1
 8009938:	9b07      	ldr	r3, [sp, #28]
 800993a:	42b3      	cmp	r3, r6
 800993c:	bfbf      	itttt	lt
 800993e:	9b07      	ldrlt	r3, [sp, #28]
 8009940:	9607      	strlt	r6, [sp, #28]
 8009942:	1af2      	sublt	r2, r6, r3
 8009944:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009946:	bfb6      	itet	lt
 8009948:	189b      	addlt	r3, r3, r2
 800994a:	1b9e      	subge	r6, r3, r6
 800994c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	bfb8      	it	lt
 8009952:	2600      	movlt	r6, #0
 8009954:	2b00      	cmp	r3, #0
 8009956:	bfb7      	itett	lt
 8009958:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800995c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009960:	1a9d      	sublt	r5, r3, r2
 8009962:	2300      	movlt	r3, #0
 8009964:	e734      	b.n	80097d0 <_dtoa_r+0x720>
 8009966:	9e07      	ldr	r6, [sp, #28]
 8009968:	9d04      	ldr	r5, [sp, #16]
 800996a:	9f08      	ldr	r7, [sp, #32]
 800996c:	e73b      	b.n	80097e6 <_dtoa_r+0x736>
 800996e:	9a07      	ldr	r2, [sp, #28]
 8009970:	e767      	b.n	8009842 <_dtoa_r+0x792>
 8009972:	9b06      	ldr	r3, [sp, #24]
 8009974:	2b01      	cmp	r3, #1
 8009976:	dc18      	bgt.n	80099aa <_dtoa_r+0x8fa>
 8009978:	f1ba 0f00 	cmp.w	sl, #0
 800997c:	d115      	bne.n	80099aa <_dtoa_r+0x8fa>
 800997e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009982:	b993      	cbnz	r3, 80099aa <_dtoa_r+0x8fa>
 8009984:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009988:	0d1b      	lsrs	r3, r3, #20
 800998a:	051b      	lsls	r3, r3, #20
 800998c:	b183      	cbz	r3, 80099b0 <_dtoa_r+0x900>
 800998e:	9b04      	ldr	r3, [sp, #16]
 8009990:	3301      	adds	r3, #1
 8009992:	9304      	str	r3, [sp, #16]
 8009994:	9b05      	ldr	r3, [sp, #20]
 8009996:	3301      	adds	r3, #1
 8009998:	9305      	str	r3, [sp, #20]
 800999a:	f04f 0801 	mov.w	r8, #1
 800999e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f47f af6a 	bne.w	800987a <_dtoa_r+0x7ca>
 80099a6:	2001      	movs	r0, #1
 80099a8:	e76f      	b.n	800988a <_dtoa_r+0x7da>
 80099aa:	f04f 0800 	mov.w	r8, #0
 80099ae:	e7f6      	b.n	800999e <_dtoa_r+0x8ee>
 80099b0:	4698      	mov	r8, r3
 80099b2:	e7f4      	b.n	800999e <_dtoa_r+0x8ee>
 80099b4:	f43f af7d 	beq.w	80098b2 <_dtoa_r+0x802>
 80099b8:	4618      	mov	r0, r3
 80099ba:	301c      	adds	r0, #28
 80099bc:	e772      	b.n	80098a4 <_dtoa_r+0x7f4>
 80099be:	9b03      	ldr	r3, [sp, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc37      	bgt.n	8009a34 <_dtoa_r+0x984>
 80099c4:	9b06      	ldr	r3, [sp, #24]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	dd34      	ble.n	8009a34 <_dtoa_r+0x984>
 80099ca:	9b03      	ldr	r3, [sp, #12]
 80099cc:	9302      	str	r3, [sp, #8]
 80099ce:	9b02      	ldr	r3, [sp, #8]
 80099d0:	b96b      	cbnz	r3, 80099ee <_dtoa_r+0x93e>
 80099d2:	4631      	mov	r1, r6
 80099d4:	2205      	movs	r2, #5
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 f9ca 	bl	8009d70 <__multadd>
 80099dc:	4601      	mov	r1, r0
 80099de:	4606      	mov	r6, r0
 80099e0:	ee18 0a10 	vmov	r0, s16
 80099e4:	f000 fbe4 	bl	800a1b0 <__mcmp>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	f73f adbb 	bgt.w	8009564 <_dtoa_r+0x4b4>
 80099ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f0:	9d01      	ldr	r5, [sp, #4]
 80099f2:	43db      	mvns	r3, r3
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	f04f 0800 	mov.w	r8, #0
 80099fa:	4631      	mov	r1, r6
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 f995 	bl	8009d2c <_Bfree>
 8009a02:	2f00      	cmp	r7, #0
 8009a04:	f43f aea4 	beq.w	8009750 <_dtoa_r+0x6a0>
 8009a08:	f1b8 0f00 	cmp.w	r8, #0
 8009a0c:	d005      	beq.n	8009a1a <_dtoa_r+0x96a>
 8009a0e:	45b8      	cmp	r8, r7
 8009a10:	d003      	beq.n	8009a1a <_dtoa_r+0x96a>
 8009a12:	4641      	mov	r1, r8
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 f989 	bl	8009d2c <_Bfree>
 8009a1a:	4639      	mov	r1, r7
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 f985 	bl	8009d2c <_Bfree>
 8009a22:	e695      	b.n	8009750 <_dtoa_r+0x6a0>
 8009a24:	2600      	movs	r6, #0
 8009a26:	4637      	mov	r7, r6
 8009a28:	e7e1      	b.n	80099ee <_dtoa_r+0x93e>
 8009a2a:	9700      	str	r7, [sp, #0]
 8009a2c:	4637      	mov	r7, r6
 8009a2e:	e599      	b.n	8009564 <_dtoa_r+0x4b4>
 8009a30:	40240000 	.word	0x40240000
 8009a34:	9b08      	ldr	r3, [sp, #32]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 80ca 	beq.w	8009bd0 <_dtoa_r+0xb20>
 8009a3c:	9b03      	ldr	r3, [sp, #12]
 8009a3e:	9302      	str	r3, [sp, #8]
 8009a40:	2d00      	cmp	r5, #0
 8009a42:	dd05      	ble.n	8009a50 <_dtoa_r+0x9a0>
 8009a44:	4639      	mov	r1, r7
 8009a46:	462a      	mov	r2, r5
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fb41 	bl	800a0d0 <__lshift>
 8009a4e:	4607      	mov	r7, r0
 8009a50:	f1b8 0f00 	cmp.w	r8, #0
 8009a54:	d05b      	beq.n	8009b0e <_dtoa_r+0xa5e>
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 f927 	bl	8009cac <_Balloc>
 8009a5e:	4605      	mov	r5, r0
 8009a60:	b928      	cbnz	r0, 8009a6e <_dtoa_r+0x9be>
 8009a62:	4b87      	ldr	r3, [pc, #540]	; (8009c80 <_dtoa_r+0xbd0>)
 8009a64:	4602      	mov	r2, r0
 8009a66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a6a:	f7ff bb3b 	b.w	80090e4 <_dtoa_r+0x34>
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	3202      	adds	r2, #2
 8009a72:	0092      	lsls	r2, r2, #2
 8009a74:	f107 010c 	add.w	r1, r7, #12
 8009a78:	300c      	adds	r0, #12
 8009a7a:	f7fe fcf3 	bl	8008464 <memcpy>
 8009a7e:	2201      	movs	r2, #1
 8009a80:	4629      	mov	r1, r5
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 fb24 	bl	800a0d0 <__lshift>
 8009a88:	9b01      	ldr	r3, [sp, #4]
 8009a8a:	f103 0901 	add.w	r9, r3, #1
 8009a8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009a92:	4413      	add	r3, r2
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	f00a 0301 	and.w	r3, sl, #1
 8009a9a:	46b8      	mov	r8, r7
 8009a9c:	9304      	str	r3, [sp, #16]
 8009a9e:	4607      	mov	r7, r0
 8009aa0:	4631      	mov	r1, r6
 8009aa2:	ee18 0a10 	vmov	r0, s16
 8009aa6:	f7ff fa75 	bl	8008f94 <quorem>
 8009aaa:	4641      	mov	r1, r8
 8009aac:	9002      	str	r0, [sp, #8]
 8009aae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009ab2:	ee18 0a10 	vmov	r0, s16
 8009ab6:	f000 fb7b 	bl	800a1b0 <__mcmp>
 8009aba:	463a      	mov	r2, r7
 8009abc:	9003      	str	r0, [sp, #12]
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fb91 	bl	800a1e8 <__mdiff>
 8009ac6:	68c2      	ldr	r2, [r0, #12]
 8009ac8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009acc:	4605      	mov	r5, r0
 8009ace:	bb02      	cbnz	r2, 8009b12 <_dtoa_r+0xa62>
 8009ad0:	4601      	mov	r1, r0
 8009ad2:	ee18 0a10 	vmov	r0, s16
 8009ad6:	f000 fb6b 	bl	800a1b0 <__mcmp>
 8009ada:	4602      	mov	r2, r0
 8009adc:	4629      	mov	r1, r5
 8009ade:	4620      	mov	r0, r4
 8009ae0:	9207      	str	r2, [sp, #28]
 8009ae2:	f000 f923 	bl	8009d2c <_Bfree>
 8009ae6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009aea:	ea43 0102 	orr.w	r1, r3, r2
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	430b      	orrs	r3, r1
 8009af2:	464d      	mov	r5, r9
 8009af4:	d10f      	bne.n	8009b16 <_dtoa_r+0xa66>
 8009af6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009afa:	d02a      	beq.n	8009b52 <_dtoa_r+0xaa2>
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	dd02      	ble.n	8009b08 <_dtoa_r+0xa58>
 8009b02:	9b02      	ldr	r3, [sp, #8]
 8009b04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009b08:	f88b a000 	strb.w	sl, [fp]
 8009b0c:	e775      	b.n	80099fa <_dtoa_r+0x94a>
 8009b0e:	4638      	mov	r0, r7
 8009b10:	e7ba      	b.n	8009a88 <_dtoa_r+0x9d8>
 8009b12:	2201      	movs	r2, #1
 8009b14:	e7e2      	b.n	8009adc <_dtoa_r+0xa2c>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	db04      	blt.n	8009b26 <_dtoa_r+0xa76>
 8009b1c:	9906      	ldr	r1, [sp, #24]
 8009b1e:	430b      	orrs	r3, r1
 8009b20:	9904      	ldr	r1, [sp, #16]
 8009b22:	430b      	orrs	r3, r1
 8009b24:	d122      	bne.n	8009b6c <_dtoa_r+0xabc>
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	ddee      	ble.n	8009b08 <_dtoa_r+0xa58>
 8009b2a:	ee18 1a10 	vmov	r1, s16
 8009b2e:	2201      	movs	r2, #1
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 facd 	bl	800a0d0 <__lshift>
 8009b36:	4631      	mov	r1, r6
 8009b38:	ee08 0a10 	vmov	s16, r0
 8009b3c:	f000 fb38 	bl	800a1b0 <__mcmp>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	dc03      	bgt.n	8009b4c <_dtoa_r+0xa9c>
 8009b44:	d1e0      	bne.n	8009b08 <_dtoa_r+0xa58>
 8009b46:	f01a 0f01 	tst.w	sl, #1
 8009b4a:	d0dd      	beq.n	8009b08 <_dtoa_r+0xa58>
 8009b4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b50:	d1d7      	bne.n	8009b02 <_dtoa_r+0xa52>
 8009b52:	2339      	movs	r3, #57	; 0x39
 8009b54:	f88b 3000 	strb.w	r3, [fp]
 8009b58:	462b      	mov	r3, r5
 8009b5a:	461d      	mov	r5, r3
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b62:	2a39      	cmp	r2, #57	; 0x39
 8009b64:	d071      	beq.n	8009c4a <_dtoa_r+0xb9a>
 8009b66:	3201      	adds	r2, #1
 8009b68:	701a      	strb	r2, [r3, #0]
 8009b6a:	e746      	b.n	80099fa <_dtoa_r+0x94a>
 8009b6c:	2a00      	cmp	r2, #0
 8009b6e:	dd07      	ble.n	8009b80 <_dtoa_r+0xad0>
 8009b70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b74:	d0ed      	beq.n	8009b52 <_dtoa_r+0xaa2>
 8009b76:	f10a 0301 	add.w	r3, sl, #1
 8009b7a:	f88b 3000 	strb.w	r3, [fp]
 8009b7e:	e73c      	b.n	80099fa <_dtoa_r+0x94a>
 8009b80:	9b05      	ldr	r3, [sp, #20]
 8009b82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009b86:	4599      	cmp	r9, r3
 8009b88:	d047      	beq.n	8009c1a <_dtoa_r+0xb6a>
 8009b8a:	ee18 1a10 	vmov	r1, s16
 8009b8e:	2300      	movs	r3, #0
 8009b90:	220a      	movs	r2, #10
 8009b92:	4620      	mov	r0, r4
 8009b94:	f000 f8ec 	bl	8009d70 <__multadd>
 8009b98:	45b8      	cmp	r8, r7
 8009b9a:	ee08 0a10 	vmov	s16, r0
 8009b9e:	f04f 0300 	mov.w	r3, #0
 8009ba2:	f04f 020a 	mov.w	r2, #10
 8009ba6:	4641      	mov	r1, r8
 8009ba8:	4620      	mov	r0, r4
 8009baa:	d106      	bne.n	8009bba <_dtoa_r+0xb0a>
 8009bac:	f000 f8e0 	bl	8009d70 <__multadd>
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	4607      	mov	r7, r0
 8009bb4:	f109 0901 	add.w	r9, r9, #1
 8009bb8:	e772      	b.n	8009aa0 <_dtoa_r+0x9f0>
 8009bba:	f000 f8d9 	bl	8009d70 <__multadd>
 8009bbe:	4639      	mov	r1, r7
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	220a      	movs	r2, #10
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 f8d2 	bl	8009d70 <__multadd>
 8009bcc:	4607      	mov	r7, r0
 8009bce:	e7f1      	b.n	8009bb4 <_dtoa_r+0xb04>
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	9302      	str	r3, [sp, #8]
 8009bd4:	9d01      	ldr	r5, [sp, #4]
 8009bd6:	ee18 0a10 	vmov	r0, s16
 8009bda:	4631      	mov	r1, r6
 8009bdc:	f7ff f9da 	bl	8008f94 <quorem>
 8009be0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009be4:	9b01      	ldr	r3, [sp, #4]
 8009be6:	f805 ab01 	strb.w	sl, [r5], #1
 8009bea:	1aea      	subs	r2, r5, r3
 8009bec:	9b02      	ldr	r3, [sp, #8]
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	dd09      	ble.n	8009c06 <_dtoa_r+0xb56>
 8009bf2:	ee18 1a10 	vmov	r1, s16
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	220a      	movs	r2, #10
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f000 f8b8 	bl	8009d70 <__multadd>
 8009c00:	ee08 0a10 	vmov	s16, r0
 8009c04:	e7e7      	b.n	8009bd6 <_dtoa_r+0xb26>
 8009c06:	9b02      	ldr	r3, [sp, #8]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bfc8      	it	gt
 8009c0c:	461d      	movgt	r5, r3
 8009c0e:	9b01      	ldr	r3, [sp, #4]
 8009c10:	bfd8      	it	le
 8009c12:	2501      	movle	r5, #1
 8009c14:	441d      	add	r5, r3
 8009c16:	f04f 0800 	mov.w	r8, #0
 8009c1a:	ee18 1a10 	vmov	r1, s16
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4620      	mov	r0, r4
 8009c22:	f000 fa55 	bl	800a0d0 <__lshift>
 8009c26:	4631      	mov	r1, r6
 8009c28:	ee08 0a10 	vmov	s16, r0
 8009c2c:	f000 fac0 	bl	800a1b0 <__mcmp>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dc91      	bgt.n	8009b58 <_dtoa_r+0xaa8>
 8009c34:	d102      	bne.n	8009c3c <_dtoa_r+0xb8c>
 8009c36:	f01a 0f01 	tst.w	sl, #1
 8009c3a:	d18d      	bne.n	8009b58 <_dtoa_r+0xaa8>
 8009c3c:	462b      	mov	r3, r5
 8009c3e:	461d      	mov	r5, r3
 8009c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c44:	2a30      	cmp	r2, #48	; 0x30
 8009c46:	d0fa      	beq.n	8009c3e <_dtoa_r+0xb8e>
 8009c48:	e6d7      	b.n	80099fa <_dtoa_r+0x94a>
 8009c4a:	9a01      	ldr	r2, [sp, #4]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d184      	bne.n	8009b5a <_dtoa_r+0xaaa>
 8009c50:	9b00      	ldr	r3, [sp, #0]
 8009c52:	3301      	adds	r3, #1
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	2331      	movs	r3, #49	; 0x31
 8009c58:	7013      	strb	r3, [r2, #0]
 8009c5a:	e6ce      	b.n	80099fa <_dtoa_r+0x94a>
 8009c5c:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <_dtoa_r+0xbd4>)
 8009c5e:	f7ff ba95 	b.w	800918c <_dtoa_r+0xdc>
 8009c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f47f aa6e 	bne.w	8009146 <_dtoa_r+0x96>
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <_dtoa_r+0xbd8>)
 8009c6c:	f7ff ba8e 	b.w	800918c <_dtoa_r+0xdc>
 8009c70:	9b02      	ldr	r3, [sp, #8]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	dcae      	bgt.n	8009bd4 <_dtoa_r+0xb24>
 8009c76:	9b06      	ldr	r3, [sp, #24]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	f73f aea8 	bgt.w	80099ce <_dtoa_r+0x91e>
 8009c7e:	e7a9      	b.n	8009bd4 <_dtoa_r+0xb24>
 8009c80:	0800b463 	.word	0x0800b463
 8009c84:	0800b3c0 	.word	0x0800b3c0
 8009c88:	0800b3e4 	.word	0x0800b3e4

08009c8c <_localeconv_r>:
 8009c8c:	4800      	ldr	r0, [pc, #0]	; (8009c90 <_localeconv_r+0x4>)
 8009c8e:	4770      	bx	lr
 8009c90:	20000160 	.word	0x20000160

08009c94 <__malloc_lock>:
 8009c94:	4801      	ldr	r0, [pc, #4]	; (8009c9c <__malloc_lock+0x8>)
 8009c96:	f000 bd30 	b.w	800a6fa <__retarget_lock_acquire_recursive>
 8009c9a:	bf00      	nop
 8009c9c:	20000524 	.word	0x20000524

08009ca0 <__malloc_unlock>:
 8009ca0:	4801      	ldr	r0, [pc, #4]	; (8009ca8 <__malloc_unlock+0x8>)
 8009ca2:	f000 bd2b 	b.w	800a6fc <__retarget_lock_release_recursive>
 8009ca6:	bf00      	nop
 8009ca8:	20000524 	.word	0x20000524

08009cac <_Balloc>:
 8009cac:	b570      	push	{r4, r5, r6, lr}
 8009cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	460d      	mov	r5, r1
 8009cb4:	b976      	cbnz	r6, 8009cd4 <_Balloc+0x28>
 8009cb6:	2010      	movs	r0, #16
 8009cb8:	f7fe fbcc 	bl	8008454 <malloc>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	6260      	str	r0, [r4, #36]	; 0x24
 8009cc0:	b920      	cbnz	r0, 8009ccc <_Balloc+0x20>
 8009cc2:	4b18      	ldr	r3, [pc, #96]	; (8009d24 <_Balloc+0x78>)
 8009cc4:	4818      	ldr	r0, [pc, #96]	; (8009d28 <_Balloc+0x7c>)
 8009cc6:	2166      	movs	r1, #102	; 0x66
 8009cc8:	f000 fce6 	bl	800a698 <__assert_func>
 8009ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cd0:	6006      	str	r6, [r0, #0]
 8009cd2:	60c6      	str	r6, [r0, #12]
 8009cd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009cd6:	68f3      	ldr	r3, [r6, #12]
 8009cd8:	b183      	cbz	r3, 8009cfc <_Balloc+0x50>
 8009cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ce2:	b9b8      	cbnz	r0, 8009d14 <_Balloc+0x68>
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	fa01 f605 	lsl.w	r6, r1, r5
 8009cea:	1d72      	adds	r2, r6, #5
 8009cec:	0092      	lsls	r2, r2, #2
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fb60 	bl	800a3b4 <_calloc_r>
 8009cf4:	b160      	cbz	r0, 8009d10 <_Balloc+0x64>
 8009cf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cfa:	e00e      	b.n	8009d1a <_Balloc+0x6e>
 8009cfc:	2221      	movs	r2, #33	; 0x21
 8009cfe:	2104      	movs	r1, #4
 8009d00:	4620      	mov	r0, r4
 8009d02:	f000 fb57 	bl	800a3b4 <_calloc_r>
 8009d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d08:	60f0      	str	r0, [r6, #12]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e4      	bne.n	8009cda <_Balloc+0x2e>
 8009d10:	2000      	movs	r0, #0
 8009d12:	bd70      	pop	{r4, r5, r6, pc}
 8009d14:	6802      	ldr	r2, [r0, #0]
 8009d16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d20:	e7f7      	b.n	8009d12 <_Balloc+0x66>
 8009d22:	bf00      	nop
 8009d24:	0800b3f1 	.word	0x0800b3f1
 8009d28:	0800b474 	.word	0x0800b474

08009d2c <_Bfree>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d30:	4605      	mov	r5, r0
 8009d32:	460c      	mov	r4, r1
 8009d34:	b976      	cbnz	r6, 8009d54 <_Bfree+0x28>
 8009d36:	2010      	movs	r0, #16
 8009d38:	f7fe fb8c 	bl	8008454 <malloc>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	6268      	str	r0, [r5, #36]	; 0x24
 8009d40:	b920      	cbnz	r0, 8009d4c <_Bfree+0x20>
 8009d42:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <_Bfree+0x3c>)
 8009d44:	4809      	ldr	r0, [pc, #36]	; (8009d6c <_Bfree+0x40>)
 8009d46:	218a      	movs	r1, #138	; 0x8a
 8009d48:	f000 fca6 	bl	800a698 <__assert_func>
 8009d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d50:	6006      	str	r6, [r0, #0]
 8009d52:	60c6      	str	r6, [r0, #12]
 8009d54:	b13c      	cbz	r4, 8009d66 <_Bfree+0x3a>
 8009d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d58:	6862      	ldr	r2, [r4, #4]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d60:	6021      	str	r1, [r4, #0]
 8009d62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
 8009d68:	0800b3f1 	.word	0x0800b3f1
 8009d6c:	0800b474 	.word	0x0800b474

08009d70 <__multadd>:
 8009d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	690d      	ldr	r5, [r1, #16]
 8009d76:	4607      	mov	r7, r0
 8009d78:	460c      	mov	r4, r1
 8009d7a:	461e      	mov	r6, r3
 8009d7c:	f101 0c14 	add.w	ip, r1, #20
 8009d80:	2000      	movs	r0, #0
 8009d82:	f8dc 3000 	ldr.w	r3, [ip]
 8009d86:	b299      	uxth	r1, r3
 8009d88:	fb02 6101 	mla	r1, r2, r1, r6
 8009d8c:	0c1e      	lsrs	r6, r3, #16
 8009d8e:	0c0b      	lsrs	r3, r1, #16
 8009d90:	fb02 3306 	mla	r3, r2, r6, r3
 8009d94:	b289      	uxth	r1, r1
 8009d96:	3001      	adds	r0, #1
 8009d98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d9c:	4285      	cmp	r5, r0
 8009d9e:	f84c 1b04 	str.w	r1, [ip], #4
 8009da2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009da6:	dcec      	bgt.n	8009d82 <__multadd+0x12>
 8009da8:	b30e      	cbz	r6, 8009dee <__multadd+0x7e>
 8009daa:	68a3      	ldr	r3, [r4, #8]
 8009dac:	42ab      	cmp	r3, r5
 8009dae:	dc19      	bgt.n	8009de4 <__multadd+0x74>
 8009db0:	6861      	ldr	r1, [r4, #4]
 8009db2:	4638      	mov	r0, r7
 8009db4:	3101      	adds	r1, #1
 8009db6:	f7ff ff79 	bl	8009cac <_Balloc>
 8009dba:	4680      	mov	r8, r0
 8009dbc:	b928      	cbnz	r0, 8009dca <__multadd+0x5a>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	4b0c      	ldr	r3, [pc, #48]	; (8009df4 <__multadd+0x84>)
 8009dc2:	480d      	ldr	r0, [pc, #52]	; (8009df8 <__multadd+0x88>)
 8009dc4:	21b5      	movs	r1, #181	; 0xb5
 8009dc6:	f000 fc67 	bl	800a698 <__assert_func>
 8009dca:	6922      	ldr	r2, [r4, #16]
 8009dcc:	3202      	adds	r2, #2
 8009dce:	f104 010c 	add.w	r1, r4, #12
 8009dd2:	0092      	lsls	r2, r2, #2
 8009dd4:	300c      	adds	r0, #12
 8009dd6:	f7fe fb45 	bl	8008464 <memcpy>
 8009dda:	4621      	mov	r1, r4
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f7ff ffa5 	bl	8009d2c <_Bfree>
 8009de2:	4644      	mov	r4, r8
 8009de4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009de8:	3501      	adds	r5, #1
 8009dea:	615e      	str	r6, [r3, #20]
 8009dec:	6125      	str	r5, [r4, #16]
 8009dee:	4620      	mov	r0, r4
 8009df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df4:	0800b463 	.word	0x0800b463
 8009df8:	0800b474 	.word	0x0800b474

08009dfc <__hi0bits>:
 8009dfc:	0c03      	lsrs	r3, r0, #16
 8009dfe:	041b      	lsls	r3, r3, #16
 8009e00:	b9d3      	cbnz	r3, 8009e38 <__hi0bits+0x3c>
 8009e02:	0400      	lsls	r0, r0, #16
 8009e04:	2310      	movs	r3, #16
 8009e06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e0a:	bf04      	itt	eq
 8009e0c:	0200      	lsleq	r0, r0, #8
 8009e0e:	3308      	addeq	r3, #8
 8009e10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e14:	bf04      	itt	eq
 8009e16:	0100      	lsleq	r0, r0, #4
 8009e18:	3304      	addeq	r3, #4
 8009e1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e1e:	bf04      	itt	eq
 8009e20:	0080      	lsleq	r0, r0, #2
 8009e22:	3302      	addeq	r3, #2
 8009e24:	2800      	cmp	r0, #0
 8009e26:	db05      	blt.n	8009e34 <__hi0bits+0x38>
 8009e28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e2c:	f103 0301 	add.w	r3, r3, #1
 8009e30:	bf08      	it	eq
 8009e32:	2320      	moveq	r3, #32
 8009e34:	4618      	mov	r0, r3
 8009e36:	4770      	bx	lr
 8009e38:	2300      	movs	r3, #0
 8009e3a:	e7e4      	b.n	8009e06 <__hi0bits+0xa>

08009e3c <__lo0bits>:
 8009e3c:	6803      	ldr	r3, [r0, #0]
 8009e3e:	f013 0207 	ands.w	r2, r3, #7
 8009e42:	4601      	mov	r1, r0
 8009e44:	d00b      	beq.n	8009e5e <__lo0bits+0x22>
 8009e46:	07da      	lsls	r2, r3, #31
 8009e48:	d423      	bmi.n	8009e92 <__lo0bits+0x56>
 8009e4a:	0798      	lsls	r0, r3, #30
 8009e4c:	bf49      	itett	mi
 8009e4e:	085b      	lsrmi	r3, r3, #1
 8009e50:	089b      	lsrpl	r3, r3, #2
 8009e52:	2001      	movmi	r0, #1
 8009e54:	600b      	strmi	r3, [r1, #0]
 8009e56:	bf5c      	itt	pl
 8009e58:	600b      	strpl	r3, [r1, #0]
 8009e5a:	2002      	movpl	r0, #2
 8009e5c:	4770      	bx	lr
 8009e5e:	b298      	uxth	r0, r3
 8009e60:	b9a8      	cbnz	r0, 8009e8e <__lo0bits+0x52>
 8009e62:	0c1b      	lsrs	r3, r3, #16
 8009e64:	2010      	movs	r0, #16
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	b90a      	cbnz	r2, 8009e6e <__lo0bits+0x32>
 8009e6a:	3008      	adds	r0, #8
 8009e6c:	0a1b      	lsrs	r3, r3, #8
 8009e6e:	071a      	lsls	r2, r3, #28
 8009e70:	bf04      	itt	eq
 8009e72:	091b      	lsreq	r3, r3, #4
 8009e74:	3004      	addeq	r0, #4
 8009e76:	079a      	lsls	r2, r3, #30
 8009e78:	bf04      	itt	eq
 8009e7a:	089b      	lsreq	r3, r3, #2
 8009e7c:	3002      	addeq	r0, #2
 8009e7e:	07da      	lsls	r2, r3, #31
 8009e80:	d403      	bmi.n	8009e8a <__lo0bits+0x4e>
 8009e82:	085b      	lsrs	r3, r3, #1
 8009e84:	f100 0001 	add.w	r0, r0, #1
 8009e88:	d005      	beq.n	8009e96 <__lo0bits+0x5a>
 8009e8a:	600b      	str	r3, [r1, #0]
 8009e8c:	4770      	bx	lr
 8009e8e:	4610      	mov	r0, r2
 8009e90:	e7e9      	b.n	8009e66 <__lo0bits+0x2a>
 8009e92:	2000      	movs	r0, #0
 8009e94:	4770      	bx	lr
 8009e96:	2020      	movs	r0, #32
 8009e98:	4770      	bx	lr
	...

08009e9c <__i2b>:
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	f7ff ff03 	bl	8009cac <_Balloc>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	b928      	cbnz	r0, 8009eb6 <__i2b+0x1a>
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <__i2b+0x24>)
 8009eac:	4805      	ldr	r0, [pc, #20]	; (8009ec4 <__i2b+0x28>)
 8009eae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009eb2:	f000 fbf1 	bl	800a698 <__assert_func>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	6144      	str	r4, [r0, #20]
 8009eba:	6103      	str	r3, [r0, #16]
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800b463 	.word	0x0800b463
 8009ec4:	0800b474 	.word	0x0800b474

08009ec8 <__multiply>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	4691      	mov	r9, r2
 8009ece:	690a      	ldr	r2, [r1, #16]
 8009ed0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	bfb8      	it	lt
 8009ed8:	460b      	movlt	r3, r1
 8009eda:	460c      	mov	r4, r1
 8009edc:	bfbc      	itt	lt
 8009ede:	464c      	movlt	r4, r9
 8009ee0:	4699      	movlt	r9, r3
 8009ee2:	6927      	ldr	r7, [r4, #16]
 8009ee4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ee8:	68a3      	ldr	r3, [r4, #8]
 8009eea:	6861      	ldr	r1, [r4, #4]
 8009eec:	eb07 060a 	add.w	r6, r7, sl
 8009ef0:	42b3      	cmp	r3, r6
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	bfb8      	it	lt
 8009ef6:	3101      	addlt	r1, #1
 8009ef8:	f7ff fed8 	bl	8009cac <_Balloc>
 8009efc:	b930      	cbnz	r0, 8009f0c <__multiply+0x44>
 8009efe:	4602      	mov	r2, r0
 8009f00:	4b44      	ldr	r3, [pc, #272]	; (800a014 <__multiply+0x14c>)
 8009f02:	4845      	ldr	r0, [pc, #276]	; (800a018 <__multiply+0x150>)
 8009f04:	f240 115d 	movw	r1, #349	; 0x15d
 8009f08:	f000 fbc6 	bl	800a698 <__assert_func>
 8009f0c:	f100 0514 	add.w	r5, r0, #20
 8009f10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f14:	462b      	mov	r3, r5
 8009f16:	2200      	movs	r2, #0
 8009f18:	4543      	cmp	r3, r8
 8009f1a:	d321      	bcc.n	8009f60 <__multiply+0x98>
 8009f1c:	f104 0314 	add.w	r3, r4, #20
 8009f20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f24:	f109 0314 	add.w	r3, r9, #20
 8009f28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f2c:	9202      	str	r2, [sp, #8]
 8009f2e:	1b3a      	subs	r2, r7, r4
 8009f30:	3a15      	subs	r2, #21
 8009f32:	f022 0203 	bic.w	r2, r2, #3
 8009f36:	3204      	adds	r2, #4
 8009f38:	f104 0115 	add.w	r1, r4, #21
 8009f3c:	428f      	cmp	r7, r1
 8009f3e:	bf38      	it	cc
 8009f40:	2204      	movcc	r2, #4
 8009f42:	9201      	str	r2, [sp, #4]
 8009f44:	9a02      	ldr	r2, [sp, #8]
 8009f46:	9303      	str	r3, [sp, #12]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d80c      	bhi.n	8009f66 <__multiply+0x9e>
 8009f4c:	2e00      	cmp	r6, #0
 8009f4e:	dd03      	ble.n	8009f58 <__multiply+0x90>
 8009f50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d05a      	beq.n	800a00e <__multiply+0x146>
 8009f58:	6106      	str	r6, [r0, #16]
 8009f5a:	b005      	add	sp, #20
 8009f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f60:	f843 2b04 	str.w	r2, [r3], #4
 8009f64:	e7d8      	b.n	8009f18 <__multiply+0x50>
 8009f66:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f6a:	f1ba 0f00 	cmp.w	sl, #0
 8009f6e:	d024      	beq.n	8009fba <__multiply+0xf2>
 8009f70:	f104 0e14 	add.w	lr, r4, #20
 8009f74:	46a9      	mov	r9, r5
 8009f76:	f04f 0c00 	mov.w	ip, #0
 8009f7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f7e:	f8d9 1000 	ldr.w	r1, [r9]
 8009f82:	fa1f fb82 	uxth.w	fp, r2
 8009f86:	b289      	uxth	r1, r1
 8009f88:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f90:	f8d9 2000 	ldr.w	r2, [r9]
 8009f94:	4461      	add	r1, ip
 8009f96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fa2:	b289      	uxth	r1, r1
 8009fa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fa8:	4577      	cmp	r7, lr
 8009faa:	f849 1b04 	str.w	r1, [r9], #4
 8009fae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fb2:	d8e2      	bhi.n	8009f7a <__multiply+0xb2>
 8009fb4:	9a01      	ldr	r2, [sp, #4]
 8009fb6:	f845 c002 	str.w	ip, [r5, r2]
 8009fba:	9a03      	ldr	r2, [sp, #12]
 8009fbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	f1b9 0f00 	cmp.w	r9, #0
 8009fc6:	d020      	beq.n	800a00a <__multiply+0x142>
 8009fc8:	6829      	ldr	r1, [r5, #0]
 8009fca:	f104 0c14 	add.w	ip, r4, #20
 8009fce:	46ae      	mov	lr, r5
 8009fd0:	f04f 0a00 	mov.w	sl, #0
 8009fd4:	f8bc b000 	ldrh.w	fp, [ip]
 8009fd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009fdc:	fb09 220b 	mla	r2, r9, fp, r2
 8009fe0:	4492      	add	sl, r2
 8009fe2:	b289      	uxth	r1, r1
 8009fe4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009fe8:	f84e 1b04 	str.w	r1, [lr], #4
 8009fec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ff0:	f8be 1000 	ldrh.w	r1, [lr]
 8009ff4:	0c12      	lsrs	r2, r2, #16
 8009ff6:	fb09 1102 	mla	r1, r9, r2, r1
 8009ffa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ffe:	4567      	cmp	r7, ip
 800a000:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a004:	d8e6      	bhi.n	8009fd4 <__multiply+0x10c>
 800a006:	9a01      	ldr	r2, [sp, #4]
 800a008:	50a9      	str	r1, [r5, r2]
 800a00a:	3504      	adds	r5, #4
 800a00c:	e79a      	b.n	8009f44 <__multiply+0x7c>
 800a00e:	3e01      	subs	r6, #1
 800a010:	e79c      	b.n	8009f4c <__multiply+0x84>
 800a012:	bf00      	nop
 800a014:	0800b463 	.word	0x0800b463
 800a018:	0800b474 	.word	0x0800b474

0800a01c <__pow5mult>:
 800a01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a020:	4615      	mov	r5, r2
 800a022:	f012 0203 	ands.w	r2, r2, #3
 800a026:	4606      	mov	r6, r0
 800a028:	460f      	mov	r7, r1
 800a02a:	d007      	beq.n	800a03c <__pow5mult+0x20>
 800a02c:	4c25      	ldr	r4, [pc, #148]	; (800a0c4 <__pow5mult+0xa8>)
 800a02e:	3a01      	subs	r2, #1
 800a030:	2300      	movs	r3, #0
 800a032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a036:	f7ff fe9b 	bl	8009d70 <__multadd>
 800a03a:	4607      	mov	r7, r0
 800a03c:	10ad      	asrs	r5, r5, #2
 800a03e:	d03d      	beq.n	800a0bc <__pow5mult+0xa0>
 800a040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a042:	b97c      	cbnz	r4, 800a064 <__pow5mult+0x48>
 800a044:	2010      	movs	r0, #16
 800a046:	f7fe fa05 	bl	8008454 <malloc>
 800a04a:	4602      	mov	r2, r0
 800a04c:	6270      	str	r0, [r6, #36]	; 0x24
 800a04e:	b928      	cbnz	r0, 800a05c <__pow5mult+0x40>
 800a050:	4b1d      	ldr	r3, [pc, #116]	; (800a0c8 <__pow5mult+0xac>)
 800a052:	481e      	ldr	r0, [pc, #120]	; (800a0cc <__pow5mult+0xb0>)
 800a054:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a058:	f000 fb1e 	bl	800a698 <__assert_func>
 800a05c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a060:	6004      	str	r4, [r0, #0]
 800a062:	60c4      	str	r4, [r0, #12]
 800a064:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a06c:	b94c      	cbnz	r4, 800a082 <__pow5mult+0x66>
 800a06e:	f240 2171 	movw	r1, #625	; 0x271
 800a072:	4630      	mov	r0, r6
 800a074:	f7ff ff12 	bl	8009e9c <__i2b>
 800a078:	2300      	movs	r3, #0
 800a07a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a07e:	4604      	mov	r4, r0
 800a080:	6003      	str	r3, [r0, #0]
 800a082:	f04f 0900 	mov.w	r9, #0
 800a086:	07eb      	lsls	r3, r5, #31
 800a088:	d50a      	bpl.n	800a0a0 <__pow5mult+0x84>
 800a08a:	4639      	mov	r1, r7
 800a08c:	4622      	mov	r2, r4
 800a08e:	4630      	mov	r0, r6
 800a090:	f7ff ff1a 	bl	8009ec8 <__multiply>
 800a094:	4639      	mov	r1, r7
 800a096:	4680      	mov	r8, r0
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff fe47 	bl	8009d2c <_Bfree>
 800a09e:	4647      	mov	r7, r8
 800a0a0:	106d      	asrs	r5, r5, #1
 800a0a2:	d00b      	beq.n	800a0bc <__pow5mult+0xa0>
 800a0a4:	6820      	ldr	r0, [r4, #0]
 800a0a6:	b938      	cbnz	r0, 800a0b8 <__pow5mult+0x9c>
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7ff ff0b 	bl	8009ec8 <__multiply>
 800a0b2:	6020      	str	r0, [r4, #0]
 800a0b4:	f8c0 9000 	str.w	r9, [r0]
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	e7e4      	b.n	800a086 <__pow5mult+0x6a>
 800a0bc:	4638      	mov	r0, r7
 800a0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0c2:	bf00      	nop
 800a0c4:	0800b5c0 	.word	0x0800b5c0
 800a0c8:	0800b3f1 	.word	0x0800b3f1
 800a0cc:	0800b474 	.word	0x0800b474

0800a0d0 <__lshift>:
 800a0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	6849      	ldr	r1, [r1, #4]
 800a0d8:	6923      	ldr	r3, [r4, #16]
 800a0da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0de:	68a3      	ldr	r3, [r4, #8]
 800a0e0:	4607      	mov	r7, r0
 800a0e2:	4691      	mov	r9, r2
 800a0e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0e8:	f108 0601 	add.w	r6, r8, #1
 800a0ec:	42b3      	cmp	r3, r6
 800a0ee:	db0b      	blt.n	800a108 <__lshift+0x38>
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f7ff fddb 	bl	8009cac <_Balloc>
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	b948      	cbnz	r0, 800a10e <__lshift+0x3e>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <__lshift+0xd8>)
 800a0fe:	482b      	ldr	r0, [pc, #172]	; (800a1ac <__lshift+0xdc>)
 800a100:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a104:	f000 fac8 	bl	800a698 <__assert_func>
 800a108:	3101      	adds	r1, #1
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	e7ee      	b.n	800a0ec <__lshift+0x1c>
 800a10e:	2300      	movs	r3, #0
 800a110:	f100 0114 	add.w	r1, r0, #20
 800a114:	f100 0210 	add.w	r2, r0, #16
 800a118:	4618      	mov	r0, r3
 800a11a:	4553      	cmp	r3, sl
 800a11c:	db37      	blt.n	800a18e <__lshift+0xbe>
 800a11e:	6920      	ldr	r0, [r4, #16]
 800a120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a124:	f104 0314 	add.w	r3, r4, #20
 800a128:	f019 091f 	ands.w	r9, r9, #31
 800a12c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a130:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a134:	d02f      	beq.n	800a196 <__lshift+0xc6>
 800a136:	f1c9 0e20 	rsb	lr, r9, #32
 800a13a:	468a      	mov	sl, r1
 800a13c:	f04f 0c00 	mov.w	ip, #0
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	fa02 f209 	lsl.w	r2, r2, r9
 800a146:	ea42 020c 	orr.w	r2, r2, ip
 800a14a:	f84a 2b04 	str.w	r2, [sl], #4
 800a14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a152:	4298      	cmp	r0, r3
 800a154:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a158:	d8f2      	bhi.n	800a140 <__lshift+0x70>
 800a15a:	1b03      	subs	r3, r0, r4
 800a15c:	3b15      	subs	r3, #21
 800a15e:	f023 0303 	bic.w	r3, r3, #3
 800a162:	3304      	adds	r3, #4
 800a164:	f104 0215 	add.w	r2, r4, #21
 800a168:	4290      	cmp	r0, r2
 800a16a:	bf38      	it	cc
 800a16c:	2304      	movcc	r3, #4
 800a16e:	f841 c003 	str.w	ip, [r1, r3]
 800a172:	f1bc 0f00 	cmp.w	ip, #0
 800a176:	d001      	beq.n	800a17c <__lshift+0xac>
 800a178:	f108 0602 	add.w	r6, r8, #2
 800a17c:	3e01      	subs	r6, #1
 800a17e:	4638      	mov	r0, r7
 800a180:	612e      	str	r6, [r5, #16]
 800a182:	4621      	mov	r1, r4
 800a184:	f7ff fdd2 	bl	8009d2c <_Bfree>
 800a188:	4628      	mov	r0, r5
 800a18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a192:	3301      	adds	r3, #1
 800a194:	e7c1      	b.n	800a11a <__lshift+0x4a>
 800a196:	3904      	subs	r1, #4
 800a198:	f853 2b04 	ldr.w	r2, [r3], #4
 800a19c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1a0:	4298      	cmp	r0, r3
 800a1a2:	d8f9      	bhi.n	800a198 <__lshift+0xc8>
 800a1a4:	e7ea      	b.n	800a17c <__lshift+0xac>
 800a1a6:	bf00      	nop
 800a1a8:	0800b463 	.word	0x0800b463
 800a1ac:	0800b474 	.word	0x0800b474

0800a1b0 <__mcmp>:
 800a1b0:	b530      	push	{r4, r5, lr}
 800a1b2:	6902      	ldr	r2, [r0, #16]
 800a1b4:	690c      	ldr	r4, [r1, #16]
 800a1b6:	1b12      	subs	r2, r2, r4
 800a1b8:	d10e      	bne.n	800a1d8 <__mcmp+0x28>
 800a1ba:	f100 0314 	add.w	r3, r0, #20
 800a1be:	3114      	adds	r1, #20
 800a1c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1d0:	42a5      	cmp	r5, r4
 800a1d2:	d003      	beq.n	800a1dc <__mcmp+0x2c>
 800a1d4:	d305      	bcc.n	800a1e2 <__mcmp+0x32>
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	4610      	mov	r0, r2
 800a1da:	bd30      	pop	{r4, r5, pc}
 800a1dc:	4283      	cmp	r3, r0
 800a1de:	d3f3      	bcc.n	800a1c8 <__mcmp+0x18>
 800a1e0:	e7fa      	b.n	800a1d8 <__mcmp+0x28>
 800a1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e6:	e7f7      	b.n	800a1d8 <__mcmp+0x28>

0800a1e8 <__mdiff>:
 800a1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	4690      	mov	r8, r2
 800a1f6:	f7ff ffdb 	bl	800a1b0 <__mcmp>
 800a1fa:	1e05      	subs	r5, r0, #0
 800a1fc:	d110      	bne.n	800a220 <__mdiff+0x38>
 800a1fe:	4629      	mov	r1, r5
 800a200:	4630      	mov	r0, r6
 800a202:	f7ff fd53 	bl	8009cac <_Balloc>
 800a206:	b930      	cbnz	r0, 800a216 <__mdiff+0x2e>
 800a208:	4b3a      	ldr	r3, [pc, #232]	; (800a2f4 <__mdiff+0x10c>)
 800a20a:	4602      	mov	r2, r0
 800a20c:	f240 2132 	movw	r1, #562	; 0x232
 800a210:	4839      	ldr	r0, [pc, #228]	; (800a2f8 <__mdiff+0x110>)
 800a212:	f000 fa41 	bl	800a698 <__assert_func>
 800a216:	2301      	movs	r3, #1
 800a218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a220:	bfa4      	itt	ge
 800a222:	4643      	movge	r3, r8
 800a224:	46a0      	movge	r8, r4
 800a226:	4630      	mov	r0, r6
 800a228:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a22c:	bfa6      	itte	ge
 800a22e:	461c      	movge	r4, r3
 800a230:	2500      	movge	r5, #0
 800a232:	2501      	movlt	r5, #1
 800a234:	f7ff fd3a 	bl	8009cac <_Balloc>
 800a238:	b920      	cbnz	r0, 800a244 <__mdiff+0x5c>
 800a23a:	4b2e      	ldr	r3, [pc, #184]	; (800a2f4 <__mdiff+0x10c>)
 800a23c:	4602      	mov	r2, r0
 800a23e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a242:	e7e5      	b.n	800a210 <__mdiff+0x28>
 800a244:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a248:	6926      	ldr	r6, [r4, #16]
 800a24a:	60c5      	str	r5, [r0, #12]
 800a24c:	f104 0914 	add.w	r9, r4, #20
 800a250:	f108 0514 	add.w	r5, r8, #20
 800a254:	f100 0e14 	add.w	lr, r0, #20
 800a258:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a25c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a260:	f108 0210 	add.w	r2, r8, #16
 800a264:	46f2      	mov	sl, lr
 800a266:	2100      	movs	r1, #0
 800a268:	f859 3b04 	ldr.w	r3, [r9], #4
 800a26c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a270:	fa1f f883 	uxth.w	r8, r3
 800a274:	fa11 f18b 	uxtah	r1, r1, fp
 800a278:	0c1b      	lsrs	r3, r3, #16
 800a27a:	eba1 0808 	sub.w	r8, r1, r8
 800a27e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a282:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a286:	fa1f f888 	uxth.w	r8, r8
 800a28a:	1419      	asrs	r1, r3, #16
 800a28c:	454e      	cmp	r6, r9
 800a28e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a292:	f84a 3b04 	str.w	r3, [sl], #4
 800a296:	d8e7      	bhi.n	800a268 <__mdiff+0x80>
 800a298:	1b33      	subs	r3, r6, r4
 800a29a:	3b15      	subs	r3, #21
 800a29c:	f023 0303 	bic.w	r3, r3, #3
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	3415      	adds	r4, #21
 800a2a4:	42a6      	cmp	r6, r4
 800a2a6:	bf38      	it	cc
 800a2a8:	2304      	movcc	r3, #4
 800a2aa:	441d      	add	r5, r3
 800a2ac:	4473      	add	r3, lr
 800a2ae:	469e      	mov	lr, r3
 800a2b0:	462e      	mov	r6, r5
 800a2b2:	4566      	cmp	r6, ip
 800a2b4:	d30e      	bcc.n	800a2d4 <__mdiff+0xec>
 800a2b6:	f10c 0203 	add.w	r2, ip, #3
 800a2ba:	1b52      	subs	r2, r2, r5
 800a2bc:	f022 0203 	bic.w	r2, r2, #3
 800a2c0:	3d03      	subs	r5, #3
 800a2c2:	45ac      	cmp	ip, r5
 800a2c4:	bf38      	it	cc
 800a2c6:	2200      	movcc	r2, #0
 800a2c8:	441a      	add	r2, r3
 800a2ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a2ce:	b17b      	cbz	r3, 800a2f0 <__mdiff+0x108>
 800a2d0:	6107      	str	r7, [r0, #16]
 800a2d2:	e7a3      	b.n	800a21c <__mdiff+0x34>
 800a2d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a2d8:	fa11 f288 	uxtah	r2, r1, r8
 800a2dc:	1414      	asrs	r4, r2, #16
 800a2de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2e2:	b292      	uxth	r2, r2
 800a2e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a2e8:	f84e 2b04 	str.w	r2, [lr], #4
 800a2ec:	1421      	asrs	r1, r4, #16
 800a2ee:	e7e0      	b.n	800a2b2 <__mdiff+0xca>
 800a2f0:	3f01      	subs	r7, #1
 800a2f2:	e7ea      	b.n	800a2ca <__mdiff+0xe2>
 800a2f4:	0800b463 	.word	0x0800b463
 800a2f8:	0800b474 	.word	0x0800b474

0800a2fc <__d2b>:
 800a2fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a300:	4689      	mov	r9, r1
 800a302:	2101      	movs	r1, #1
 800a304:	ec57 6b10 	vmov	r6, r7, d0
 800a308:	4690      	mov	r8, r2
 800a30a:	f7ff fccf 	bl	8009cac <_Balloc>
 800a30e:	4604      	mov	r4, r0
 800a310:	b930      	cbnz	r0, 800a320 <__d2b+0x24>
 800a312:	4602      	mov	r2, r0
 800a314:	4b25      	ldr	r3, [pc, #148]	; (800a3ac <__d2b+0xb0>)
 800a316:	4826      	ldr	r0, [pc, #152]	; (800a3b0 <__d2b+0xb4>)
 800a318:	f240 310a 	movw	r1, #778	; 0x30a
 800a31c:	f000 f9bc 	bl	800a698 <__assert_func>
 800a320:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a324:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a328:	bb35      	cbnz	r5, 800a378 <__d2b+0x7c>
 800a32a:	2e00      	cmp	r6, #0
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	d028      	beq.n	800a382 <__d2b+0x86>
 800a330:	4668      	mov	r0, sp
 800a332:	9600      	str	r6, [sp, #0]
 800a334:	f7ff fd82 	bl	8009e3c <__lo0bits>
 800a338:	9900      	ldr	r1, [sp, #0]
 800a33a:	b300      	cbz	r0, 800a37e <__d2b+0x82>
 800a33c:	9a01      	ldr	r2, [sp, #4]
 800a33e:	f1c0 0320 	rsb	r3, r0, #32
 800a342:	fa02 f303 	lsl.w	r3, r2, r3
 800a346:	430b      	orrs	r3, r1
 800a348:	40c2      	lsrs	r2, r0
 800a34a:	6163      	str	r3, [r4, #20]
 800a34c:	9201      	str	r2, [sp, #4]
 800a34e:	9b01      	ldr	r3, [sp, #4]
 800a350:	61a3      	str	r3, [r4, #24]
 800a352:	2b00      	cmp	r3, #0
 800a354:	bf14      	ite	ne
 800a356:	2202      	movne	r2, #2
 800a358:	2201      	moveq	r2, #1
 800a35a:	6122      	str	r2, [r4, #16]
 800a35c:	b1d5      	cbz	r5, 800a394 <__d2b+0x98>
 800a35e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a362:	4405      	add	r5, r0
 800a364:	f8c9 5000 	str.w	r5, [r9]
 800a368:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a36c:	f8c8 0000 	str.w	r0, [r8]
 800a370:	4620      	mov	r0, r4
 800a372:	b003      	add	sp, #12
 800a374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a37c:	e7d5      	b.n	800a32a <__d2b+0x2e>
 800a37e:	6161      	str	r1, [r4, #20]
 800a380:	e7e5      	b.n	800a34e <__d2b+0x52>
 800a382:	a801      	add	r0, sp, #4
 800a384:	f7ff fd5a 	bl	8009e3c <__lo0bits>
 800a388:	9b01      	ldr	r3, [sp, #4]
 800a38a:	6163      	str	r3, [r4, #20]
 800a38c:	2201      	movs	r2, #1
 800a38e:	6122      	str	r2, [r4, #16]
 800a390:	3020      	adds	r0, #32
 800a392:	e7e3      	b.n	800a35c <__d2b+0x60>
 800a394:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a398:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a39c:	f8c9 0000 	str.w	r0, [r9]
 800a3a0:	6918      	ldr	r0, [r3, #16]
 800a3a2:	f7ff fd2b 	bl	8009dfc <__hi0bits>
 800a3a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3aa:	e7df      	b.n	800a36c <__d2b+0x70>
 800a3ac:	0800b463 	.word	0x0800b463
 800a3b0:	0800b474 	.word	0x0800b474

0800a3b4 <_calloc_r>:
 800a3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3b6:	fba1 2402 	umull	r2, r4, r1, r2
 800a3ba:	b94c      	cbnz	r4, 800a3d0 <_calloc_r+0x1c>
 800a3bc:	4611      	mov	r1, r2
 800a3be:	9201      	str	r2, [sp, #4]
 800a3c0:	f7fe f8d2 	bl	8008568 <_malloc_r>
 800a3c4:	9a01      	ldr	r2, [sp, #4]
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	b930      	cbnz	r0, 800a3d8 <_calloc_r+0x24>
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	b003      	add	sp, #12
 800a3ce:	bd30      	pop	{r4, r5, pc}
 800a3d0:	220c      	movs	r2, #12
 800a3d2:	6002      	str	r2, [r0, #0]
 800a3d4:	2500      	movs	r5, #0
 800a3d6:	e7f8      	b.n	800a3ca <_calloc_r+0x16>
 800a3d8:	4621      	mov	r1, r4
 800a3da:	f7fe f851 	bl	8008480 <memset>
 800a3de:	e7f4      	b.n	800a3ca <_calloc_r+0x16>

0800a3e0 <__ssputs_r>:
 800a3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	688e      	ldr	r6, [r1, #8]
 800a3e6:	429e      	cmp	r6, r3
 800a3e8:	4682      	mov	sl, r0
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	4690      	mov	r8, r2
 800a3ee:	461f      	mov	r7, r3
 800a3f0:	d838      	bhi.n	800a464 <__ssputs_r+0x84>
 800a3f2:	898a      	ldrh	r2, [r1, #12]
 800a3f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3f8:	d032      	beq.n	800a460 <__ssputs_r+0x80>
 800a3fa:	6825      	ldr	r5, [r4, #0]
 800a3fc:	6909      	ldr	r1, [r1, #16]
 800a3fe:	eba5 0901 	sub.w	r9, r5, r1
 800a402:	6965      	ldr	r5, [r4, #20]
 800a404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a40c:	3301      	adds	r3, #1
 800a40e:	444b      	add	r3, r9
 800a410:	106d      	asrs	r5, r5, #1
 800a412:	429d      	cmp	r5, r3
 800a414:	bf38      	it	cc
 800a416:	461d      	movcc	r5, r3
 800a418:	0553      	lsls	r3, r2, #21
 800a41a:	d531      	bpl.n	800a480 <__ssputs_r+0xa0>
 800a41c:	4629      	mov	r1, r5
 800a41e:	f7fe f8a3 	bl	8008568 <_malloc_r>
 800a422:	4606      	mov	r6, r0
 800a424:	b950      	cbnz	r0, 800a43c <__ssputs_r+0x5c>
 800a426:	230c      	movs	r3, #12
 800a428:	f8ca 3000 	str.w	r3, [sl]
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a432:	81a3      	strh	r3, [r4, #12]
 800a434:	f04f 30ff 	mov.w	r0, #4294967295
 800a438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43c:	6921      	ldr	r1, [r4, #16]
 800a43e:	464a      	mov	r2, r9
 800a440:	f7fe f810 	bl	8008464 <memcpy>
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a44a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a44e:	81a3      	strh	r3, [r4, #12]
 800a450:	6126      	str	r6, [r4, #16]
 800a452:	6165      	str	r5, [r4, #20]
 800a454:	444e      	add	r6, r9
 800a456:	eba5 0509 	sub.w	r5, r5, r9
 800a45a:	6026      	str	r6, [r4, #0]
 800a45c:	60a5      	str	r5, [r4, #8]
 800a45e:	463e      	mov	r6, r7
 800a460:	42be      	cmp	r6, r7
 800a462:	d900      	bls.n	800a466 <__ssputs_r+0x86>
 800a464:	463e      	mov	r6, r7
 800a466:	6820      	ldr	r0, [r4, #0]
 800a468:	4632      	mov	r2, r6
 800a46a:	4641      	mov	r1, r8
 800a46c:	f000 f959 	bl	800a722 <memmove>
 800a470:	68a3      	ldr	r3, [r4, #8]
 800a472:	1b9b      	subs	r3, r3, r6
 800a474:	60a3      	str	r3, [r4, #8]
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	4433      	add	r3, r6
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	2000      	movs	r0, #0
 800a47e:	e7db      	b.n	800a438 <__ssputs_r+0x58>
 800a480:	462a      	mov	r2, r5
 800a482:	f000 f968 	bl	800a756 <_realloc_r>
 800a486:	4606      	mov	r6, r0
 800a488:	2800      	cmp	r0, #0
 800a48a:	d1e1      	bne.n	800a450 <__ssputs_r+0x70>
 800a48c:	6921      	ldr	r1, [r4, #16]
 800a48e:	4650      	mov	r0, sl
 800a490:	f7fd fffe 	bl	8008490 <_free_r>
 800a494:	e7c7      	b.n	800a426 <__ssputs_r+0x46>
	...

0800a498 <_svfiprintf_r>:
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	4698      	mov	r8, r3
 800a49e:	898b      	ldrh	r3, [r1, #12]
 800a4a0:	061b      	lsls	r3, r3, #24
 800a4a2:	b09d      	sub	sp, #116	; 0x74
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	460d      	mov	r5, r1
 800a4a8:	4614      	mov	r4, r2
 800a4aa:	d50e      	bpl.n	800a4ca <_svfiprintf_r+0x32>
 800a4ac:	690b      	ldr	r3, [r1, #16]
 800a4ae:	b963      	cbnz	r3, 800a4ca <_svfiprintf_r+0x32>
 800a4b0:	2140      	movs	r1, #64	; 0x40
 800a4b2:	f7fe f859 	bl	8008568 <_malloc_r>
 800a4b6:	6028      	str	r0, [r5, #0]
 800a4b8:	6128      	str	r0, [r5, #16]
 800a4ba:	b920      	cbnz	r0, 800a4c6 <_svfiprintf_r+0x2e>
 800a4bc:	230c      	movs	r3, #12
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c4:	e0d1      	b.n	800a66a <_svfiprintf_r+0x1d2>
 800a4c6:	2340      	movs	r3, #64	; 0x40
 800a4c8:	616b      	str	r3, [r5, #20]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ce:	2320      	movs	r3, #32
 800a4d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4d8:	2330      	movs	r3, #48	; 0x30
 800a4da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a684 <_svfiprintf_r+0x1ec>
 800a4de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4e2:	f04f 0901 	mov.w	r9, #1
 800a4e6:	4623      	mov	r3, r4
 800a4e8:	469a      	mov	sl, r3
 800a4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ee:	b10a      	cbz	r2, 800a4f4 <_svfiprintf_r+0x5c>
 800a4f0:	2a25      	cmp	r2, #37	; 0x25
 800a4f2:	d1f9      	bne.n	800a4e8 <_svfiprintf_r+0x50>
 800a4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4f8:	d00b      	beq.n	800a512 <_svfiprintf_r+0x7a>
 800a4fa:	465b      	mov	r3, fp
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	4638      	mov	r0, r7
 800a502:	f7ff ff6d 	bl	800a3e0 <__ssputs_r>
 800a506:	3001      	adds	r0, #1
 800a508:	f000 80aa 	beq.w	800a660 <_svfiprintf_r+0x1c8>
 800a50c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a50e:	445a      	add	r2, fp
 800a510:	9209      	str	r2, [sp, #36]	; 0x24
 800a512:	f89a 3000 	ldrb.w	r3, [sl]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 80a2 	beq.w	800a660 <_svfiprintf_r+0x1c8>
 800a51c:	2300      	movs	r3, #0
 800a51e:	f04f 32ff 	mov.w	r2, #4294967295
 800a522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a526:	f10a 0a01 	add.w	sl, sl, #1
 800a52a:	9304      	str	r3, [sp, #16]
 800a52c:	9307      	str	r3, [sp, #28]
 800a52e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a532:	931a      	str	r3, [sp, #104]	; 0x68
 800a534:	4654      	mov	r4, sl
 800a536:	2205      	movs	r2, #5
 800a538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53c:	4851      	ldr	r0, [pc, #324]	; (800a684 <_svfiprintf_r+0x1ec>)
 800a53e:	f7f5 fe4f 	bl	80001e0 <memchr>
 800a542:	9a04      	ldr	r2, [sp, #16]
 800a544:	b9d8      	cbnz	r0, 800a57e <_svfiprintf_r+0xe6>
 800a546:	06d0      	lsls	r0, r2, #27
 800a548:	bf44      	itt	mi
 800a54a:	2320      	movmi	r3, #32
 800a54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a550:	0711      	lsls	r1, r2, #28
 800a552:	bf44      	itt	mi
 800a554:	232b      	movmi	r3, #43	; 0x2b
 800a556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a55a:	f89a 3000 	ldrb.w	r3, [sl]
 800a55e:	2b2a      	cmp	r3, #42	; 0x2a
 800a560:	d015      	beq.n	800a58e <_svfiprintf_r+0xf6>
 800a562:	9a07      	ldr	r2, [sp, #28]
 800a564:	4654      	mov	r4, sl
 800a566:	2000      	movs	r0, #0
 800a568:	f04f 0c0a 	mov.w	ip, #10
 800a56c:	4621      	mov	r1, r4
 800a56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a572:	3b30      	subs	r3, #48	; 0x30
 800a574:	2b09      	cmp	r3, #9
 800a576:	d94e      	bls.n	800a616 <_svfiprintf_r+0x17e>
 800a578:	b1b0      	cbz	r0, 800a5a8 <_svfiprintf_r+0x110>
 800a57a:	9207      	str	r2, [sp, #28]
 800a57c:	e014      	b.n	800a5a8 <_svfiprintf_r+0x110>
 800a57e:	eba0 0308 	sub.w	r3, r0, r8
 800a582:	fa09 f303 	lsl.w	r3, r9, r3
 800a586:	4313      	orrs	r3, r2
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	46a2      	mov	sl, r4
 800a58c:	e7d2      	b.n	800a534 <_svfiprintf_r+0x9c>
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	1d19      	adds	r1, r3, #4
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	9103      	str	r1, [sp, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	bfbb      	ittet	lt
 800a59a:	425b      	neglt	r3, r3
 800a59c:	f042 0202 	orrlt.w	r2, r2, #2
 800a5a0:	9307      	strge	r3, [sp, #28]
 800a5a2:	9307      	strlt	r3, [sp, #28]
 800a5a4:	bfb8      	it	lt
 800a5a6:	9204      	strlt	r2, [sp, #16]
 800a5a8:	7823      	ldrb	r3, [r4, #0]
 800a5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ac:	d10c      	bne.n	800a5c8 <_svfiprintf_r+0x130>
 800a5ae:	7863      	ldrb	r3, [r4, #1]
 800a5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5b2:	d135      	bne.n	800a620 <_svfiprintf_r+0x188>
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	1d1a      	adds	r2, r3, #4
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	9203      	str	r2, [sp, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	bfb8      	it	lt
 800a5c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5c4:	3402      	adds	r4, #2
 800a5c6:	9305      	str	r3, [sp, #20]
 800a5c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a694 <_svfiprintf_r+0x1fc>
 800a5cc:	7821      	ldrb	r1, [r4, #0]
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	f7f5 fe05 	bl	80001e0 <memchr>
 800a5d6:	b140      	cbz	r0, 800a5ea <_svfiprintf_r+0x152>
 800a5d8:	2340      	movs	r3, #64	; 0x40
 800a5da:	eba0 000a 	sub.w	r0, r0, sl
 800a5de:	fa03 f000 	lsl.w	r0, r3, r0
 800a5e2:	9b04      	ldr	r3, [sp, #16]
 800a5e4:	4303      	orrs	r3, r0
 800a5e6:	3401      	adds	r4, #1
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ee:	4826      	ldr	r0, [pc, #152]	; (800a688 <_svfiprintf_r+0x1f0>)
 800a5f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5f4:	2206      	movs	r2, #6
 800a5f6:	f7f5 fdf3 	bl	80001e0 <memchr>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d038      	beq.n	800a670 <_svfiprintf_r+0x1d8>
 800a5fe:	4b23      	ldr	r3, [pc, #140]	; (800a68c <_svfiprintf_r+0x1f4>)
 800a600:	bb1b      	cbnz	r3, 800a64a <_svfiprintf_r+0x1b2>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	3307      	adds	r3, #7
 800a606:	f023 0307 	bic.w	r3, r3, #7
 800a60a:	3308      	adds	r3, #8
 800a60c:	9303      	str	r3, [sp, #12]
 800a60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a610:	4433      	add	r3, r6
 800a612:	9309      	str	r3, [sp, #36]	; 0x24
 800a614:	e767      	b.n	800a4e6 <_svfiprintf_r+0x4e>
 800a616:	fb0c 3202 	mla	r2, ip, r2, r3
 800a61a:	460c      	mov	r4, r1
 800a61c:	2001      	movs	r0, #1
 800a61e:	e7a5      	b.n	800a56c <_svfiprintf_r+0xd4>
 800a620:	2300      	movs	r3, #0
 800a622:	3401      	adds	r4, #1
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	4619      	mov	r1, r3
 800a628:	f04f 0c0a 	mov.w	ip, #10
 800a62c:	4620      	mov	r0, r4
 800a62e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a632:	3a30      	subs	r2, #48	; 0x30
 800a634:	2a09      	cmp	r2, #9
 800a636:	d903      	bls.n	800a640 <_svfiprintf_r+0x1a8>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d0c5      	beq.n	800a5c8 <_svfiprintf_r+0x130>
 800a63c:	9105      	str	r1, [sp, #20]
 800a63e:	e7c3      	b.n	800a5c8 <_svfiprintf_r+0x130>
 800a640:	fb0c 2101 	mla	r1, ip, r1, r2
 800a644:	4604      	mov	r4, r0
 800a646:	2301      	movs	r3, #1
 800a648:	e7f0      	b.n	800a62c <_svfiprintf_r+0x194>
 800a64a:	ab03      	add	r3, sp, #12
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	462a      	mov	r2, r5
 800a650:	4b0f      	ldr	r3, [pc, #60]	; (800a690 <_svfiprintf_r+0x1f8>)
 800a652:	a904      	add	r1, sp, #16
 800a654:	4638      	mov	r0, r7
 800a656:	f7fe f89b 	bl	8008790 <_printf_float>
 800a65a:	1c42      	adds	r2, r0, #1
 800a65c:	4606      	mov	r6, r0
 800a65e:	d1d6      	bne.n	800a60e <_svfiprintf_r+0x176>
 800a660:	89ab      	ldrh	r3, [r5, #12]
 800a662:	065b      	lsls	r3, r3, #25
 800a664:	f53f af2c 	bmi.w	800a4c0 <_svfiprintf_r+0x28>
 800a668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a66a:	b01d      	add	sp, #116	; 0x74
 800a66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a670:	ab03      	add	r3, sp, #12
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	462a      	mov	r2, r5
 800a676:	4b06      	ldr	r3, [pc, #24]	; (800a690 <_svfiprintf_r+0x1f8>)
 800a678:	a904      	add	r1, sp, #16
 800a67a:	4638      	mov	r0, r7
 800a67c:	f7fe fb2c 	bl	8008cd8 <_printf_i>
 800a680:	e7eb      	b.n	800a65a <_svfiprintf_r+0x1c2>
 800a682:	bf00      	nop
 800a684:	0800b5cc 	.word	0x0800b5cc
 800a688:	0800b5d6 	.word	0x0800b5d6
 800a68c:	08008791 	.word	0x08008791
 800a690:	0800a3e1 	.word	0x0800a3e1
 800a694:	0800b5d2 	.word	0x0800b5d2

0800a698 <__assert_func>:
 800a698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a69a:	4614      	mov	r4, r2
 800a69c:	461a      	mov	r2, r3
 800a69e:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <__assert_func+0x2c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4605      	mov	r5, r0
 800a6a4:	68d8      	ldr	r0, [r3, #12]
 800a6a6:	b14c      	cbz	r4, 800a6bc <__assert_func+0x24>
 800a6a8:	4b07      	ldr	r3, [pc, #28]	; (800a6c8 <__assert_func+0x30>)
 800a6aa:	9100      	str	r1, [sp, #0]
 800a6ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6b0:	4906      	ldr	r1, [pc, #24]	; (800a6cc <__assert_func+0x34>)
 800a6b2:	462b      	mov	r3, r5
 800a6b4:	f000 f80e 	bl	800a6d4 <fiprintf>
 800a6b8:	f000 faa4 	bl	800ac04 <abort>
 800a6bc:	4b04      	ldr	r3, [pc, #16]	; (800a6d0 <__assert_func+0x38>)
 800a6be:	461c      	mov	r4, r3
 800a6c0:	e7f3      	b.n	800a6aa <__assert_func+0x12>
 800a6c2:	bf00      	nop
 800a6c4:	2000000c 	.word	0x2000000c
 800a6c8:	0800b5dd 	.word	0x0800b5dd
 800a6cc:	0800b5ea 	.word	0x0800b5ea
 800a6d0:	0800b618 	.word	0x0800b618

0800a6d4 <fiprintf>:
 800a6d4:	b40e      	push	{r1, r2, r3}
 800a6d6:	b503      	push	{r0, r1, lr}
 800a6d8:	4601      	mov	r1, r0
 800a6da:	ab03      	add	r3, sp, #12
 800a6dc:	4805      	ldr	r0, [pc, #20]	; (800a6f4 <fiprintf+0x20>)
 800a6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e2:	6800      	ldr	r0, [r0, #0]
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	f000 f88f 	bl	800a808 <_vfiprintf_r>
 800a6ea:	b002      	add	sp, #8
 800a6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6f0:	b003      	add	sp, #12
 800a6f2:	4770      	bx	lr
 800a6f4:	2000000c 	.word	0x2000000c

0800a6f8 <__retarget_lock_init_recursive>:
 800a6f8:	4770      	bx	lr

0800a6fa <__retarget_lock_acquire_recursive>:
 800a6fa:	4770      	bx	lr

0800a6fc <__retarget_lock_release_recursive>:
 800a6fc:	4770      	bx	lr

0800a6fe <__ascii_mbtowc>:
 800a6fe:	b082      	sub	sp, #8
 800a700:	b901      	cbnz	r1, 800a704 <__ascii_mbtowc+0x6>
 800a702:	a901      	add	r1, sp, #4
 800a704:	b142      	cbz	r2, 800a718 <__ascii_mbtowc+0x1a>
 800a706:	b14b      	cbz	r3, 800a71c <__ascii_mbtowc+0x1e>
 800a708:	7813      	ldrb	r3, [r2, #0]
 800a70a:	600b      	str	r3, [r1, #0]
 800a70c:	7812      	ldrb	r2, [r2, #0]
 800a70e:	1e10      	subs	r0, r2, #0
 800a710:	bf18      	it	ne
 800a712:	2001      	movne	r0, #1
 800a714:	b002      	add	sp, #8
 800a716:	4770      	bx	lr
 800a718:	4610      	mov	r0, r2
 800a71a:	e7fb      	b.n	800a714 <__ascii_mbtowc+0x16>
 800a71c:	f06f 0001 	mvn.w	r0, #1
 800a720:	e7f8      	b.n	800a714 <__ascii_mbtowc+0x16>

0800a722 <memmove>:
 800a722:	4288      	cmp	r0, r1
 800a724:	b510      	push	{r4, lr}
 800a726:	eb01 0402 	add.w	r4, r1, r2
 800a72a:	d902      	bls.n	800a732 <memmove+0x10>
 800a72c:	4284      	cmp	r4, r0
 800a72e:	4623      	mov	r3, r4
 800a730:	d807      	bhi.n	800a742 <memmove+0x20>
 800a732:	1e43      	subs	r3, r0, #1
 800a734:	42a1      	cmp	r1, r4
 800a736:	d008      	beq.n	800a74a <memmove+0x28>
 800a738:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a73c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a740:	e7f8      	b.n	800a734 <memmove+0x12>
 800a742:	4402      	add	r2, r0
 800a744:	4601      	mov	r1, r0
 800a746:	428a      	cmp	r2, r1
 800a748:	d100      	bne.n	800a74c <memmove+0x2a>
 800a74a:	bd10      	pop	{r4, pc}
 800a74c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a750:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a754:	e7f7      	b.n	800a746 <memmove+0x24>

0800a756 <_realloc_r>:
 800a756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75a:	4680      	mov	r8, r0
 800a75c:	4614      	mov	r4, r2
 800a75e:	460e      	mov	r6, r1
 800a760:	b921      	cbnz	r1, 800a76c <_realloc_r+0x16>
 800a762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	4611      	mov	r1, r2
 800a768:	f7fd befe 	b.w	8008568 <_malloc_r>
 800a76c:	b92a      	cbnz	r2, 800a77a <_realloc_r+0x24>
 800a76e:	f7fd fe8f 	bl	8008490 <_free_r>
 800a772:	4625      	mov	r5, r4
 800a774:	4628      	mov	r0, r5
 800a776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77a:	f000 fc67 	bl	800b04c <_malloc_usable_size_r>
 800a77e:	4284      	cmp	r4, r0
 800a780:	4607      	mov	r7, r0
 800a782:	d802      	bhi.n	800a78a <_realloc_r+0x34>
 800a784:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a788:	d812      	bhi.n	800a7b0 <_realloc_r+0x5a>
 800a78a:	4621      	mov	r1, r4
 800a78c:	4640      	mov	r0, r8
 800a78e:	f7fd feeb 	bl	8008568 <_malloc_r>
 800a792:	4605      	mov	r5, r0
 800a794:	2800      	cmp	r0, #0
 800a796:	d0ed      	beq.n	800a774 <_realloc_r+0x1e>
 800a798:	42bc      	cmp	r4, r7
 800a79a:	4622      	mov	r2, r4
 800a79c:	4631      	mov	r1, r6
 800a79e:	bf28      	it	cs
 800a7a0:	463a      	movcs	r2, r7
 800a7a2:	f7fd fe5f 	bl	8008464 <memcpy>
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	f7fd fe71 	bl	8008490 <_free_r>
 800a7ae:	e7e1      	b.n	800a774 <_realloc_r+0x1e>
 800a7b0:	4635      	mov	r5, r6
 800a7b2:	e7df      	b.n	800a774 <_realloc_r+0x1e>

0800a7b4 <__sfputc_r>:
 800a7b4:	6893      	ldr	r3, [r2, #8]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	b410      	push	{r4}
 800a7bc:	6093      	str	r3, [r2, #8]
 800a7be:	da08      	bge.n	800a7d2 <__sfputc_r+0x1e>
 800a7c0:	6994      	ldr	r4, [r2, #24]
 800a7c2:	42a3      	cmp	r3, r4
 800a7c4:	db01      	blt.n	800a7ca <__sfputc_r+0x16>
 800a7c6:	290a      	cmp	r1, #10
 800a7c8:	d103      	bne.n	800a7d2 <__sfputc_r+0x1e>
 800a7ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ce:	f000 b94b 	b.w	800aa68 <__swbuf_r>
 800a7d2:	6813      	ldr	r3, [r2, #0]
 800a7d4:	1c58      	adds	r0, r3, #1
 800a7d6:	6010      	str	r0, [r2, #0]
 800a7d8:	7019      	strb	r1, [r3, #0]
 800a7da:	4608      	mov	r0, r1
 800a7dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <__sfputs_r>:
 800a7e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e4:	4606      	mov	r6, r0
 800a7e6:	460f      	mov	r7, r1
 800a7e8:	4614      	mov	r4, r2
 800a7ea:	18d5      	adds	r5, r2, r3
 800a7ec:	42ac      	cmp	r4, r5
 800a7ee:	d101      	bne.n	800a7f4 <__sfputs_r+0x12>
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	e007      	b.n	800a804 <__sfputs_r+0x22>
 800a7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f8:	463a      	mov	r2, r7
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f7ff ffda 	bl	800a7b4 <__sfputc_r>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	d1f3      	bne.n	800a7ec <__sfputs_r+0xa>
 800a804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a808 <_vfiprintf_r>:
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	460d      	mov	r5, r1
 800a80e:	b09d      	sub	sp, #116	; 0x74
 800a810:	4614      	mov	r4, r2
 800a812:	4698      	mov	r8, r3
 800a814:	4606      	mov	r6, r0
 800a816:	b118      	cbz	r0, 800a820 <_vfiprintf_r+0x18>
 800a818:	6983      	ldr	r3, [r0, #24]
 800a81a:	b90b      	cbnz	r3, 800a820 <_vfiprintf_r+0x18>
 800a81c:	f000 fb14 	bl	800ae48 <__sinit>
 800a820:	4b89      	ldr	r3, [pc, #548]	; (800aa48 <_vfiprintf_r+0x240>)
 800a822:	429d      	cmp	r5, r3
 800a824:	d11b      	bne.n	800a85e <_vfiprintf_r+0x56>
 800a826:	6875      	ldr	r5, [r6, #4]
 800a828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a82a:	07d9      	lsls	r1, r3, #31
 800a82c:	d405      	bmi.n	800a83a <_vfiprintf_r+0x32>
 800a82e:	89ab      	ldrh	r3, [r5, #12]
 800a830:	059a      	lsls	r2, r3, #22
 800a832:	d402      	bmi.n	800a83a <_vfiprintf_r+0x32>
 800a834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a836:	f7ff ff60 	bl	800a6fa <__retarget_lock_acquire_recursive>
 800a83a:	89ab      	ldrh	r3, [r5, #12]
 800a83c:	071b      	lsls	r3, r3, #28
 800a83e:	d501      	bpl.n	800a844 <_vfiprintf_r+0x3c>
 800a840:	692b      	ldr	r3, [r5, #16]
 800a842:	b9eb      	cbnz	r3, 800a880 <_vfiprintf_r+0x78>
 800a844:	4629      	mov	r1, r5
 800a846:	4630      	mov	r0, r6
 800a848:	f000 f96e 	bl	800ab28 <__swsetup_r>
 800a84c:	b1c0      	cbz	r0, 800a880 <_vfiprintf_r+0x78>
 800a84e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a850:	07dc      	lsls	r4, r3, #31
 800a852:	d50e      	bpl.n	800a872 <_vfiprintf_r+0x6a>
 800a854:	f04f 30ff 	mov.w	r0, #4294967295
 800a858:	b01d      	add	sp, #116	; 0x74
 800a85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85e:	4b7b      	ldr	r3, [pc, #492]	; (800aa4c <_vfiprintf_r+0x244>)
 800a860:	429d      	cmp	r5, r3
 800a862:	d101      	bne.n	800a868 <_vfiprintf_r+0x60>
 800a864:	68b5      	ldr	r5, [r6, #8]
 800a866:	e7df      	b.n	800a828 <_vfiprintf_r+0x20>
 800a868:	4b79      	ldr	r3, [pc, #484]	; (800aa50 <_vfiprintf_r+0x248>)
 800a86a:	429d      	cmp	r5, r3
 800a86c:	bf08      	it	eq
 800a86e:	68f5      	ldreq	r5, [r6, #12]
 800a870:	e7da      	b.n	800a828 <_vfiprintf_r+0x20>
 800a872:	89ab      	ldrh	r3, [r5, #12]
 800a874:	0598      	lsls	r0, r3, #22
 800a876:	d4ed      	bmi.n	800a854 <_vfiprintf_r+0x4c>
 800a878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a87a:	f7ff ff3f 	bl	800a6fc <__retarget_lock_release_recursive>
 800a87e:	e7e9      	b.n	800a854 <_vfiprintf_r+0x4c>
 800a880:	2300      	movs	r3, #0
 800a882:	9309      	str	r3, [sp, #36]	; 0x24
 800a884:	2320      	movs	r3, #32
 800a886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a88a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a88e:	2330      	movs	r3, #48	; 0x30
 800a890:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa54 <_vfiprintf_r+0x24c>
 800a894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a898:	f04f 0901 	mov.w	r9, #1
 800a89c:	4623      	mov	r3, r4
 800a89e:	469a      	mov	sl, r3
 800a8a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8a4:	b10a      	cbz	r2, 800a8aa <_vfiprintf_r+0xa2>
 800a8a6:	2a25      	cmp	r2, #37	; 0x25
 800a8a8:	d1f9      	bne.n	800a89e <_vfiprintf_r+0x96>
 800a8aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a8ae:	d00b      	beq.n	800a8c8 <_vfiprintf_r+0xc0>
 800a8b0:	465b      	mov	r3, fp
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f7ff ff93 	bl	800a7e2 <__sfputs_r>
 800a8bc:	3001      	adds	r0, #1
 800a8be:	f000 80aa 	beq.w	800aa16 <_vfiprintf_r+0x20e>
 800a8c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8c4:	445a      	add	r2, fp
 800a8c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 80a2 	beq.w	800aa16 <_vfiprintf_r+0x20e>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8dc:	f10a 0a01 	add.w	sl, sl, #1
 800a8e0:	9304      	str	r3, [sp, #16]
 800a8e2:	9307      	str	r3, [sp, #28]
 800a8e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8e8:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ea:	4654      	mov	r4, sl
 800a8ec:	2205      	movs	r2, #5
 800a8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8f2:	4858      	ldr	r0, [pc, #352]	; (800aa54 <_vfiprintf_r+0x24c>)
 800a8f4:	f7f5 fc74 	bl	80001e0 <memchr>
 800a8f8:	9a04      	ldr	r2, [sp, #16]
 800a8fa:	b9d8      	cbnz	r0, 800a934 <_vfiprintf_r+0x12c>
 800a8fc:	06d1      	lsls	r1, r2, #27
 800a8fe:	bf44      	itt	mi
 800a900:	2320      	movmi	r3, #32
 800a902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a906:	0713      	lsls	r3, r2, #28
 800a908:	bf44      	itt	mi
 800a90a:	232b      	movmi	r3, #43	; 0x2b
 800a90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a910:	f89a 3000 	ldrb.w	r3, [sl]
 800a914:	2b2a      	cmp	r3, #42	; 0x2a
 800a916:	d015      	beq.n	800a944 <_vfiprintf_r+0x13c>
 800a918:	9a07      	ldr	r2, [sp, #28]
 800a91a:	4654      	mov	r4, sl
 800a91c:	2000      	movs	r0, #0
 800a91e:	f04f 0c0a 	mov.w	ip, #10
 800a922:	4621      	mov	r1, r4
 800a924:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a928:	3b30      	subs	r3, #48	; 0x30
 800a92a:	2b09      	cmp	r3, #9
 800a92c:	d94e      	bls.n	800a9cc <_vfiprintf_r+0x1c4>
 800a92e:	b1b0      	cbz	r0, 800a95e <_vfiprintf_r+0x156>
 800a930:	9207      	str	r2, [sp, #28]
 800a932:	e014      	b.n	800a95e <_vfiprintf_r+0x156>
 800a934:	eba0 0308 	sub.w	r3, r0, r8
 800a938:	fa09 f303 	lsl.w	r3, r9, r3
 800a93c:	4313      	orrs	r3, r2
 800a93e:	9304      	str	r3, [sp, #16]
 800a940:	46a2      	mov	sl, r4
 800a942:	e7d2      	b.n	800a8ea <_vfiprintf_r+0xe2>
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	1d19      	adds	r1, r3, #4
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	9103      	str	r1, [sp, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	bfbb      	ittet	lt
 800a950:	425b      	neglt	r3, r3
 800a952:	f042 0202 	orrlt.w	r2, r2, #2
 800a956:	9307      	strge	r3, [sp, #28]
 800a958:	9307      	strlt	r3, [sp, #28]
 800a95a:	bfb8      	it	lt
 800a95c:	9204      	strlt	r2, [sp, #16]
 800a95e:	7823      	ldrb	r3, [r4, #0]
 800a960:	2b2e      	cmp	r3, #46	; 0x2e
 800a962:	d10c      	bne.n	800a97e <_vfiprintf_r+0x176>
 800a964:	7863      	ldrb	r3, [r4, #1]
 800a966:	2b2a      	cmp	r3, #42	; 0x2a
 800a968:	d135      	bne.n	800a9d6 <_vfiprintf_r+0x1ce>
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	1d1a      	adds	r2, r3, #4
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	9203      	str	r2, [sp, #12]
 800a972:	2b00      	cmp	r3, #0
 800a974:	bfb8      	it	lt
 800a976:	f04f 33ff 	movlt.w	r3, #4294967295
 800a97a:	3402      	adds	r4, #2
 800a97c:	9305      	str	r3, [sp, #20]
 800a97e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa64 <_vfiprintf_r+0x25c>
 800a982:	7821      	ldrb	r1, [r4, #0]
 800a984:	2203      	movs	r2, #3
 800a986:	4650      	mov	r0, sl
 800a988:	f7f5 fc2a 	bl	80001e0 <memchr>
 800a98c:	b140      	cbz	r0, 800a9a0 <_vfiprintf_r+0x198>
 800a98e:	2340      	movs	r3, #64	; 0x40
 800a990:	eba0 000a 	sub.w	r0, r0, sl
 800a994:	fa03 f000 	lsl.w	r0, r3, r0
 800a998:	9b04      	ldr	r3, [sp, #16]
 800a99a:	4303      	orrs	r3, r0
 800a99c:	3401      	adds	r4, #1
 800a99e:	9304      	str	r3, [sp, #16]
 800a9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a4:	482c      	ldr	r0, [pc, #176]	; (800aa58 <_vfiprintf_r+0x250>)
 800a9a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9aa:	2206      	movs	r2, #6
 800a9ac:	f7f5 fc18 	bl	80001e0 <memchr>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d03f      	beq.n	800aa34 <_vfiprintf_r+0x22c>
 800a9b4:	4b29      	ldr	r3, [pc, #164]	; (800aa5c <_vfiprintf_r+0x254>)
 800a9b6:	bb1b      	cbnz	r3, 800aa00 <_vfiprintf_r+0x1f8>
 800a9b8:	9b03      	ldr	r3, [sp, #12]
 800a9ba:	3307      	adds	r3, #7
 800a9bc:	f023 0307 	bic.w	r3, r3, #7
 800a9c0:	3308      	adds	r3, #8
 800a9c2:	9303      	str	r3, [sp, #12]
 800a9c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c6:	443b      	add	r3, r7
 800a9c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ca:	e767      	b.n	800a89c <_vfiprintf_r+0x94>
 800a9cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	e7a5      	b.n	800a922 <_vfiprintf_r+0x11a>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	3401      	adds	r4, #1
 800a9da:	9305      	str	r3, [sp, #20]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	f04f 0c0a 	mov.w	ip, #10
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9e8:	3a30      	subs	r2, #48	; 0x30
 800a9ea:	2a09      	cmp	r2, #9
 800a9ec:	d903      	bls.n	800a9f6 <_vfiprintf_r+0x1ee>
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0c5      	beq.n	800a97e <_vfiprintf_r+0x176>
 800a9f2:	9105      	str	r1, [sp, #20]
 800a9f4:	e7c3      	b.n	800a97e <_vfiprintf_r+0x176>
 800a9f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e7f0      	b.n	800a9e2 <_vfiprintf_r+0x1da>
 800aa00:	ab03      	add	r3, sp, #12
 800aa02:	9300      	str	r3, [sp, #0]
 800aa04:	462a      	mov	r2, r5
 800aa06:	4b16      	ldr	r3, [pc, #88]	; (800aa60 <_vfiprintf_r+0x258>)
 800aa08:	a904      	add	r1, sp, #16
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7fd fec0 	bl	8008790 <_printf_float>
 800aa10:	4607      	mov	r7, r0
 800aa12:	1c78      	adds	r0, r7, #1
 800aa14:	d1d6      	bne.n	800a9c4 <_vfiprintf_r+0x1bc>
 800aa16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa18:	07d9      	lsls	r1, r3, #31
 800aa1a:	d405      	bmi.n	800aa28 <_vfiprintf_r+0x220>
 800aa1c:	89ab      	ldrh	r3, [r5, #12]
 800aa1e:	059a      	lsls	r2, r3, #22
 800aa20:	d402      	bmi.n	800aa28 <_vfiprintf_r+0x220>
 800aa22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa24:	f7ff fe6a 	bl	800a6fc <__retarget_lock_release_recursive>
 800aa28:	89ab      	ldrh	r3, [r5, #12]
 800aa2a:	065b      	lsls	r3, r3, #25
 800aa2c:	f53f af12 	bmi.w	800a854 <_vfiprintf_r+0x4c>
 800aa30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa32:	e711      	b.n	800a858 <_vfiprintf_r+0x50>
 800aa34:	ab03      	add	r3, sp, #12
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	462a      	mov	r2, r5
 800aa3a:	4b09      	ldr	r3, [pc, #36]	; (800aa60 <_vfiprintf_r+0x258>)
 800aa3c:	a904      	add	r1, sp, #16
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f7fe f94a 	bl	8008cd8 <_printf_i>
 800aa44:	e7e4      	b.n	800aa10 <_vfiprintf_r+0x208>
 800aa46:	bf00      	nop
 800aa48:	0800b744 	.word	0x0800b744
 800aa4c:	0800b764 	.word	0x0800b764
 800aa50:	0800b724 	.word	0x0800b724
 800aa54:	0800b5cc 	.word	0x0800b5cc
 800aa58:	0800b5d6 	.word	0x0800b5d6
 800aa5c:	08008791 	.word	0x08008791
 800aa60:	0800a7e3 	.word	0x0800a7e3
 800aa64:	0800b5d2 	.word	0x0800b5d2

0800aa68 <__swbuf_r>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	460e      	mov	r6, r1
 800aa6c:	4614      	mov	r4, r2
 800aa6e:	4605      	mov	r5, r0
 800aa70:	b118      	cbz	r0, 800aa7a <__swbuf_r+0x12>
 800aa72:	6983      	ldr	r3, [r0, #24]
 800aa74:	b90b      	cbnz	r3, 800aa7a <__swbuf_r+0x12>
 800aa76:	f000 f9e7 	bl	800ae48 <__sinit>
 800aa7a:	4b21      	ldr	r3, [pc, #132]	; (800ab00 <__swbuf_r+0x98>)
 800aa7c:	429c      	cmp	r4, r3
 800aa7e:	d12b      	bne.n	800aad8 <__swbuf_r+0x70>
 800aa80:	686c      	ldr	r4, [r5, #4]
 800aa82:	69a3      	ldr	r3, [r4, #24]
 800aa84:	60a3      	str	r3, [r4, #8]
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	071a      	lsls	r2, r3, #28
 800aa8a:	d52f      	bpl.n	800aaec <__swbuf_r+0x84>
 800aa8c:	6923      	ldr	r3, [r4, #16]
 800aa8e:	b36b      	cbz	r3, 800aaec <__swbuf_r+0x84>
 800aa90:	6923      	ldr	r3, [r4, #16]
 800aa92:	6820      	ldr	r0, [r4, #0]
 800aa94:	1ac0      	subs	r0, r0, r3
 800aa96:	6963      	ldr	r3, [r4, #20]
 800aa98:	b2f6      	uxtb	r6, r6
 800aa9a:	4283      	cmp	r3, r0
 800aa9c:	4637      	mov	r7, r6
 800aa9e:	dc04      	bgt.n	800aaaa <__swbuf_r+0x42>
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 f93c 	bl	800ad20 <_fflush_r>
 800aaa8:	bb30      	cbnz	r0, 800aaf8 <__swbuf_r+0x90>
 800aaaa:	68a3      	ldr	r3, [r4, #8]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	60a3      	str	r3, [r4, #8]
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	1c5a      	adds	r2, r3, #1
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	701e      	strb	r6, [r3, #0]
 800aab8:	6963      	ldr	r3, [r4, #20]
 800aaba:	3001      	adds	r0, #1
 800aabc:	4283      	cmp	r3, r0
 800aabe:	d004      	beq.n	800aaca <__swbuf_r+0x62>
 800aac0:	89a3      	ldrh	r3, [r4, #12]
 800aac2:	07db      	lsls	r3, r3, #31
 800aac4:	d506      	bpl.n	800aad4 <__swbuf_r+0x6c>
 800aac6:	2e0a      	cmp	r6, #10
 800aac8:	d104      	bne.n	800aad4 <__swbuf_r+0x6c>
 800aaca:	4621      	mov	r1, r4
 800aacc:	4628      	mov	r0, r5
 800aace:	f000 f927 	bl	800ad20 <_fflush_r>
 800aad2:	b988      	cbnz	r0, 800aaf8 <__swbuf_r+0x90>
 800aad4:	4638      	mov	r0, r7
 800aad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aad8:	4b0a      	ldr	r3, [pc, #40]	; (800ab04 <__swbuf_r+0x9c>)
 800aada:	429c      	cmp	r4, r3
 800aadc:	d101      	bne.n	800aae2 <__swbuf_r+0x7a>
 800aade:	68ac      	ldr	r4, [r5, #8]
 800aae0:	e7cf      	b.n	800aa82 <__swbuf_r+0x1a>
 800aae2:	4b09      	ldr	r3, [pc, #36]	; (800ab08 <__swbuf_r+0xa0>)
 800aae4:	429c      	cmp	r4, r3
 800aae6:	bf08      	it	eq
 800aae8:	68ec      	ldreq	r4, [r5, #12]
 800aaea:	e7ca      	b.n	800aa82 <__swbuf_r+0x1a>
 800aaec:	4621      	mov	r1, r4
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f000 f81a 	bl	800ab28 <__swsetup_r>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d0cb      	beq.n	800aa90 <__swbuf_r+0x28>
 800aaf8:	f04f 37ff 	mov.w	r7, #4294967295
 800aafc:	e7ea      	b.n	800aad4 <__swbuf_r+0x6c>
 800aafe:	bf00      	nop
 800ab00:	0800b744 	.word	0x0800b744
 800ab04:	0800b764 	.word	0x0800b764
 800ab08:	0800b724 	.word	0x0800b724

0800ab0c <__ascii_wctomb>:
 800ab0c:	b149      	cbz	r1, 800ab22 <__ascii_wctomb+0x16>
 800ab0e:	2aff      	cmp	r2, #255	; 0xff
 800ab10:	bf85      	ittet	hi
 800ab12:	238a      	movhi	r3, #138	; 0x8a
 800ab14:	6003      	strhi	r3, [r0, #0]
 800ab16:	700a      	strbls	r2, [r1, #0]
 800ab18:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab1c:	bf98      	it	ls
 800ab1e:	2001      	movls	r0, #1
 800ab20:	4770      	bx	lr
 800ab22:	4608      	mov	r0, r1
 800ab24:	4770      	bx	lr
	...

0800ab28 <__swsetup_r>:
 800ab28:	4b32      	ldr	r3, [pc, #200]	; (800abf4 <__swsetup_r+0xcc>)
 800ab2a:	b570      	push	{r4, r5, r6, lr}
 800ab2c:	681d      	ldr	r5, [r3, #0]
 800ab2e:	4606      	mov	r6, r0
 800ab30:	460c      	mov	r4, r1
 800ab32:	b125      	cbz	r5, 800ab3e <__swsetup_r+0x16>
 800ab34:	69ab      	ldr	r3, [r5, #24]
 800ab36:	b913      	cbnz	r3, 800ab3e <__swsetup_r+0x16>
 800ab38:	4628      	mov	r0, r5
 800ab3a:	f000 f985 	bl	800ae48 <__sinit>
 800ab3e:	4b2e      	ldr	r3, [pc, #184]	; (800abf8 <__swsetup_r+0xd0>)
 800ab40:	429c      	cmp	r4, r3
 800ab42:	d10f      	bne.n	800ab64 <__swsetup_r+0x3c>
 800ab44:	686c      	ldr	r4, [r5, #4]
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab4c:	0719      	lsls	r1, r3, #28
 800ab4e:	d42c      	bmi.n	800abaa <__swsetup_r+0x82>
 800ab50:	06dd      	lsls	r5, r3, #27
 800ab52:	d411      	bmi.n	800ab78 <__swsetup_r+0x50>
 800ab54:	2309      	movs	r3, #9
 800ab56:	6033      	str	r3, [r6, #0]
 800ab58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab5c:	81a3      	strh	r3, [r4, #12]
 800ab5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab62:	e03e      	b.n	800abe2 <__swsetup_r+0xba>
 800ab64:	4b25      	ldr	r3, [pc, #148]	; (800abfc <__swsetup_r+0xd4>)
 800ab66:	429c      	cmp	r4, r3
 800ab68:	d101      	bne.n	800ab6e <__swsetup_r+0x46>
 800ab6a:	68ac      	ldr	r4, [r5, #8]
 800ab6c:	e7eb      	b.n	800ab46 <__swsetup_r+0x1e>
 800ab6e:	4b24      	ldr	r3, [pc, #144]	; (800ac00 <__swsetup_r+0xd8>)
 800ab70:	429c      	cmp	r4, r3
 800ab72:	bf08      	it	eq
 800ab74:	68ec      	ldreq	r4, [r5, #12]
 800ab76:	e7e6      	b.n	800ab46 <__swsetup_r+0x1e>
 800ab78:	0758      	lsls	r0, r3, #29
 800ab7a:	d512      	bpl.n	800aba2 <__swsetup_r+0x7a>
 800ab7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab7e:	b141      	cbz	r1, 800ab92 <__swsetup_r+0x6a>
 800ab80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab84:	4299      	cmp	r1, r3
 800ab86:	d002      	beq.n	800ab8e <__swsetup_r+0x66>
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f7fd fc81 	bl	8008490 <_free_r>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	6363      	str	r3, [r4, #52]	; 0x34
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab98:	81a3      	strh	r3, [r4, #12]
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	6063      	str	r3, [r4, #4]
 800ab9e:	6923      	ldr	r3, [r4, #16]
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	f043 0308 	orr.w	r3, r3, #8
 800aba8:	81a3      	strh	r3, [r4, #12]
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	b94b      	cbnz	r3, 800abc2 <__swsetup_r+0x9a>
 800abae:	89a3      	ldrh	r3, [r4, #12]
 800abb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abb8:	d003      	beq.n	800abc2 <__swsetup_r+0x9a>
 800abba:	4621      	mov	r1, r4
 800abbc:	4630      	mov	r0, r6
 800abbe:	f000 fa05 	bl	800afcc <__smakebuf_r>
 800abc2:	89a0      	ldrh	r0, [r4, #12]
 800abc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abc8:	f010 0301 	ands.w	r3, r0, #1
 800abcc:	d00a      	beq.n	800abe4 <__swsetup_r+0xbc>
 800abce:	2300      	movs	r3, #0
 800abd0:	60a3      	str	r3, [r4, #8]
 800abd2:	6963      	ldr	r3, [r4, #20]
 800abd4:	425b      	negs	r3, r3
 800abd6:	61a3      	str	r3, [r4, #24]
 800abd8:	6923      	ldr	r3, [r4, #16]
 800abda:	b943      	cbnz	r3, 800abee <__swsetup_r+0xc6>
 800abdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abe0:	d1ba      	bne.n	800ab58 <__swsetup_r+0x30>
 800abe2:	bd70      	pop	{r4, r5, r6, pc}
 800abe4:	0781      	lsls	r1, r0, #30
 800abe6:	bf58      	it	pl
 800abe8:	6963      	ldrpl	r3, [r4, #20]
 800abea:	60a3      	str	r3, [r4, #8]
 800abec:	e7f4      	b.n	800abd8 <__swsetup_r+0xb0>
 800abee:	2000      	movs	r0, #0
 800abf0:	e7f7      	b.n	800abe2 <__swsetup_r+0xba>
 800abf2:	bf00      	nop
 800abf4:	2000000c 	.word	0x2000000c
 800abf8:	0800b744 	.word	0x0800b744
 800abfc:	0800b764 	.word	0x0800b764
 800ac00:	0800b724 	.word	0x0800b724

0800ac04 <abort>:
 800ac04:	b508      	push	{r3, lr}
 800ac06:	2006      	movs	r0, #6
 800ac08:	f000 fa50 	bl	800b0ac <raise>
 800ac0c:	2001      	movs	r0, #1
 800ac0e:	f7f7 fbbf 	bl	8002390 <_exit>
	...

0800ac14 <__sflush_r>:
 800ac14:	898a      	ldrh	r2, [r1, #12]
 800ac16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	0710      	lsls	r0, r2, #28
 800ac1e:	460c      	mov	r4, r1
 800ac20:	d458      	bmi.n	800acd4 <__sflush_r+0xc0>
 800ac22:	684b      	ldr	r3, [r1, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	dc05      	bgt.n	800ac34 <__sflush_r+0x20>
 800ac28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	dc02      	bgt.n	800ac34 <__sflush_r+0x20>
 800ac2e:	2000      	movs	r0, #0
 800ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac36:	2e00      	cmp	r6, #0
 800ac38:	d0f9      	beq.n	800ac2e <__sflush_r+0x1a>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac40:	682f      	ldr	r7, [r5, #0]
 800ac42:	602b      	str	r3, [r5, #0]
 800ac44:	d032      	beq.n	800acac <__sflush_r+0x98>
 800ac46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	075a      	lsls	r2, r3, #29
 800ac4c:	d505      	bpl.n	800ac5a <__sflush_r+0x46>
 800ac4e:	6863      	ldr	r3, [r4, #4]
 800ac50:	1ac0      	subs	r0, r0, r3
 800ac52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac54:	b10b      	cbz	r3, 800ac5a <__sflush_r+0x46>
 800ac56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac58:	1ac0      	subs	r0, r0, r3
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac60:	6a21      	ldr	r1, [r4, #32]
 800ac62:	4628      	mov	r0, r5
 800ac64:	47b0      	blx	r6
 800ac66:	1c43      	adds	r3, r0, #1
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	d106      	bne.n	800ac7a <__sflush_r+0x66>
 800ac6c:	6829      	ldr	r1, [r5, #0]
 800ac6e:	291d      	cmp	r1, #29
 800ac70:	d82c      	bhi.n	800accc <__sflush_r+0xb8>
 800ac72:	4a2a      	ldr	r2, [pc, #168]	; (800ad1c <__sflush_r+0x108>)
 800ac74:	40ca      	lsrs	r2, r1
 800ac76:	07d6      	lsls	r6, r2, #31
 800ac78:	d528      	bpl.n	800accc <__sflush_r+0xb8>
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	6062      	str	r2, [r4, #4]
 800ac7e:	04d9      	lsls	r1, r3, #19
 800ac80:	6922      	ldr	r2, [r4, #16]
 800ac82:	6022      	str	r2, [r4, #0]
 800ac84:	d504      	bpl.n	800ac90 <__sflush_r+0x7c>
 800ac86:	1c42      	adds	r2, r0, #1
 800ac88:	d101      	bne.n	800ac8e <__sflush_r+0x7a>
 800ac8a:	682b      	ldr	r3, [r5, #0]
 800ac8c:	b903      	cbnz	r3, 800ac90 <__sflush_r+0x7c>
 800ac8e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac92:	602f      	str	r7, [r5, #0]
 800ac94:	2900      	cmp	r1, #0
 800ac96:	d0ca      	beq.n	800ac2e <__sflush_r+0x1a>
 800ac98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac9c:	4299      	cmp	r1, r3
 800ac9e:	d002      	beq.n	800aca6 <__sflush_r+0x92>
 800aca0:	4628      	mov	r0, r5
 800aca2:	f7fd fbf5 	bl	8008490 <_free_r>
 800aca6:	2000      	movs	r0, #0
 800aca8:	6360      	str	r0, [r4, #52]	; 0x34
 800acaa:	e7c1      	b.n	800ac30 <__sflush_r+0x1c>
 800acac:	6a21      	ldr	r1, [r4, #32]
 800acae:	2301      	movs	r3, #1
 800acb0:	4628      	mov	r0, r5
 800acb2:	47b0      	blx	r6
 800acb4:	1c41      	adds	r1, r0, #1
 800acb6:	d1c7      	bne.n	800ac48 <__sflush_r+0x34>
 800acb8:	682b      	ldr	r3, [r5, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0c4      	beq.n	800ac48 <__sflush_r+0x34>
 800acbe:	2b1d      	cmp	r3, #29
 800acc0:	d001      	beq.n	800acc6 <__sflush_r+0xb2>
 800acc2:	2b16      	cmp	r3, #22
 800acc4:	d101      	bne.n	800acca <__sflush_r+0xb6>
 800acc6:	602f      	str	r7, [r5, #0]
 800acc8:	e7b1      	b.n	800ac2e <__sflush_r+0x1a>
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd0:	81a3      	strh	r3, [r4, #12]
 800acd2:	e7ad      	b.n	800ac30 <__sflush_r+0x1c>
 800acd4:	690f      	ldr	r7, [r1, #16]
 800acd6:	2f00      	cmp	r7, #0
 800acd8:	d0a9      	beq.n	800ac2e <__sflush_r+0x1a>
 800acda:	0793      	lsls	r3, r2, #30
 800acdc:	680e      	ldr	r6, [r1, #0]
 800acde:	bf08      	it	eq
 800ace0:	694b      	ldreq	r3, [r1, #20]
 800ace2:	600f      	str	r7, [r1, #0]
 800ace4:	bf18      	it	ne
 800ace6:	2300      	movne	r3, #0
 800ace8:	eba6 0807 	sub.w	r8, r6, r7
 800acec:	608b      	str	r3, [r1, #8]
 800acee:	f1b8 0f00 	cmp.w	r8, #0
 800acf2:	dd9c      	ble.n	800ac2e <__sflush_r+0x1a>
 800acf4:	6a21      	ldr	r1, [r4, #32]
 800acf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acf8:	4643      	mov	r3, r8
 800acfa:	463a      	mov	r2, r7
 800acfc:	4628      	mov	r0, r5
 800acfe:	47b0      	blx	r6
 800ad00:	2800      	cmp	r0, #0
 800ad02:	dc06      	bgt.n	800ad12 <__sflush_r+0xfe>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad0a:	81a3      	strh	r3, [r4, #12]
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	e78e      	b.n	800ac30 <__sflush_r+0x1c>
 800ad12:	4407      	add	r7, r0
 800ad14:	eba8 0800 	sub.w	r8, r8, r0
 800ad18:	e7e9      	b.n	800acee <__sflush_r+0xda>
 800ad1a:	bf00      	nop
 800ad1c:	20400001 	.word	0x20400001

0800ad20 <_fflush_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	690b      	ldr	r3, [r1, #16]
 800ad24:	4605      	mov	r5, r0
 800ad26:	460c      	mov	r4, r1
 800ad28:	b913      	cbnz	r3, 800ad30 <_fflush_r+0x10>
 800ad2a:	2500      	movs	r5, #0
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	b118      	cbz	r0, 800ad3a <_fflush_r+0x1a>
 800ad32:	6983      	ldr	r3, [r0, #24]
 800ad34:	b90b      	cbnz	r3, 800ad3a <_fflush_r+0x1a>
 800ad36:	f000 f887 	bl	800ae48 <__sinit>
 800ad3a:	4b14      	ldr	r3, [pc, #80]	; (800ad8c <_fflush_r+0x6c>)
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	d11b      	bne.n	800ad78 <_fflush_r+0x58>
 800ad40:	686c      	ldr	r4, [r5, #4]
 800ad42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d0ef      	beq.n	800ad2a <_fflush_r+0xa>
 800ad4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad4c:	07d0      	lsls	r0, r2, #31
 800ad4e:	d404      	bmi.n	800ad5a <_fflush_r+0x3a>
 800ad50:	0599      	lsls	r1, r3, #22
 800ad52:	d402      	bmi.n	800ad5a <_fflush_r+0x3a>
 800ad54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad56:	f7ff fcd0 	bl	800a6fa <__retarget_lock_acquire_recursive>
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	f7ff ff59 	bl	800ac14 <__sflush_r>
 800ad62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad64:	07da      	lsls	r2, r3, #31
 800ad66:	4605      	mov	r5, r0
 800ad68:	d4e0      	bmi.n	800ad2c <_fflush_r+0xc>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	059b      	lsls	r3, r3, #22
 800ad6e:	d4dd      	bmi.n	800ad2c <_fflush_r+0xc>
 800ad70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad72:	f7ff fcc3 	bl	800a6fc <__retarget_lock_release_recursive>
 800ad76:	e7d9      	b.n	800ad2c <_fflush_r+0xc>
 800ad78:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <_fflush_r+0x70>)
 800ad7a:	429c      	cmp	r4, r3
 800ad7c:	d101      	bne.n	800ad82 <_fflush_r+0x62>
 800ad7e:	68ac      	ldr	r4, [r5, #8]
 800ad80:	e7df      	b.n	800ad42 <_fflush_r+0x22>
 800ad82:	4b04      	ldr	r3, [pc, #16]	; (800ad94 <_fflush_r+0x74>)
 800ad84:	429c      	cmp	r4, r3
 800ad86:	bf08      	it	eq
 800ad88:	68ec      	ldreq	r4, [r5, #12]
 800ad8a:	e7da      	b.n	800ad42 <_fflush_r+0x22>
 800ad8c:	0800b744 	.word	0x0800b744
 800ad90:	0800b764 	.word	0x0800b764
 800ad94:	0800b724 	.word	0x0800b724

0800ad98 <std>:
 800ad98:	2300      	movs	r3, #0
 800ad9a:	b510      	push	{r4, lr}
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	e9c0 3300 	strd	r3, r3, [r0]
 800ada2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ada6:	6083      	str	r3, [r0, #8]
 800ada8:	8181      	strh	r1, [r0, #12]
 800adaa:	6643      	str	r3, [r0, #100]	; 0x64
 800adac:	81c2      	strh	r2, [r0, #14]
 800adae:	6183      	str	r3, [r0, #24]
 800adb0:	4619      	mov	r1, r3
 800adb2:	2208      	movs	r2, #8
 800adb4:	305c      	adds	r0, #92	; 0x5c
 800adb6:	f7fd fb63 	bl	8008480 <memset>
 800adba:	4b05      	ldr	r3, [pc, #20]	; (800add0 <std+0x38>)
 800adbc:	6263      	str	r3, [r4, #36]	; 0x24
 800adbe:	4b05      	ldr	r3, [pc, #20]	; (800add4 <std+0x3c>)
 800adc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800adc2:	4b05      	ldr	r3, [pc, #20]	; (800add8 <std+0x40>)
 800adc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adc6:	4b05      	ldr	r3, [pc, #20]	; (800addc <std+0x44>)
 800adc8:	6224      	str	r4, [r4, #32]
 800adca:	6323      	str	r3, [r4, #48]	; 0x30
 800adcc:	bd10      	pop	{r4, pc}
 800adce:	bf00      	nop
 800add0:	0800b0e5 	.word	0x0800b0e5
 800add4:	0800b107 	.word	0x0800b107
 800add8:	0800b13f 	.word	0x0800b13f
 800addc:	0800b163 	.word	0x0800b163

0800ade0 <_cleanup_r>:
 800ade0:	4901      	ldr	r1, [pc, #4]	; (800ade8 <_cleanup_r+0x8>)
 800ade2:	f000 b8af 	b.w	800af44 <_fwalk_reent>
 800ade6:	bf00      	nop
 800ade8:	0800ad21 	.word	0x0800ad21

0800adec <__sfmoreglue>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	2268      	movs	r2, #104	; 0x68
 800adf0:	1e4d      	subs	r5, r1, #1
 800adf2:	4355      	muls	r5, r2
 800adf4:	460e      	mov	r6, r1
 800adf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adfa:	f7fd fbb5 	bl	8008568 <_malloc_r>
 800adfe:	4604      	mov	r4, r0
 800ae00:	b140      	cbz	r0, 800ae14 <__sfmoreglue+0x28>
 800ae02:	2100      	movs	r1, #0
 800ae04:	e9c0 1600 	strd	r1, r6, [r0]
 800ae08:	300c      	adds	r0, #12
 800ae0a:	60a0      	str	r0, [r4, #8]
 800ae0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae10:	f7fd fb36 	bl	8008480 <memset>
 800ae14:	4620      	mov	r0, r4
 800ae16:	bd70      	pop	{r4, r5, r6, pc}

0800ae18 <__sfp_lock_acquire>:
 800ae18:	4801      	ldr	r0, [pc, #4]	; (800ae20 <__sfp_lock_acquire+0x8>)
 800ae1a:	f7ff bc6e 	b.w	800a6fa <__retarget_lock_acquire_recursive>
 800ae1e:	bf00      	nop
 800ae20:	20000525 	.word	0x20000525

0800ae24 <__sfp_lock_release>:
 800ae24:	4801      	ldr	r0, [pc, #4]	; (800ae2c <__sfp_lock_release+0x8>)
 800ae26:	f7ff bc69 	b.w	800a6fc <__retarget_lock_release_recursive>
 800ae2a:	bf00      	nop
 800ae2c:	20000525 	.word	0x20000525

0800ae30 <__sinit_lock_acquire>:
 800ae30:	4801      	ldr	r0, [pc, #4]	; (800ae38 <__sinit_lock_acquire+0x8>)
 800ae32:	f7ff bc62 	b.w	800a6fa <__retarget_lock_acquire_recursive>
 800ae36:	bf00      	nop
 800ae38:	20000526 	.word	0x20000526

0800ae3c <__sinit_lock_release>:
 800ae3c:	4801      	ldr	r0, [pc, #4]	; (800ae44 <__sinit_lock_release+0x8>)
 800ae3e:	f7ff bc5d 	b.w	800a6fc <__retarget_lock_release_recursive>
 800ae42:	bf00      	nop
 800ae44:	20000526 	.word	0x20000526

0800ae48 <__sinit>:
 800ae48:	b510      	push	{r4, lr}
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	f7ff fff0 	bl	800ae30 <__sinit_lock_acquire>
 800ae50:	69a3      	ldr	r3, [r4, #24]
 800ae52:	b11b      	cbz	r3, 800ae5c <__sinit+0x14>
 800ae54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae58:	f7ff bff0 	b.w	800ae3c <__sinit_lock_release>
 800ae5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae60:	6523      	str	r3, [r4, #80]	; 0x50
 800ae62:	4b13      	ldr	r3, [pc, #76]	; (800aeb0 <__sinit+0x68>)
 800ae64:	4a13      	ldr	r2, [pc, #76]	; (800aeb4 <__sinit+0x6c>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae6a:	42a3      	cmp	r3, r4
 800ae6c:	bf04      	itt	eq
 800ae6e:	2301      	moveq	r3, #1
 800ae70:	61a3      	streq	r3, [r4, #24]
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 f820 	bl	800aeb8 <__sfp>
 800ae78:	6060      	str	r0, [r4, #4]
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 f81c 	bl	800aeb8 <__sfp>
 800ae80:	60a0      	str	r0, [r4, #8]
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 f818 	bl	800aeb8 <__sfp>
 800ae88:	2200      	movs	r2, #0
 800ae8a:	60e0      	str	r0, [r4, #12]
 800ae8c:	2104      	movs	r1, #4
 800ae8e:	6860      	ldr	r0, [r4, #4]
 800ae90:	f7ff ff82 	bl	800ad98 <std>
 800ae94:	68a0      	ldr	r0, [r4, #8]
 800ae96:	2201      	movs	r2, #1
 800ae98:	2109      	movs	r1, #9
 800ae9a:	f7ff ff7d 	bl	800ad98 <std>
 800ae9e:	68e0      	ldr	r0, [r4, #12]
 800aea0:	2202      	movs	r2, #2
 800aea2:	2112      	movs	r1, #18
 800aea4:	f7ff ff78 	bl	800ad98 <std>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	61a3      	str	r3, [r4, #24]
 800aeac:	e7d2      	b.n	800ae54 <__sinit+0xc>
 800aeae:	bf00      	nop
 800aeb0:	0800b3ac 	.word	0x0800b3ac
 800aeb4:	0800ade1 	.word	0x0800ade1

0800aeb8 <__sfp>:
 800aeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeba:	4607      	mov	r7, r0
 800aebc:	f7ff ffac 	bl	800ae18 <__sfp_lock_acquire>
 800aec0:	4b1e      	ldr	r3, [pc, #120]	; (800af3c <__sfp+0x84>)
 800aec2:	681e      	ldr	r6, [r3, #0]
 800aec4:	69b3      	ldr	r3, [r6, #24]
 800aec6:	b913      	cbnz	r3, 800aece <__sfp+0x16>
 800aec8:	4630      	mov	r0, r6
 800aeca:	f7ff ffbd 	bl	800ae48 <__sinit>
 800aece:	3648      	adds	r6, #72	; 0x48
 800aed0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	d503      	bpl.n	800aee0 <__sfp+0x28>
 800aed8:	6833      	ldr	r3, [r6, #0]
 800aeda:	b30b      	cbz	r3, 800af20 <__sfp+0x68>
 800aedc:	6836      	ldr	r6, [r6, #0]
 800aede:	e7f7      	b.n	800aed0 <__sfp+0x18>
 800aee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aee4:	b9d5      	cbnz	r5, 800af1c <__sfp+0x64>
 800aee6:	4b16      	ldr	r3, [pc, #88]	; (800af40 <__sfp+0x88>)
 800aee8:	60e3      	str	r3, [r4, #12]
 800aeea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aeee:	6665      	str	r5, [r4, #100]	; 0x64
 800aef0:	f7ff fc02 	bl	800a6f8 <__retarget_lock_init_recursive>
 800aef4:	f7ff ff96 	bl	800ae24 <__sfp_lock_release>
 800aef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aefc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af00:	6025      	str	r5, [r4, #0]
 800af02:	61a5      	str	r5, [r4, #24]
 800af04:	2208      	movs	r2, #8
 800af06:	4629      	mov	r1, r5
 800af08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af0c:	f7fd fab8 	bl	8008480 <memset>
 800af10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af18:	4620      	mov	r0, r4
 800af1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af1c:	3468      	adds	r4, #104	; 0x68
 800af1e:	e7d9      	b.n	800aed4 <__sfp+0x1c>
 800af20:	2104      	movs	r1, #4
 800af22:	4638      	mov	r0, r7
 800af24:	f7ff ff62 	bl	800adec <__sfmoreglue>
 800af28:	4604      	mov	r4, r0
 800af2a:	6030      	str	r0, [r6, #0]
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d1d5      	bne.n	800aedc <__sfp+0x24>
 800af30:	f7ff ff78 	bl	800ae24 <__sfp_lock_release>
 800af34:	230c      	movs	r3, #12
 800af36:	603b      	str	r3, [r7, #0]
 800af38:	e7ee      	b.n	800af18 <__sfp+0x60>
 800af3a:	bf00      	nop
 800af3c:	0800b3ac 	.word	0x0800b3ac
 800af40:	ffff0001 	.word	0xffff0001

0800af44 <_fwalk_reent>:
 800af44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af48:	4606      	mov	r6, r0
 800af4a:	4688      	mov	r8, r1
 800af4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af50:	2700      	movs	r7, #0
 800af52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af56:	f1b9 0901 	subs.w	r9, r9, #1
 800af5a:	d505      	bpl.n	800af68 <_fwalk_reent+0x24>
 800af5c:	6824      	ldr	r4, [r4, #0]
 800af5e:	2c00      	cmp	r4, #0
 800af60:	d1f7      	bne.n	800af52 <_fwalk_reent+0xe>
 800af62:	4638      	mov	r0, r7
 800af64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af68:	89ab      	ldrh	r3, [r5, #12]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d907      	bls.n	800af7e <_fwalk_reent+0x3a>
 800af6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af72:	3301      	adds	r3, #1
 800af74:	d003      	beq.n	800af7e <_fwalk_reent+0x3a>
 800af76:	4629      	mov	r1, r5
 800af78:	4630      	mov	r0, r6
 800af7a:	47c0      	blx	r8
 800af7c:	4307      	orrs	r7, r0
 800af7e:	3568      	adds	r5, #104	; 0x68
 800af80:	e7e9      	b.n	800af56 <_fwalk_reent+0x12>

0800af82 <__swhatbuf_r>:
 800af82:	b570      	push	{r4, r5, r6, lr}
 800af84:	460e      	mov	r6, r1
 800af86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af8a:	2900      	cmp	r1, #0
 800af8c:	b096      	sub	sp, #88	; 0x58
 800af8e:	4614      	mov	r4, r2
 800af90:	461d      	mov	r5, r3
 800af92:	da08      	bge.n	800afa6 <__swhatbuf_r+0x24>
 800af94:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	602a      	str	r2, [r5, #0]
 800af9c:	061a      	lsls	r2, r3, #24
 800af9e:	d410      	bmi.n	800afc2 <__swhatbuf_r+0x40>
 800afa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afa4:	e00e      	b.n	800afc4 <__swhatbuf_r+0x42>
 800afa6:	466a      	mov	r2, sp
 800afa8:	f000 f902 	bl	800b1b0 <_fstat_r>
 800afac:	2800      	cmp	r0, #0
 800afae:	dbf1      	blt.n	800af94 <__swhatbuf_r+0x12>
 800afb0:	9a01      	ldr	r2, [sp, #4]
 800afb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afba:	425a      	negs	r2, r3
 800afbc:	415a      	adcs	r2, r3
 800afbe:	602a      	str	r2, [r5, #0]
 800afc0:	e7ee      	b.n	800afa0 <__swhatbuf_r+0x1e>
 800afc2:	2340      	movs	r3, #64	; 0x40
 800afc4:	2000      	movs	r0, #0
 800afc6:	6023      	str	r3, [r4, #0]
 800afc8:	b016      	add	sp, #88	; 0x58
 800afca:	bd70      	pop	{r4, r5, r6, pc}

0800afcc <__smakebuf_r>:
 800afcc:	898b      	ldrh	r3, [r1, #12]
 800afce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afd0:	079d      	lsls	r5, r3, #30
 800afd2:	4606      	mov	r6, r0
 800afd4:	460c      	mov	r4, r1
 800afd6:	d507      	bpl.n	800afe8 <__smakebuf_r+0x1c>
 800afd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	6123      	str	r3, [r4, #16]
 800afe0:	2301      	movs	r3, #1
 800afe2:	6163      	str	r3, [r4, #20]
 800afe4:	b002      	add	sp, #8
 800afe6:	bd70      	pop	{r4, r5, r6, pc}
 800afe8:	ab01      	add	r3, sp, #4
 800afea:	466a      	mov	r2, sp
 800afec:	f7ff ffc9 	bl	800af82 <__swhatbuf_r>
 800aff0:	9900      	ldr	r1, [sp, #0]
 800aff2:	4605      	mov	r5, r0
 800aff4:	4630      	mov	r0, r6
 800aff6:	f7fd fab7 	bl	8008568 <_malloc_r>
 800affa:	b948      	cbnz	r0, 800b010 <__smakebuf_r+0x44>
 800affc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b000:	059a      	lsls	r2, r3, #22
 800b002:	d4ef      	bmi.n	800afe4 <__smakebuf_r+0x18>
 800b004:	f023 0303 	bic.w	r3, r3, #3
 800b008:	f043 0302 	orr.w	r3, r3, #2
 800b00c:	81a3      	strh	r3, [r4, #12]
 800b00e:	e7e3      	b.n	800afd8 <__smakebuf_r+0xc>
 800b010:	4b0d      	ldr	r3, [pc, #52]	; (800b048 <__smakebuf_r+0x7c>)
 800b012:	62b3      	str	r3, [r6, #40]	; 0x28
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	6020      	str	r0, [r4, #0]
 800b018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b01c:	81a3      	strh	r3, [r4, #12]
 800b01e:	9b00      	ldr	r3, [sp, #0]
 800b020:	6163      	str	r3, [r4, #20]
 800b022:	9b01      	ldr	r3, [sp, #4]
 800b024:	6120      	str	r0, [r4, #16]
 800b026:	b15b      	cbz	r3, 800b040 <__smakebuf_r+0x74>
 800b028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b02c:	4630      	mov	r0, r6
 800b02e:	f000 f8d1 	bl	800b1d4 <_isatty_r>
 800b032:	b128      	cbz	r0, 800b040 <__smakebuf_r+0x74>
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	f023 0303 	bic.w	r3, r3, #3
 800b03a:	f043 0301 	orr.w	r3, r3, #1
 800b03e:	81a3      	strh	r3, [r4, #12]
 800b040:	89a0      	ldrh	r0, [r4, #12]
 800b042:	4305      	orrs	r5, r0
 800b044:	81a5      	strh	r5, [r4, #12]
 800b046:	e7cd      	b.n	800afe4 <__smakebuf_r+0x18>
 800b048:	0800ade1 	.word	0x0800ade1

0800b04c <_malloc_usable_size_r>:
 800b04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b050:	1f18      	subs	r0, r3, #4
 800b052:	2b00      	cmp	r3, #0
 800b054:	bfbc      	itt	lt
 800b056:	580b      	ldrlt	r3, [r1, r0]
 800b058:	18c0      	addlt	r0, r0, r3
 800b05a:	4770      	bx	lr

0800b05c <_raise_r>:
 800b05c:	291f      	cmp	r1, #31
 800b05e:	b538      	push	{r3, r4, r5, lr}
 800b060:	4604      	mov	r4, r0
 800b062:	460d      	mov	r5, r1
 800b064:	d904      	bls.n	800b070 <_raise_r+0x14>
 800b066:	2316      	movs	r3, #22
 800b068:	6003      	str	r3, [r0, #0]
 800b06a:	f04f 30ff 	mov.w	r0, #4294967295
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b072:	b112      	cbz	r2, 800b07a <_raise_r+0x1e>
 800b074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b078:	b94b      	cbnz	r3, 800b08e <_raise_r+0x32>
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 f830 	bl	800b0e0 <_getpid_r>
 800b080:	462a      	mov	r2, r5
 800b082:	4601      	mov	r1, r0
 800b084:	4620      	mov	r0, r4
 800b086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b08a:	f000 b817 	b.w	800b0bc <_kill_r>
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d00a      	beq.n	800b0a8 <_raise_r+0x4c>
 800b092:	1c59      	adds	r1, r3, #1
 800b094:	d103      	bne.n	800b09e <_raise_r+0x42>
 800b096:	2316      	movs	r3, #22
 800b098:	6003      	str	r3, [r0, #0]
 800b09a:	2001      	movs	r0, #1
 800b09c:	e7e7      	b.n	800b06e <_raise_r+0x12>
 800b09e:	2400      	movs	r4, #0
 800b0a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	4798      	blx	r3
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	e7e0      	b.n	800b06e <_raise_r+0x12>

0800b0ac <raise>:
 800b0ac:	4b02      	ldr	r3, [pc, #8]	; (800b0b8 <raise+0xc>)
 800b0ae:	4601      	mov	r1, r0
 800b0b0:	6818      	ldr	r0, [r3, #0]
 800b0b2:	f7ff bfd3 	b.w	800b05c <_raise_r>
 800b0b6:	bf00      	nop
 800b0b8:	2000000c 	.word	0x2000000c

0800b0bc <_kill_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d07      	ldr	r5, [pc, #28]	; (800b0dc <_kill_r+0x20>)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	602b      	str	r3, [r5, #0]
 800b0ca:	f7f7 f951 	bl	8002370 <_kill>
 800b0ce:	1c43      	adds	r3, r0, #1
 800b0d0:	d102      	bne.n	800b0d8 <_kill_r+0x1c>
 800b0d2:	682b      	ldr	r3, [r5, #0]
 800b0d4:	b103      	cbz	r3, 800b0d8 <_kill_r+0x1c>
 800b0d6:	6023      	str	r3, [r4, #0]
 800b0d8:	bd38      	pop	{r3, r4, r5, pc}
 800b0da:	bf00      	nop
 800b0dc:	20000520 	.word	0x20000520

0800b0e0 <_getpid_r>:
 800b0e0:	f7f7 b93e 	b.w	8002360 <_getpid>

0800b0e4 <__sread>:
 800b0e4:	b510      	push	{r4, lr}
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ec:	f000 f894 	bl	800b218 <_read_r>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	bfab      	itete	ge
 800b0f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b0f8:	181b      	addge	r3, r3, r0
 800b0fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0fe:	bfac      	ite	ge
 800b100:	6563      	strge	r3, [r4, #84]	; 0x54
 800b102:	81a3      	strhlt	r3, [r4, #12]
 800b104:	bd10      	pop	{r4, pc}

0800b106 <__swrite>:
 800b106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b10a:	461f      	mov	r7, r3
 800b10c:	898b      	ldrh	r3, [r1, #12]
 800b10e:	05db      	lsls	r3, r3, #23
 800b110:	4605      	mov	r5, r0
 800b112:	460c      	mov	r4, r1
 800b114:	4616      	mov	r6, r2
 800b116:	d505      	bpl.n	800b124 <__swrite+0x1e>
 800b118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b11c:	2302      	movs	r3, #2
 800b11e:	2200      	movs	r2, #0
 800b120:	f000 f868 	bl	800b1f4 <_lseek_r>
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b12a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b12e:	81a3      	strh	r3, [r4, #12]
 800b130:	4632      	mov	r2, r6
 800b132:	463b      	mov	r3, r7
 800b134:	4628      	mov	r0, r5
 800b136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b13a:	f000 b817 	b.w	800b16c <_write_r>

0800b13e <__sseek>:
 800b13e:	b510      	push	{r4, lr}
 800b140:	460c      	mov	r4, r1
 800b142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b146:	f000 f855 	bl	800b1f4 <_lseek_r>
 800b14a:	1c43      	adds	r3, r0, #1
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	bf15      	itete	ne
 800b150:	6560      	strne	r0, [r4, #84]	; 0x54
 800b152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b15a:	81a3      	strheq	r3, [r4, #12]
 800b15c:	bf18      	it	ne
 800b15e:	81a3      	strhne	r3, [r4, #12]
 800b160:	bd10      	pop	{r4, pc}

0800b162 <__sclose>:
 800b162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b166:	f000 b813 	b.w	800b190 <_close_r>
	...

0800b16c <_write_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4d07      	ldr	r5, [pc, #28]	; (800b18c <_write_r+0x20>)
 800b170:	4604      	mov	r4, r0
 800b172:	4608      	mov	r0, r1
 800b174:	4611      	mov	r1, r2
 800b176:	2200      	movs	r2, #0
 800b178:	602a      	str	r2, [r5, #0]
 800b17a:	461a      	mov	r2, r3
 800b17c:	f7f7 f92f 	bl	80023de <_write>
 800b180:	1c43      	adds	r3, r0, #1
 800b182:	d102      	bne.n	800b18a <_write_r+0x1e>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	b103      	cbz	r3, 800b18a <_write_r+0x1e>
 800b188:	6023      	str	r3, [r4, #0]
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
 800b18c:	20000520 	.word	0x20000520

0800b190 <_close_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4d06      	ldr	r5, [pc, #24]	; (800b1ac <_close_r+0x1c>)
 800b194:	2300      	movs	r3, #0
 800b196:	4604      	mov	r4, r0
 800b198:	4608      	mov	r0, r1
 800b19a:	602b      	str	r3, [r5, #0]
 800b19c:	f7f7 f93b 	bl	8002416 <_close>
 800b1a0:	1c43      	adds	r3, r0, #1
 800b1a2:	d102      	bne.n	800b1aa <_close_r+0x1a>
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	b103      	cbz	r3, 800b1aa <_close_r+0x1a>
 800b1a8:	6023      	str	r3, [r4, #0]
 800b1aa:	bd38      	pop	{r3, r4, r5, pc}
 800b1ac:	20000520 	.word	0x20000520

0800b1b0 <_fstat_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4d07      	ldr	r5, [pc, #28]	; (800b1d0 <_fstat_r+0x20>)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	602b      	str	r3, [r5, #0]
 800b1be:	f7f7 f936 	bl	800242e <_fstat>
 800b1c2:	1c43      	adds	r3, r0, #1
 800b1c4:	d102      	bne.n	800b1cc <_fstat_r+0x1c>
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	b103      	cbz	r3, 800b1cc <_fstat_r+0x1c>
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	bd38      	pop	{r3, r4, r5, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20000520 	.word	0x20000520

0800b1d4 <_isatty_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4d06      	ldr	r5, [pc, #24]	; (800b1f0 <_isatty_r+0x1c>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	602b      	str	r3, [r5, #0]
 800b1e0:	f7f7 f935 	bl	800244e <_isatty>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_isatty_r+0x1a>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_isatty_r+0x1a>
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	20000520 	.word	0x20000520

0800b1f4 <_lseek_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4d07      	ldr	r5, [pc, #28]	; (800b214 <_lseek_r+0x20>)
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	4608      	mov	r0, r1
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	2200      	movs	r2, #0
 800b200:	602a      	str	r2, [r5, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	f7f7 f92e 	bl	8002464 <_lseek>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_lseek_r+0x1e>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_lseek_r+0x1e>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	20000520 	.word	0x20000520

0800b218 <_read_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d07      	ldr	r5, [pc, #28]	; (800b238 <_read_r+0x20>)
 800b21c:	4604      	mov	r4, r0
 800b21e:	4608      	mov	r0, r1
 800b220:	4611      	mov	r1, r2
 800b222:	2200      	movs	r2, #0
 800b224:	602a      	str	r2, [r5, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	f7f7 f8bc 	bl	80023a4 <_read>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_read_r+0x1e>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b103      	cbz	r3, 800b236 <_read_r+0x1e>
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	20000520 	.word	0x20000520

0800b23c <_init>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	bf00      	nop
 800b240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b242:	bc08      	pop	{r3}
 800b244:	469e      	mov	lr, r3
 800b246:	4770      	bx	lr

0800b248 <_fini>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	bf00      	nop
 800b24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b24e:	bc08      	pop	{r3}
 800b250:	469e      	mov	lr, r3
 800b252:	4770      	bx	lr
